<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>redis持久化</title>
      <link href="/blog/2020/03/04/redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/blog/2020/03/04/redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>文章字数：541,阅读全文大约需要2分钟</p><blockquote><p>redis支持数据类型丰富的持久化操作，可以把数据保存在磁盘中，防止宕机之类的情况下数据丢失。</p></blockquote><h1 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h1><ol><li><p><code>RDB</code>:不定期使用异步方式保存二进制数据到磁盘，速度快、效率高、文件小。但是缓存一致性低。即如果半个小时备份一次，宕机到上一次备份直接的数据可能会丢失。保存文件过大还会导致<code>redis</code>反应变慢</p></li><li><p><code>aof</code>:保存的是每次操作的命令，可以选择每秒同步、每次修改同步、不同步。优点是缓存一致性好，缺点是文件大，<code>redis</code>再次启动速度慢。</p></li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>6379.conf</code>(监听的端口.conf)<br>搜索<code>save</code></p><p><strong>RDB</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1              #在900秒(15分钟)之后，如果至少有1个key发生变化，则dump内存快照。</span><br><span class="line">save 300 10            #在300秒(5分钟)之后，如果至少有10个key发生变化，则dump内存快照。</span><br><span class="line">save 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，则dump内存快照。</span><br></pre></td></tr></table></figure><p>快照在<code>dump.rdb</code>中</p><p><strong>AOF</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always     #每次有数据修改发生时都会写入AOF文件。</span><br><span class="line">appendfsync everysec  #每秒钟同步一次，该策略为AOF的缺省策略。</span><br><span class="line">appendfsync no          #从不同步。高效但是数据不会被持久化。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>All-elements-are-null</title>
      <link href="/blog/2020/03/04/All-elements-are-null/"/>
      <url>/blog/2020/03/04/All-elements-are-null/</url>
      
        <content type="html"><![CDATA[<p>文章字数：35,阅读全文大约需要1分钟</p><blockquote><p>ArrayList 提示 All elements are null ，size显示为1，但是内容为空。</p></blockquote><p>ArrayList允许添加空值<code>null</code>，所以显示<code>All elements are null</code>但是<code>size</code>显示还是1。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CAP原则</title>
      <link href="/blog/2020/03/04/CAP%E5%8E%9F%E5%88%99/"/>
      <url>/blog/2020/03/04/CAP%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：582,阅读全文大约需要2分钟</p><blockquote><p><code>CAP</code>原则是只一个分布式系统中，一致性<code>Consistency</code>、可用性<code>Availability</code>、分区容错性<code>Partition tolerance</code>，三个要素只能同时实现两点，不可能三者兼顾。</p></blockquote><h1 id="具体解释"><a href="#具体解释" class="headerlink" title="具体解释"></a>具体解释</h1><ol><li>一致性<code>c</code>: 在分布式系统中，所有的数据备份，在同一时刻是否相同的值。(节点一收到变更数据的请求之后马上通知其他节点，保证数据的统一。)</li><li>可用性<code>A</code>: 在集群中一部分节点故障后，集群整体是否还能相应客户端的读写请求。(只要有数据请求，就必须给回应。即使部分节点故障)</li><li>分区容错性<code>P</code>: 大多数分布式系统分布在多个子网中，每个子网就是一个区。区之间通信可能失败，应对这种情况的设计就是保证分区容错性。（<code>p</code>一般是无法避免的，所以剩下的<code>c</code>和<code>a</code>无法同时做到）</li></ol><h1 id="Consistency和Availability的矛盾"><a href="#Consistency和Availability的矛盾" class="headerlink" title="Consistency和Availability的矛盾"></a><code>Consistency</code>和<code>Availability</code>的矛盾</h1><p>因为通信失败的情况常有可能发生，所以分区容错性很重要。根据<code>CAP</code>原则，<code>Consistency</code>和<code>Availability</code>就只能选择其一了。<br>保证数据一致性则需要数据完全同步之后再开放读写，如果此时通信有问有，就无法保证可用性了，因为有部分节点必然被锁定。或者通信有问题，节点没有获取到最新的数据变更请求，从而达不到数据一致性。</p>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BeanUtils-copyProperties()复制Boolean类型失败</title>
      <link href="/blog/2020/03/04/BeanUtils-copyProperties()%E5%A4%8D%E5%88%B6Boolean%E7%B1%BB%E5%9E%8B%E5%A4%B1%E8%B4%A5/"/>
      <url>/blog/2020/03/04/BeanUtils-copyProperties()%E5%A4%8D%E5%88%B6Boolean%E7%B1%BB%E5%9E%8B%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：78,阅读全文大约需要1分钟</p><blockquote><p>使用copyProperties()复制时Boolean类型的一直无法复制，最后看到了一些信息</p></blockquote><ol><li>在网上找到分析源码513行只支持boolean<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (argCount &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                        if (name.startsWith(GET_PREFIX)) &#123;</span><br><span class="line">                            &#x2F;&#x2F; Simple getter</span><br><span class="line">                            pd &#x3D; new PropertyDescriptor(this.beanClass, name.substring(3), method, null);</span><br><span class="line">                        &#125; else if (resultType &#x3D;&#x3D; boolean.class &amp;&amp; name.startsWith(IS_PREFIX)) &#123;</span><br><span class="line">                            &#x2F;&#x2F; Boolean getter</span><br><span class="line">                            pd &#x3D; new PropertyDescriptor(this.beanClass, name.substring(2), method, null);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure>Boolea类型的getXxx()可以使用，如果方法是isXxx()就只有boolean可以<br>属性名不要用isXXX命名了</li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Content-Security-Policy</title>
      <link href="/blog/2020/03/04/Content-Security-Policy/"/>
      <url>/blog/2020/03/04/Content-Security-Policy/</url>
      
        <content type="html"><![CDATA[<p>文章字数：653,阅读全文大约需要2分钟</p><blockquote><p><code>HTTP</code>头中的<code>Content-Security-Policy</code>字段有若干指令，可以设置指定的策略允许的源</p></blockquote><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ol><li><code>default-src</code>: 可以为其它指令提供备选项</li><li><code>child-src</code>:元素加载的嵌套浏览上下文</li><li><code>connect-src</code>指令用于控制允许通过脚本接口加载的链接地址,影响下面的</li></ol><ul><li><code>&lt;a&gt;</code> <code>ping</code></li><li><code>Fetch</code></li><li><code>XMLHttpRequest</code></li><li><code>WebSocket</code></li><li><code>EventSource</code></li></ul><ol start="4"><li><code>font-src</code>字体的地址被阻止<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123; </span><br><span class="line">    font-family: &quot;MyFont&quot;; </span><br><span class="line">    src: url(&quot;https:&#x2F;&#x2F;not-example.com&#x2F;font&quot;); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><code>frame-src</code><br><code>&lt;frame&gt;</code>标签和<code>&lt;iframe&gt;</code>指定源的限制</li><li><code>img-src</code>HTTP 指令指定图像和图标的有效来源</li><li><code>manifest-src</code> <code>manifest</code>是一个资源允许的列表</li><li><code>media-src</code> <code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>元素的有效源</li><li><code>object-src</code></li><li><code>script-src</code> <code>&lt;script&gt;</code>标签</li><li><code>style-src</code> <code>&lt;style&gt;</code>标签</li><li><code>worker-src</code> <code>Worker</code> <code>SharedWorker</code> <code>ServiceWorker</code></li></ol><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>一个或者多个源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &lt;source&gt;;</span><br><span class="line">Content-Security-Policy: default-src &lt;source&gt; &lt;source&gt;;</span><br></pre></td></tr></table></figure><h1 id="源"><a href="#源" class="headerlink" title="源"></a>源</h1><p><code>&lt;source&gt;</code>可以是以下之一：</p><ol><li><p><code>&lt;host-source&gt;</code>域名或者<code>ip</code>地址表示的主机名，外加可选的<code>URL</code>协议名和端口号，允许在主机名和端口的位置使用通配符<code>*</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;*.example.com</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;scheme-source&gt;</code>可以直接指定源（二进制文件，数据等）不推荐使用<br>一下浏览器会特意排除<code>blob</code>与<code>filesystem</code>，可以在这里设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># data:sssssssss</span><br><span class="line">data:uris</span><br><span class="line">mediastream:uris</span><br><span class="line">blob:uris</span><br><span class="line">filesystem:uris</span><br></pre></td></tr></table></figure></li><li><p><code>&#39;self&#39;</code>指定与要保护的文件所在的源，包括相同的<code>URL scheme</code>与端口号。必须有单引号。即同源</p></li><li><p><code>&#39;unsafe-inline&#39;</code>允许使用内联资源，<code>script</code>标签，<code>javascript: URL</code>之类的</p></li><li><p><code>&#39;unsafe-eval&#39;</code>允许使用<code>eval()</code>以及相似的函数来创建代码</p></li><li><p><code>&#39;none&#39;</code>不允许任何内容</p></li><li><p><code>&#39;nonce-&lt;base64值&gt;&#39;</code>特定使用一次性加密内联的白名单，服务器必须在每一次传输政策时生成唯一的一次性值，否则有安全问题。</p></li><li><p><code>&lt;hash-source&gt;</code>使用<code>sha256</code>, <code>sha384</code>, <code>sha512</code>编码过得内联脚本或样式</p></li><li><p><code>strict-dynamic</code>指定对于含有标记脚本(通过附加一个随机数或散列)的信任，应该传播到由该脚本加载的所有脚本。与此同时，任何白名单以及源表达式例如 ‘self’  或者  ‘unsafe-inline’ 都会被忽略</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Error-creating-bean-with-name</title>
      <link href="/blog/2020/03/04/Error-creating-bean-with-name/"/>
      <url>/blog/2020/03/04/Error-creating-bean-with-name/</url>
      
        <content type="html"><![CDATA[<p>文章字数：149,阅读全文大约需要1分钟<br>今天遇到一个spring报错，<code>error creating bean</code>。查了报错的bean，没问题，而且报的也是其他同事写的，从主分支上拉下来的代码。<br>后来在报错的最后看到一句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.hibernate.MappingException: Repeated column in mapping for entity: WhiteListClass column: start_time (should be mapped with insert&#x3D;&quot;false&quot; update&#x3D;&quot;false&quot;)</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>由于jpa的列名不小心重复了，导致jpa初始化失败</li><li>导致spring初始化失败，所以报了一些莫名其妙的错误。</li></ol><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>这次只看最上面的一些报错，觉得莫名其妙，还以为是maven环境的问题。从新拉了代码，更新仓库。<br>下次要看全报错信息。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Drools简单使用</title>
      <link href="/blog/2020/03/04/Drools%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/03/04/Drools%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：226,阅读全文大约需要1分钟</p><blockquote><p>Drools是一款java规则引擎，其目的是为了将if..else这样的业务逻辑与业务代码分离。</p></blockquote><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.kie&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;kie-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;6.5.0.Final&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.drools&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;drools-compiler&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;6.5.0.Final&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>新建<code>/src/resources/META-INF/kmodule.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;kmodule xmlns&#x3D;&quot;http:&#x2F;&#x2F;jboss.org&#x2F;kie&#x2F;6.0.0&#x2F;kmodule&quot;&gt;</span><br><span class="line">   &lt;!-- name任意 packages为resources下drl所在的包 --&gt;</span><br><span class="line">    &lt;kbase name&#x3D;&quot;rules&quot; packages&#x3D;&quot;rules&quot;&gt;</span><br><span class="line">        &lt;!-- ksession名字任意 --&gt;</span><br><span class="line">        &lt;ksession name&#x3D;&quot;myAgeSession&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;kbase&gt;</span><br><span class="line">&lt;&#x2F;kmodule&gt;</span><br></pre></td></tr></table></figure><h1 id="drl文件"><a href="#drl文件" class="headerlink" title="drl文件"></a>drl文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;package rules &#x2F;&#x2F;包名，不必和物理路径一样</span><br><span class="line">import com.learndrools.learndrools.User &#x2F;&#x2F;导入Bean的完整路径，也可导入静态方法</span><br><span class="line">dialect &quot;mvel&quot;</span><br><span class="line">rule &quot;age&quot;      &#x2F;&#x2F;唯一规则名，可多次执行</span><br><span class="line">    &#x2F;&#x2F;salience 1  &#x2F;&#x2F;优先级越大越高,如果不设置随机顺序</span><br><span class="line">    &#x2F;&#x2F;no-loop true &#x2F;&#x2F;规则是否只执行一次，默认false,多次执行</span><br><span class="line">    &#x2F;&#x2F;lock-on-active true &#x2F;&#x2F;避免因某些Fact对象被修改而使已经执行过的规则再次被激活执行。</span><br><span class="line">    when</span><br><span class="line">        $user: User(age&lt;15 || age&gt;60) &#x2F;&#x2F; 声明变量：Bean(规则)，变量通常$开头</span><br><span class="line">    then</span><br><span class="line">        System.out.println($user.getName()+&quot;年龄不符合&quot;);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learndrools.learndrools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieServices;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieContainer;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LearndroolsApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> KieContainer container = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> KieSession statefulKieSession = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">        container = kieServices.getKieClasspathContainer();</span><br><span class="line">        statefulKieSession = container.newKieSession(<span class="string">"myAgeSession"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"zhang san"</span>,<span class="number">90</span>);</span><br><span class="line">        statefulKieSession.insert(user);</span><br><span class="line">        statefulKieSession.fireAllRules();</span><br><span class="line">        statefulKieSession.dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 引擎 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Intellij-IDEA运行报Command-line-is-too-long</title>
      <link href="/blog/2020/03/04/Intellij-IDEA%E8%BF%90%E8%A1%8C%E6%8A%A5Command-line-is-too-long/"/>
      <url>/blog/2020/03/04/Intellij-IDEA%E8%BF%90%E8%A1%8C%E6%8A%A5Command-line-is-too-long/</url>
      
        <content type="html"><![CDATA[<p>文章字数：23,阅读全文大约需要1分钟</p><blockquote><p>Error running ‘ServiceStarter’: Command line is too long. Shorten command line for ServiceStarter or also for Application default configuration.</p></blockquote><p>命令太长</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p><code>.idea\workspace.xml</code>，找到标签 <code>&lt;component name=&quot;PropertiesComponent&quot;&gt;</code>， 在标签里加一行<code>&lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Http请求头安全策略概述</title>
      <link href="/blog/2020/03/04/Http%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E6%A6%82%E8%BF%B0/"/>
      <url>/blog/2020/03/04/Http%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：709,阅读全文大约需要2分钟</p><blockquote><p><code>Http</code>请求头中有一些可以控制安全策略的部分，通过设置这些头可以提高网站安全系数</p></blockquote><h1 id="X-Frame-Options-Frame-Options"><a href="#X-Frame-Options-Frame-Options" class="headerlink" title="X-Frame-Options/Frame-Options"></a>X-Frame-Options/Frame-Options</h1><p>如果网站可以嵌入到<code>IFRAME</code>元素中，则攻击者可以建一个假网页，在假网页中嵌套真实的网站。即使有跨站点请求伪造保护，这种攻击也是可能的，并且被称为<code>clickjacking</code><br>创建<code>X-Frame-Options</code>标题可以允许网站所有者决定哪些网站允许构建（嵌套）。<br>通常设置成</p><ol><li><code>SAMEORIGIN</code>: 允许同源策略的资源嵌套</li><li><code>DENY</code>: 拒绝任何资源嵌套</li></ol><blockquote><p><code>X-Frame-Options</code> 标题已被弃用，将由内容安全策略中的Frame-Options指令替换，该指令仍处于活动开发阶段。但是，“X-Frame-Options”标题目前具有更广泛的支持，因此仍应实施安全措施。</p></blockquote><h1 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content-Security-Policy"></a>Content-Security-Policy</h1><p>内容安全策略（CSP）旨在<code>web</code>程序通知浏览器有关应用程序预期行为（内容源、脚本源、插件类型、和其它远程资源），即设置引入的图像、脚本等资源的限制。可以防止跨站脚本攻击等。</p><p>例：CSP指定您的网站希望从任何URI加载图像，从受信任的媒体提供商（包括内容分发网络）列表中插入插件内容，以及仅从您控制的服务器加载脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy：default-src&#39;self&#39;; img-src *; object-src media1.example.com media2.example.com * .cdn.example.com; script-src trustedscripts.example.com</span><br></pre></td></tr></table></figure><ul><li><code>none</code>不匹配任何东西</li><li><code>self</code>匹配当前域，单不包括子域。例如<code>xxx.com</code>可以，<code>www.xxx.com</code>不行</li><li><code>unsafe-inline</code>允许内嵌脚本样式</li><li><code>unsafe-eval</code>允许通过字符串动态创建脚本，如<code>eval</code>，<code>setTimeout</code>等</li></ul><h1 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h1><p>如果服务器响应头<code>X-Content-Type-Options: nosniff</code>则<code>script</code>和<code>styleSheet</code>元素会拒绝错误的<code>MIME</code>类型的响应，防止<code>MIME</code>类型的混淆的工具。<br>如果设置了<code>X-Content-Type-Options: nosniff</code>参数，<code>script</code>和<code>styleSheet</code>标签就会过滤非指定的文件类型。正确的<code>MIME</code>应该是<code>text/javascript</code>这样的。</p><h1 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h1><p><code>xss</code>自动过滤的配置，浏览器可以帮助防止跨站点脚本攻击（IE, Chrome, Safari支持）<br>推荐设置(开启xss防护，并且阻止而不是过滤用户注入的脚本)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-XSS-Protection：1; mode &#x3D; block。</span><br></pre></td></tr></table></figure><p>其它参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 – 关闭对浏览器的xss防护 </span><br><span class="line">1 – 开启xss防护 </span><br><span class="line">1; mode&#x3D;block – 开启xss防护并通知浏览器阻止而不是过滤用户注入的脚本。 </span><br><span class="line">1; report&#x3D;http:&#x2F;&#x2F;site.com&#x2F;report – 这个只有chrome和webkit内核的浏览器支持，这种模式告诉浏览器当发现疑似xss攻击的时候就将这部分数据post到指定地址。</span><br></pre></td></tr></table></figure><p><code>X-XSS-Protection</code>标题已被弃用，被内容安全策略的<code>Reflected-XSS</code>指令取代，但是该指令仍处于活动开发阶段。<code>X-XSS-Protection</code>有更广泛的支持</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>LazyInitializationException</title>
      <link href="/blog/2020/03/04/LazyInitializationException/"/>
      <url>/blog/2020/03/04/LazyInitializationException/</url>
      
        <content type="html"><![CDATA[<p>文章字数：569,阅读全文大约需要2分钟</p><blockquote><p>记一次查找问题的过程</p></blockquote><ol><li><p>做一个用<code>jpa</code>从数据库中查找数据，修改再保存到数据库的简单功能。</p></li><li><p>查找出来后使用<code>BeanUtil</code>将修改的信息放入<code>jpa</code>的对象中，结果报了错误<br><code>Could not copy property &#39;id&#39; from source to target</code></p></li><li><p>查看<code>BeanUtil</code>的源代码</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (readMethod != <span class="keyword">null</span> &amp;&amp; ClassUtils.isAssignable(writeMethod.getParameterTypes()[<span class="number">0</span>], readMethod.getReturnType())) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) &#123;</span><br><span class="line">                                readMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            Object value = readMethod.invoke(source);</span><br><span class="line">                            <span class="keyword">if</span> (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) &#123;</span><br><span class="line">                                writeMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            writeMethod.invoke(target, value);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable var15) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">"Could not copy property '"</span> + targetPd.getName() + <span class="string">"' from source to target"</span>, var15);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>发现在反射调用失败后统一返回这个异常，于是打断点。果然是反射报的异常。</p><ol start="4"><li><p>检查属性是否一一对应，是否有公共的<code>get</code>和<code>set</code>，是否有基础类型（有的话传入空会空指针）</p></li><li><p>都没发现有问题，于是手动赋值又运行了一遍。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.setId(b.getId());</span><br></pre></td></tr></table></figure><ol start="6"><li><p>期初只是为了测试一下方法是否被私有化，属性名是否一致。结果抛出异常<code>LazyInitializationException</code></p></li><li><p>这才是导致反射出错的原因，异常信息的意思大致是<code>session</code>被关闭。在<code>stackoverflow</code>上找到解决方法:方法上加上<code>@Transactional</code>。</p></li><li><p>最后成功解决问题，回想了一下。当元素或者元素的lazy属性为true时执行<code>find()</code>得到的只是一个代理对象，只有执行<code>getId()</code>时才会从数据库中取。然后取的时候事务已经关闭了。（可能是因为find操作是在Stream流中进行的，流关闭事务也关闭了）加上<code>@Transactional</code>注解可以使代码块事务统一。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ModelAndView返回404</title>
      <link href="/blog/2020/03/04/ModelAndView%E8%BF%94%E5%9B%9E404/"/>
      <url>/blog/2020/03/04/ModelAndView%E8%BF%94%E5%9B%9E404/</url>
      
        <content type="html"><![CDATA[<p>文章字数：157,阅读全文大约需要1分钟</p><blockquote><p>今天新建了一个项目，测试demo的时候发现返回界面的Controller报404</p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>打断点，发现进入了Controller。并且没有抛出异常，说明基本流程是对的。</li><li>ModelAndView有数据，但是返回后404.可能是没找到视图</li><li>查看配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.freemarker.suffix&#x3D;.xx</span><br><span class="line">spring.freemarker.template-loader-path&#x3D;classpath:&#x2F;static</span><br></pre></td></tr></table></figure>查看文件名后缀是否是设置的.xx(modelAndView中不要加后缀)<br>查看路径是否是设置的根目录下的（static/xxx）</li></ol><blockquote><p>我的问题是没有static路径，创建static目录，把文件放进去。问题解决</p></blockquote><h1 id="其它可能"><a href="#其它可能" class="headerlink" title="其它可能"></a>其它可能</h1><ol><li>@RestController或者@RequestMapping使用错误</li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>No-executable-code-found-at-line-208</title>
      <link href="/blog/2020/03/04/No-executable-code-found-at-line-208/"/>
      <url>/blog/2020/03/04/No-executable-code-found-at-line-208/</url>
      
        <content type="html"><![CDATA[<p>文章字数：78,阅读全文大约需要1分钟</p><blockquote><p>idea打断点出现x,并且提示错误。</p></blockquote><p>没有可执行的代码，原因可能是没有编译成功，代码不可到达，等。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我用的是idea,一般修改完control+f9直接热加载。可能部分代码没有加载成功，重启软件就正常了。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Reactor模式</title>
      <link href="/blog/2020/03/04/Reactor%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2020/03/04/Reactor%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：541,阅读全文大约需要2分钟</p><blockquote><p><code>Reactor pattern</code>(反应器模式)是一种处理并发服务器请求，将请求提交给一个或者多个服务器处理程序的事件设计模式。机制是客户端使用一个线程监听连接请求，监听到后提交给另一个专门负责定时批量处理请求的非阻塞线程。node.js,netty等均使用这种设计模式实现</p></blockquote><h1 id="传统方法-thread-based-architecture基于线程"><a href="#传统方法-thread-based-architecture基于线程" class="headerlink" title="传统方法(thread-based architecture基于线程)"></a>传统方法(thread-based architecture基于线程)</h1><p>传统的应对服务器并发请求的方法是</p><ol><li>死循环监听服务器请求</li><li>接收到请求开启一个线程处理此请求</li></ol><p>这样带来了几个后果</p><ol><li>产生大量线程，线程间切换需要消耗资源。</li><li>大量线程占用内存空间</li><li>处理请求的线程大部分时间用于等待输入</li></ol><h1 id="event-driven-architecture（事件驱动）方法"><a href="#event-driven-architecture（事件驱动）方法" class="headerlink" title="event-driven architecture（事件驱动）方法"></a>event-driven architecture（事件驱动）方法</h1><p>Reactor设计模式就是事件驱动方法的实现之一。监听请求并转发给对应的事件处理器来执行。<br><strong>组成角色</strong></p><ol><li><code>handle</code>（句柄/文件描述符）<br>事件的发源地，如socket、磁盘文件。<br>handle可能会发生的事件有:connection、ready for read、ready for write等。</li><li><code>Synchronous Event Demultiplexer</code>（同步事件分离器）<br>阻塞等待Handles中的事件发生。</li><li><code>Event Handler</code>(事件处理器的接口)</li><li><code>Concrete Event Handler</code>（事件处理器实现）<br>事件处理器可能有多种，所以声明接口，使用接口调用。不同类型事件处理器具体实现不同。</li></ol><h1 id="和观察者模式对比"><a href="#和观察者模式对比" class="headerlink" title="和观察者模式对比"></a>和观察者模式对比</h1><ol><li><p>都是主体发生变化时通知依附的客体。</p></li><li><p>观察者模式是与单个事件源有关（发布），反应器模式与多个事件源关联。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NoClassDefFoundError</title>
      <link href="/blog/2020/03/04/NoClassDefFoundError/"/>
      <url>/blog/2020/03/04/NoClassDefFoundError/</url>
      
        <content type="html"><![CDATA[<p>文章字数：149,阅读全文大约需要1分钟</p><blockquote><p>这是java在运行的时候发现类未找到报出的错误，即编译成功，运行失败。</p></blockquote><h1 id="区别于编译失败"><a href="#区别于编译失败" class="headerlink" title="区别于编译失败"></a>区别于编译失败</h1><ol><li><code>ClassNotFoundException</code>编译时类未找到</li><li><code>NoClassDefFoundError</code>运行时类未找到</li></ol><h1 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h1><ol><li><code>classpath</code>环境或者其中的类不可用</li><li>类依赖的原生方法调用失败</li><li>maven依赖传递失败<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 子模块依赖父模块的引用传递，但是却使用了&lt;optional&gt;true&lt;optional&#x2F;&gt;阻断了依赖</span><br><span class="line">父模块引入依赖，子模块仅声明一下，使用依赖传递使用父类引入的依赖。</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SQLServerException</title>
      <link href="/blog/2020/03/04/SQLServerException/"/>
      <url>/blog/2020/03/04/SQLServerException/</url>
      
        <content type="html"><![CDATA[<p>文章字数：32,阅读全文大约需要1分钟</p><blockquote><p>SQLServerException:列名‘true’无效</p></blockquote><p><code>mysql</code>里支持<code>true</code>，在<code>sql server</code>里只有0,1所以语句不兼容。只有改字段类型了。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate</title>
      <link href="/blog/2020/03/04/RedisTemplate/"/>
      <url>/blog/2020/03/04/RedisTemplate/</url>
      
        <content type="html"><![CDATA[<p>文章字数：290,阅读全文大约需要1分钟</p><blockquote><p>org.springframework.data.redis.core.RedisTemplate</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.5.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database&#x3D;0  </span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host&#x3D;127.0.0.1</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port&#x3D;6379  </span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password&#x3D;</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active&#x3D;8  </span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait&#x3D;-1  </span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle&#x3D;8  </span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle&#x3D;0  </span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout&#x3D;0</span><br></pre></td></tr></table></figure><h1 id="注入Bean"><a href="#注入Bean" class="headerlink" title="注入Bean"></a>注入Bean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(RedisOperations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  @<span class="title">EnableConfigurationProperties</span>(<span class="title">RedisProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">              RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">          RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">          <span class="comment">//使用fastjson序列化</span></span><br><span class="line">          FastJsonRedisSerializer fastJsonRedisSerializer = <span class="keyword">new</span> FastJsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">          <span class="comment">// value值的序列化采用fastJsonRedisSerializer</span></span><br><span class="line">          template.setValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">          template.setHashValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">          <span class="comment">// key的序列化采用StringRedisSerializer</span></span><br><span class="line">          template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">          template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">          template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">          <span class="keyword">return</span> template;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span>(StringRedisTemplate<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">      <span class="title">public</span> <span class="title">StringRedisTemplate</span> <span class="title">stringRedisTemplate</span>(</span></span><br><span class="line"><span class="class">              <span class="title">RedisConnectionFactory</span> <span class="title">redisConnectionFactory</span>) </span>&#123;</span><br><span class="line">          StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">          template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">          <span class="keyword">return</span> template;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class RedisService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 默认过期时长，单位：秒</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static final long DEFAULT_EXPIRE &#x3D; 60 * 60 * 24;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 不设置过期时长</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static final long NOT_EXPIRE &#x3D; -1;</span><br><span class="line"></span><br><span class="line">    public boolean existsKey(String key) &#123;</span><br><span class="line">        return redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 重名名key，如果newKey已经存在，则newKey的原值被覆盖</span><br><span class="line">     *</span><br><span class="line">     * @param oldKey</span><br><span class="line">     * @param newKey</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void renameKey(String oldKey, String newKey) &#123;</span><br><span class="line">        redisTemplate.rename(oldKey, newKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * newKey不存在时才重命名</span><br><span class="line">     *</span><br><span class="line">     * @param oldKey</span><br><span class="line">     * @param newKey</span><br><span class="line">     * @return 修改成功返回true</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean renameKeyNotExist(String oldKey, String newKey) &#123;</span><br><span class="line">        return redisTemplate.renameIfAbsent(oldKey, newKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除key</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void deleteKey(String key) &#123;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除多个key</span><br><span class="line">     *</span><br><span class="line">     * @param keys</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void deleteKey(String... keys) &#123;</span><br><span class="line">        Set&lt;String&gt; kSet &#x3D; Stream.of(keys).map(k -&gt; k).collect(Collectors.toSet());</span><br><span class="line">        redisTemplate.delete(kSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除Key的集合</span><br><span class="line">     *</span><br><span class="line">     * @param keys</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void deleteKey(Collection&lt;String&gt; keys) &#123;</span><br><span class="line">        Set&lt;String&gt; kSet &#x3D; keys.stream().map(k -&gt; k).collect(Collectors.toSet());</span><br><span class="line">        redisTemplate.delete(kSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置key的生命周期</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param time</span><br><span class="line">     * @param timeUnit</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void expireKey(String key, long time, TimeUnit timeUnit) &#123;</span><br><span class="line">        redisTemplate.expire(key, time, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 指定key在指定的日期过期</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param date</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void expireKeyAt(String key, Date date) &#123;</span><br><span class="line">        redisTemplate.expireAt(key, date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 查询key的生命周期</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param timeUnit</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public long getKeyExpire(String key, TimeUnit timeUnit) &#123;</span><br><span class="line">        return redisTemplate.getExpire(key, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将key设置为永久有效</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void persistKey(String key) &#123;</span><br><span class="line">        redisTemplate.persist(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Mail</title>
      <link href="/blog/2020/03/04/SpringBoot%E6%95%B4%E5%90%88Mail/"/>
      <url>/blog/2020/03/04/SpringBoot%E6%95%B4%E5%90%88Mail/</url>
      
        <content type="html"><![CDATA[<p>文章字数：294,阅读全文大约需要1分钟</p><blockquote><p>Spring中默认有starter实现类Mail</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># JavaMailSender 邮件发送的配置</span><br><span class="line">spring.mail.host&#x3D;smtp.qq.com</span><br><span class="line">spring.mail.username&#x3D;用户qq邮箱</span><br><span class="line">#QQ邮箱的授权码</span><br><span class="line">spring.mail.password&#x3D;密码</span><br><span class="line">spring.mail.properties.mail.smtp.auth&#x3D;true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable&#x3D;true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required&#x3D;true</span><br><span class="line">spring.mail.default-encoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure><h1 id="简单邮件"><a href="#简单邮件" class="headerlink" title="简单邮件"></a>简单邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        SimpleMaileMessage simpleMailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        simpleMailMessage .setFrom(<span class="string">"sendFrom@qq.com"</span>);</span><br><span class="line">        simpleMailMessage .setTo(<span class="string">"sendTo@qq.com"</span>);</span><br><span class="line">        simpleMailMessage.setSubject(<span class="string">"主题"</span>);</span><br><span class="line">        simpleMailMessage.setText(<span class="string">"内容"</span>);</span><br><span class="line">        javaMailSender.send(simpleMailMessage);<span class="comment">//发送</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        logger.error(<span class="string">"发送失败"</span>,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义发件人名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String nick = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                nick = javax.mail.internet.MimeUtility.encodeText(<span class="string">"张三"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置发件人</span></span><br><span class="line">            mimeMsg.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"sendFrom@qq.com"</span>, nick));</span><br></pre></td></tr></table></figure><h1 id="html格式邮件"><a href="#html格式邮件" class="headerlink" title="html格式邮件"></a>html格式邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHTMLMail</span><span class="params">(MailBean mailBean)</span> </span>&#123;</span><br><span class="line">        MimeMessage mimeMailMessage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mimeMailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMailMessage, <span class="keyword">true</span>);</span><br><span class="line">            mimeMessageHelper.setFrom(MAIL_SENDER);</span><br><span class="line">            mimeMessageHelper.setTo(mailBean.getRecipient());</span><br><span class="line">            mimeMessageHelper.setSubject(mailBean.getSubject());</span><br><span class="line">            mimeMessageHelper.setText(<span class="string">"&lt;h1&gt;hello&lt;/h1&gt;"</span>, <span class="keyword">true</span>);</span><br><span class="line">            javaMailSender.send(mimeMailMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"邮件发送失败"</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="带附件格式的邮件"><a href="#带附件格式的邮件" class="headerlink" title="带附件格式的邮件"></a>带附件格式的邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentMail</span><span class="params">(MailBean mailBean)</span> </span>&#123;</span><br><span class="line">       MimeMessage mimeMailMessage = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           mimeMailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">           MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMailMessage, <span class="keyword">true</span>);</span><br><span class="line">           mimeMessageHelper.setFrom(MAIL_SENDER);</span><br><span class="line">           mimeMessageHelper.setTo(mailBean.getRecipient());</span><br><span class="line">           mimeMessageHelper.setSubject(mailBean.getSubject());</span><br><span class="line">           mimeMessageHelper.setText(mailBean.getContent());</span><br><span class="line">           <span class="comment">//文件路径  spring的FileSystemResource,使用绝对路径访问文件资源</span></span><br><span class="line">           FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">"src/main/resources/static/image/mail.png"</span>));</span><br><span class="line">           mimeMessageHelper.addAttachment(<span class="string">"mail.png"</span>, file);</span><br><span class="line"></span><br><span class="line">           javaMailSender.send(mimeMailMessage);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"邮件发送失败"</span>, e.getMessage());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="发送带静态资源的邮件"><a href="#发送带静态资源的邮件" class="headerlink" title="发送带静态资源的邮件"></a>发送带静态资源的邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInlineMail</span><span class="params">(MailBean mailBean)</span> </span>&#123;</span><br><span class="line">    MimeMessage mimeMailMessage = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mimeMailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMailMessage, <span class="keyword">true</span>);</span><br><span class="line">        mimeMessageHelper.setFrom(MAIL_SENDER);</span><br><span class="line">        mimeMessageHelper.setTo(mailBean.getRecipient());</span><br><span class="line">        mimeMessageHelper.setSubject(mailBean.getSubject());</span><br><span class="line">        mimeMessageHelper.setText(<span class="string">"&lt;html&gt;&lt;body&gt;带静态资源的邮件内容，这个一张IDEA配置的照片:&lt;img src='cid:picture' /&gt;&lt;/body&gt;&lt;/html&gt;"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line">        FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">"src/main/resources/static/image/mail.png"</span>));</span><br><span class="line">        mimeMessageHelper.addInline(<span class="string">"picture"</span>, file);</span><br><span class="line"></span><br><span class="line">        javaMailSender.send(mimeMailMessage);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"邮件发送失败"</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基于Freemarker的模板邮件"><a href="#基于Freemarker的模板邮件" class="headerlink" title="基于Freemarker的模板邮件"></a>基于Freemarker的模板邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTemplateMail</span><span class="params">(MailBean mailBean)</span> </span>&#123;</span><br><span class="line">        MimeMessage mimeMailMessage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mimeMailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMailMessage, <span class="keyword">true</span>);</span><br><span class="line">            mimeMessageHelper.setFrom(MAIL_SENDER);</span><br><span class="line">            mimeMessageHelper.setTo(mailBean.getRecipient());</span><br><span class="line">            mimeMessageHelper.setSubject(mailBean.getSubject());</span><br><span class="line"></span><br><span class="line">            Map&lt;String, Object&gt; model = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            model.put(<span class="string">"content"</span>, mailBean.getContent());</span><br><span class="line">            model.put(<span class="string">"title"</span>, <span class="string">"标题Mail中使用了FreeMarker"</span>);</span><br><span class="line">            Template template = configuration.getTemplate(<span class="string">"mail.ftl"</span>);</span><br><span class="line">            String text = FreeMarkerTemplateUtils.processTemplateIntoString(template, model);</span><br><span class="line">            mimeMessageHelper.setText(text, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            javaMailSender.send(mimeMailMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"邮件发送失败"</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="动态添加邮箱配置信息"><a href="#动态添加邮箱配置信息" class="headerlink" title="动态添加邮箱配置信息"></a>动态添加邮箱配置信息</h1><p>和之前使用接口<code>javaMailSender</code>不同，这次使用的是接口的实现类。<br>使用<code>JavaMailSenderImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">JavaMailSenderImpl mailSender = <span class="keyword">new</span> JavaMailSenderImpl();<span class="comment">//直接生产一个实例</span></span><br><span class="line">String users[] = &#123;<span class="string">"xxxxx@qq.com"</span>,<span class="string">"xxxxx@126.com"</span>&#125;;</span><br><span class="line">mailSender.setHost(<span class="string">"smtp.126.com"</span>);<span class="comment">//动态添加配置</span></span><br><span class="line">mailSender.setPassword(<span class="string">"xxxxx"</span>);</span><br><span class="line">mailSender.setPort(<span class="number">25</span>);</span><br><span class="line">mailSender.setProtocol(<span class="string">"smtp"</span>);</span><br><span class="line">mailSender.setUsername(<span class="string">"xxxxx"</span>);</span><br><span class="line">SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">message.setFrom(<span class="string">"xxxxxxx"</span>);</span><br><span class="line">message.setTo(users); <span class="comment">// 使用数组的形式还可以群发</span></span><br><span class="line">message.setSubject(<span class="string">"羽毛球比赛"</span>);</span><br><span class="line">message.setText(<span class="string">"报名参加羽毛球赛"</span>);</span><br><span class="line">mailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Swagger2</title>
      <link href="/blog/2020/03/04/SpringBoot%E6%95%B4%E5%90%88Swagger2/"/>
      <url>/blog/2020/03/04/SpringBoot%E6%95%B4%E5%90%88Swagger2/</url>
      
        <content type="html"><![CDATA[<p>文章字数：332,阅读全文大约需要1分钟</p><blockquote><p>swagger2是一款帮助我们生成restful接口细节记录信息的工具。</p></blockquote><h1 id="引入Swagger2"><a href="#引入Swagger2" class="headerlink" title="引入Swagger2"></a>引入Swagger2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h1><p><code>Application.java</code>的同级创建<code>Swagger2.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//标注为配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2 <span class="comment">//启动Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.didispace.web"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"标题"</span>)</span><br><span class="line">                .description(<span class="string">"介绍"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"url"</span>)</span><br><span class="line">                .contact(<span class="string">"name"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="丰富文档内容"><a href="#丰富文档内容" class="headerlink" title="丰富文档内容"></a>丰富文档内容</h1><ul><li><code>@ApiOperation</code>给api增加说明</li><li><code>@ApiImplicitParams</code>包裹多个参数注解信息</li><li><code>@ApiImplicitParam</code>参数注解信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动springBoot，访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a>就能看到详细信息。</p><h1 id="调试API"><a href="#调试API" class="headerlink" title="调试API"></a>调试API</h1><p>进入Swagger2的web界面，点击进入api,里面有调试api的按钮，并且黄色区域有参数的模板。</p><h1 id="生产环境禁用"><a href="#生产环境禁用" class="headerlink" title="生产环境禁用"></a>生产环境禁用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swagger2:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot文件上传</title>
      <link href="/blog/2020/03/04/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/blog/2020/03/04/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：35,阅读全文大约需要1分钟</p><h1 id="简便方法"><a href="#简便方法" class="headerlink" title="简便方法"></a>简便方法</h1><ol><li>使用<code>file.transferTo(&quot;地址/文件名&quot;)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">file.transferTo(<span class="keyword">new</span> File(<span class="string">"/file/upload/"</span> + file.getName()));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>IOUTils<br><code>import org.apache.commons.io.IOUtils;</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line">    file file1 = <span class="keyword">new</span> File(<span class="string">"c:\\xxx\\aaa"</span>,<span class="string">"a.txt"</span>);</span><br><span class="line">    <span class="comment">//原始文件输入流</span></span><br><span class="line">    InputStream inputStream = file.getInputStream();</span><br><span class="line">    <span class="comment">//新文件输出流</span></span><br><span class="line">    FileOutputStream fosm = <span class="keyword">new</span> FileOutputStream (file1);</span><br><span class="line">IOUtils.copy(inputStream,fosm );</span><br><span class="line">inputStream.close();</span><br><span class="line">fosm .close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>StackOverflowError与OutOfMemoryError区别</title>
      <link href="/blog/2020/03/04/StackOverflowError%E4%B8%8EOutOfMemoryError%E5%8C%BA%E5%88%AB/"/>
      <url>/blog/2020/03/04/StackOverflowError%E4%B8%8EOutOfMemoryError%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：310,阅读全文大约需要1分钟</p><h1 id="一、StackOverflowError"><a href="#一、StackOverflowError" class="headerlink" title="一、StackOverflowError"></a>一、StackOverflowError</h1><p>分析： 栈空间溢出，栈空间是线程私有的，一般用于保存方法体。所以可能是方法体太大或者太多了？</p><p>查看源码注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown when a stack overflow occurs because an application</span></span><br><span class="line"><span class="comment"> * recurses too deeply.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackOverflowError</span> <span class="keyword">extends</span> <span class="title">VirtualMachineError</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>大致意思是：抛出这个异常是因为方法递归太深。也就是每次递归调用新方法都会将上一个方法的运行信息压入栈，当递归太深，导致数据过多，栈空间不足是就会抛出这个错误。</p><h1 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a>OutOfMemoryError</h1><p>分析： 内存不足，jvm中方法保存在堆里。应该是内存不够分配新的对象导致的</p><p>源码注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown when the Java Virtual Machine cannot allocate an object</span></span><br><span class="line"><span class="comment"> * because it is out of memory, and no more memory could be made</span></span><br><span class="line"><span class="comment"> * available by the garbage collector.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> OutOfMemoryError&#125; objects may be constructed by the virtual</span></span><br><span class="line"><span class="comment"> * machine as if &#123;<span class="doctag">@linkplain</span> Throwable#Throwable(String, Throwable,</span></span><br><span class="line"><span class="comment"> * boolean, boolean) suppression were disabled and/or the stack trace was not</span></span><br><span class="line"><span class="comment"> * writable&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutOfMemoryError</span> <span class="keyword">extends</span> <span class="title">VirtualMachineError</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>当内存不过创建新对象，gc也不能回收足够的空间时抛出。也就是创建太多的对象实例，或者集合一直扩容此类情况导致的。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>StringUtils工具</title>
      <link href="/blog/2020/03/04/StringUtils%E5%B7%A5%E5%85%B7/"/>
      <url>/blog/2020/03/04/StringUtils%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1288,阅读全文大约需要5分钟</p><blockquote><p>StringUtils是一款字符串处理工具，这里列举了一下常用功能</p></blockquote><ol><li>isEmpty(String str) 是否为空，空格字符为false</li><li>isNotEmpty(String str) 是否为非空，空格字符为true</li><li>isBlank(String str) 是否为空，空格字符为true</li><li>isNotBlank(String str) 是否为非空，空格字符为false</li><li>trim(String str)去除字符串两端的控制符，空字符串、null 返回 null</li><li>trimToEmpty(String str) 去除字符串两端的控制符，空字符串、null 返回””</li><li>stripToNull(String str) 去除字符串两端的空白符，空字符串、null 返回null</li><li>stripToEmpty(String str) 去除字符串两端的空白符，空字符串、null 返回””</li><li>strip(String str, String stripChars) 去掉str两端的在stripChars中的字符</li><li>StringUtils.strip(“000000134_76539000”,”0”)=”134_76539”</li><li>stripStart (String str,String stripChars) 去除str 前端在stripChars中的字符</li><li>stripEnd (String str,String stripChars) 去除str 后端在stripChars中的字符</li><li>equals(String str1,String str2) 比较两个字符串是否相等，如果两个均为空则认为相等</li><li>indexOf(String str,char searchChar) 返回searchChar 在字符串中第一次出现的位置，如果没找到则返回 -1，如果str 为null 或者 “”,也返回-1</li><li>indexOf(String str,char searchChar,int startPos) 返回字符searchChar从startPos开始在字符串str中第一次出现的位置。</li><li>contains(String str,char searchChar) str中是否包含字符searchChar，str为null 或者 searchChar为null,返回false 。</li><li>StringUtils.contains(“”, “”)  = true </li><li>StringUtils.contains(“dfg”, “”)  = true</li><li>containsIgnoreCase(String str,String searchStr) str中是否包含字符searchChar，不区分大小写<ol><li>int indexOfAny(String str, char[] searchChars) 找出字符数组searchChars中的字符第一次出现在字符串str中的位置。 如果字符数组中的字符都不在字符串中，则返回-1 ，如果字符串为null或””，则返回-1 </li></ol></li><li>subString(String str,int start) 从start 开始，包含start 那个字符，得到字符串str 的子串，如果start为负数，则从后面开始数起。如果str 为null 或者 “” 则返回其本身</li><li>subStringBefore(String str,String separator) 得到字符串separator第一次出现前的子串。不包含那个字符，如果str 为null 或者 “” 则返回其本身。</li><li>subStringAfter(String str,String separator) 得到字符串separator第一次出现后的子串，不包含那个字符，如果 str 为null，或者””,则返回其本身</li><li>subString(String str,int start,int end) 同上<br>left(String str,int len) 得到字符串str从左边数len长度的子串，如果str 为null 或者 “”,则返回其本身，如果len小于0，则返回””</li><li>right(String str,int len)得到字符串str从右边数len长度的子串</li><li>mid(String str,int pos,int len) 得到字符串str从pos开始len长度的子串，pos小于0，则设为0。</li><li>split(String str) 把字符串拆分成一个字符串数组，用空白符 作为分隔符，字符串为null 返回null，字符串为””,返回空数组{}</li><li>split(String str,char c) 按照 char c 拆分字符串</li><li>join(Object[] arrey)把数组中的元素连接成一个字符串返回</li><li>join(Object[] arrey,char c) 把数组中的元素拼接成一个字符串返回，把分隔符 c 也带上</li><li>deleteWhitespace(String str) 删除字符串中的所有空白符，包括转义字符</li><li>removeStart(String str,String remove) 如果字符串str是以remove开始，则去掉这个开始，然后返回，否则返回原来的串</li><li>removeEnd(String str,String remove) 如果字符串str是以字符串remove结尾，则去掉这个结尾，然后返回，否则返回原来的串。</li><li>remove(String str,char remove) 去掉字符串str中所有包含remove的部分，然后返回</li><li>replace(String str,String reql,String with) 在字符串text中用with代替repl，替换所有</li><li>replaceChars(String str,char old,char new) 在字符串中 new 字符代替 old 字符</li><li>replaceChars(String str, String searchChars, String replaceChars) 这个有点特别，先看下面三个例子</li><li>StringUtils.replaceChars(“asssdf”,”s”,”yyy”))    =    “ayyydf” </li><li>StringUtils.replaceChars(“asdf”,”sd”,”y”))        = “ayf” </li><li>StringUtils.replaceChars(“assssddddf”,”sd”,”y”))= “ayyyyf”<blockquote><p>解释:为什么会出现上面这样的结果呢？原来这个置换规则是这样的，他是拿searchChars的index，去replaceChars找相应的index然后替换掉，怎么说呢？比如说第一个例子 s 的index 是0，找到yyy相对应的index为0的字符是y。第二个例子 ‘s’ 的index是0，’d’的index是1, 字符’s’ 可以找到对应index为0的 ‘y’，d就找不到index为’1’的的字符了，所以就直接过滤掉了，听明白了吗？</p></blockquote></li><li>overlay(String str,String new,int start,int end) 用字符串new 覆盖字符串str从start 到 end 之间的串</li><li>chop(String str) 去掉字符串的最后一个字符,比如/r/n</li><li>repeat(String str,int repart) 重复字符串repeat次</li><li>rightPad(String str,int size,String padStr) size长度的字符串，如果不够用padStr补齐</li><li>leftPad(String str,int size,String padStr)同上</li><li>center(String str,int size)产生一个字符串，长度等于size，str位于新串的中心</li><li>swapCase(String str) 字符串中的大写转小写，小写转换为大写</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Uncaught-SyntaxError--Unexpected-end-of-input</title>
      <link href="/blog/2020/03/04/Uncaught-SyntaxError--Unexpected-end-of-input/"/>
      <url>/blog/2020/03/04/Uncaught-SyntaxError--Unexpected-end-of-input/</url>
      
        <content type="html"><![CDATA[<p>文章字数：140,阅读全文大约需要1分钟</p><blockquote><p>意外的终止输入，浏览器读取我们的javascript代码时，碰到了不可预知的错误，导致无法继续解析下去。</p></blockquote><p>今天遇到这个问题，开发的时候没问题，软件打包测试时前端抛出这个错误。<br>首先想到是不是标签没结束之类的，检查了一遍提交的代码没有发现异常。<br>之后考虑到前端有做压缩，然后思考是不是注释的问题。最后发现有一处<code>\\</code>的注释，删除运行正常。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Web扫描工具</title>
      <link href="/blog/2020/03/04/Web%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/blog/2020/03/04/Web%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：123,阅读全文大约需要1分钟</p><blockquote><p>IBM Security App Scan Standard 是IBM的一款web安全扫描工具，可以利用爬虫技术进行网站安全渗透测试，根据网站入口自动对网页链接进行安全扫描，扫描之后会提供扫描报告和修复建议等。 </p></blockquote><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><ol><li>通过探索了解整个web页面结果 </li><li>通过分析，使用扫描规则库对修改的HTTP Request进行攻击尝试 </li><li>分析 Response 来验证是否存在安全漏洞</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>activeMQ基于插件的连接鉴权</title>
      <link href="/blog/2020/03/04/activeMQ%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E7%9A%84%E8%BF%9E%E6%8E%A5%E9%89%B4%E6%9D%83/"/>
      <url>/blog/2020/03/04/activeMQ%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E7%9A%84%E8%BF%9E%E6%8E%A5%E9%89%B4%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>文章字数：293,阅读全文大约需要1分钟</p><blockquote><p><code>activeMQ</code>本身只支持通过配置文件配置用户名和密码的方式管理连接，但是实际使用中 用户名和密码都是动态分配的。最后在网上找到了一个给<code>activeMQ</code>开发插件鉴权的方法。</p></blockquote><h1 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h1><ol><li><p>创建一个<code>java application</code>，并添加<code>activeMQ</code>的依赖。版本和部署的版本保持一致。</p></li><li><p>创建一个<code>broker plunin</code>类，并返回一个<code>Broker</code>的子类。这个子类就是控制连接鉴权的。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.broker.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAhthPlugin</span> <span class="keyword">implements</span> <span class="title">BrokerPlugin</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Broker <span class="title">installPlugin</span><span class="params">(Broker broker)</span> throw Exception</span>&#123;</span><br><span class="line">        <span class="function">reutrn new <span class="title">AuthFilter</span><span class="params">(broker)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.实现<code>AuthFilter</code>，重写<code>addConnection</code>方法，进行权限校验。失败抛出<code>SecurityException</code>,提示用户名密码错误。验证成功调用传入的<code>broker</code>的<code>addConnection</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用父类构造方法，传入broker</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AuthFilter</span><span class="params">(Broker next)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">publuc <span class="keyword">void</span> <span class="title">addConnection</span><span class="params">(ConnectionContext context, ConnectionInfo info)</span>throw Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 鉴权，失败抛出异常</span></span><br><span class="line">    auth(info.getUserName(),info.getPassword(),info.getClientId());</span><br><span class="line">    <span class="keyword">super</span>.addConnection(context,info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>通过配置文件加入插件</li></ol><p><code>activemq.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 其它同级的地方可以配置注入spring的bean,完成数据库的配置 --&gt;</span><br><span class="line">&lt;broker ...&gt;</span><br><span class="line">&lt;!-- 在这个标签中加入 --&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">          &lt;bean xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; id&#x3D;&quot;LoginAuthPlugin&quot; class&#x3D;&quot;com.study.mqttatuh.LoginAuthPlugin&quot;&gt;</span><br><span class="line">         &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;broker&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>freemarker传入日期报错</title>
      <link href="/blog/2020/03/04/freemarker%E4%BC%A0%E5%85%A5%E6%97%A5%E6%9C%9F%E6%8A%A5%E9%94%99/"/>
      <url>/blog/2020/03/04/freemarker%E4%BC%A0%E5%85%A5%E6%97%A5%E6%9C%9F%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：18,阅读全文大约需要1分钟</p><blockquote><p> Use ?date, ?time, or ?datetime to tell FreeMarker the exact type.</p></blockquote><p>原因：传入时间格式需要转换成字符串<code>?string(&quot;format&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value=<span class="string">"$&#123;(model.time?string('yyyy-MM-dd HH:mm:ss'))!&#125;"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>freemaker获取不到值</title>
      <link href="/blog/2020/03/04/freemaker%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E5%80%BC/"/>
      <url>/blog/2020/03/04/freemaker%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：78,阅读全文大约需要1分钟</p><blockquote><p>后台request.setAttribute(“model.key”,”xxx”);前端 ${model.key!}获取不到值。</p></blockquote><p>原因：命名错误，<code>model.key</code>的命名方式使freem把model当成对象获取key，当然获取不到。<br>解决方案：</p><ul><li><code>model_key</code>修改名字</li><li>new Model(); model.setKey(“xxx”);request.setAttribute(“model”,model); ${model.key!}新建一个Model实体类，设置属性key,传入实体类到request，前端就可以model.key获取</li></ul>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>freemarker报错Syntax-error</title>
      <link href="/blog/2020/03/04/freemarker%E6%8A%A5%E9%94%99Syntax-error/"/>
      <url>/blog/2020/03/04/freemarker%E6%8A%A5%E9%94%99Syntax-error/</url>
      
        <content type="html"><![CDATA[<p>文章字数：123,阅读全文大约需要1分钟</p><blockquote><p>freemarker.core.ParseException: Syntax error in template “xxx” in line 42, column 1:<br>Encountered “&lt;/#macro&gt;”, but was expecting one of: …..</p></blockquote><p>提示意思大概是不应该出现结尾符号<code>&lt;/#macro&gt;</code>,  期望的结果是<code>&lt;#macro&gt;</code>之类的开头符号。<br>经检查，发现<code>&lt;#macro&gt;</code>和<code>&lt;/#macro&gt;</code>确实是成对出现，并没有遗漏之类的。于是想到会不会是宏定义内部的自定义代码没有闭合，从而影响到了<code>&lt;/#macro&gt;</code>的闭合判断。</p><p>果然，一个自定义的标签未闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;@i18nMes &#39;common_close&#39;&gt;</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;@i18nMes &#39;common_close&#39;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>问题解决</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hibernate持久层</title>
      <link href="/blog/2020/03/04/hibernate%E6%8C%81%E4%B9%85%E5%B1%82/"/>
      <url>/blog/2020/03/04/hibernate%E6%8C%81%E4%B9%85%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>文章字数：415,阅读全文大约需要1分钟</p><blockquote><p>save()方法传入了id，但是识别成了新增</p></blockquote><p>新建了model并且调用save()导致识别成了新增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model model&#x3D;new Model ();</span><br><span class="line">copyItem2Model(Item,model);&#x2F;&#x2F;转换</span><br><span class="line">modelDao.save(visWatchList);</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model model&#x3D;modelDao.findById(id);</span><br><span class="line">copyItem2Model(Item,model);&#x2F;&#x2F;转换</span><br><span class="line">modelDao.save(visWatchList);</span><br></pre></td></tr></table></figure><h1 id="hibernate持久层三种状态"><a href="#hibernate持久层三种状态" class="headerlink" title="hibernate持久层三种状态"></a>hibernate持久层三种状态</h1><ul><li><p>瞬时状态 (Transient) </p><blockquote><p>new了一个对象，但是没有被hibernate缓存管理，数据库中没有一条记录和其对应，不与session关联</p></blockquote></li><li><p>持久状态 (Persistent)</p></li></ul><ol><li>save() 和 saveOrUpdate()使对象转换成持久态</li><li>find(),get()等方法查询的对象也是持久态<blockquote><p>对象被持久化对象管理，对象的改变会同步带数据库(这就是原因)同步不会马上进行，在Transaction之后，也就是commit()后提交。未提交的叫脏数据</p></blockquote></li></ol><ul><li>游离状态 (Detached)</li></ul><ol><li>close() 或 clear(),evict() 之后，持久对象会变为脱管对象</li><li>就是脱离管理状态<blockquote><p>脱管对象和瞬时状态差不多，只是数据库内可能存在一样的记录，但是并不关联。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>idea-dtd路径注册</title>
      <link href="/blog/2020/03/04/idea-dtd%E8%B7%AF%E5%BE%84%E6%B3%A8%E5%86%8C/"/>
      <url>/blog/2020/03/04/idea-dtd%E8%B7%AF%E5%BE%84%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：28,阅读全文大约需要1分钟</p><blockquote><p>URI is not registered (Settings | Languages)  即url没有注册，需要在编辑器注册一下。</p></blockquote><p>dtd,xml的规则文件。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p><code>setting</code>-&gt;search <code>Schemas and DTDs</code>-&gt;Ignored Schemas and DTDs 添加</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>idea报错PersistentEnumerator-storage-corrupted</title>
      <link href="/blog/2020/03/04/idea%E6%8A%A5%E9%94%99PersistentEnumerator-storage-corrupted/"/>
      <url>/blog/2020/03/04/idea%E6%8A%A5%E9%94%99PersistentEnumerator-storage-corrupted/</url>
      
        <content type="html"><![CDATA[<p>文章字数：59,阅读全文大约需要1分钟<br>idea编译程序时报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">error: (com.intellij.util.io.PersistentEnumeratorBase$CorruptedException) PersistentEnumerator storage corrupted </span><br><span class="line">C:\Users\Administrator\.IntelliJIdea2017.2\system\compile-server\packmes_f0d28b04\targets\artifact\packmes_war_exploded\out-src\data</span><br><span class="line">com.intellij.util.io.PersistentEnumeratorBase$CorruptedException: PersistentEnumerator storage corrupted </span><br><span class="line">C:\Users\Administrator\.IntelliJIdea2017.2\system\compile-server\packmes_f0d28b04\targets\artifact\packmes_war_exploded\out-src\data</span><br><span class="line">    at com.intellij.util.io.PersistentEnumeratorBase.&lt;init&gt;(PersistentEnumeratorBase.java:222)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>清空以下文件夹内的文件<br><code>C:\Users\Administrator.IntelliJIdea2017.2\system\compile-server\packmes_f0d28b04\targets\artifact\packmes_war_exploded\out-src/data</code></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>http返回值和请求方法</title>
      <link href="/blog/2020/03/04/http%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/"/>
      <url>/blog/2020/03/04/http%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1143,阅读全文大约需要4分钟</p><h1 id="一、返回值"><a href="#一、返回值" class="headerlink" title="一、返回值"></a>一、返回值</h1><p><strong>1.该类型状态码表示接收到请求并且继续处理</strong></p><ul><li><code>100</code>: 客户端必须继续发出请求。</li><li><code>101</code>: 客户端要求服务器根据请求转换HTTP协议版本。</li></ul><p><strong>2.该类型状态码表示动作被成功接收、理解和接受</strong></p><ul><li><code>200</code>: 表明该请求被成功地完成，所请求的资源发送到客户端。</li><li><code>201</code>: 提示知道新文件的URL。</li><li><code>202</code>: 接受并处理，但处理未完成。</li><li><code>203</code>: 返回信息不确定或不完整。</li><li><code>204</code>: 收到请求，但返回信息为空。</li><li><code>205</code>: 服务器完成了请求，用户必须复位当前已经浏览过的文件。</li><li><code>206</code>: 服务器已经完成了部分用户的GET请求。</li></ul><p><strong>3.该类型状态码表示为了完成指定的动作，必须接受进一步处理。</strong></p><ul><li><code>300</code>: 请求的资源可在多处获得。</li><li><code>301</code>: 本网页被永久性转移到另一个URL。</li><li><code>302</code>: 请求的网页被重定向到新的地址。</li><li><code>303</code>: 建议用户访问其他URL或访问方式。</li><li><code>304</code>: 自从上次请求后，请求的网页未修改过。</li><li><code>305</code>: 请求的资源必须从服务器指定的地址获得。</li><li><code>306</code>: 前一版本HTTP中使用的代码，现已不再使用。</li><li><code>307</code>: 声明请求的资源临时性删除。</li></ul><p><strong>4.该类型状态码表示请求包含错误语法或不能正确执行。</strong></p><ul><li><code>400</code>: 客户端请求有语法错误。</li><li><code>401</code>: 请求未经授权。</li><li><code>402</code>: 保留有效ChargeTo头响应。</li><li><code>403</code>: 禁止访问，服务器收到请求，但拒绝提供服务。</li><li><code>404</code>: 可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。</li><li><code>405</code>: 用户在Request-Line字段定义的方法不被允许。</li><li><code>406</code>: 根据用户发送的Accept，请求资源不可访问。</li><li><code>407</code>: 类似401，用户必须首先在代理服务器上取得授权。</li><li><code>408</code>: 客户端没有在用户指定的时间内完成请求。</li><li><code>409</code>: 对当前资源状态，请求不能完成。</li><li><code>410</code>: 服务器上不再有此资源。</li><li><code>411</code>: 服务器拒绝用户定义的Content-Length属性请求。</li><li><code>412</code>: 一个或多个请求头字段在当前请求中错误。</li><li><code>413</code>: 请求的资源大于服务器允许的大小。</li><li><code>414</code>: 请求的资源URL长于服务器允许的长度。</li><li><code>415</code>: 请求资源不支持请求项目格式。</li><li><code>416</code>: 请求中包含Range请求头字段，在当前请求资源范围内没有range指示值。</li><li><code>417</code>: 服务器不满足请求Expect头字段指定的期望值。</li></ul><p><strong>5.该类型状态码表示服务器或网关错误。</strong></p><ul><li><code>500</code>: 服务器错误。</li><li><code>501</code>: 服务器不支持请求的功能。</li><li><code>502</code>: 网关错误。</li><li><code>503</code>: 无法获得服务。</li><li><code>504</code>: 网关超时。</li><li><code>505</code>: 不支持的http版本。</li></ul><h1 id="二、http请求方法"><a href="#二、http请求方法" class="headerlink" title="二、http请求方法"></a>二、http请求方法</h1><ul><li><code>OPTIONS</code>: 返回服务器针对特定资源所支持的HTTP请求方法。</li><li><code>HEAD</code>: 与GET请求一致，只不过不会返回响应体。</li><li><code>GET</code>: 请求指定的资源。</li><li><code>POST</code>: 向指定资源提交数据进行处理请求，数据包含在请求体中，可能会导致新资源的创建或已有资源的修改。</li><li><code>PUT</code>: 向指定资源位置上传最新内容。</li><li><code>DELETE</code>: 请求服务器删除所标识的资源。</li></ul><h1 id="三、get和post区别"><a href="#三、get和post区别" class="headerlink" title="三、get和post区别"></a>三、get和post区别</h1><ul><li><code>get</code>数据放在url后，<code>post</code>把数据放在body中</li><li><code>get</code>最多提交1024字节数据，<code>post</code>没有限制</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb程序前端发起请求后端一直无响应</title>
      <link href="/blog/2020/03/04/javaWeb%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E4%B8%80%E7%9B%B4%E6%97%A0%E5%93%8D%E5%BA%94/"/>
      <url>/blog/2020/03/04/javaWeb%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E4%B8%80%E7%9B%B4%E6%97%A0%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>文章字数：470,阅读全文大约需要1分钟</p><blockquote><p>浏览器访问<code>java</code>后端的页面，然后一直在转圈圈。很久了也没有反应</p></blockquote><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><ol><li>首先一直转圈圈肯定是<code>http</code>连接没有设置超时</li><li>查看<code>java</code>的日志，发现没有任何日志输出。</li><li>平常即使什么都不做也会有一下定时任务偶尔输出一些信息，但是这次却异常平静</li><li>看了一下最新写的代码是获取<code>redis</code>信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.getConnectionFactory().getConnection().info()</span><br></pre></td></tr></table></figure><ol start="5"><li>刚写的功能是定时访问这个接口获取<code>redis</code>信息，并且输出信息到前端。</li><li>这里从<code>connectionFactory</code>获取了连接，但是会不会自动释放。看了一下源代码，似乎没有释放的环节。</li><li>查看<code>redisTemplate</code>代码，看看执行其他命令的时候是怎么获取到连接的</li></ol><p><code>execute</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(RedisCallback&lt;T&gt; action, <span class="keyword">boolean</span> exposeConnection, <span class="keyword">boolean</span> pipeline)</span> </span>&#123;</span><br><span class="line">        Assert.isTrue(<span class="keyword">this</span>.initialized, <span class="string">"template not initialized; call afterPropertiesSet() before using it"</span>);</span><br><span class="line">        Assert.notNull(action, <span class="string">"Callback object must not be null"</span>);</span><br><span class="line">        RedisConnectionFactory factory = <span class="keyword">this</span>.getConnectionFactory();</span><br><span class="line">        RedisConnection conn = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Object var11;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.enableTransactionSupport) &#123;</span><br><span class="line">                conn = RedisConnectionUtils.bindConnection(factory, <span class="keyword">this</span>.enableTransactionSupport);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                conn = RedisConnectionUtils.getConnection(factory);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> existingConnection = TransactionSynchronizationManager.hasResource(factory);</span><br><span class="line">            RedisConnection connToUse = <span class="keyword">this</span>.preProcessConnection(conn, existingConnection);</span><br><span class="line">            <span class="keyword">boolean</span> pipelineStatus = connToUse.isPipelined();</span><br><span class="line">            <span class="keyword">if</span> (pipeline &amp;&amp; !pipelineStatus) &#123;</span><br><span class="line">                connToUse.openPipeline();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RedisConnection connToExpose = exposeConnection ? connToUse : <span class="keyword">this</span>.createRedisConnectionProxy(connToUse);</span><br><span class="line">            T result = action.doInRedis(connToExpose);</span><br><span class="line">            <span class="keyword">if</span> (pipeline &amp;&amp; !pipelineStatus) &#123;</span><br><span class="line">                connToUse.closePipeline();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var11 = <span class="keyword">this</span>.postProcessResult(result, connToUse, existingConnection);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RedisConnectionUtils.releaseConnection(conn, factory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var11;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>RedisConnectionUtils.getConnection(factory);</code>的内部实现也是<code>getConnectionFactory().getConnection()</code>，所以可以知道确是没有自动释放，需要手动释放一下</p><ol start="8"><li>于是模仿源代码的形式获取连接，然后执行，释放</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RedisConnectionFactory factory = redisTemplate.getConnectionFactory();</span><br><span class="line">        RedisConnection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = RedisConnectionUtils.getConnection(factory);</span><br><span class="line">            redisInfo = conn.info();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RedisConnectionUtils.releaseConnection(conn, factory);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>再次进行之前的操作，发现无响应的问题解决了。</li></ol><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>现在看来无响应应该就是获取<code>redis</code>连接的代码堵塞了，循环导致被占用的连接数越来越多，直到连接池被沾满。这也解释了为什么后台无信息输出，因为很多的线程也是依赖<code>redis</code></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java压缩文件无法打开</title>
      <link href="/blog/2020/03/04/java%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"/>
      <url>/blog/2020/03/04/java%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<p>文章字数：55,阅读全文大约需要1分钟</p><blockquote><p>压缩过程无错误，压缩后的文件打开不了<code>这个压缩文件格式未知或者数据已经被损坏</code></p></blockquote><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p><code>ZipOutputStream</code>这个流未关闭，代码上加上<code>zipOutputStream.close()</code>就可以了</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式概述</title>
      <link href="/blog/2020/03/04/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
      <url>/blog/2020/03/04/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：794,阅读全文大约需要3分钟</p><blockquote><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、<strong>代码设计经验的总结</strong>。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。</p></blockquote><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>设计模式大致分为三类（23种）：</p><ul><li><p>创建型模式（5种）：工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。</p><blockquote><p>这些设计模式提供了一种创建对象时隐藏创建逻辑的方式，而不是使用<code>new</code>直接实例化。使创建实例更加灵活，创建对象的方式更有引导性。</p></blockquote></li><li><p>结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。</p></li></ul><ul><li>行为型模式（11种）：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ul><h1 id="遵守原则"><a href="#遵守原则" class="headerlink" title="遵守原则"></a>遵守原则</h1><ul><li><p>开闭原则<code>Open Close Principle</code><br>　　对扩展开放，对修改关闭。（程序拓展的时候不能修改原有的代码）</p></li><li><p>里氏代换原则<code>Liskov Substitution Principle</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)子类的能力必须大于等于父类，父类可以使用的方法子类都可以使用</span><br><span class="line">(2)返回值的类型也一样，如父类返回List，子类则可以返回ArrayList</span><br><span class="line">(3)子类只能抛出父类有的异常</span><br></pre></td></tr></table></figure></li><li><p>依赖倒转原则<code>Dependence Inversion Principle</code><br>面向接口编程，依赖抽象而不是依赖具体。</p></li><li><p>接口隔离原则<code>Interface Segregation Principle</code><br>多个隔离的接口比单接口好，降低依赖，降低耦合。</p></li><li><p>迪米特法则（最少知道原则）<code>Demeter Principle</code><br>实体尽量少的与其它实体之间发生相互作用，系统功能相互独立。</p></li><li><p>合成复用原则<code>Composite Reuse Principle</code><br>尽量使用合成/聚合的方法，而不是使用继承。<br>即原本是父类属性的值剥离出来，比如颜色，专门写一个Color类，其中实现相应的方法。在父类和子类中调用这个类。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式(创建型5种)</title>
      <link href="/blog/2020/03/04/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%88%9B%E5%BB%BA%E5%9E%8B5%E7%A7%8D)/"/>
      <url>/blog/2020/03/04/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%88%9B%E5%BB%BA%E5%9E%8B5%E7%A7%8D)/</url>
      
        <content type="html"><![CDATA[<p>文章字数：627,阅读全文大约需要2分钟</p><h1 id="工厂模式Factory-Pattern"><a href="#工厂模式Factory-Pattern" class="headerlink" title="工厂模式Factory Pattern"></a>工厂模式<code>Factory Pattern</code></h1><ul><li>意图：定义一个创建对象的接口，让子类界定实例化那个工厂类。创建过程在子类执行。</li><li>解决问题：接口的子类实现各不相同，但是需要同一个实例化入口</li></ul><h1 id="抽象工厂Abstract-Factory-Pattern"><a href="#抽象工厂Abstract-Factory-Pattern" class="headerlink" title="抽象工厂Abstract Factory Pattern"></a>抽象工厂<code>Abstract Factory Pattern</code></h1><ul><li>意图：将同类产品的工厂类组合起来，形成一个抽象工厂接口。</li><li>使用步骤：1.通过抽象工厂的实现类获取工厂类（同类工厂在一起） 2.通过工厂类获取对象实体</li></ul><h1 id="单例模式Singleton-Pattern"><a href="#单例模式Singleton-Pattern" class="headerlink" title="单例模式Singleton Pattern"></a>单例模式<code>Singleton Pattern</code></h1><ul><li>意图：保证类只有一个实例，并且提供全局访问点</li><li>实现：判断是否存在实例，存在返回。不存在创建，并用静态变量保存。私有化构造函数，使只有一个入口用于生产实例</li></ul><h1 id="建造者模式Builder-Pattern"><a href="#建造者模式Builder-Pattern" class="headerlink" title="建造者模式Builder Pattern"></a>建造者模式<code>Builder Pattern</code></h1><ul><li>意图：将由多个步骤/节点，组成。每个步骤/节点的内容一样，但是需要不同顺序，数量等组合生成新产品。</li><li>实现：1.拥有不同细节实现类 2.按规则生成并保存细节（List）3.将细节拼接成为一个新的对象</li><li>例子：StringBuilder</li></ul><h1 id="原型模式Prototype-Pattern"><a href="#原型模式Prototype-Pattern" class="headerlink" title="原型模式Prototype Pattern"></a>原型模式<code>Prototype Pattern</code></h1><ul><li>意图：作为创建模式，和工厂模式不同的是该模式的思想是创建一个对象的原型，原型对象可以复制、克隆为新的对象</li><li>实现：原型模式有两种实现</li></ul><ol><li><p><code>浅复制</code>：使用<code>Cloneable.clone()</code>，原型继承<code>Cloneable</code>，然后调用<code>super.clone()</code>进行类型转换。浅复制基本数据类型的变量会创建，其它的对象引用指向原型对象。</p></li><li><p><code>深复制</code>：基本类型和引用类型都重新创建</p></li></ol><p>原型<code>implements Cloneable, Serializable</code></p><p>克隆方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 写入当前对象的二进制流 */</span></span><br><span class="line">ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 读出二进制流产生的新对象 */</span></span><br><span class="line">ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line"><span class="keyword">return</span> ois.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式（结构型7种）</title>
      <link href="/blog/2020/03/04/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%BB%93%E6%9E%84%E5%9E%8B7%E7%A7%8D%EF%BC%89/"/>
      <url>/blog/2020/03/04/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%BB%93%E6%9E%84%E5%9E%8B7%E7%A7%8D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1121,阅读全文大约需要4分钟</p><h1 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h1><p>意图：当一个已经在运行的接口因不兼容而不适应新的接口，把一个接口转换成另一个接口。（解决现有对象不满足新环境的需求）</p><p>关键实现：</p><ol><li>新建一个拥有满足新环境需求的接口 </li><li>实现此接口，原有的功能引入原接口实现，然后再实现新功能</li></ol><p>例子： <code>springSession</code>: 实现了<code>HttpSession</code>接口，内部实现使用的是<code>ExpiringSession</code>，并拓展了其它没有的功能。即<code>session</code>信息都保存在<code>ExpiringSession</code>中（老接口），但是需要实现<code>HttpSession</code>（新接口）的功能。</p><h1 id="桥接模式（Bridge-Pattern）"><a href="#桥接模式（Bridge-Pattern）" class="headerlink" title="桥接模式（Bridge Pattern）"></a>桥接模式（Bridge Pattern）</h1><p>意图：创建一段代码时为了保证可拓展性，将抽象部分和实现部分分离，使他们可以单独变换。即一个抽象类，有部分实现了的方法，这些方法组成一个接口，分别不同实现。另外一部分抽象方法留给实现类去实现。</p><p>实现：</p><ol><li>创建已经实现的方法的接口，并分别实现</li><li>创建桥接抽象方法，里面提供构造方法选则不同的已实现接口的实现类</li><li>实现抽象方法，使用内置的接口实现定制内容</li></ol><p>和视频器模式区别：适配器是现有接口改造成新接口，这个是全新的接口为了方便拓展<br>相同：都是接口内置其它的实现类，使用接口操作内置的实现类。</p><h1 id="组合模式-Composite-Pattern"><a href="#组合模式-Composite-Pattern" class="headerlink" title="组合模式(Composite Pattern)"></a>组合模式(Composite Pattern)</h1><p>意图：对象中包含该对象的集合，主要表示对象的一对多关系。总体组成树形结构，可以表示例如董事长-&gt;总经理-&gt;一堆副总-&gt;各部门员工 这样的结构</p><p>实现： 创建一个节点对象，其中包含List,list类型为自身类型。并提供增删改查的方法。</p><h1 id="装饰器模式-Decorator-Pattern"><a href="#装饰器模式-Decorator-Pattern" class="headerlink" title="装饰器模式(Decorator Pattern)"></a>装饰器模式(Decorator Pattern)</h1><p>意图：现有对象添加新的功能，并且不改变原有对象的方法。</p><p>实现：</p><ol><li>继承原有对象的接口，保证创建的新对象符合原有接口的方法规则</li><li>内置原有对象，并调用其基本功能，保证功能的一致</li><li>在原有功能上添加自定义的新功能</li></ol><p>例子：<code>HttpServletRequestWrapper</code>使用装饰模式增强<code>request</code>的功能(参数拦截之类的)</p><h1 id="外观模式-Facade-Pattern"><a href="#外观模式-Facade-Pattern" class="headerlink" title="外观模式(Facade Pattern)"></a>外观模式(Facade Pattern)</h1><p>意图：隐藏系统的复杂性，提供一个接口直接完成复杂操作。</p><p>实现：将一系列一起使用的接口按照使用顺序调用，再放回唯一值。简而言之就是封装</p><h1 id="享元模式-Flyweight-Pattern"><a href="#享元模式-Flyweight-Pattern" class="headerlink" title="享元模式(Flyweight Pattern)"></a>享元模式(Flyweight Pattern)</h1><p>意图：减少对象创建的数量，减少内存占用，提高效率。对象复用。</p><p>实现：创建存储使用过的对象的列表，当需要时从列表中取对象而不是自己重新创建。当然，有很多细节，比如初始对象数量，最大数量，空闲对象存活时间，对象不够用的策略等。</p><p>例子：线程池，连接池</p><h1 id="代理模式-Proxy-Pattern"><a href="#代理模式-Proxy-Pattern" class="headerlink" title="代理模式(Proxy Pattern)"></a>代理模式(Proxy Pattern)</h1><p>意图：当对象直接访问有问题（对象在远程机器上、安全控制、进程外访问、创建开销大）等情况下，提供一个中间层看似和原有类一样，其实做了中间的转换操作。</p><p>实现：</p><ol><li>创建一个新的类，继承需要代理的类的接口，即保持一样的对外方法结构。</li><li>新的类完成中间操作，并访问被代理的类。（远程访问，权限控制，单例等）</li></ol><hr><p>不属于7种，也是结构型</p><h1 id="过滤器模式-Filter-标准模式-Criteria"><a href="#过滤器模式-Filter-标准模式-Criteria" class="headerlink" title="过滤器模式(Filter)/标准模式(Criteria)"></a>过滤器模式(Filter)/标准模式(Criteria)</h1><p>意图：将挑选规则和挑选动作分离，使一个挑选的动作可以选择不同的规则。</p><p>实现：</p><ol><li>定义规则接口，里面有选择规则的函数</li><li>创建类使用规则接口挑选出符合规则的元素</li><li>创建不同的规则（实现规则接口）</li></ol><p>例子：<code>java8</code>的<code>stream.filter(StringUtil::notBlack)</code></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js获取java接口返回的Boolean类型解析成string</title>
      <link href="/blog/2020/03/04/js%E8%8E%B7%E5%8F%96java%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%9A%84Boolean%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E6%88%90string/"/>
      <url>/blog/2020/03/04/js%E8%8E%B7%E5%8F%96java%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%9A%84Boolean%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E6%88%90string/</url>
      
        <content type="html"><![CDATA[<p>文章字数：60,阅读全文大约需要1分钟</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>从java返回的boolean类型的flag直接用来if判断,结果flag是true却没有进入if语句。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>用typeof flag 发现接收到的是string类型</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>做了个判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target = res===<span class="string">"true"</span>?<span class="literal">true</span>:res==<span class="literal">true</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><code>Boolean(target)</code>竟然不行？？</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux基础命令</title>
      <link href="/blog/2020/03/04/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2020/03/04/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1225,阅读全文大约需要4分钟</p><blockquote><p>linux命令格式为 命令 [-选项] [参数]</p></blockquote><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><table><thead><tr><th align="center">文件名</th><th>全称</th><th>介绍</th></tr></thead><tbody><tr><td align="center">bin</td><td>binaries</td><td>存放二进制可执行文件</td></tr><tr><td align="center">sbin</td><td>super user binaries</td><td>存放二进制可执行文件，root才能访问</td></tr><tr><td align="center">etc</td><td>etcetera</td><td>存放系统配置文件</td></tr><tr><td align="center">usr</td><td>unix shared resources</td><td>存放共享的系统资源</td></tr><tr><td align="center">home</td><td>-</td><td>存放用户文件的根目录</td></tr><tr><td align="center">root</td><td>-</td><td>超级管理员目录</td></tr><tr><td align="center">dev</td><td>devices</td><td>存放设备文件</td></tr><tr><td align="center">lib</td><td>library</td><td>存放根文件系统中程序运行需要的共享库和内核模块</td></tr><tr><td align="center">mnt</td><td>mount</td><td>系统管理员安装临时文件系统的安装点</td></tr><tr><td align="center">boot</td><td>-</td><td>存放用于系统引导时使用的各种文件</td></tr><tr><td align="center">tmp</td><td>temporary</td><td>用于存放各种临时文件</td></tr><tr><td align="center">var</td><td>variable</td><td>用于存放运行时需要改变数据的文件</td></tr></tbody></table><h1 id="文件及目录命令"><a href="#文件及目录命令" class="headerlink" title="文件及目录命令"></a>文件及目录命令</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">cd</td><td align="center"></td><td>cd /</td><td>切换目录</td></tr><tr><td align="center">pwd</td><td align="center"></td><td>pwd</td><td>显示当前工作目录的目录</td></tr><tr><td align="center">touch</td><td align="center"></td><td>touch test.txt</td><td>创建空文件</td></tr><tr><td align="center">mkdir</td><td align="center"></td><td>mkdir testDir</td><td>创建目录</td></tr><tr><td align="center">-</td><td align="center">-p</td><td>mkdir -p dir1/dir2/dir3</td><td>创建多级目录，父目录不存在情况下先生存父目录</td></tr><tr><td align="center">cp</td><td align="center"></td><td>cp 1.txt newDirectort</td><td>复制文件或目录到新地方</td></tr><tr><td align="center">-</td><td align="center">-r</td><td>cp -r dir1/ xxx</td><td>递归处理，目录及目录下文件一起拷贝到xxx</td></tr><tr><td align="center">mv</td><td align="center"></td><td>mv 文件1 文件2</td><td>将文件1重命名为文件2</td></tr><tr><td align="center">mv</td><td align="center"></td><td>mv 文件 目录</td><td>移动文件到目录</td></tr><tr><td align="center">mv</td><td align="center"></td><td>mv 源目录 目标目录</td><td>存在目标目录则移动，否则重命名</td></tr><tr><td align="center">rm</td><td align="center"></td><td>rm 1.txt</td><td>删除</td></tr><tr><td align="center">-</td><td align="center">-r -f</td><td>rm -rf dir1</td><td>r删除目录下的所有文件 f强制删除</td></tr><tr><td align="center">rmdir</td><td align="center"></td><td>rmdir dir1</td><td>删除空目录</td></tr><tr><td align="center">&gt;</td><td align="center"></td><td>echo xxx &gt; 1.txt</td><td>将前面的输出定向写入到文件,没有创建，有覆盖</td></tr><tr><td align="center">&gt;:</td><td align="center"></td><td>echo xx &gt;: 1.txt</td><td>写入，文件有内容覆盖</td></tr><tr><td align="center">&gt;&gt;</td><td align="center"></td><td>echo xx &gt;&gt; 1.txt</td><td>追加到文件，文件不存在创建</td></tr><tr><td align="center">&gt;&gt;:</td><td align="center"></td><td>echo xx &gt;&gt;: 1.txt</td><td>追加写入</td></tr></tbody></table><h1 id="文件内容命令"><a href="#文件内容命令" class="headerlink" title="文件内容命令"></a>文件内容命令</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">cat</td><td align="center"></td><td>cat 1.txt</td><td>显示文件内容</td></tr><tr><td align="center">more</td><td align="center"></td><td>more 1.txt</td><td>分页显示内容，可前后翻页。空格向后，b?</td></tr><tr><td align="center">less</td><td align="center"></td><td>less 1.txt</td><td>方向键查看内容，加载速度快</td></tr><tr><td align="center">head</td><td align="center"></td><td>head 1.txt</td><td>查看文件开头，默认看十行</td></tr><tr><td align="center">-</td><td align="center">- [num]</td><td>head -20 1.txt</td><td>查看固定行数内容</td></tr><tr><td align="center">tail</td><td align="center"></td><td>tail 1.txt</td><td>查看文件结尾，默认十行</td></tr><tr><td align="center">-</td><td align="center">- [num]</td><td>tail -20 1.txt</td><td>查看结尾固定行数内容</td></tr><tr><td align="center">-</td><td align="center">-f</td><td>tail -f 1.txt</td><td>循环滚动读取文件，根据文件属性追踪</td></tr><tr><td align="center">-</td><td align="center">-F</td><td>tail -F 1.txt</td><td>循环滚动读取文件动态，文件文件名追踪</td></tr><tr><td align="center">wc</td><td align="center"></td><td>wc 1.txt</td><td>统计行数、字数、字符数</td></tr><tr><td align="center">-</td><td align="center">-m</td><td>wc -m 1.txt</td><td>字符数</td></tr><tr><td align="center">-</td><td align="center">-w</td><td>wc  -w 1.txt</td><td>文本字数</td></tr><tr><td align="center">-</td><td align="center">-l</td><td>wc -l 1.txt</td><td>文本行数</td></tr></tbody></table><h1 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">find</td><td align="center">-name</td><td>find dir -name 1.txt</td><td>在文件系统中查找文件</td></tr><tr><td align="center">grep</td><td align="center"></td><td>grep “aaa “ 1.txt</td><td>查找1.txt中的包含aaa的行</td></tr><tr><td align="center">-</td><td align="center"></td><td>grep zz *file</td><td>查找当前目录以file结尾的文件里有zz的行</td></tr><tr><td align="center">-</td><td align="center">-r</td><td>grep -r xxx /etc</td><td>递归的形式查找目录及目录的子目录下文件有xxx的行</td></tr><tr><td align="center">-</td><td align="center">-v</td><td>grep -v test *test</td><td>反向查找，查找不包含test的行</td></tr><tr><td align="center">-</td><td align="center">-E -n</td><td>grep -E -n “^w” 1.txt</td><td>-E使用正则查看1.txt中w开头的行，-n显示行号</td></tr><tr><td align="center">In</td><td align="center"></td><td>In1.txt 1_bak.txt</td><td>建立连接文件</td></tr><tr><td align="center">-</td><td align="center">-s</td><td>In -s 1.txt 1_bak.txt</td><td>建立符号连接，软连接。</td></tr></tbody></table><h1 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">top</td><td align="center"></td><td>top</td><td>显示当前系统中耗电最多的进程</td></tr><tr><td align="center">date</td><td align="center"></td><td>date</td><td>显示系统时间</td></tr><tr><td align="center">ps</td><td align="center"></td><td></td><td>配合参数使用</td></tr><tr><td align="center">-</td><td align="center">-e</td><td>ps -e</td><td>显示所有进程，环境变量</td></tr><tr><td align="center">-</td><td align="center">-f</td><td>ps -ef</td><td>全格式显示</td></tr><tr><td align="center">-</td><td align="center">-a</td><td>ps -a</td><td>显示所有用户的所有进程(包括其他用户)</td></tr><tr><td align="center">-</td><td align="center">-u</td><td>ps -au</td><td>按照用户名和启动时间显示进程</td></tr><tr><td align="center">-</td><td align="center">-x</td><td>ps -aux</td><td>显示无控制终端的进程</td></tr><tr><td align="center">kill</td><td align="center">-15</td><td>kill -15 pid</td><td>正常退出pid程序</td></tr><tr><td align="center">-</td><td align="center">-9</td><td>kill -9 pid</td><td>立即杀死进程</td></tr><tr><td align="center">df</td><td align="center"></td><td>df</td><td>显示文件系统磁盘空间状况</td></tr><tr><td align="center"></td><td align="center">-h</td><td></td><td>df -h</td></tr><tr><td align="center">du</td><td align="center"></td><td></td><td>显示指定目录及子目录已使用磁盘空间总和</td></tr><tr><td align="center">-</td><td align="center">-s</td><td>du -s *</td><td>显示指定目录，</td></tr><tr><td align="center">-</td><td align="center">-h</td><td>du -sh *</td><td>友好显示</td></tr><tr><td align="center">free</td><td align="center"></td><td>free</td><td>显示当前内存和交换空间情况</td></tr><tr><td align="center">ifconfig</td><td align="center"></td><td>ifconfig</td><td>网卡网络配置，ip,网关等</td></tr><tr><td align="center">-</td><td align="center"></td><td>ifconfig eth0 192.168.1.1</td><td>临时修改系统ip(需要重启)</td></tr><tr><td align="center">ping</td><td align="center"></td><td>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></td><td>测试网络连通</td></tr><tr><td align="center">hostname</td><td align="center"></td><td>hostname</td><td>查看主机名</td></tr><tr><td align="center">shutdown</td><td align="center"></td><td>关机，参数 -help</td><td></td></tr><tr><td align="center">halt</td><td align="center"></td><td>halt</td><td>关机，相当于shutdown -h</td></tr><tr><td align="center">reboot</td><td align="center"></td><td>reboot</td><td>重启，shutdown -r</td></tr><tr><td align="center">sudo</td><td align="center"></td><td>暂时切换成root，ubuntu下一般是15分钟</td><td></td></tr><tr><td align="center">su</td><td align="center"></td><td>切换成root，没时间限制</td><td></td></tr></tbody></table><h1 id="压缩解压缩"><a href="#压缩解压缩" class="headerlink" title="压缩解压缩"></a>压缩解压缩</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">gzip</td><td align="center"></td><td>gzip 1.txt</td><td>压缩文件或文件夹</td></tr><tr><td align="center">-</td><td align="center">-d</td><td>gzip -d 1.txt gz</td><td>解压文件</td></tr><tr><td align="center">-</td><td align="center">-[num]</td><td>gzip -9 1.txt</td><td>压缩速度，越快压缩比越小</td></tr></tbody></table><h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><p>-<strong>rwx</strong> rw- <strong>r–</strong><br>所属用户权限 所属组权限 其它用户权限<br>- 普通文件  d目录  l链接文件</p><p>chmod 修改文件权限<br>chown  修改用户权限</p><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p><code>i</code>写模式<br><code>esc键</code>退出写模式<br><code>:</code>命令行模式<br><code>:wq</code>命令行模式下输入，保存退出</p>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mqtt发布被阻塞</title>
      <link href="/blog/2020/03/04/mqtt%E5%8F%91%E5%B8%83%E8%A2%AB%E9%98%BB%E5%A1%9E/"/>
      <url>/blog/2020/03/04/mqtt%E5%8F%91%E5%B8%83%E8%A2%AB%E9%98%BB%E5%A1%9E/</url>
      
        <content type="html"><![CDATA[<p>文章字数：276,阅读全文大约需要1分钟</p><blockquote><p>记录一次debug的过程。</p></blockquote><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><ol><li>最初是发现<code>mqtt</code>只会接收一次订阅到的消息，然后就不会再接收消息了。</li><li>之后经过排查发现是<code>publish</code>方法被阻塞了，进去就出不来。</li></ol><h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><ol><li>最早的表现是使用<code>mqttBox</code>模拟设备向服务器发送请求，只发现服务器回应了一次。</li><li>因为是本地开发环境，所以直接打断点。发现不是回应出错，而是只接受到了一次订阅的信息。</li><li>再次跟踪程序，发现进入<code>publish</code>方法之后再也没有出来。</li><li>期初以为只是发送的方法被阻塞，后来意识到发布消息是在处理订阅的方法里以同步的形式进行的，而且还使用同一个连接。有可能是发送需要等待上个任务结束才能进行，然而上个任务需要发送结束了才能返回。于是陷入死循环。</li><li>接收到消息用新开的线程处理，问题解决。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql输出字符到文件</title>
      <link href="/blog/2020/03/04/mysql%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E5%88%B0%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2020/03/04/mysql%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E5%88%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：71,阅读全文大约需要1分钟</p><blockquote><p>输出固定字符串，保存字符串到文件内。</p></blockquote><ul><li>输出字符串<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> substring_index(<span class="string">'重庆,四川,北京'</span>,<span class="string">'.'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li>保存结果到文件<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//语句</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (表名) <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'/usr/local/test.txt'</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> gbk;</span><br><span class="line">//命令行</span><br><span class="line">mysql -h 127.0.0.1 -u用户名 -p密码 <span class="comment">--default-character-set=gb2312 -e "select * from 表名" 数据库名 &gt; test.txt</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>onsubimt事件未触发</title>
      <link href="/blog/2020/03/04/onsubimt%E4%BA%8B%E4%BB%B6%E6%9C%AA%E8%A7%A6%E5%8F%91/"/>
      <url>/blog/2020/03/04/onsubimt%E4%BA%8B%E4%BB%B6%E6%9C%AA%E8%A7%A6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>文章字数：89,阅读全文大约需要1分钟<br>表现：表单使用<code>form.submit()</code>提交为出发点<code>onsubmit事件</code><br>原因：</p><ol><li><code>elemForm.submit()</code>不会触发表单的onsubmit事件</li><li><code>name=&quot;submit&quot;</code>的表单元素会覆盖默认的提交元素，而<code>form.submit()</code>本身就是对默认元素的引用</li><li><code>onclick=&quot;xxx&quot;</code>xxx代表着触发事件之后的执行，如果是执行某个函数需要括号<code>onclick=&quot;xxx()&quot;</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>osi和tcp-ip</title>
      <link href="/blog/2020/03/04/osi%E5%92%8Ctcp-ip/"/>
      <url>/blog/2020/03/04/osi%E5%92%8Ctcp-ip/</url>
      
        <content type="html"><![CDATA[<p>文章字数：536,阅读全文大约需要2分钟</p><blockquote><p>OSI开放系统互联(open system interconnection)是由国际标准化组织(ISO)指定的七层计算机互联模型。TCP/IP则是简化版的OSI,TCP/IP是四层模型，并且淘汰了OSI,被大规模使用。</p></blockquote><h1 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h1><table><thead><tr><th align="left">位置</th><th align="left">模型层名</th><th align="left">作用</th><th align="left">常见协议</th></tr></thead><tbody><tr><td align="left">主机</td><td align="left">应用层</td><td align="left">访问网络服务的端口，应用程序协议</td><td align="left">HTTP、FTP、SMTP、TELNET、DNS</td></tr><tr><td align="left">主机</td><td align="left">表示层</td><td align="left">数据格式转换、语义关联</td><td align="left">LPP(轻量级表示协议)、NBSSN NetBIOS(会话服务协议)、XDP(外部数据表示协议)</td></tr><tr><td align="left">主机</td><td align="left">会话层</td><td align="left">建立端连接，提供访问验证会话管理</td><td align="left">SSL(安全套接字层协议)、TLS(传输层安全协议)、RPC(远程过程调用协议)、DAP(目录访问协议)、LDAP(轻量级目录访问协议)</td></tr><tr><td align="left">主机</td><td align="left">传输层</td><td align="left">端到端基础通讯</td><td align="left">TCP、UDP</td></tr><tr><td align="left">网络</td><td align="left">网络层</td><td align="left">节点，子网控制。逻辑编址、分组传输、路由选择</td><td align="left">ipv4、ipv6、icmp(报文控制协议)ping发送的就是icmp</td></tr><tr><td align="left">网络</td><td align="left">链路层</td><td align="left">物理寻址，将比特流建立逻辑传输路线</td><td align="left"></td></tr><tr><td align="left">网络</td><td align="left">物理层</td><td align="left">原始比特传输</td><td align="left">IEEE 802.2</td></tr><tr><td align="left"># TCP/IP</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">模型层名</td><td align="left">作用</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">—</td><td align="left">—</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">应用层</td><td align="left">用户进程</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">运输层</td><td align="left">TCP、UDP</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">网络层</td><td align="left">ICMP、IP、IGMP</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">链路层</td><td align="left">ARP、硬件接口、RARP</td><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>postgreSql-json</title>
      <link href="/blog/2020/03/04/postgreSql-json/"/>
      <url>/blog/2020/03/04/postgreSql-json/</url>
      
        <content type="html"><![CDATA[<p>文章字数：54,阅读全文大约需要1分钟</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从data表中模糊查询data_content(json)中的code属性</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">data</span> <span class="keyword">where</span> data_content::<span class="keyword">json</span> -&gt;&gt; <span class="string">'code'</span> <span class="keyword">like</span> <span class="string">'%123%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ::json转成json</span></span><br><span class="line"><span class="comment">--  -&gt;&gt;接收字符串</span></span><br><span class="line"><span class="comment">-- --&gt;&gt;'code' 字符串类型的code字段</span></span><br></pre></td></tr></table></figure><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt; / -&gt;&gt; 取一层</span><br><span class="line"><span class="comment">#&gt; / #&gt;&gt; 可取多层：  jsonContent::json #&gt;&gt;&#123;a,b&#125;    //bbbb</span></span><br><span class="line">&#123;"a":"&#123;'b':'bbbb'&#125;"&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis中危险命令</title>
      <link href="/blog/2020/03/04/redis%E4%B8%AD%E5%8D%B1%E9%99%A9%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2020/03/04/redis%E4%B8%AD%E5%8D%B1%E9%99%A9%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：89,阅读全文大约需要1分钟</p><blockquote><p>线上需要禁止或者重命名</p></blockquote><ol><li><code>keys xxx</code>模糊查询符合要求的键，大数据量的情况会导致<code>CPU</code>飙升，<code>redis</code>锁住。</li><li><code>flushAll</code>清空<code>redis</code>所有数据，不会执行失败</li><li><code>flushdb</code>删除<code>Redis</code>中当前数据库的所有记录，不会失败</li><li><code>config</code>修改配置</li></ol><h1 id="禁用命令"><a href="#禁用命令" class="headerlink" title="禁用命令"></a>禁用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rename-command KEYS &quot; &quot;</span><br><span class="line">rename-command FLUSHALL &quot;&quot;</span><br></pre></td></tr></table></figure><h1 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename-command FLUSHALL &quot;xxxxxxxxxxxxx&quot;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redisTemplate获取redis服务器信息</title>
      <link href="/blog/2020/03/04/redisTemplate%E8%8E%B7%E5%8F%96redis%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF/"/>
      <url>/blog/2020/03/04/redisTemplate%E8%8E%B7%E5%8F%96redis%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1500,阅读全文大约需要6分钟</p><h1 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RedisConnectionFactory factory = redisTemplate.getConnectionFactory();</span><br><span class="line">        RedisConnection conn = <span class="keyword">null</span>;</span><br><span class="line">        Map redisInfo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = RedisConnectionUtils.getConnection(factory);</span><br><span class="line">            redisInfo = conn.info();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RedisConnectionUtils.releaseConnection(conn, factory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisInfo;</span><br></pre></td></tr></table></figure><h1 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; INFO</span><br><span class="line"># Server</span><br><span class="line"># Redis服务器版本</span><br><span class="line">redis_version:<span class="number">999.999</span><span class="number">.999</span></span><br><span class="line">redis_git_sha1:<span class="number">3</span>c968ff0</span><br><span class="line">redis_git_dirty:<span class="number">0</span></span><br><span class="line">redis_build_id:<span class="number">51089</span>de051945df4</span><br><span class="line">redis_mode:standalone</span><br><span class="line"># Redis 服务器的宿主操作系统</span><br><span class="line">os:Linux <span class="number">4.8</span><span class="number">.0</span>-<span class="number">1</span>-amd64 x86_64</span><br><span class="line"># 架构（32 或 64 位）</span><br><span class="line">arch_bits:<span class="number">64</span></span><br><span class="line"># Redis 所使用的事件处理机制</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line"># 编译 Redis 时所使用的 GCC 版本</span><br><span class="line">gcc_version:<span class="number">6.3</span><span class="number">.0</span></span><br><span class="line"># 服务器进程的 PID</span><br><span class="line">process_id:<span class="number">9941</span></span><br><span class="line"># Redis 服务器的随机标识符（用于 Sentinel 和集群）</span><br><span class="line">run_id:b770a8af038963f3d1b55358c2e376d0b5e00182</span><br><span class="line"># TCP/IP 监听端口</span><br><span class="line">tcp_port:<span class="number">6379</span></span><br><span class="line"># 自 Redis 服务器启动以来，经过的秒数</span><br><span class="line">uptime_in_seconds:<span class="number">1028993</span></span><br><span class="line"># 自 Redis 服务器启动以来，经过的天数</span><br><span class="line">uptime_in_days:<span class="number">11</span></span><br><span class="line">hz:<span class="number">10</span></span><br><span class="line"># 以分钟为单位进行自增的时钟，用于 LRU 管理</span><br><span class="line">lru_clock:<span class="number">10750613</span></span><br><span class="line">executable:/usr/local/bin/redis-server</span><br><span class="line">config_file:</span><br><span class="line"></span><br><span class="line"># Clients</span><br><span class="line"># 已连接客户端的数量（不包括通过从属服务器连接的客户端）</span><br><span class="line">connected_clients:<span class="number">4</span></span><br><span class="line"># 当前连接的客户端当中，最长的输出列表</span><br><span class="line">client_longest_output_list:<span class="number">0</span></span><br><span class="line"># 当前连接的客户端当中，最大输入缓存</span><br><span class="line">client_biggest_input_buf:<span class="number">0</span></span><br><span class="line"># 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量</span><br><span class="line">blocked_clients:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Memory</span><br><span class="line"># 由 Redis 分配器分配的内存总量，以字节（byte）为单位</span><br><span class="line">used_memory:<span class="number">154272800</span></span><br><span class="line"># 以人类可读的格式返回 Redis 分配的内存总量</span><br><span class="line">used_memory_human:<span class="number">147.13</span>M</span><br><span class="line"># 从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps等命令的输出一致。</span><br><span class="line">used_memory_rss:<span class="number">160612352</span></span><br><span class="line"># 以人类可读的格式返回</span><br><span class="line">used_memory_rss_human:<span class="number">153.17</span>M</span><br><span class="line"># Redis 的内存消耗峰值（以字节为单位）</span><br><span class="line">used_memory_peak:<span class="number">154319968</span></span><br><span class="line"># 以人类可读的格式返回 Redis 的内存消耗峰值</span><br><span class="line">used_memory_peak_human:<span class="number">147.17</span>M</span><br><span class="line"># 使用内存达到峰值内存的百分比，即(used_memory/ used_memory_peak) *100%</span><br><span class="line">used_memory_peak_perc:<span class="number">99.97</span>%</span><br><span class="line"># Redis为了维护数据集的内部机制所需的内存开销，包括所有客户端输出缓冲区、查询缓冲区、AOF重写缓冲区和主从复制的backlog</span><br><span class="line">used_memory_overhead:<span class="number">44082040</span></span><br><span class="line"># Redis服务器启动时消耗的内存</span><br><span class="line">used_memory_startup:<span class="number">510704</span></span><br><span class="line"># 数据占用的内存大小，即used_memory-used_memory_overhead</span><br><span class="line">used_memory_dataset:<span class="number">110190760</span></span><br><span class="line"># 数据占用的内存大小的百分比，100%*(used_memory_dataset/(used_memory-used_memory_startup))</span><br><span class="line">used_memory_dataset_perc:<span class="number">71.66</span>%</span><br><span class="line">allocator_allocated:<span class="number">154256264</span></span><br><span class="line">allocator_active:<span class="number">154550272</span></span><br><span class="line">allocator_resident:<span class="number">159731712</span></span><br><span class="line"># 整个系统内存</span><br><span class="line">total_system_memory:<span class="number">1044770816</span></span><br><span class="line"># 以更直观的格式显示整个系统内存</span><br><span class="line">total_system_memory_human:<span class="number">996.37</span>M</span><br><span class="line"># Lua脚本存储占用的内存</span><br><span class="line">used_memory_lua:<span class="number">37888</span></span><br><span class="line"># 以更直观的格式显示Lua脚本存储占用的内存</span><br><span class="line">used_memory_lua_human:<span class="number">37.00</span>K</span><br><span class="line"># Redis实例的最大内存配置</span><br><span class="line">maxmemory:<span class="number">0</span></span><br><span class="line"># 以更直观的格式显示Redis实例的最大内存配置</span><br><span class="line">maxmemory_human:<span class="number">0</span>B</span><br><span class="line"># 当达到maxmemory时的淘汰策略</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:<span class="number">1.00</span></span><br><span class="line">allocator_frag_bytes:<span class="number">294008</span></span><br><span class="line">allocator_rss_ratio:<span class="number">1.03</span></span><br><span class="line">allocator_rss_bytes:<span class="number">5181440</span></span><br><span class="line">rss_overhead_ratio:<span class="number">1.01</span></span><br><span class="line">rss_overhead_bytes:<span class="number">880640</span></span><br><span class="line"># 碎片率，used_memory_rss/ used_memory</span><br><span class="line">mem_fragmentation_ratio:<span class="number">1.04</span></span><br><span class="line">mem_fragmentation_bytes:<span class="number">6422528</span></span><br><span class="line"># 在编译时指定的， Redis 所使用的内存分配器。可以是 libc 、 jemalloc 或者 tcmalloc 。</span><br><span class="line">mem_allocator:jemalloc-<span class="number">4.0</span><span class="number">.3</span></span><br><span class="line">active_defrag_running:<span class="number">0</span></span><br><span class="line">lazyfree_pending_objects:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Persistence，RDB 持久化和 AOF 持久化有关信息</span><br><span class="line"># 一个标志值，记录了服务器是否正在载入持久化文件</span><br><span class="line">loading:<span class="number">0</span></span><br><span class="line"># 距离最近一次成功创建持久化文件之后，经过了多少秒</span><br><span class="line">rdb_changes_since_last_save:<span class="number">3813014</span></span><br><span class="line"># 一个标志值，记录了服务器是否正在创建 RDB 文件</span><br><span class="line">rdb_bgsave_in_progress:<span class="number">0</span></span><br><span class="line"># 最近一次成功创建 RDB 文件的 UNIX 时间戳</span><br><span class="line">rdb_last_save_time:<span class="number">1570002708</span></span><br><span class="line"># 一个标志值，记录了最近一次创建 RDB 文件的结果是成功还是失败</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line"># 记录了最近一次创建 RDB 文件耗费的秒数</span><br><span class="line">rdb_last_bgsave_time_sec:-<span class="number">1</span></span><br><span class="line"># 如果服务器正在创建 RDB 文件，那么这个域记录的就是当前的创建操作已经耗费的秒数</span><br><span class="line">rdb_current_bgsave_time_sec:-<span class="number">1</span></span><br><span class="line">rdb_last_cow_size:<span class="number">0</span></span><br><span class="line"># 一个标志值，记录了 AOF 是否处于打开状态</span><br><span class="line">aof_enabled:<span class="number">0</span></span><br><span class="line"># 一个标志值，记录了服务器是否正在创建 AOF 文件</span><br><span class="line">aof_rewrite_in_progress:<span class="number">0</span></span><br><span class="line"># 一个标志值，记录了在 RDB 文件创建完毕之后，是否需要执行预约的 AOF 重写操作</span><br><span class="line">aof_rewrite_scheduled:<span class="number">0</span></span><br><span class="line"># 最近一次创建 AOF 文件耗费的时长</span><br><span class="line">aof_last_rewrite_time_sec:-<span class="number">1</span></span><br><span class="line"># 如果服务器正在创建 AOF 文件，那么这个域记录的就是当前的创建操作已经耗费的秒数</span><br><span class="line">aof_current_rewrite_time_sec:-<span class="number">1</span></span><br><span class="line"># 一个标志值，记录了最近一次创建 AOF 文件的结果是成功还是失败</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Stats，一般统计信息</span><br><span class="line"># 服务器已接受的连接请求数量</span><br><span class="line">total_connections_received:<span class="number">96</span></span><br><span class="line"># 服务器已执行的命令数量</span><br><span class="line">total_commands_processed:<span class="number">8700000</span></span><br><span class="line"># 服务器每秒钟执行的命令数量</span><br><span class="line">instantaneous_ops_per_sec:<span class="number">11</span></span><br><span class="line">total_net_input_bytes:<span class="number">710523330</span></span><br><span class="line">total_net_output_bytes:<span class="number">109073206</span></span><br><span class="line">instantaneous_input_kbps:<span class="number">1.04</span></span><br><span class="line">instantaneous_output_kbps:<span class="number">0.32</span></span><br><span class="line">rejected_connections:<span class="number">0</span></span><br><span class="line">sync_full:<span class="number">0</span></span><br><span class="line">sync_partial_ok:<span class="number">0</span></span><br><span class="line">sync_partial_err:<span class="number">0</span></span><br><span class="line"># 因为过期而被自动删除的数据库键数量</span><br><span class="line">expired_keys:<span class="number">13569</span></span><br><span class="line">expired_stale_perc:<span class="number">0.00</span></span><br><span class="line">expired_time_cap_reached_count:<span class="number">0</span></span><br><span class="line">#  因为最大内存容量限制而被驱逐（evict）的键数量</span><br><span class="line">evicted_keys:<span class="number">0</span></span><br><span class="line"># 查找数据库键成功的次数</span><br><span class="line">keyspace_hits:<span class="number">1911035</span></span><br><span class="line"># 查找数据库键失败的次数</span><br><span class="line">keyspace_misses:<span class="number">749427</span></span><br><span class="line"># 目前被订阅的频道数量</span><br><span class="line">pubsub_channels:<span class="number">0</span></span><br><span class="line"># 目前被订阅的模式数量</span><br><span class="line">pubsub_patterns:<span class="number">0</span></span><br><span class="line"># 最近一次 fork() 操作耗费的毫秒数</span><br><span class="line">latest_fork_usec:<span class="number">0</span></span><br><span class="line">migrate_cached_sockets:<span class="number">0</span></span><br><span class="line">slave_expires_tracked_keys:<span class="number">0</span></span><br><span class="line">active_defrag_hits:<span class="number">0</span></span><br><span class="line">active_defrag_misses:<span class="number">0</span></span><br><span class="line">active_defrag_key_hits:<span class="number">0</span></span><br><span class="line">active_defrag_key_misses:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Replication，主/从复制信息</span><br><span class="line"># 服务器角色</span><br><span class="line">role:master</span><br><span class="line"># 已连接的从服务器数量</span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">33f</span>9e49948d61df7fa02e315ecff02bbc3b2c9aa</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">0</span></span><br><span class="line">second_repl_offset:-<span class="number">1</span></span><br><span class="line">repl_backlog_active:<span class="number">0</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">0</span></span><br><span class="line">repl_backlog_histlen:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># CPU</span><br><span class="line">used_cpu_sys:<span class="number">925.48</span></span><br><span class="line">used_cpu_user:<span class="number">3467.41</span></span><br><span class="line">used_cpu_sys_children:<span class="number">0.00</span></span><br><span class="line">used_cpu_user_children:<span class="number">0.00</span></span><br><span class="line"></span><br><span class="line"># Cluster</span><br><span class="line">cluster_enabled:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Keyspace</span><br><span class="line">db0:keys=<span class="number">876234</span>,expires=<span class="number">3</span>,avg_ttl=<span class="number">204565882</span></span><br></pre></td></tr></table></figure><hr><p>注解摘自<a href="https://www.cnblogs.com/sjshare/p/11671338.html" target="_blank" rel="noopener">原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven打包命令</title>
      <link href="/blog/2020/03/04/maven%E6%89%93%E5%8C%85%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2020/03/04/maven%E6%89%93%E5%8C%85%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：420,阅读全文大约需要1分钟</p><h1 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h1><p><code>mvn clean package</code>依次执行了<code>clean</code>、<code>resources</code>、<code>compile</code>、<code>testResources</code>、<code>testCompile</code>、<code>test</code>、<code>jar</code>(打包)等７个阶段。<br><code>mvn clean install</code>依次执行了<code>clean</code>、<code>resources</code>、<code>compile</code>、<code>testResources</code>、testCompile、test、jar(打包)、install等8个阶段。<br><code>mvn clean deploy</code>依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install、deploy等９个阶段。</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>package命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库<br>install命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库<br>deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis入门</title>
      <link href="/blog/2020/03/04/redis%E5%85%A5%E9%97%A8/"/>
      <url>/blog/2020/03/04/redis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：872,阅读全文大约需要3分钟</p><blockquote><p>Redis是一款开源免费（BSD协议）高性能的key-value数据库</p></blockquote><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol><li>支持数据持久化</li><li>支持<code>list</code>,<code>set</code>,<code>zset</code>,<code>hash</code>等数据结构</li><li>支持数据备份，<code>master-slave</code>（主从）模式</li><li>其它如<code>publish</code>/<code>subscribe</code>，通知，<code>key</code>过期等</li><li>原子性操作</li><li>高性能</li></ol><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><blockquote><p><code>Redis</code>支持五种数据类型:<code>string</code>(字符串)、<code>hash</code>(哈希)、<code>list</code>(列表)、<code>set</code>(集合)、<code>zset</code>(sorted set有序集合)</p></blockquote><ol><li><code>string</code>字符串<br>这是最基本的类型，一个key对应一个value。二进制安全，及string可包含任何数据(图片、对象等)。最大存储512MB。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 键name 值zhangsan</span><br><span class="line">redis:0&gt; SET name &quot;zhangsan&quot;</span><br><span class="line">OK</span><br><span class="line">redis:0&gt; GET name</span><br><span class="line">&quot;zhangsan&quot;</span><br></pre></td></tr></table></figure></li><li><code>Hash</code>哈希<br><code>Redis hash</code>是一个键值对组合，<code>field-&gt;value</code>映射表。适合存储对象<blockquote><p>先使用<code>DEL keyName</code>删除上一个测试的key,防止报错<code>WRONGTYPE Operation against a key holding the wrong kind of value</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt; DEL name</span><br><span class="line">redis:0 &gt; HMSET myhash field1 &quot;value1&quot; field2 &quot;value2&quot;</span><br><span class="line">OK</span><br><span class="line">redis:0&gt; HGET myhash field1</span><br><span class="line">&quot;value1&quot;</span><br><span class="line">redis:0&gt; HGET myhash field2</span><br><span class="line">&quot;value2&quot;</span><br></pre></td></tr></table></figure><code>HMSET</code>设置 <code>field-&gt;value</code>对，<code>HGET</code>获取<code>hash</code>上的<code>field</code>对应的<code>value</code><br>每个hash可以存2^32 -1个键值对（40多亿）</li><li><code>List</code>列表<br>字符串列表，按照插入顺序排序。可以在头部（左边）或者尾部（右边）添加。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt; lpush myList string1 #开头插入string1</span><br><span class="line">(integer)1 #返回index</span><br><span class="line">redis:0&gt; lpush myList string2 # 开头再插入一个</span><br><span class="line">(integer)2</span><br><span class="line">redis:0&gt; lrange myList 0 5 # 返回0-5位置之间的元素</span><br><span class="line">1) &quot;string1&quot;</span><br><span class="line">2) &quot;string2&quot;</span><br></pre></td></tr></table></figure></li><li><code>Set</code>集合<br><code>string</code>的无序集合，通过哈希表实现，删改查复杂度都是o(1)。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt; sadd mySet value1 #向集合mySet插入一条数据value1</span><br><span class="line">(integer)1 # 插入成功返回1</span><br><span class="line">redis:0&gt; sadd mySet value1</span><br><span class="line">(integer)0 # 如果value存在则不插入，返回0</span><br><span class="line">redis:0&gt; smembers mySet # 输出所有</span><br><span class="line">1) &quot;value1&quot;</span><br></pre></td></tr></table></figure></li><li><code>zset</code>(sorted set)有序集合<br>和set一样是string类型的元素集合，不能重复。但是每个元素都绑定一个double类型的分数，并通过分数排序。分数可重复。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt; zadd myZset 0 value1 # 向myZset中插入分数为0的value1元素</span><br><span class="line">(integer)1 # 成功插入一条</span><br><span class="line">redis:0&gt; zadd myZset 1 value2 # 插入分数为1的数据</span><br><span class="line">redis:0&gt;zrangebyscore myZset 0 100</span><br><span class="line">1) value1</span><br><span class="line">2) value2</span><br></pre></td></tr></table></figure><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><p>打开本地客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli # 打开客户端</span><br><span class="line">redis:0&gt;ping # 检测服务是否启动</span><br><span class="line">PONG #结果</span><br></pre></td></tr></table></figure><p>远程服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># host地址 port端口 password密码</span><br><span class="line">$ redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h1 id="键管理"><a href="#键管理" class="headerlink" title="键管理"></a>键管理</h1><p>命令格式:<code>COMMAND命令 KEY_NAME键名</code></p><ol><li><code>DEL key</code>存在key时删除key</li><li><code>DUMP key</code>序列化key,返回被序列化的值</li><li><code>EXISTS key</code>检测key是否存在</li><li><code>EXPIRE key seconds</code>设置过期时间(秒)</li><li><code>EXPIREAT key timestamp</code>设置过期时间(时间戳)</li><li><code>PEXPIRE key milliseconds</code>毫秒计过期时间</li><li><code>PEXPIREAT key milliseconds-timestamp</code>设置过期时间为毫秒的时间戳</li><li><code>KEYS pattern</code>查找符合规则的key<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KEYS * # 匹配所有</span><br><span class="line">KEYS h?llo # 匹配hello hallo 等</span><br><span class="line">KEYS h*llo # 匹配hello haallo hllo等</span><br><span class="line">KEYS h[ae]llo # 匹配hello或hallo</span><br></pre></td></tr></table></figure></li><li><code>MOVE key db</code>将当前数据库的key移动到指定db中</li><li><code>PERSIST key</code>移除过期时间</li><li><code>PTTL key</code> 毫秒单位返回剩余过期时间</li><li><code>TTL key</code>以秒为单位返回剩余生存时间</li><li><code>RANDOMKEY</code>从当前数据库中随机返回一个key</li><li><code>RENAME key newkey</code>重命名</li><li><code>RENAMENX key newkey</code>不存在<code>newkey</code>时将<code>key</code>改名为<code>newkey</code></li><li><code>TYPE key</code>返回key存储的值类型</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis其它使用</title>
      <link href="/blog/2020/03/04/redis%E5%85%B6%E5%AE%83%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/03/04/redis%E5%85%B6%E5%AE%83%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：510,阅读全文大约需要2分钟</p><h1 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h1><p>用来统计基数个数的算法，优点在于输入元素数量或体积非常大的情况下计算使用的空间总是固定的。<br>基数:集合中不重复的元素，即去重之后的元素。</p><ul><li><code>PFADD key element [element...]</code>添加指定元素到HyperLogLog中</li><li><code>PFCOUNT key [key...]</code>返回给定HyperLogLog的基数估算值。</li><li><code>PFMERGE destkey sourcekey [sourcekey]</code>将多个HyperLogLog合并成为一个</li></ul><h1 id="redis发布与订阅"><a href="#redis发布与订阅" class="headerlink" title="redis发布与订阅"></a>redis发布与订阅</h1><p>消息通讯模式，又有两个角色。发送者(pub),订阅者(sub)。一个订阅者可以订阅多个频道。<br>频道即一个redis</p><ul><li><code>PSUBSCRIBE pattern [pattern...]</code>订阅一个或多个符合给定模式的频道</li><li><code>PUBSUB &lt;subcommand&gt; [argument [argument ...]]</code>查看订阅与发布系统状态</li><li><code>PUBLISH channek message</code>将消息发sing给指定频道。</li><li><code>PUNSUBSCRIBE pattern [pattern...]</code>订阅改定的一个或者多个频道</li><li><code>SUBSCRIBE channel [channel...]</code>订阅给定的一个或多个频道</li><li><code>UNSUBSCRIBE [chnanel [chnanel...]]</code>退订指定的频道</li></ul><h1 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h1><p>redis的弹条命令是原子性的，但是事务并没有原子性的特点。更像是一个命令打包。<br>过程：开启事务，输入若干命令，执行。<br>执行过程中不会插入其它命令<br>执行过程中命令出错不会影响到其它的命令</p><ul><li><code>DISCARD</code> 取消事务，放弃执行事务块中的所有命令</li><li><code>EXEC</code>执行所有事务块内的命令</li><li><code>MULTI</code>标记一个事务块的开始</li><li><code>UNWATCH</code>取消WATCH命令对key的监视</li><li><code>WATCH key [key...]</code>监视一个或多个key，如果事务执行前这些key有改变，那么事务将被打断</li></ul><h1 id="在java中的使用"><a href="#在java中的使用" class="headerlink" title="在java中的使用"></a>在java中的使用</h1><p>环境:<code>jedis.jar</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisJava</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务正在运行: "</span>+jedis.ping());<span class="comment">//PONG</span></span><br><span class="line">   <span class="comment">//string</span></span><br><span class="line">        jedis.set(<span class="string">"xxx"</span>, <span class="string">"asfsf"</span>);</span><br><span class="line">        <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">        System.out.println(<span class="string">"redis 存储的字符串为: "</span>+ jedis.get(<span class="string">"xxx"</span>));</span><br><span class="line">   <span class="comment">//List</span></span><br><span class="line">        <span class="comment">//存入</span></span><br><span class="line">        jedis.lpush(<span class="string">"site-list"</span>, <span class="string">"xcascasc"</span>);</span><br><span class="line">        <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">        List&lt;String&gt; list = jedis.lrange(<span class="string">"site-list"</span>, <span class="number">0</span> ,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//key</span></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">"*"</span>); </span><br><span class="line">        Iterator&lt;String&gt; it=keys.iterator() ;   </span><br><span class="line">        <span class="comment">//遍历所有的key</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;   </span><br><span class="line">            String key = it.next();   </span><br><span class="line">            System.out.println(key);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redis基本数据类型</title>
      <link href="/blog/2020/03/04/redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/blog/2020/03/04/redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1909,阅读全文大约需要7分钟</p><blockquote><p>redis的五大基本类型操作</p></blockquote><h1 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h1><p>命令格式: <code>COMMAND命令 KEY_NAME键名 [值]</code></p><ol><li><code>SET key value</code>指定key的值</li><li><code>GET key</code>获取key的值</li><li><code>GETRANGE key start end</code>获取key中字符串的子字符串</li><li><code>GETSET key value</code>指定key的新值，返回旧值。</li><li><code>GETBIT key offset</code>对key所存储的字符串指定偏移量上的位(bit) 0/1</li><li><code>MGET key1 [key2]</code>获取一个/多个key的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt;mget name name2</span><br><span class="line">1) asbx</span><br><span class="line">2) sgsg</span><br></pre></td></tr></table></figure></li><li><code>SETBIT key offset value</code>对key所存储的字符串的值，设置或清除指定偏移量上的位(bit)</li><li><code>SETEX key seconds value</code>设置key的值为value，过期时间seconds(秒)</li><li><code>SETNX key value</code>key不存在时设置key的值。</li><li><code>SETRANGE key offset value</code>用value覆盖key存储的字符串，从偏移量offset开始。</li><li><code>STRLEN key</code>返回key所存储的字符串长度</li><li><code>MSET key value [key value...]</code>同时设置多个键值对</li><li><code>MSETNX key value [key value...]</code>key都不存在时设置对应的value值</li><li><code>PSETEX key milliseconds value</code>设置<code>key</code>的值为<code>value</code>并且生存时间<code>milliseconds</code>(毫秒)</li><li><code>INCR key</code>key中存储的数字值+1(不是数字会报错)</li><li><code>INCRBY key increment</code>增加指定数量</li><li><code>INCRBYFLOAT key increment</code>增加指定浮点数值</li><li><code>DECR key</code>将key中存储的数字-1</li><li><code>DECRBY key decrement</code>将key中的值减去指定量</li><li><code>APPEND key value</code>如果key存在，将value追加到原有值末尾</li></ol><h1 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h1><p><code>field</code>=&gt;<code>value</code>的映射表</p><ol><li><code>HDEL key field1 [field2]</code>删除一个或多个哈希表字段。</li><li><code>HEXISTS key field</code>查看哈希表key中，指定的字段是否存在。</li><li><code>HGET key field</code>获取存储在哈希表中的字段的值。</li><li><code>HGETALL key</code>获取在哈希表中指定key的所有字段和值</li><li><code>HINCRBY key field increment</code>为哈希表key的指定字段的整数值加上增量increment</li><li><code>HINCRBYFLOAT key field increment</code>为哈希表key中指定字段的浮点数值加上increment</li><li><code>HKEYS key</code>获取所有哈希表中的字段</li><li><code>HLEN key</code>获取哈希表中字段的数量</li><li><code>HMGET key field1 [field2]</code>获取所有给定的值</li><li><code>HMSET key field1 value1 [field2 value2]</code>同时将多个field-value设置到哈希表key中</li><li><code>HSET key field value</code>将哈希表的key中的字段field的值设置为value</li><li><code>HSETNX key field value</code>只有字段field不存在时，设置哈希表字段的值。</li><li><code>HVALS key</code>从哈希表中获取所有的值</li><li><code>HSCAN key cursor [MARCH pattern] [COUNT count]</code>迭代器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 0参数位是游标位置，当游标为0的时候开始新的一轮迭代</span><br><span class="line">hscan key 0 match xxx* count 100</span><br></pre></td></tr></table></figure><h1 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h1></li><li><code>BLPOP key1 [key2] timeout</code>移除并获取列表的第一个元素，如果列表没有元素会阻塞列表。直到等待超时或发现可弹出元素。</li><li><code>BRPOP key1 [key2] timeout</code>移除并获取列表最后一个元素，如果列表没有元素会阻塞直到超时或发现可弹出元素。</li><li><code>BRPOPLPUSH source destination timeout</code>从列表中弹出一个值，将弹出的元素插入到另一个列表并返回它；如果列表没有元素会阻塞明知道超时或有可弹出元素</li><li><code>LINDEX key index</code>通过索引获取列表中的元素</li><li><code>LINSERT key BEFORE|AFTER pivot value</code>在列表<code>key</code>的元素<code>pivot</code>前或后插入另一个元素。</li><li><code>LLEN key</code>获取列表长度</li><li><code>LPOP key</code>移除并获取列表的第一个元素</li><li><code>LPUSH key value1 [value2]</code>将一个值插入到已存在的列表头部</li><li><code>LPUSHX key value</code>插入到已存在的列表头，返回列表长度</li><li><code>LRANGE key start stop</code>获取列表指定范围的元素</li><li><code>LREM key count value</code>移除列表元素</li><li><code>LSET key index value</code>通过索引设置元素的值</li><li><code>LTRIM key start stop</code>对于一个列表进行修剪，删除不在指定区域的值</li><li><code>RPOP key</code>移除列表的最后一个元素，返回。</li><li><code>RPOPLPUSH source destination</code>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</li><li><code>RPUSH key value1 [value2]</code>在列表中添加一个或多个值</li><li><code>RPUSHX key value</code>为已存在的列表添加值<h1 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h1>集合是基于hash的String类型的无序集合，集合成员是唯一的。</li><li><code>SADD key member1 [member2]</code>向集合添加一个或多个成员</li><li><code>SCARD key</code>获取集合的成员数</li><li><code>SDIFF key1 [key2]</code>返回差集，即第一个集合中其它集合没有的元素。</li><li><code>SDIFFSTORE destination key1 [key2]</code>返回给定的所有集合的差集存储在destination中</li><li><code>SINTER key1 [key2]</code>返回给定所有集合的交集</li><li><code>SINTERSTORE destination key1 [key2]</code>返回给定所有集合的交集存储在destination中</li><li><code>SISMEMBER key member</code>判断member集合元素是否是集合key的成员</li><li><code>SMEMBERS key</code>返回集合中的所有成员</li><li><code>SMOVE source destination member</code>将member元素从source集合移动到destination集合</li><li><code>SPOP key</code>移除并返回集合中的一个随机元素</li><li><code>SRANDMEMBER key [count]</code>返回集合中一个或多个随机数</li><li><code>SREM key member1 [member2]</code>移除集合中一个或多个成员</li><li><code>SUNION key1 [key2]</code>返回所有给定集合的并集</li><li><code>SUNIONSTORE destination key1 [key2]</code>所有给定集合的并集存储在destination集合中</li><li><code>SSCAN key cursor [MARCH pattern] [COUNT count]</code>迭代集合中元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sscan myset1 0 match h*</span><br></pre></td></tr></table></figure><h1 id="有序集合-sorted-set"><a href="#有序集合-sorted-set" class="headerlink" title="有序集合(sorted set)"></a>有序集合(sorted set)</h1>有顺序的set，通过分数排序</li><li><code>ZADD key score1 member1 [score2 member2]</code>向有序集合添加一个或多个成员，或者更新已存在成员的分数。</li><li><code>ZCARD key</code>获取有序集合成员数</li><li><code>ZCOUNT key min max</code>计算在有序集合中指定区间分数的成员数</li><li><code>ZINCRBY key increment member</code>有序集合中对指定成员的分数加上增量increment</li><li><code>ZINTERSTORE destination numkeys key [key...]</code>计算给定的有序集合交集，保存结果到新的有序集合key</li><li><code>ZLEXCOUNT key min max</code>有序集合中计算指定字典区间内成员数</li><li><code>ZRANGE key start stop [WITHSCORES]</code>通过索引区间返回有序集合指定区间内的成员</li><li><code>ZRANGEBYLEX key min max [LIMIT offset count]</code>通过字典区间返回有序集合成员，输出集合</li><li><code>ZRANGEBYSCORE key min max [withscore] [limit]</code>通过分数返回有序集合指定区间内的成员</li><li><code>ZRANK key member</code>返回有序集合中指定成员的索引</li><li><code>ZREM key member [member...]</code>移除有序集合中的一个或多个成员</li><li><code>ZREMRANGEBYLEX key min max</code>移除有序集合中给定的字典区间的所有成员。</li><li><code>ZREMRANGEBYRANK key start stop</code>移除有序集合中给定排名区间的所有成员</li><li><code>ZREMRANGEBYSCORE key min max</code>移除有序集合中给定的分数区间的所有成员</li><li><code>ZREVRANGE key start stop [WITHSCORES]</code>返回有序集中指定区间内的成员，通过索引，分数从高到底</li><li><code>ZREVRANGEBYSCORE key max min [WITHSCORES]</code>返回有序集中指定分数区间内的成员，分数从高到低排序</li><li><code>ZREVRANK key member</code>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</li><li><code>ZSCORE key member</code>返回有序集合中，成员的分数</li><li><code>ZUNIONSTORE destination numkeys key [key ...]</code>计算给定的一个或多个有序集的并集，并存储在新的 key 中</li><li><code>ZSCAN key cursor [MATCH pattern] [COUNT count]</code>迭代有序集合中的元素（包括元素成员和元素分值）</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Arrays-asList不能add</title>
      <link href="/blog/2020/03/04/Arrays-asList%E4%B8%8D%E8%83%BDadd/"/>
      <url>/blog/2020/03/04/Arrays-asList%E4%B8%8D%E8%83%BDadd/</url>
      
        <content type="html"><![CDATA[<p>文章字数：77,阅读全文大约需要1分钟</p><blockquote><p>Arrays.asList将数组转换成列表，但是Arrays.asList返回的List是一个匿名内部类，而不是ArrayList。</p></blockquote><p>可以使用set代替add</p><h1 id="内部ArrayList的源码"><a href="#内部ArrayList的源码" class="headerlink" title="内部ArrayList的源码"></a>内部ArrayList的源码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"> </span><br><span class="line">        ArrayList(E[] array) &#123;</span><br><span class="line">            a = Objects.requireNonNull(array);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.length;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">            <span class="keyword">return</span> a.clone();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = size();</span><br><span class="line">            <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(<span class="keyword">this</span>.a, size,</span><br><span class="line">                                     (Class&lt;? extends T[]&gt;) a.getClass());</span><br><span class="line">            System.arraycopy(<span class="keyword">this</span>.a, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">            <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">                a[size] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a[index];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">            E oldValue = a[index];</span><br><span class="line">            a[index] = element;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            E[] a = <span class="keyword">this</span>.a;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                    <span class="keyword">if</span> (a[i] == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                    <span class="keyword">if</span> (o.equals(a[i]))</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterators.spliterator(a, Spliterator.ORDERED);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(action);</span><br><span class="line">            <span class="keyword">for</span> (E e : a) &#123;</span><br><span class="line">                action.accept(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(operator);</span><br><span class="line">            E[] a = <span class="keyword">this</span>.a;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                a[i] = operator.apply(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">            Arrays.sort(a, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot上传一直为空</title>
      <link href="/blog/2020/03/04/springBoot%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%9B%B4%E4%B8%BA%E7%A9%BA/"/>
      <url>/blog/2020/03/04/springBoot%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%9B%B4%E4%B8%BA%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：153,阅读全文大约需要1分钟</p><blockquote><p>ajax提交json数据，springBoot使用有相同类型的实体类接收，但是实体类属性全部是空。最后通过前端F12查看发送的数据，发现发送的是json字符串，而不是键值对形式。原来是我在前端多了一步转换对象为json字符串的操作。。。低级错误。。</p></blockquote><p>正确的代码结构：<br>前端提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var formdata&#x3D;&#123;&#125;;</span><br><span class="line">formdata.name&#x3D;&#39;xxx&#39;;</span><br><span class="line">formdata.pwd&#x3D;&#39;zzz&#39;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">            data: formdata,</span><br><span class="line">            dataType: &quot;json&quot;,</span><br><span class="line">            type: &quot;post&quot;,</span><br><span class="line">            url: &quot;&#x2F;log&quot;,</span><br><span class="line">            success: function(result) &#123;</span><br><span class="line">                console.log(result)</span><br><span class="line">            &#125;,</span><br><span class="line">            error: function(result) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>springBoot:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public Mes add(User u，@RequestParam(&quot;other&quot;) String other)&#123;&#x2F;&#x2F;除了实体类里的信息外指定name获取其他信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中，User实体类应该完全包含前端发送的json（formdata）的所有属性，否则可能会出错。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot整合的Junit4单元测试</title>
      <link href="/blog/2020/03/04/springBoot%E6%95%B4%E5%90%88%E7%9A%84Junit4%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/blog/2020/03/04/springBoot%E6%95%B4%E5%90%88%E7%9A%84Junit4%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：355,阅读全文大约需要1分钟</p><blockquote><p>spring提供了<code>org.springframework.test</code>这个对于JUnit简单封装的框架，可以在spring搭建的项目上方便的进行单元测试。</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>自动创建的项目默认添加，底层默认使用<code>Junit4</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)//设置启动器</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span></span>=&#123;Application<span class="class">.<span class="keyword">class</span>&#125;)//指定启动类</span></span><br><span class="line"><span class="class">//@<span class="title">SpringApplicationConfiguration</span>(<span class="title">classes</span></span>=Application<span class="class">.<span class="keyword">class</span>)//1.4.0之前版本</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ApplicationTests</span></span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//..测试内容</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsser</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//JUnit4.1.2后Assert过时，TestCase.assertEquals成为替代</span></span><br><span class="line">      <span class="comment">//(期望结果,条件语句)</span></span><br><span class="line">      <span class="comment">//("提示",true,条件语句)</span></span><br><span class="line">      TestCase.assertEquals(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">testBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//测试前执行</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@After</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">testAfter</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//测试结束后</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JUnit基本注解使用"><a href="#JUnit基本注解使用" class="headerlink" title="JUnit基本注解使用"></a>JUnit基本注解使用</h1><ol><li><code>@BeforeClass</code>在所有测试方法前执行一次，一般是初始化</li><li><code>@AfterClass</code>在所有测试方法后执行一次</li><li><code>@Before</code>每个测试方法执行前执行，一般用于初始化或者重置数据</li><li><code>@After</code>每个测试方法执行之后执行</li><li><code>@Test(timeout = 1000)</code>测试方法超过1000毫秒后算是超时，测试失败</li><li><code>@Test(expected = Exception.class)</code>测试方法期望得到的异常类，如果方法执行没有抛出指定异常，测试失败。</li><li><code>@Ignore(&quot;not redy yet&quot;)</code>执行测试时忽略此方法/类</li><li><code>@Test</code>一般测试用例</li><li><code>@RunWith</code>选择Runner调试代码，不同Runner有各自的功能。如果只是普通的java程序，忽略<code>@RunWith</code>。</li></ol><blockquote><p>整理自<a href="https://blog.csdn.net/fxbin123/article/details/80617754" target="_blank" rel="noopener">原文</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot集成graphql</title>
      <link href="/blog/2020/03/04/springBoot%E9%9B%86%E6%88%90graphql/"/>
      <url>/blog/2020/03/04/springBoot%E9%9B%86%E6%88%90graphql/</url>
      
        <content type="html"><![CDATA[<p>文章字数：387,阅读全文大约需要1分钟</p><blockquote><p><code>graphql</code>是一个结构化查询语言，对应的传统方式是<code>rest api</code>。</p></blockquote><h1 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h1><ol><li><p>和<code>rest api</code>一样，<code>graphql</code>主要是为了满足前后端交互需求而产生的一种规范。</p></li><li><p>不同的是<code>rest api</code>在创建时就指定了接收的参数以及返回的数据格式，而<code>graphql</code>则可以根据前端使用的不同的传入参数返回之前可能需要好多个<code>rest api</code>才能返回的数据。</p></li></ol><p><code>rest api</code>获取信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取id为1的人员信息</span><br><span class="line">GET &#x2F;person&#x2F;1</span><br></pre></td></tr></table></figure><p><code>graphql</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 获取id为1的人员的firstName</span><br><span class="line">&#123;</span><br><span class="line">    person(id:1)&#123;</span><br><span class="line">        firstName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>graphql</code>能够指定信息的输出，以及输出格式。<br>比如后端有学生，班级两部分信息。</p><ul><li><code>rest api</code>获取信息只能根据前端需求，传入能够定位到对象的信息（如id）然后再放回指定的信息格式。仅需要学生名字和需要所有信息的接口需要分开写。</li><li><code>graphql</code>则只用把通过id获取对象的方法给<code>graphql</code>框架，前端通过<code>graphql</code>查询语言就能够在指定的范围内查询数据并且指定输出的格式。</li></ul><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><ol><li><p>基于 <code>spring-boot</code> 2.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure></li><li><p>引入依赖</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.graphql-java&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;graphql-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.graphql-java&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;graphql-java-tools&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol><li>定义服务入口</li></ol><p>即有哪些内容可以操作</p><p>resource/graphql/root.graphqls</p><p><code>Query</code>查询入口<br><code>Mutation</code>修改入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">    findAllAuthors: [Author]!</span><br><span class="line">    countAuthors: Long!</span><br><span class="line">    findOneAuthor(id: Long!): Author</span><br><span class="line"></span><br><span class="line">    findAllBooks: [Book]!</span><br><span class="line">    countBooks: Long!</span><br><span class="line">&#125;</span><br><span class="line">type Mutation &#123;</span><br><span class="line">    newAuthor(firstName: String!, lastName: String!) : Author!</span><br><span class="line"></span><br><span class="line">    newBook(title: String!, isbn: String!, pageCount: Int, authorId: Long!) : Book!</span><br><span class="line">    saveBook(input: BookInput!): Book!</span><br><span class="line">    deleteBook(id: ID!) : Boolean</span><br><span class="line">    updateBookPageCount(pageCount: Int!, id: Long!) : Book!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resource/graphql/scheme.graphqls</p><p>具体的字段定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type Author &#123;</span><br><span class="line">    id: Long!</span><br><span class="line">    createdTime: String</span><br><span class="line">    firstName: String</span><br><span class="line">    lastName: String</span><br><span class="line">    books: [Book]</span><br><span class="line">&#125;</span><br><span class="line">input BookInput &#123;</span><br><span class="line">    title: String!</span><br><span class="line">    isbn: String!</span><br><span class="line">    pageCount: Int</span><br><span class="line">    authorId: Long</span><br><span class="line">&#125;</span><br><span class="line">type Book &#123;</span><br><span class="line">    id: Long!</span><br><span class="line">    title: String!</span><br><span class="line">    isbn: String!</span><br><span class="line">    pageCount: Int</span><br><span class="line">    author: Author</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>对于定义的入口规则实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query</span> <span class="keyword">implements</span> <span class="title">GraphQLQueryResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AuthorRepository authorRepository;</span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Author <span class="title">findOneAuthor</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Author&gt; opt = authorRepository.findById(id);</span><br><span class="line">        <span class="keyword">return</span> opt.isPresent() ? opt.get() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Author&gt; <span class="title">findAllAuthors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authorRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">countAuthors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authorRepository.count();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAllBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">countBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义了的Query都要实现</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot开启https</title>
      <link href="/blog/2020/03/04/springBoot%E5%BC%80%E5%90%AFhttps/"/>
      <url>/blog/2020/03/04/springBoot%E5%BC%80%E5%90%AFhttps/</url>
      
        <content type="html"><![CDATA[<p>文章字数：433,阅读全文大约需要1分钟</p><blockquote><p>开启<code>https</code>可以有效防止中间人攻击。原理是使用非对称加密，连接双方加密的信息只能用对方的秘钥解密。<code>CA</code>颁发的证书还能够保证服务器证书不是被伪造的。</p></blockquote><h1 id="自己生成证书"><a href="#自己生成证书" class="headerlink" title="自己生成证书"></a>自己生成证书</h1><p>这种证书可以保证加密连接，但是黑客可以自己生成一个和我们域名一样的证书，并使用<code>DNS</code>劫持，将域名绑定到自己的<code>ip</code>上。使用<code>CA</code>颁发的证书可以解决这种问题。</p><ol><li>使用<code>jdk</code>自带的命令生成证书</li></ol><ul><li><code>keytool -genkeypair -alias tomcat -keyalg RSA -keystore E:\tomcat.key</code>完整命令</li><li><code>-alias tomcat</code>别名为tomcat</li><li><code>-keyalg RSA</code>使用RSA非对称加密</li><li><code>-keystore E:\tomcat.key</code>生成后保存位置</li></ul><ol start="2"><li>其它命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias tomcat  -storetype PKCS12 -keyalg RSA -keysize 2048  -keystore keystore.p12 -validity 3650</span><br><span class="line"></span><br><span class="line">1.-storetype 指定密钥仓库类型</span><br><span class="line">2.-keyalg 生证书的算法名称，RSA是一种非对称加密算法</span><br><span class="line">3.-keysize 证书大小</span><br><span class="line">4.-keystore 生成的证书文件的存储路径</span><br><span class="line">5.-validity 证书的有效期</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>配置<code>application.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 路径</span><br><span class="line"># server.ssl.key-store: classpath:tomcat.key</span><br><span class="line">server.ssl.key-store&#x3D;tomcat.key</span><br><span class="line">server.ssl.keyStoreType&#x3D;JKS</span><br><span class="line">server.ssl.key-alias&#x3D;tomcat</span><br><span class="line"># 生成的时候输入的</span><br><span class="line">server.ssl.key-store-password&#x3D;password123</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用CA的证书"><a href="#使用CA的证书" class="headerlink" title="使用CA的证书"></a>使用CA的证书</h1><ol><li>阿里云腾讯云之类的都有，购买证书后下载。</li><li>下载后解压，复制<code>Tomcat</code>文件夹中的<code>.jks</code>文件到资源目录，和配置文件同级</li><li>查看证书相关信息<code>keytool -list -keystore server.p12</code></li><li>配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.port: 8092</span><br><span class="line">server.ssl.key-store&#x3D; classpath:server.jks</span><br><span class="line"># 密码在文件夹中的txt中</span><br><span class="line">server.ssl.key-store-password&#x3D;你的密码</span><br><span class="line"># .jks证书的类型，还有一个是PKCS12，需要用crt生成</span><br><span class="line">server.ssl.keyStoreType &#x3D; JKS</span><br></pre></td></tr></table></figure><h1 id="配置Http转发到Https"><a href="#配置Http转发到Https" class="headerlink" title="配置Http转发到Https"></a>配置Http转发到Https</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatEmbeddedServletContainerFactory tomcat = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint constraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                constraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                constraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(constraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connector <span class="title">httpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        <span class="comment">//Connector监听的http的端口号</span></span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//监听到http的端口号后转向到的https的端口号</span></span><br><span class="line">        connector.setRedirectPort(<span class="number">8092</span>);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springCloud组件基本作用</title>
      <link href="/blog/2020/03/04/springCloud%E7%BB%84%E4%BB%B6%E5%9F%BA%E6%9C%AC%E4%BD%9C%E7%94%A8/"/>
      <url>/blog/2020/03/04/springCloud%E7%BB%84%E4%BB%B6%E5%9F%BA%E6%9C%AC%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1168,阅读全文大约需要4分钟</p><blockquote><p>Spring Cloud的组件有很多，主要记录常用的核心组件的使用场景及原理</p></blockquote><h1 id="一、Eureka"><a href="#一、Eureka" class="headerlink" title="一、Eureka"></a>一、Eureka</h1><blockquote><p>Eureka是微服务架构的注册中心，负责服务的注册与发现。</p></blockquote><ol><li><p><code>使用场景</code>: 微服务架构的各个服务系统部分可能分布在多台机器上，Eureka的作用就是使各个服务直接能够相互调用。</p></li><li><p><code>原理</code>: 每个服务中都集成了一个<code>Eureka Client</code>组件，这个组件负责将当前服务信息发送到<code>Eureka Server</code>中。<code>Eureka Server</code>是注册中心，保存了各个服务的地址信息。各组件可以通过<code>Eureka Client</code>获取其它服务的地址信息，并进行请求。</p></li></ol><h1 id="二、Feign"><a href="#二、Feign" class="headerlink" title="二、Feign"></a>二、Feign</h1><blockquote><p>Feign是一个动态代理，利用aop将连接其它服务，发送网络请求，判断返回值，接收结果等一系列动作封装好。</p></blockquote><ol><li><p><code>使用场景</code>: 调用其它微服务的服务时，接口上使用注解<code>@FeignClient</code>就能创建出一个相关服务的动态代理。接口中声明需要调用的微服务方法，地址等信息。业务中直接调用此接口，Feign就能自动完成远程调用该服务。</p></li><li><p><code>原理</code>: 首先创建一个接口，规范调用的方法。接口上声明<code>@FeignClient</code>并传入服务名，Feign就能通过Eureka获取到该服务的位置。接口方法声明的<code>RequestMapping</code>等和SpringMVC相同的注解则可以定位到方法的具体位置，方法的声明则指定了远程方法的具体格式。最后利用aop将这些动作封装起来。</p></li></ol><h1 id="三、Ribbon"><a href="#三、Ribbon" class="headerlink" title="三、Ribbon"></a>三、Ribbon</h1><blockquote><p>客户端负载均衡，区别于<code>Nginx</code>的服务端负载均衡。客户端负载均衡是访问者（消费者）决定如何访问服务。默认负载均衡算法是轮询算法，一个服务有多台机器上运行时按顺序每次请求分发到各个服务器上。</p></blockquote><ol><li><p><code>使用场景</code>: 当访问量特别大的时候，一台机器无法满足访问需求。这个时候就可以搭建多台机器，所有的机器都运行同一个服务。这些服务运行之后都会注册到注册中心。消费端访问服务时就可以使用<code>Ribbon</code>将访问量平摊到这些机器上。</p></li><li><p><code>原理</code>: 首先从<code>Eureka Server</code>上获取服务注册表，找到服务部署在那些机器上，监听那个端口。然后使用内置算法选出一台机器。最后使用<code>Feign</code>构造并发起请求。</p></li></ol><h1 id="四、Hystrix"><a href="#四、Hystrix" class="headerlink" title="四、Hystrix"></a>四、Hystrix</h1><blockquote><p>隔离、熔断、降级的框架。主要用于服务挂了，导致其它服务未接收相应也卡住。</p></blockquote><ol><li><p><code>使用场景</code>: 防止一个服务挂了之后其它访问的服务也产生连锁反应，保存挂了的服务在重启时间内的被访问数据。</p></li><li><p><code>原理</code>: 首先是<strong>隔离</strong>，<code>Hystrix</code>使用很多独立的线程池分割不同的服务，其中一个服务不可能占用所有的线程并影响其他服务。其次是<strong>熔断</strong>，检测到服务无法访问，这个针对服务的访问请求在特定时间内会直接返回。这样就不用到超时才返回。最后是<strong>降级</strong>，每次有请求访问已经挂了的服务就会向数据库中插入一条信息，记录访问的详细情况。方便在服务恢复之后手动恢复宕机期间的数据。</p></li></ol><h1 id="五、Zuul"><a href="#五、Zuul" class="headerlink" title="五、Zuul"></a>五、Zuul</h1><blockquote><p>微服务网关，根据请求的特征将请求分发到相应的服务中。</p></blockquote><ol><li><p><code>使用场景</code>: 方便前端，安卓设备等访问服务。后端程序的调用可以使用<code>Eureka</code>，前端则需要一个统一的入口。有了统一的入口之后降级，限流，认证授权，安全等都可以统一处理。</p></li><li><p><code>原理</code>: 根据请求的特征分发到相应的微服务中。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springMVC-Request-method-&#39;POST&#39;-not-supported</title>
      <link href="/blog/2020/03/04/springMVC-Request-method-&#39;POST&#39;-not-supported/"/>
      <url>/blog/2020/03/04/springMVC-Request-method-&#39;POST&#39;-not-supported/</url>
      
        <content type="html"><![CDATA[<p>文章字数：137,阅读全文大约需要1分钟</p><blockquote><p>请求被拦截都会报这个错，前端报错405 Method not allowed。版本问题，springMVC可能隐藏部分报错信息</p></blockquote><blockquote><p>部分信息spring没有显示出来的可以看这里，而我的问题是url写错了一个字母。</p></blockquote><p>查看详细信息：</p><ul><li>进入springMVC核心sevelt<code>DispatcherServlet.java</code></li><li>在核心方法<code>doDispatch</code>的异常抛出处打断点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">catch(Exception ex)&#123;</span><br><span class="line">  dispatchException &#x3D; ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><em>debug处ex-&gt;detailMessage=”详细信息”*</em></li></ul><p>问题排查步骤：</p><ol><li>url是否正确</li><li>访问方法是否正确</li><li>发送的数据和接收的数据类型是否匹配</li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring反射工具</title>
      <link href="/blog/2020/03/04/spring%E5%8F%8D%E5%B0%84%E5%B7%A5%E5%85%B7/"/>
      <url>/blog/2020/03/04/spring%E5%8F%8D%E5%B0%84%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：396,阅读全文大约需要1分钟</p><blockquote><p><code>ReflectionUtils</code>是<code>spring</code>针对反射提供的工具类。</p></blockquote><h1 id="handleReflectionException异常处理"><a href="#handleReflectionException异常处理" class="headerlink" title="handleReflectionException异常处理"></a>handleReflectionException异常处理</h1><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleReflectionException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> NoSuchMethodException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Method not found: "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> IllegalAccessException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not access method: "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> InvocationTargetException) &#123;</span><br><span class="line">        handleInvocationTargetException((InvocationTargetException) ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (RuntimeException) ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是将反射中的异常分成几个部分，规范化输出</p><ul><li><code>boolean declaresException(Method method, Class&lt;?&gt; exceptionType)</code><br>判断方法上是否声明了指定的异常类型</li></ul><h1 id="findField查找字段"><a href="#findField查找字段" class="headerlink" title="findField查找字段"></a>findField查找字段</h1><ul><li><code>Field findField(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</code></li></ul><p>查找指定类的指定名称和指定类型的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">findField</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; searchType = clazz;</span><br><span class="line">    <span class="keyword">while</span> (Object<span class="class">.<span class="keyword">class</span> !</span>= searchType &amp;&amp; searchType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Field[] fields = getDeclaredFields(searchType);</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((name == <span class="keyword">null</span> || name.equals(field.getName())) &amp;&amp;</span><br><span class="line">                    (type == <span class="keyword">null</span> || type.equals(field.getType()))) &#123;</span><br><span class="line">                <span class="keyword">return</span> field;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        searchType = searchType.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取所有的方法，然后循环遍历，知道找到满足条件的返回<br>其中<code>getDeclaredFields(searchType)</code>方法使用<code>ConcurrentReferenceHashMap</code>将<code>Field</code>缓存，并优先从缓存中取。</p><ul><li><code>Field findField(Class&lt;?&gt; clazz, String name)</code></li></ul><h1 id="设置字段setField"><a href="#设置字段setField" class="headerlink" title="设置字段setField"></a>设置字段setField</h1><ul><li><code>void setField(Field field, Object target, Object value)</code>设置指定字段的值<br>直接使用<code>Field.set/get</code>方法，然后格式化处理了异常</li><li><code>Object getField(Field field, Object target)</code>获取指定字段的值</li></ul><h1 id="查找方法findMethod"><a href="#查找方法findMethod" class="headerlink" title="查找方法findMethod"></a>查找方法findMethod</h1><ul><li><p><code>Method findMethod(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... paramTypes)</code><br>查找方法，方法的参数是一个可变长的<code>Class</code></p></li><li><p><code>Method findMethod(Class&lt;?&gt; clazz, String name)</code>直接查，不指定参数</p></li></ul><h1 id="调用方法invokeMethod"><a href="#调用方法invokeMethod" class="headerlink" title="调用方法invokeMethod"></a>调用方法invokeMethod</h1><ul><li><p><code>Object invokeMethod(Method method, Object target, Object... args)</code>调用方法</p></li><li><p><code>Object invokeMethod(Method method, Object target)</code>简单版本</p></li></ul><h1 id="判断类"><a href="#判断类" class="headerlink" title="判断类"></a>判断类</h1><ul><li><p><code>boolean declaresException(Method method, Class&lt;?&gt; exceptionType)</code><br>方法上是否声明了指定的异常</p></li><li><p><code>boolean isPublicStaticFinal(Field field)</code><br>判断字段首付是<code>public static final</code>的</p></li><li><p><code>boolean isEqualsMethod(Method method)</code><br>判断方法是否是<code>equals</code>方法</p></li><li><p><code>boolean isHashCodeMethod(Method method)</code><br>判断方法是否是<code>hashcode</code>方法</p></li><li><p><code>boolean isToStringMethod(Method method)</code><br>判断方法是否是<code>toString</code>方法</p></li><li><p><code>boolean isObjectMethod(Method method)</code><br>判断方法是否是<code>Object</code>类上的方法</p></li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul><li><p><code>void makeAccessible(Field field)</code><br>使私有的字段可写</p></li><li><p><code>void makeAccessible(Method method)</code><br>私有方法可调用</p></li><li><p><code>void makeAccessible(Constructor&lt;?&gt; ctor)</code><br>私有构造器可调用</p></li><li><p><code>void doWithLocalMethods(Class&lt;?&gt; clazz, MethodCallback mc)</code><br>遍历类上的方法，并执行回调</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodCallback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doWith</span><span class="params">(Method method)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>void doWithMethods(Class&lt;?&gt; clazz, MethodCallback mc, MethodFilter mf)</code><br>增加了一个方法过滤器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring定时任务修改系统时间后未生效</title>
      <link href="/blog/2020/03/04/spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%90%8E%E6%9C%AA%E7%94%9F%E6%95%88/"/>
      <url>/blog/2020/03/04/spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%90%8E%E6%9C%AA%E7%94%9F%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>文章字数：196,阅读全文大约需要1分钟</p><blockquote><p>使用<code>ScheduledThreadPoolExecutor</code>创建定时任务</p></blockquote><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><ol><li>创建定时任务之后修改系统时间，以自测定时任务是否执行。发现未执行</li><li>不修改系统时间则正常</li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li><p><code>DelegatingErrorHandlingRunnable.class</code>可以看到每次执行之后才会使用延时创建下一个时段的任务。所以即使是<code>cron</code>表达式创建的定时任务指定了下一次执行时间后就和系统时间没有关联了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public ScheduledFuture&lt;?&gt; schedule() &#123;</span><br><span class="line">synchronized (this.triggerContextMonitor) &#123;</span><br><span class="line">this.scheduledExecutionTime &#x3D; this.trigger.nextExecutionTime(this.triggerContext);</span><br><span class="line">if (this.scheduledExecutionTime &#x3D;&#x3D; null) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">long initialDelay &#x3D; this.scheduledExecutionTime.getTime() - System.currentTimeMillis();</span><br><span class="line">this.currentFuture &#x3D; this.executor.schedule(this, initialDelay, TimeUnit.MILLISECONDS);</span><br><span class="line">return this;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">Date actualExecutionTime &#x3D; new Date();</span><br><span class="line">super.run();</span><br><span class="line">Date completionTime &#x3D; new Date();</span><br><span class="line">synchronized (this.triggerContextMonitor) &#123;</span><br><span class="line">this.triggerContext.update(this.scheduledExecutionTime, actualExecutionTime, completionTime);</span><br><span class="line">if (!this.currentFuture.isCancelled()) &#123;</span><br><span class="line">schedule();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>只能先修改时间再创建定时任务就可以解决问题。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring自动注入为null</title>
      <link href="/blog/2020/03/04/spring%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E4%B8%BAnull/"/>
      <url>/blog/2020/03/04/spring%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E4%B8%BAnull/</url>
      
        <content type="html"><![CDATA[<p>文章字数：290,阅读全文大约需要1分钟</p><blockquote><p>写了一个工具类，并且使用<code>Spring</code>注入了一个<code>Service</code>但是使用的时候返回<code>null</code>。</p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>如果是找不到类应该在启动的时候报错，但是知道运行时才报空指针（@Autowired默认required = true）</li><li>spring是在启动的时候扫描文件，将相应注解的<code>bean</code>保存，然后再统一注入</li><li>我的工具类是使用反射生成的实例，所以新的实例中没有注入的<code>bean</code></li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class BeanFactoryTest implements ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    private ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        this.applicationContext&#x3D;applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ApplicationContext getApplicationContext() &#123;</span><br><span class="line">        return applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动获取bean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BlogService blogService&#x3D;beanFactoryTest.getApplicationContext().getBean(BlogService.class);</span><br></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>使用注入的类如果不是spring管理的注入也没有效果，即只有在<code>bean</code>中才能使用<code>bean</code></p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue+axios+tp5错误</title>
      <link href="/blog/2020/03/04/vue+axios+tp5%E9%94%99%E8%AF%AF/"/>
      <url>/blog/2020/03/04/vue+axios+tp5%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：95,阅读全文大约需要1分钟</p><blockquote><p>已拦截跨源请求：同源策略禁止读取位于 <a href="http://101.132.138.141:8888/service/pageUsers" target="_blank" rel="noopener">http://101.132.138.141:8888/service/pageUsers</a> 的远程资源。（原因：CORS 头缺少 ‘Access-Control-Allow-Origin’）。</p></blockquote><p>axios跨域带上cookie，axios session消失</p><blockquote><p>vue的main.js 加上<code>axios.defaults.withCredentials = true;</code></p></blockquote><p>解决方法</p><blockquote><p>withCredentials的情况下，后端要设置Access-Control-Allow-Origin为你的源地址，例如<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080，不能是*，而且还要设置header(‘Access-Control-Allow-Credentials: true’);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>validate验证不通过确提交了</title>
      <link href="/blog/2020/03/04/validate%E9%AA%8C%E8%AF%81%E4%B8%8D%E9%80%9A%E8%BF%87%E7%A1%AE%E6%8F%90%E4%BA%A4%E4%BA%86/"/>
      <url>/blog/2020/03/04/validate%E9%AA%8C%E8%AF%81%E4%B8%8D%E9%80%9A%E8%BF%87%E7%A1%AE%E6%8F%90%E4%BA%A4%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：258,阅读全文大约需要1分钟</p><blockquote><p>js的表单验证工具validate，设置了<code>debug:true</code>（仅验证不提交）和<code>submitHandler</code>（处理提交的函数）结果还是提交了，并且验证失败也会提交</p></blockquote><h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/xxx"</span> id=<span class="string">'submitId'</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">"name"</span> name=<span class="string">"name"</span> type=<span class="string">"txt"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">&lt;button onclick="javascript:document.getElementById('submitId').submit()"&gt;ok&lt;button/</span>&gt;</span><br></pre></td></tr></table></figure><p>为了样式好调，我用<code>form.submit()</code>提交了表单，这样的操作似乎跳过了验证阶段。</p><h1 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/xxx"</span> id=<span class="string">'submitId'</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">"name"</span> name=<span class="string">"name"</span> type=<span class="string">"txt"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> style=<span class="string">"display:none"</span> id=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">&lt;button onclick="javascript:document.getElementById('submit').click()"&gt;ok&lt;button/</span>&gt;</span><br></pre></td></tr></table></figure><p>修改成点击input提交就可以了</p><h1 id="其它注意点"><a href="#其它注意点" class="headerlink" title="其它注意点"></a>其它注意点</h1><ol><li>多次提交<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过id选中表单并提交</span></span><br><span class="line">submitHandler:<span class="function"><span class="keyword">function</span> (<span class="params">form</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"#submitId"</span>).submit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这样会一直提交表单，造成stack溢出</li></ol><p>修改点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接用入参提交表单</span></span><br><span class="line">submitHandler:<span class="function"><span class="keyword">function</span> (<span class="params">form</span>) </span>&#123;</span><br><span class="line">  form.submit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sql类型不匹配</title>
      <link href="/blog/2020/03/04/sql%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%8C%B9%E9%85%8D/"/>
      <url>/blog/2020/03/04/sql%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>文章字数：55,阅读全文大约需要1分钟</p><blockquote><p>报错 <code>No operator matches the given name and argument type(s). You might need to add explicit type casts.</code><br>  <code>operator does not exist: character varying = integer.</code></p></blockquote><p>传入的值和数据库类型不匹配</p><p>错误查询语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">0</span>) <span class="keyword">FROM</span> TBNAME t <span class="keyword">WHERE</span>  t.TABLE_TYPE = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>原因：<code>table_type</code>的类型是<strong>字符串</strong>类型，<code>1</code>是<strong>数值</strong>类型</p><p>修改后:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">0</span>) <span class="keyword">FROM</span> TBNAME t <span class="keyword">WHERE</span>  t.TABLE_TYPE = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">0</span>) <span class="keyword">FROM</span> TBNAME t <span class="keyword">WHERE</span>  t.TABLE_TYPE =<span class="number">1</span>::<span class="built_in">varchar</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>xxx-is-not-a-function-at-HTMLInputElement-onchange</title>
      <link href="/blog/2020/03/04/xxx-is-not-a-function-at-HTMLInputElement-onchange/"/>
      <url>/blog/2020/03/04/xxx-is-not-a-function-at-HTMLInputElement-onchange/</url>
      
        <content type="html"><![CDATA[<p>文章字数：43,阅读全文大约需要1分钟</p><blockquote><p>之前可以使用的界面突然报错：enabledis not a function at HTMLInputElement.onchange</p></blockquote><p>我的错误是name和方法名相同，冲突了。<br>id和方法名也可能冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;enable&quot; onchange&#x3D;&quot;enabled(this.checked)&quot;&gt;</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;yyy&quot; onchange&#x3D;&quot;enabledChange(this.checked)&quot;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>x-content-type-options</title>
      <link href="/blog/2020/03/04/x-content-type-options/"/>
      <url>/blog/2020/03/04/x-content-type-options/</url>
      
        <content type="html"><![CDATA[<p>文章字数：73,阅读全文大约需要1分钟</p><blockquote><p>设置<code>script</code>和<code>styleSheet</code>通过<code>MIME</code>类型过滤不安全的文件</p></blockquote><p>当服务器响应头<code>X-Content-Type-Options: nosniff</code>则<code>script</code>和<code>styleSheet</code>元素会过滤非指定的<code>MIME</code>文件</p><h1 id="stylesheet"><a href="#stylesheet" class="headerlink" title="stylesheet"></a>stylesheet</h1><p><code>stylesheet</code>标签只会加载以下<code>MIME</code>类型的文件</p><ul><li><code>text/css</code></li></ul><h1 id="script"><a href="#script" class="headerlink" title="script"></a>script</h1><p><code>script</code>标签只会加载以下<code>MIME</code>类型的文件</p><ul><li><code>application/ecmascript</code></li><li><code>application/javascript</code></li><li><code>application/x-javascript</code></li><li><code>text/ecmascript</code></li><li><code>text/javascript</code></li><li><code>text/jscript</code></li><li><code>text/x-javascript</code></li><li><code>text/vbs</code></li><li><code>text/vbscript</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>响应式编程</title>
      <link href="/blog/2020/03/04/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/blog/2020/03/04/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：199,阅读全文大约需要1分钟</p><blockquote><p>响应式编程有三个组成部分 变化传递<code>propagation of change</code>、 数据流<code>data stream</code>、 申明式<code>declarative</code>。</p></blockquote><h1 id="变化传递-propagation-of-change"><a href="#变化传递-propagation-of-change" class="headerlink" title="变化传递(propagation of change)"></a>变化传递(propagation of change)</h1><p>  在响应式编程中，一个模块数据产生变动，相应模块的数据也会变化。(vue的数据绑定)<br>  生产者生成发送 数据/事件，消费者监听并负责处理数据变化传递的方式。</p><h1 id="数据流-data-stream"><a href="#数据流-data-stream" class="headerlink" title="数据流(data stream)"></a>数据流(data stream)</h1><p>  响应式编程中的数据是以数据流的形式发出的，相应的方法监听数据流，对于数据流的元素一次处理。</p><h1 id="声明式-declarative"><a href="#声明式-declarative" class="headerlink" title="声明式(declarative)"></a>声明式(declarative)</h1><p>  数据流中说到的监听数据流的方法中对于数据流应该如何处理的定义就是声明。预先定义好将如何对数据流进行处理就是声明式。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>去掉console-log程序执行异常</title>
      <link href="/blog/2020/03/04/%E5%8E%BB%E6%8E%89console-log%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%BC%82%E5%B8%B8/"/>
      <url>/blog/2020/03/04/%E5%8E%BB%E6%8E%89console-log%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：110,阅读全文大约需要1分钟</p><blockquote><p>怀疑人生，去掉输出程序执行错误(时好时坏)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把密码加密再提交表单</span></span><br><span class="line"><span class="keyword">var</span> md5Pwd=hex_md5(pwd);</span><br><span class="line"> $(<span class="string">"#password"</span>).val(md5Pwd);</span><br><span class="line">$(<span class="string">'#form'</span>)[<span class="number">0</span>].submit();</span><br></pre></td></tr></table></figure><p>原来提交之前输出md5字符串的值，之后去掉了。结果提交的密码就成了明文？？？</p><h1 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h1><p>可能加密或者val()存在异步操作，程序直接进入下一步。</p><h1 id="暂时解决办法"><a href="#暂时解决办法" class="headerlink" title="暂时解决办法"></a>暂时解决办法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> md5Pwd=hex_md5(pwd);</span><br><span class="line">        $(<span class="string">"#password"</span>).val(md5Pwd);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#forgotPwdForm'</span>)[<span class="number">0</span>].submit();</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>实体类复制</title>
      <link href="/blog/2020/03/04/%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%A4%8D%E5%88%B6/"/>
      <url>/blog/2020/03/04/%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：52,阅读全文大约需要1分钟</p><blockquote><p>apache的BeanUtils.copyProperties（from,to）可以实现实体类属性复制，但是空属性不会忽略。在网上找到了一种方法可以忽略空属性</p></blockquote><p>忽略空属性的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static String[] getNullPropertyNames (Object source) &#123;</span><br><span class="line">        final BeanWrapper src &#x3D; new BeanWrapperImpl(source);</span><br><span class="line">        java.beans.PropertyDescriptor[] pds &#x3D; src.getPropertyDescriptors();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; emptyNames &#x3D; new HashSet&lt;String&gt;();</span><br><span class="line">        for(java.beans.PropertyDescriptor pd : pds) &#123;</span><br><span class="line">            Object srcValue &#x3D; src.getPropertyValue(pd.getName());</span><br><span class="line">            if (srcValue &#x3D;&#x3D; null) emptyNames.add(pd.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        String[] result &#x3D; new String[emptyNames.size()];</span><br><span class="line">        return emptyNames.toArray(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void copyPropertiesIgnoreNull(Object src, Object target)&#123;</span><br><span class="line">        BeanUtils.copyProperties(src, target, getNullPropertyNames(src));</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;使用</span><br><span class="line">BeanUtils.copyProperties(examLifeStyle, examDetail, getNullPropertyNames(examLifeStyle));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用开源协议选择</title>
      <link href="/blog/2020/03/04/%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E9%80%89%E6%8B%A9/"/>
      <url>/blog/2020/03/04/%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<p>文章字数：82,阅读全文大约需要1分钟</p><blockquote><p>不同的开源协议对于软件使用者所拥有的权利有不同的阐述，根据使用需求选择不同的开源协议</p></blockquote><h1 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h1><p><img src="https://upload-images.jianshu.io/upload_images/17243965-a6cf1f6e4d237cbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="07112930_4iFX.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/blog/2020/03/04/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/blog/2020/03/04/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：217,阅读全文大约需要1分钟</p><blockquote><p>冒泡排序的思想就是将所有的元素和边上其它元素比较，按照比对结果替换位置。（如果比后一个元素大就替换位置，继续和下一个比）本质上是大的向后移动，小的向前移动。</p></blockquote><p>时间复杂度 o(n^2)</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length - <span class="number">1</span> ; i++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> - i ; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>如果已经是顺序数组，就不要进行后面的遍历了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span> ; i++ )&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isSort = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> - i ; j++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                isSort = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isSort)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/blog/2020/03/04/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/blog/2020/03/04/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：257,阅读全文大约需要1分钟</p><blockquote><p>基数排序适用于整形排序，将数据按照位数切割成不同的数字，按照权重依次桶排序。</p></blockquote><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>第一次排序，位数最大的在后面，小的在前面。<br>第二次排序十位上的大的向后<br>第三次百位大的向后<br>…<br>越在后面进行的排序作用就越大，因为可以推翻之前的排序结果。位数越靠前代表的值也越大，所以从个位开始到最高位。</p><p>本质上是桶排序的增强版，不需要那么多的桶。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前排序位置</span></span><br><span class="line">    <span class="keyword">int</span> location = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//桶列表</span></span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//长度为10 装入余数0-9的数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        bucketList.add(<span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断是否排完</span></span><br><span class="line">        <span class="keyword">int</span> dd = (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>，(location - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(max &lt; dd)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据入桶</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算余数 放入相应的桶</span></span><br><span class="line">            <span class="keyword">int</span> number = ((arr[i] / dd) % <span class="number">10</span>);</span><br><span class="line">            bucketList.get(number).add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写回数组</span></span><br><span class="line">        <span class="keyword">int</span> nn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> size = bucketList.get(i).size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">0</span>;ii &lt; size;ii ++)&#123;</span><br><span class="line">                arr[nn++] = bucketList.get(i).get(ii);</span><br><span class="line">            &#125;</span><br><span class="line">            bucketList.get(i).clear();</span><br><span class="line">        &#125;</span><br><span class="line">        location++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>回文子串算法</title>
      <link href="/blog/2020/03/04/%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E7%AE%97%E6%B3%95/"/>
      <url>/blog/2020/03/04/%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：360,阅读全文大约需要1分钟</p><blockquote><p>回文子串指的是从前向后和从后向前读是一样的字符串，比如<code>abba</code>或者<code>abcba</code>。</p></blockquote><h1 id="暴力获取法"><a href="#暴力获取法" class="headerlink" title="暴力获取法"></a>暴力获取法</h1><p>以下是我自己写的，思路如下：</p><ol><li>获取可能是回文子串的字符串</li><li>判断是否是回文子串</li></ol><p>实现是：</p><ol><li>用一个循环遍历所有字符</li><li>再嵌套一个循环，从反方向循环，找到一样的值<br>（左右相同就可能是回文子串）</li><li>判断字符串是否是回文子串，用个循环遍历其中的内容。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> longsLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> longsRight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] args = s.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - maxLength; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args[i] == args[j]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isPalindrome(s.substring(i, j + <span class="number">1</span>))) &#123;</span><br><span class="line">                        <span class="keyword">int</span> longs = j - i + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span> (longs &gt; maxLength) &#123;</span><br><span class="line">                            longsLeft = i;</span><br><span class="line">                            longsRight = j;</span><br><span class="line">                            maxLength = longs;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s.substring(longsLeft, longsRight + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] args = arg.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = args.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] != args[j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度<code>O(n^3)</code><br>为了直观，现将<code>String</code>转成<code>char[]</code>再操作，多占了内存。将<code>char[]</code>的操作改成直接操作<code>String</code>可以达到空间复杂度<code>O(1)</code></p><h1 id="中心扩散法"><a href="#中心扩散法" class="headerlink" title="中心扩散法"></a>中心扩散法</h1><p>在<code>leetcode</code>官方讲解中看到的一个解决方法，时间复杂度<code>O(n^2)</code>，空间复杂度<code>O(1)</code></p><p>思路：<br>每个回文子串都有个中心，<code>abba</code>的中心就是<code>bb</code>。<code>abcba</code>的中心是<code>c</code>。<br>通过中心向外扩散，即可得到整个回文子串。</p><p>实现</p><ol><li>循环遍历每个元素（每两个）</li><li>以每个元素为中心，向两边遍历，直到不相同即为回文子串长度</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = expandAroundCenter(s, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                end = i + len / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = left, R = right;</span><br><span class="line">        <span class="keyword">while</span> (L &gt;= <span class="number">0</span> &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) &#123;</span><br><span class="line">            L--;</span><br><span class="line">            R++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/blog/2020/03/04/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/blog/2020/03/04/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：905,阅读全文大约需要3分钟</p><blockquote><p>快速排序的思想就是把第一个数作为基数，比基数小的放到前面，比基数大或等于的放到基数后面。然后再对基数以前和基数以后的部分分别进行前面的操作，直到基数前面和基数后面都只有一个数时（左侧游标和右侧游标相遇）</p></blockquote><p>时间复杂度<code>O(N*logN)</code></p><h1 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h1><p>调用：</p><ol><li>写一个用于整理区域的方法</li><li>递归调用，整理所有的部分（整理当前，的到基数位置，递归整理基数之前的区域，递归整理基数之后的区域）</li></ol><p>整理方法：</p><ol><li>选第一位为基数</li><li>右游标从前找比基数小的数，放到左游标处(左右游标的位置上都没有值，因为一旦选中某个元素，就意味着这个元素不符合要求，需要放到另一边)</li><li>左游标向后找比基数大的数，放到右游标的位置。</li><li>循环2，3操作，知道左右游标相遇，这个位置就是基数应该放在的地方</li><li>返回基数的位置，方便上面的递归调用时判断基数前后区域</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">midTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayTheList</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="comment">//选中第一位作为基数</span></span><br><span class="line">        <span class="keyword">int</span> x = arr[l];</span><br><span class="line">        <span class="comment">//左和右的游标遇到时结束</span></span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">            <span class="comment">//右游标移动到小于基数的值上</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;arr[r]&gt;=x)&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//放到左边游标的位置上（相当于从右边找不符合要求的数，全部放到左边）</span></span><br><span class="line">            <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">                arr[l]=arr[r];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//左边找不符合要求的数，放到右边</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;arr[l]&lt;=x)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">                arr[r]=arr[l];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当左边游标和右边游标相同时这个位置填充基数</span></span><br><span class="line">        arr[l]=x;</span><br><span class="line">        <span class="comment">//返回基数位置</span></span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[]arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归的结束条件</span></span><br><span class="line">        <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="comment">//1.整理当前区域，返回基数位置</span></span><br><span class="line">            <span class="keyword">int</span> i = arrayTheList(arr,l,r);</span><br><span class="line">            <span class="comment">//2.整理基数左边的区域</span></span><br><span class="line">            quick_sort(arr,l,i-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//3.整理基数右边的区域</span></span><br><span class="line">            quick_sort(arr,i+<span class="number">1</span>,r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr=&#123;<span class="number">21</span>,<span class="number">35</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">98</span>,<span class="number">4</span>,<span class="number">95</span>,<span class="number">1</span>,<span class="number">60</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">123</span>,<span class="number">3</span>,<span class="number">654</span>,<span class="number">484</span>,<span class="number">34</span>,<span class="number">5235</span>,<span class="number">68</span>,<span class="number">455</span>,<span class="number">834</span>,<span class="number">568</span>,<span class="number">3458</span>,<span class="number">56</span>,<span class="number">31</span>,<span class="number">69</span>,<span class="number">55</span>,<span class="number">349</span>,<span class="number">582</span>,<span class="number">1</span>,<span class="number">97</span>,<span class="number">35</span>,<span class="number">95</span>,<span class="number">84</span>,<span class="number">8492</span>,<span class="number">2</span>,<span class="number">546</span>,<span class="number">475</span>,<span class="number">354</span>&#125;;</span><br><span class="line">        midTest t = <span class="keyword">new</span> midTest();</span><br><span class="line">        <span class="comment">//调用排序</span></span><br><span class="line">        t.quick_sort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">            System.out.print(i);</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span>(index!=arr.length)&#123;</span><br><span class="line">                System.out.print(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,0,1,1,2,2,2,2,2,2,3,4,4,4,5,6,7,8,14,21,31,34,35,35,55,56,60,68,69,84,95,95,97,98,123,349,354,455,475,484,546,568,582,654,834,3458,5235,8492</span><br></pre></td></tr></table></figure><h1 id="基于栈的快速排序"><a href="#基于栈的快速排序" class="headerlink" title="基于栈的快速排序"></a>基于栈的快速排序</h1><p>上面的使用的是递归，递归如果深度过深可能会造成<code>jvm</code>栈空间不足。所以修改了一下调用的方法，改为使用先进后出的数据结构<code>stack</code>,和递归效果一样，但是每次的函数执行完就退出，不会像递归那样不关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] values = &#123;<span class="number">1</span>, <span class="number">23</span>, <span class="number">51</span>, <span class="number">24</span>, <span class="number">124</span>, <span class="number">15</span>, <span class="number">124</span>, <span class="number">15123</span>, <span class="number">114</span>, <span class="number">4</span>, <span class="number">564</span>, <span class="number">42</span>, <span class="number">5</span>, <span class="number">434</span>, <span class="number">3434</span>, <span class="number">344</span>, <span class="number">444</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">90</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>,</span><br><span class="line">            <span class="number">54</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">43</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">743</span>, <span class="number">24</span>, <span class="number">514</span>, <span class="number">5</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        sortArray(values, <span class="number">0</span>, values.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : values) &#123;</span><br><span class="line">            System.out.print(v + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用区域排序，并把基准点左右区域的排序任务入栈</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dealArrayAndAddToStack</span><span class="params">(<span class="keyword">int</span>[] args, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> baseIndex = sort(args, l, r);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l &lt; baseIndex - <span class="number">1</span>) &#123;</span><br><span class="line">            Node leftNode = <span class="keyword">new</span> Node(l, baseIndex - <span class="number">1</span>);</span><br><span class="line">            stack.push(leftNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (baseIndex + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line">            Node rightNode = <span class="keyword">new</span> Node(baseIndex + <span class="number">1</span>, r);</span><br><span class="line">            stack.push(rightNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序调度</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortArray</span><span class="params">(<span class="keyword">int</span>[] args, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        dealArrayAndAddToStack(args, l, r);</span><br><span class="line">        <span class="comment">// 任务出栈</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            Node currentNode = stack.pop();</span><br><span class="line">            dealArrayAndAddToStack(args, currentNode.left, currentNode.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区域排序</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] args, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> base = args[l];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; args[r] &gt;= base) &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                args[l] = args[r];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; args[l] &lt;= base) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                args[r] = args[l];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        args[l] = base;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> left;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微服务业务监控</title>
      <link href="/blog/2020/03/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%9A%E5%8A%A1%E7%9B%91%E6%8E%A7/"/>
      <url>/blog/2020/03/04/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%9A%E5%8A%A1%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：781,阅读全文大约需要3分钟</p><blockquote><p>在业务中收集需要的数据，并且进行处理和展示的架构。业务中收集数据的工作被称为<code>埋点</code>，一般使用日志的方式进行。</p></blockquote><h1 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h1><ol><li><p>微服务日志埋点：使用日志输出框架，例如<code>Logback</code></p></li><li><p>日志收集：收集<code>Logback</code>输出的日志，使用<code>FileBeat</code></p></li></ol><p>2.1 消息队列传输：这里可以使用消息队列减轻日志解析压力</p><ol start="3"><li><p>数据解析，落盘：将<code>Logback</code>传来的数据格式化成可用的格式如<code>json</code>，然后生成<code>ElasticSearch</code>分片格式并发送（落盘）</p></li><li><p>数据使用：<code>ElasticSearch</code>收到后就可以提供查询服务，供使用者获取信息</p></li><li><p>数据展示：使用<code>Kibana</code>展示数据</p></li></ol><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><h2 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h2><ol><li><p>数据埋点：数据埋点就是将需要的数据在业务中抽离出来，一般使用日志框架就可以了<code>Logback</code>。也可以自己输出成文件。</p></li><li><p>格式：输出的格式需要统一，例如</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &#123;时间&#125;|&#123;来源&#125;|&#123;对象id&#125;|&#123;类型&#125;|&#123;对象属性(以&amp;分割)&#125;</span><br><span class="line">2019-11-07 10:32:01|api-gateway|1|request-statistics|ip&#x3D;171.221.203.106&amp;browser&#x3D;CHROME&amp;operatingSystem&#x3D;WINDOWS_10</span><br></pre></td></tr></table></figure><ol start="3"><li>埋点输出位置：需要和日志文件分开，使用单独的目录。<code>Logback</code>的配置就可以实现</li></ol><h2 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h2><ol><li>日志收集中间件有很多，<code>FileBeat</code>、<code>Flume</code>、<code>Fluentd</code>、<code>rsyslog</code>等</li><li>每台服务器需要部署一个收集中间件，即使一个服务器部署了多个微服务也可以只部署一个收集中间件。</li><li>收集到的信息可以通过消息队列的方式发送给下一个处理环节，使用消息队列可以增加并发性能，削峰填谷，减轻压力。也可以同时发送给多个系统，使数据有多个用途。</li></ol><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><ol><li>使用<code>Logstash</code>的<code>grok</code>表达式可以解析日志数据，并且格式化。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-11-07 10:32:01|api-gateway|1|request-statistics|ip&#x3D;171.221.203.106&amp;browser&#x3D;CHROME&amp;operatingSystem&#x3D;WINDOWS_10</span><br></pre></td></tr></table></figure><p>格式化后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">timestamp: &#39;2019-11-07 10:32:01&#39;,</span><br><span class="line">appName: &#39;api-gateway&#39;,</span><br><span class="line">resouceid: &#39;1&#39;,</span><br><span class="line">type: &#39;request-statistics&#39;,</span><br><span class="line">ip: &#39;171.221.203.106&#39;,</span><br><span class="line">browser: &#39;CHROME&#39;,</span><br><span class="line">operatingSystem: &#39;WINDOWS_10&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Logstash</code>还能完成数据落盘功能，自动创建<code>Elasticsearch</code>索引，并根据天为单位分片<br>可以通过索引模板来指定每个字段的类型和分词器等属性</li></ol><h2 id="数据使用"><a href="#数据使用" class="headerlink" title="数据使用"></a>数据使用</h2><p>除了自己写查询并使用外还可以使用<code>kibana</code>可视化<code>Elasticsearch</code>中的日志</p><hr><p>整理自<a href="https://my.oschina.net/zlt2000/blog/3128254" target="_blank" rel="noopener">原文</a></p>]]></content>
      
      
      <categories>
          
          <category> 架构设计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/blog/2020/03/04/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/blog/2020/03/04/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：168,阅读全文大约需要1分钟</p><blockquote><p>插入排序就是将数据依次和左边的数据比较，直到有一个位置是它存在的区间（大于左边的，小于右边的）。就插入，并开始下一个。直到全部插入左边。即右边按顺序取出数据放到左边合适的地方</p></blockquote><p>时间复杂度 o(n) - o(n^2)<br>因为找到合适的位置就不再对比了，所以最好的情况是已经拍好，即每个都对比一次<code>O(n)</code>。最不好的情况是反向排序，每个都要对比<code>O(n^2)</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> value = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//插入的位置</span></span><br><span class="line">        <span class="keyword">for</span> (j = i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; value) &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];<span class="comment">//移动数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j+<span class="number">1</span>] = value; <span class="comment">//插入数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据结构堆</title>
      <link href="/blog/2020/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A0%86/"/>
      <url>/blog/2020/03/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：163,阅读全文大约需要1分钟</p><blockquote><p>堆（heap）又被成为优先队列(priority queue)。堆虽然也是从头部取出元素，从堆底插入，但是堆中的元素排列是按照一定顺序排列的。</p></blockquote><h1 id="两种堆"><a href="#两种堆" class="headerlink" title="两种堆"></a>两种堆</h1><ol><li>最大堆（大顶堆）：任意节点必须是起子树的最大值</li><li>最小堆（小顶堆）：任意节点必须是起子树的最小值</li></ol><h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><ol><li>维持完全二叉树  </li><li>子类数字总是大于父类数字  </li></ol><h1 id="支持的操作"><a href="#支持的操作" class="headerlink" title="支持的操作"></a>支持的操作</h1><ol><li>添加</li><li>删除</li><li>查找最大/最小值</li></ol><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><ol><li>将数据存入堆</li><li>挨个取出（取出的一定是最大值）<br>就排列好了。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库优化</title>
      <link href="/blog/2020/03/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
      <url>/blog/2020/03/04/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>文章字数：487,阅读全文大约需要1分钟</p><h1 id="优化方式"><a href="#优化方式" class="headerlink" title="优化方式"></a>优化方式</h1><ul><li>表结构设计合理<code>3NF</code></li><li>添加索引<code>普通索引</code> <code>主键索引</code> <code>唯一索引unique</code> <code>全文索引</code></li><li>sql语句优化</li><li>分表技术<code>水平分割</code> <code>垂直分割</code></li><li>读写分离</li><li>配置优化，配置最大并发，缓存</li></ul><h1 id="定位需要优化点-慢查询日志"><a href="#定位需要优化点-慢查询日志" class="headerlink" title="定位需要优化点(慢查询日志)"></a>定位需要优化点(慢查询日志)</h1><p><code>MySQL</code>中日志有：<code>错误日志</code>、<code>二进制日志</code>、<code>通用查询日志</code>、<code>慢查询日志</code></p><ul><li><code>二进制日志</code>通过监听此日志建立主从结构</li><li><code>通用查询</code>建立客户端连接和执行的语句</li><li><code>慢查询</code>所有执行时间超过<code>long_query_time</code>秒的所有查询或者不适用所用的查询<br>配置慢查询<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.my.ini中增加</span><br><span class="line">long_query_time&#x3D;2</span><br><span class="line"></span><br><span class="line">2.可在直接在mysql连接中开启</span><br><span class="line">set global slow_query_log&#x3D;ON</span><br><span class="line">set global long_query_time &#x3D; 3600;</span><br><span class="line">set global log_querise_not_using_indexes &#x3D; ON;</span><br></pre></td></tr></table></figure></li></ul><h1 id="语句分析"><a href="#语句分析" class="headerlink" title="语句分析"></a>语句分析</h1><ul><li><code>explain</code>关键字，显示了mysql如何使用索引处理查询及表连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM USER ORDER BY TIME LIMIT 0,100</span><br></pre></td></tr></table></figure>结果中常用的信息:</li></ul><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询序列号</td></tr><tr><td>select_type</td><td>查询类型（union相关）</td></tr><tr><td>table</td><td>那张表</td></tr><tr><td>type</td><td>使用了何种类型，从好到坏：const、eq_reg、ref、range、index、ALL</td></tr><tr><td>-</td><td>const:表最多有一个匹配行</td></tr><tr><td>-</td><td>eq_ref:对于多表行组合，从改表中只读取一行</td></tr><tr><td>-</td><td>ref:对于每个来自前面表的行组合，所有匹配索引值的行都从这张表中读取</td></tr><tr><td>-</td><td>ref_or_null:该联接类型如同ref，但是添加了MySQL可以专门所有包含NULL值的行。</td></tr><tr><td>-</td><td>index_merge:该联接类型表示使用了索引合并优化</td></tr><tr><td>-</td><td>unique_subquery:索引查找含糊，替固定代子查询，效率更高</td></tr><tr><td>-</td><td>index_subquery:改联接类型类似于unique_subquery</td></tr><tr><td>-</td><td>range:只检索给定范围的行,使用一个索引来选择行</td></tr><tr><td>-</td><td>index:该联接类型与ALL相同，除了只有索引树被扫描。扫描索引比扫描数据文件块一点</td></tr><tr><td>-</td><td>ALL:对于每个来自前面的表的行组合，完整扫描了表数据</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>根据系统语言转换大小写</title>
      <link href="/blog/2020/03/04/%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E8%BD%AC%E6%8D%A2%E5%A4%A7%E5%B0%8F%E5%86%99/"/>
      <url>/blog/2020/03/04/%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E8%BD%AC%E6%8D%A2%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：62,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取系统中标记为 TR-TR 的语言（土耳其语）</span></span><br><span class="line">trlocale = Locale.forLanguageTag（“TR-TR”）;</span><br><span class="line"><span class="comment">//转换成土耳其语的 i (和英文不一样)</span></span><br><span class="line"><span class="string">"i"</span>.toLowerCase(trlocale);</span><br></pre></td></tr></table></figure><blockquote><p>toLowerCase没设置语言则自动获取当前语言，可能会导致转换和想象的不一样</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>无重复最长子串</title>
      <link href="/blog/2020/03/04/%E6%97%A0%E9%87%8D%E5%A4%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/blog/2020/03/04/%E6%97%A0%E9%87%8D%E5%A4%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>文章字数：250,阅读全文大约需要1分钟</p><blockquote><p>获取给定的字符串的不重复的最长子串的长度。</p></blockquote><h1 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h1><p>滑动窗口法是常用的字符操作算法</p><ol><li>设定一个窗口，窗口的开端对应着数组的开关</li><li>窗口向后扩展，直到扩展到一个有重复数据</li><li>窗口的前部向后移动，到重复的元素后面。</li><li>继续延伸。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">// 0. 滑动窗口法</span></span><br><span class="line">        <span class="comment">// 1. i 不变，j一直向后</span></span><br><span class="line">        <span class="comment">// 2. j和i重复时 i移动到第一个重复的元素之后。（如果重复的元素在i之前就不变）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (window.containsKey(s.charAt(j))) &#123;</span><br><span class="line">                <span class="comment">// 防止i变小， 如 abba 的情况</span></span><br><span class="line">                i = Math.max(window.get(s.charAt(j)) + <span class="number">1</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">            window.put(s.charAt(j), j);</span><br><span class="line">            <span class="keyword">int</span> length = j - i + <span class="number">1</span>;</span><br><span class="line">            maxLength = Math.max(maxLength, length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"lengthOfLongestSubstring(\"abba\") = "</span> + lengthOfLongestSubstring(<span class="string">"abba"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>树基本概念</title>
      <link href="/blog/2020/03/04/%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/blog/2020/03/04/%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：896,阅读全文大约需要3分钟</p><blockquote><p>树是由一个根节点延伸到若干节点，再由这些若干节点向外延伸的数据结构。</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>树</p><ol><li><strong>节点</strong>: 构成树的基本单位。</li><li><strong>树</strong>: 是节点的有限集，当节点为空时成为空树。树只有一个根节点，多棵树之间无交互。</li><li><strong>度</strong>: 节点拥有的子树（即子节点，子节点组成的数为子树）数量。</li><li><strong>节点关系</strong>: 节点的下级节点成为该节点的<code>孩子节点</code>，节点是下级节点的<code>双亲节点</code>，节点下级节点之间互为<code>兄弟节点</code>。</li><li><strong>节点层次</strong>: 根节点为<code>第一层</code>，根节点的子节点为<code>第二次</code>，再往下为<code>第三层</code>…以此类推。</li><li><strong>深度</strong>: 数节点的最大层次，成为改树的深度/高度。</li></ol><p>二叉树</p><ol><li><strong>二叉树</strong>: 在树的定义之上增加子节点只有两个的限制，两个节点称为<code>左节点</code>和<code>右节点</code>。左右节点次序不可以颠倒，只有一个节点也要区分左右节点。</li><li><strong>斜树</strong>: 所有节点都只有左节点的二叉树称为<code>左斜树</code>，所有节点都只有右节点的二叉树称为<code>右斜树</code>。</li><li><strong>满二叉树</strong>: 二叉树上所有的分支节点都有左右节点，并且叶子节点处于同一层。即当前深度的二叉树中节点最多的结构。所有的层都是满的。</li><li><strong>完全二叉树</strong>: 和满二叉树类型，只是最后一层不满，并且所有的空缺都在右边（先填满左节点再右节点）</li><li><strong>二叉查找树</strong>:  若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。[搜索,插入,删除的复杂度等于树高，O(log(n))]</li><li><strong>红黑树</strong>: 一种自平衡的二叉查找树，解决了二叉查找树可能出现树不平衡的情况（全部在左边或者全部在右边等情况）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">性质1. 节点是红色或黑色。</span><br><span class="line">性质2. 根节点是黑色。(叶子节点null也是黑色的)</span><br><span class="line">性质3 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</span><br><span class="line">性质4. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</span><br></pre></td></tr></table></figure><p>红黑树性质4保证了最长路径和最短路径差距不会超过两倍</p>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>注解Query报错</title>
      <link href="/blog/2020/03/04/%E6%B3%A8%E8%A7%A3Query%E6%8A%A5%E9%94%99/"/>
      <url>/blog/2020/03/04/%E6%B3%A8%E8%A7%A3Query%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：19,阅读全文大约需要1分钟</p><blockquote><p>写了个原生，结果报错 Validation failed for query for method public abstract </p></blockquote><p>解决：nativeQuery=true ，jpa默认是hql查询</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>注解Value报错</title>
      <link href="/blog/2020/03/04/%E6%B3%A8%E8%A7%A3Value%E6%8A%A5%E9%94%99/"/>
      <url>/blog/2020/03/04/%E6%B3%A8%E8%A7%A3Value%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：29,阅读全文大约需要1分钟</p><blockquote><p>Could not resolve placeholder ‘xxx’ in value ‘zzz’</p></blockquote><p>找不到key对应的value,需要给value一个默认参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:defaultValue&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String stringWithDefaultValue;</span><br></pre></td></tr></table></figure><p>这样就不会找不到了</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>桶排序</title>
      <link href="/blog/2020/03/04/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/blog/2020/03/04/%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：336,阅读全文大约需要1分钟</p><blockquote><p>桶排序的时间复杂度为 o(n+k) 即常数</p></blockquote><h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><ol><li>将有限的桶排列好顺序(包含所有数据或者数据范围)</li><li>将数据挨个放入相应的桶里(如果是范围，就在范围里线性排列)</li><li>按照桶的顺序取出所有数据，此时数据便排好了顺序</li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @param a 需要排序的数组</span></span><br><span class="line"><span class="comment"> * @param max 用于自动生成桶，示例为小范围数字，所以直接生成顺序桶就好了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] buckets;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span> || max &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个容量为max的数组buckets，并且将buckets中的所有数据都初始化为0。</span></span><br><span class="line">        buckets = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 计数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">            buckets[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((buckets[i]--) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                a[j++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buckets = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器调用本地exe文件</title>
      <link href="/blog/2020/03/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0exe%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2020/03/04/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0exe%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：129,阅读全文大约需要1分钟</p><blockquote><p>类似迅雷的点击下载后弹出软件的功能</p></blockquote><h1 id="一、在windows注册表中注册自定义协议"><a href="#一、在windows注册表中注册自定义协议" class="headerlink" title="一、在windows注册表中注册自定义协议"></a>一、在windows注册表中注册自定义协议</h1><h2 id="1-1-注册表编辑器内容"><a href="#1-1-注册表编辑器内容" class="headerlink" title="1.1 注册表编辑器内容"></a>1.1 注册表编辑器内容</h2><blockquote><p>保存为 <code>.reg</code>文件，运行即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser]</span><br><span class="line">@&#x3D;&quot;&quot;</span><br><span class="line">&quot;URL Protocol&quot;&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser\DefaultIcon]</span><br><span class="line">@&#x3D;&quot;D:\\test.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser\Shell]</span><br><span class="line">@&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser\Shell\Open]</span><br><span class="line">@&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser\Shell\Open\Command]</span><br><span class="line">@&#x3D;&quot;D:\\MyCode\\learnTest\\RegisterURI\\wrapper.exe %1&quot;</span><br></pre></td></tr></table></figure><ol><li><code>Browser</code>：自定义的协议名称；</li><li><code>D:\\test.exe</code> ：调用的exe文件路径；</li><li><code>%1</code> ：代表传入的参数；</li></ol><h1 id="二、调用exe"><a href="#二、调用exe" class="headerlink" title="二、调用exe"></a>二、调用exe</h1><h2 id="2-1浏览器调用"><a href="#2-1浏览器调用" class="headerlink" title="2.1浏览器调用"></a>2.1浏览器调用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Browser:// aaaaaaa bbbbbbb"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>多个参数之间使用空格分开，最后一个参数的结尾会多一个<code>/</code>，程序需要自己处理</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/blog/2020/03/04/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2020/03/04/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：212,阅读全文大约需要1分钟</p><blockquote><p>策略模式是将算法分离出来，在使用的时候指定使用的算法。避免大量使用<code>if..else</code>的设计模式。将原来由if…else判断之后获取实现类转换成实现类和值绑定，直接通过值获取类。省略了if…else</p></blockquote><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//选择一个具体策略</span></span><br><span class="line">        IStrategy strategy = <span class="keyword">new</span> ConcreteStrategyA();</span><br><span class="line">        <span class="comment">//来一个上下文环境</span></span><br><span class="line">        Context context = <span class="keyword">new</span> Context(strategy);</span><br><span class="line">        <span class="comment">//客户端直接让上下文环境执行算法</span></span><br><span class="line">        context.algorithm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象策略类 Strategy</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体策略类 ConcreteStrategy</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Strategy A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体策略类 ConcreteStrategy</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Strategy B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上下文环境</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IStrategy mStrategy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(IStrategy strategy)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.mStrategy = strategy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.mStrategy.algorithm();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基于Spring的应用"><a href="#基于Spring的应用" class="headerlink" title="基于Spring的应用"></a>基于Spring的应用</h1><ol><li><p>将策略类注册成为组件</p></li><li><p>通过组件名获取组件，获取策略时传入的策略名就是组件名。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简书文章获取时间</title>
      <link href="/blog/2020/03/04/%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/"/>
      <url>/blog/2020/03/04/%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：369,阅读全文大约需要1分钟</p><blockquote><p>本文主要是对上一篇文章<a href="https://www.jianshu.com/p/18d9e25daac8" target="_blank" rel="noopener">简书文章转换成hexo文章</a>的补充。上一次自动转换的代码创建时间固定是now，但是我希望能够和简书上的一样。这样就可以查看自己文章发布的大致历程。思路使用爬虫爬取信息，爬到的信息使用Map(文章名，日期)的形式保存。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><code>jdk1.8</code></li><li>引入<code>jar</code>包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.jsoup&#x2F;jsoup --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.10.2&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;net.sourceforge.htmlunit&#x2F;htmlunit --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.sourceforge.htmlunit&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;htmlunit&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.32&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.gargoylesoftware.htmlunit.WebClient;</span><br><span class="line"><span class="keyword">import</span> com.gargoylesoftware.htmlunit.html.HtmlPage;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 9:29 2019/9/30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;String,String&gt; countMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; urlMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">255</span>);</span><br><span class="line">        String baseUrl = <span class="string">"https://www.jianshu.com/u/2eb26c0a6d3b?order_by=shared_at&amp;page="</span>;</span><br><span class="line">        getTime(baseUrl,urlMap);</span><br><span class="line">        <span class="comment">//爬取结果 Map(title,time)</span></span><br><span class="line">        urlMap.forEach((k,v)-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(k + <span class="string">" = "</span> + v);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTime</span><span class="params">(String baseUrl,Map urlMap)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//            Map&lt;String,String&gt; urlMap = new HashMap&lt;&gt;(255);</span></span><br><span class="line"><span class="comment">//            String baseUrl = "https://www.jianshu.com/u/2eb26c0a6d3b?order_by=shared_at&amp;page=";</span></span><br><span class="line">            String currentUrl = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> pageIndex=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                currentUrl = baseUrl+pageIndex;</span><br><span class="line">                pageIndex++;</span><br><span class="line">                System.out.println(<span class="string">"currentUrl = "</span> + currentUrl);</span><br><span class="line">            &#125;<span class="keyword">while</span> (getJianShuArticleUrlList(currentUrl,urlMap));</span><br><span class="line"><span class="comment">//            System.out.println("pageIndex = " + pageIndex);</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getJianShuArticleUrlList</span><span class="params">(String oneUrl, Map&lt;String,String&gt; urlMap)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 模拟浏览器操作</span></span><br><span class="line">        WebClient webClient = <span class="keyword">new</span> WebClient();</span><br><span class="line">        <span class="comment">// 关闭css代码功能</span></span><br><span class="line">        webClient.getOptions().setThrowExceptionOnScriptError(<span class="keyword">false</span>);</span><br><span class="line">        webClient.getOptions().setCssEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 如若有可能找不到文件js则加上这句代码</span></span><br><span class="line">        webClient.getOptions().setThrowExceptionOnFailingStatusCode(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 获取第一级网页html</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            HtmlPage page = webClient.getPage(oneUrl);</span><br><span class="line">            <span class="keyword">if</span>(page==<span class="keyword">null</span>||!page.isHtmlPage())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Document doc = Jsoup.parse(page.asXml());</span><br><span class="line">            Elements dates = doc.select(<span class="string">"[class=note-list] li"</span>);</span><br><span class="line">            Iterator var2 = dates.iterator();</span><br><span class="line">            Element element = <span class="keyword">null</span>;</span><br><span class="line">            Element titleElement = <span class="keyword">null</span>;</span><br><span class="line">            Element timeElement = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">                element = (Element)var2.next();</span><br><span class="line">                titleElement = element.select(<span class="string">"[class=title]"</span>).first();</span><br><span class="line">                timeElement = element.select(<span class="string">"[class=time]"</span>).first();</span><br><span class="line">                <span class="comment">//爬取的时候发现有一些数据的样式发生了改变，这里设置成如果找不到就使用另一种样式。</span></span><br><span class="line">                <span class="keyword">if</span>(timeElement==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    timeElement = element.select(<span class="string">"[data-type=share_note]"</span>).first();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(timeElement!=<span class="keyword">null</span>&amp;&amp;titleElement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//爬取的时候发现有一些数据的样式发生了改变，这里设置成如果找不到就使用另一种样式。</span></span><br><span class="line">                    String tag = <span class="string">"data-shared-at"</span>;</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.isBlank(timeElement.attr(tag)))&#123;</span><br><span class="line">                        tag = <span class="string">"data-datetime"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.isNotBlank(titleElement.text())&amp;&amp;StringUtils.isNotBlank(timeElement.attr(tag)))&#123;</span><br><span class="line">                        <span class="comment">//爬取时发现有数据重复的情况，两页相连的数据会重复。这里判断出现次数，到达三次结束爬取。</span></span><br><span class="line">                        <span class="keyword">if</span>(StringUtils.isNotBlank(urlMap.get(titleElement.text())))&#123;</span><br><span class="line">                            <span class="keyword">int</span> count = countMap.get(titleElement.text())==<span class="keyword">null</span>?<span class="number">1</span>:Integer.valueOf(countMap.get(titleElement.text())).intValue();</span><br><span class="line">                            count++;</span><br><span class="line">                            countMap.put(titleElement.text(),count+<span class="string">""</span>);</span><br><span class="line">                            <span class="keyword">if</span>(count==<span class="number">3</span>)&#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//时间格式转换一下</span></span><br><span class="line">                        String dateStr = timeElement.attr(tag);</span><br><span class="line">                        dateStr = dateStr.replace(<span class="string">"T"</span>,<span class="string">" "</span>);</span><br><span class="line">                        dateStr = dateStr.replace(<span class="string">"+08:00"</span>,<span class="string">""</span>);</span><br><span class="line">                        urlMap.put(titleElement.text(),dateStr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            res=<span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简书文章转换成hexo文章</title>
      <link href="/blog/2020/03/04/%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%BD%AC%E6%8D%A2%E6%88%90hexo%E6%96%87%E7%AB%A0/"/>
      <url>/blog/2020/03/04/%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%BD%AC%E6%8D%A2%E6%88%90hexo%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：478,阅读全文大约需要1分钟</p><blockquote><p>简书的文章需要搬运到hexo上，手动太麻烦。于是用Java写了一个自动转换的工具。文章不在简书上也可以，转换规则为 总目录(root)-&gt;子目录(分类名)-&gt;文章(文件名就是标题)</p></blockquote><p>效果可以看<a href="http://greatcolin.github.io" target="_blank" rel="noopener">我的博客</a></p><ol><li>环境<code>jdk1.8</code></li><li>简书设置里的打包下载全部文章，解压。解压后目录就是源文件目录root</li><li>根据文集自动标记<code>hexo</code>的分类</li><li>增加字数统计，推荐阅读时间功能。（英文单词和中文的个数）</li><li>我自己是写java的，文件名出现<code>@</code>字符，统一替换成了<code>注解</code>。（文件名即标题）<br>如果不需要可以删除<code>.replaceAll(&quot;@&quot;,&quot;注解&quot;)</code></li><li>使用字节流，没有用字符流。懒得换了，不影响使用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 17:54 2019/6/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//文章计数器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//字数计数器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> charCount=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Pattern p = Pattern.compile(<span class="string">"[\u4e00-\u9fa5]|[a-zA-Z]+|[1-9]|[,.，。?？]"</span>, Pattern.CASE_INSENSITIVE);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//源文件根目录root</span></span><br><span class="line">        <span class="keyword">final</span> String rootPath = <span class="string">"G:\\chromedownload\\user-xxx\\mynote"</span>;</span><br><span class="line">        <span class="comment">//转换后文章存放目录</span></span><br><span class="line">        <span class="keyword">final</span> String toPathAdd = <span class="string">"F:\\hexoBlog\\greatcolin\\source\\_posts"</span>;</span><br><span class="line">        Path root = Paths.get(rootPath);</span><br><span class="line">        Path target = Paths.get(toPathAdd);</span><br><span class="line">        <span class="comment">//存放目录则不存在新建</span></span><br><span class="line">        <span class="keyword">if</span>(!Files.exists(target))&#123;</span><br><span class="line">            Files.createDirectories(target);</span><br><span class="line">        &#125;</span><br><span class="line">        Files.walkFileTree(root,<span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> oneNoteCount = <span class="number">0</span>;</span><br><span class="line">                String fileName = file.getFileName().toString().replaceAll(<span class="string">"@"</span>,<span class="string">"注解"</span>);</span><br><span class="line">                <span class="comment">//创建转换后的文件</span></span><br><span class="line">                Path toPath = Paths.get(toPathAdd+<span class="string">"\\"</span>+fileName);</span><br><span class="line">                <span class="keyword">if</span>(!Files.exists(toPath))&#123;</span><br><span class="line">                    toPath = Files.createFile(toPath);</span><br><span class="line">                    System.out.println(<span class="string">"create"</span>+toPath);</span><br><span class="line">                &#125;</span><br><span class="line">                FileOutputStream fop;</span><br><span class="line">                <span class="keyword">if</span>(Files.exists(toPath))&#123;</span><br><span class="line">                    fop = <span class="keyword">new</span> FileOutputStream(toPath.toFile());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.err.println(<span class="string">"不存在"</span>+toPath);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                FileInputStream fip = <span class="keyword">new</span> FileInputStream(file.toFile());</span><br><span class="line">                <span class="comment">//头</span></span><br><span class="line">                String noteClass = file.getParent().toString();</span><br><span class="line">                String[] className = noteClass.split(<span class="string">"\\\\"</span>);</span><br><span class="line">                <span class="comment">//根据文件夹名称获取分类名</span></span><br><span class="line">                noteClass = className[className.length-<span class="number">1</span>];</span><br><span class="line">                <span class="comment">//创建头部，写入</span></span><br><span class="line">                <span class="keyword">byte</span>[] headBuf = createHead(fileName,noteClass);</span><br><span class="line">                fop.write(headBuf);</span><br><span class="line">                <span class="comment">//读取文件，写入</span></span><br><span class="line">                <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span>((read=fip.read(buf))&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    String a = <span class="keyword">new</span> String(buf).replaceAll(<span class="string">"[^0-9a-zA-Z\u4e00-\u9fa5]+"</span>,<span class="string">""</span>);</span><br><span class="line">                    <span class="keyword">int</span> count = countNote(a);</span><br><span class="line">                    charCount += count;</span><br><span class="line">                    oneNoteCount += count;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> time = Math.ceil(oneNoteCount/<span class="number">250</span>)&gt;=<span class="number">1</span>?(<span class="keyword">int</span>)Math.ceil(oneNoteCount/<span class="number">250</span>):<span class="number">1</span>;</span><br><span class="line">                fop.write(<span class="keyword">new</span> String(<span class="string">"文章字数："</span>+oneNoteCount+<span class="string">",阅读全文大约需要"</span>+time+<span class="string">"分钟\r\n"</span>).getBytes());</span><br><span class="line">                fip.close();</span><br><span class="line">                fip = <span class="keyword">new</span> FileInputStream(file.toFile());</span><br><span class="line">                <span class="keyword">while</span>((read=fip.read(buf))&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    fop.write(buf,<span class="number">0</span>,read);</span><br><span class="line">                &#125;</span><br><span class="line">                fip.close();</span><br><span class="line">                fop.close();</span><br><span class="line">                System.out.println(fileName+<span class="string">"  转换成功"</span>);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"执行完成，总共转换"</span>+count+<span class="string">"篇文章。中英文总字/词数达到"</span>+charCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成文章头部信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> noteClass 分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] createHead(String title,String noteClass)&#123;</span><br><span class="line">        StringBuilder headStr = <span class="keyword">new</span> StringBuilder(<span class="string">"---\r\n"</span>);</span><br><span class="line">        title = title.replaceAll(<span class="string">".md"</span>,<span class="string">""</span>);</span><br><span class="line">        headStr.append(<span class="string">"title: "</span>+title+<span class="string">"\r\n"</span>);</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        headStr.append(<span class="string">"date: "</span>+sdf.format(<span class="keyword">new</span> Date())+<span class="string">"\r\n"</span>);</span><br><span class="line">        headStr.append(<span class="string">"categories: "</span>+noteClass+<span class="string">"\r\n"</span>);</span><br><span class="line">        headStr.append(<span class="string">"tags: \r\n"</span>);</span><br><span class="line">        headStr.append(<span class="string">"---\r\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> headStr.toString().getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算字数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countNote</span><span class="params">(String note)</span></span>&#123;</span><br><span class="line">        Matcher m = p.matcher(note);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><blockquote><p>此文中的文件创建时间是固定的，我另写了一个工具可以获取文章的发布日期。<a href="https://www.jianshu.com/p/459b18654ac6" target="_blank" rel="noopener">简书文章获取时间</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义Repository实现</title>
      <link href="/blog/2020/03/04/%E8%87%AA%E5%AE%9A%E4%B9%89Repository%E5%AE%9E%E7%8E%B0/"/>
      <url>/blog/2020/03/04/%E8%87%AA%E5%AE%9A%E4%B9%89Repository%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：174,阅读全文大约需要1分钟</p><blockquote><p>在jpa的基础上增加自己的实现</p></blockquote><h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><ol><li><p>创建一个中间层Dao,继承jpa的两个接口，并用注解注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>,<span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>,<span class="title">ID</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建上面的dao+impl的实现类，拓展功能。</p></li><li><p>其它dao直接继承与<code>BeseDao</code></p></li></ol><h1 id="NoRepositoryBean"><a href="#NoRepositoryBean" class="headerlink" title="@NoRepositoryBean"></a>@NoRepositoryBean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.data.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation to exclude repository interfaces from being picked up and thus in consequence getting an instance being</span></span><br><span class="line"><span class="comment"> * created.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * This will typically be used when providing an extended base interface for all repositories in combination with a</span></span><br><span class="line"><span class="comment"> * custom repository base class to implement methods declared in that intermediate interface. In this case you typically</span></span><br><span class="line"><span class="comment"> * derive your concrete repository interfaces from the intermediate one but don't want to create a Spring bean for the</span></span><br><span class="line"><span class="comment"> * intermediate interface.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Oliver Gierke</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NoRepositoryBean &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当为所有存储库提供扩展的基础接口，并结合自定义存储库基类以实现在该中间接口中声明的方法时，通常会使用此方法。 </span><br><span class="line">在这种情况下，您通常会从中间接口派生出具体的存储库接口，但又不想为中间接口创建Spring bean。</span><br></pre></td></tr></table></figure><blockquote><p>这个注解是为基类仓库拓展准备的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>获取本机ip的两种方式</title>
      <link href="/blog/2020/03/04/%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAip%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/blog/2020/03/04/%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAip%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：412,阅读全文大约需要1分钟</p><blockquote><p>获取服务器ip，之前一直用<code>request.getHeader(&quot;Host&quot;)</code>获取。后来发现本机访问时获取到的是<code>127.0.0.1</code>这个地址，而我需要的是其它地方也能访问到的地址。</p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol><li><p>解析<code>HostName</code>获取,直接<code>InetAddress.getLocalHost().getHostAddress()</code></p></li><li><p>遍历网卡的地址（即本机所有ip地址），从中找到符合规则的。</p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.Inet4Address;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两种方法，单网卡直接获取，多网卡选择获取</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 单网卡时，通过解析本机hostName获取ip地址</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress inet = InetAddress.getLocalHost();</span><br><span class="line">            String ipAddress = inet.getHostAddress();</span><br><span class="line">            System.out.println(<span class="string">"单网卡获取ip地址 = "</span> + ipAddress);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 多网卡状态下从所有的网卡ip中找出需要的ip</span></span><br><span class="line">        <span class="comment">// 这里的逻辑是能找到外网地址返回外网，不能找到返回最后一个内网地址</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String serverIp = getServerIpv4Address(ip -&gt; &#123;</span><br><span class="line">                <span class="comment">// 本机地址过滤</span></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.equals(<span class="string">"127.0.0.1"</span>, ip.trim())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 内网地址权重1</span></span><br><span class="line">                <span class="keyword">if</span> (ip.matches(</span><br><span class="line">                    <span class="string">"^(127\\.0\\.0\\.1)|(localhost)|(10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;)|(172\\.((1[6-9])|(2\\d)|(3[01]))\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;)|(192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;)$"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 外网地址权重2</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"遍历网卡地址选取ip = "</span> + serverIp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过网卡查找网卡绑定的ipv4地址，并交由filter进行权重判断</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filter</span></span><br><span class="line"><span class="comment">     *            自定义选择逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回权重最大的ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getServerIpv4Address</span><span class="params">(Function&lt;String, Integer&gt; filter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;Integer, String&gt; resMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获得本机的所有网络接口</span></span><br><span class="line">        Enumeration&lt;NetworkInterface&gt; nifs = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">        <span class="keyword">while</span> (nifs.hasMoreElements()) &#123;</span><br><span class="line">            NetworkInterface nif = nifs.nextElement();</span><br><span class="line">            <span class="comment">// 获得与该网络接口绑定的 IP 地址，一般只有一个</span></span><br><span class="line">            Enumeration&lt;InetAddress&gt; addresses = nif.getInetAddresses();</span><br><span class="line">            <span class="keyword">while</span> (addresses.hasMoreElements()) &#123;</span><br><span class="line">                InetAddress addr = addresses.nextElement();</span><br><span class="line">                <span class="comment">// 只关心 IPv4 地址</span></span><br><span class="line">                <span class="keyword">if</span> (addr <span class="keyword">instanceof</span> Inet4Address) &#123;</span><br><span class="line">                    String ip = addr.getHostAddress();</span><br><span class="line">                    <span class="comment">// 自定义过滤器，返回权重。</span></span><br><span class="line">                    Integer index = filter.apply(ip);</span><br><span class="line">                    <span class="keyword">if</span> (index != <span class="number">0</span>) &#123;</span><br><span class="line">                        resMap.put(index, ip);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collection&lt;Integer&gt; collection = resMap.keySet();</span><br><span class="line">        <span class="keyword">if</span> (collection.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Integer i = Collections.max(collection);</span><br><span class="line">            <span class="keyword">return</span> resMap.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有匹配结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>表单重复提交</title>
      <link href="/blog/2020/03/04/%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/"/>
      <url>/blog/2020/03/04/%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：160,阅读全文大约需要1分钟</p><blockquote><p>起因是邮件修改密码偶尔会提示<code>token</code>过期，后台断点发现应该是一次提交的表单提交了两次。</p></blockquote><h1 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h1><ol><li><p>提交的按钮放在<code>form</code>表单里（自带提交属性），但是点击事件里又提交了一次。（里面用的是异步提交）</p></li><li><p>回车触发提交事件，可能事件被多次触发（加了日志输出，排除了）</p></li><li><p>其它代码也进行了提交操作</p></li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>最后在<code>chrome</code>的<code>event listeners</code>找到了另一个表单提交事件，是框架封装的提交，和自己的提交重复了。</p>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/blog/2020/03/04/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/blog/2020/03/04/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：56,阅读全文大约需要1分钟</p><blockquote><p>选择排序就是选出最大的，放在第一个，再选出最大的，放第二个。。。</p></blockquote><p>时间复杂度 o(n^2)</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length ; i++ )&#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;<span class="comment">//最小元素的下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; arr.length ; j++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[min])&#123;</span><br><span class="line">                min = j;<span class="comment">//找最小值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换位置</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[min];</span><br><span class="line">        arr[min] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法数据结构 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>逻辑关联和物理关联</title>
      <link href="/blog/2020/03/04/%E9%80%BB%E8%BE%91%E5%85%B3%E8%81%94%E5%92%8C%E7%89%A9%E7%90%86%E5%85%B3%E8%81%94/"/>
      <url>/blog/2020/03/04/%E9%80%BB%E8%BE%91%E5%85%B3%E8%81%94%E5%92%8C%E7%89%A9%E7%90%86%E5%85%B3%E8%81%94/</url>
      
        <content type="html"><![CDATA[<p>文章字数：198,阅读全文大约需要1分钟</p><blockquote><p>逻辑关联/逻辑外键 和 物理关联/物理外键 指的是 实体对象/数据库 中 对象和对象/表与表 的关系是否有设计上的关联</p></blockquote><h1 id="逻辑关联"><a href="#逻辑关联" class="headerlink" title="逻辑关联"></a>逻辑关联</h1><p>逻辑关联指的是实体类上一个值对应另一个对象的id,这个对应仅限于思想上的。<br>逻辑外键就是思想上数据库中的一个字段对应另一个表的id,但是没有任何额外操作。写程序时自己判断如何关联/连表查询</p><h1 id="物理关联"><a href="#物理关联" class="headerlink" title="物理关联"></a>物理关联</h1><p>物理关联指的是实体类上明确标注了对象间的管理，管理维护是由系统来维护而不是额外代码手动维护。<br>物理外键即设置了外键关联。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置文件值映射到类属性</title>
      <link href="/blog/2020/03/04/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%80%BC%E6%98%A0%E5%B0%84%E5%88%B0%E7%B1%BB%E5%B1%9E%E6%80%A7/"/>
      <url>/blog/2020/03/04/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%80%BC%E6%98%A0%E5%B0%84%E5%88%B0%E7%B1%BB%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：48,阅读全文大约需要1分钟</p><blockquote><p>相比于<code>@Value</code>这个方法更加简便一点</p></blockquote><p><code>person.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">    lastName: hello</span><br><span class="line">    age: 18</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入配置文件</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 2. 加载开头为person的</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 3. 属性和配置文件的值对应</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>踩坑终极指南</title>
      <link href="/blog/2020/03/04/%E8%B8%A9%E5%9D%91%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/"/>
      <url>/blog/2020/03/04/%E8%B8%A9%E5%9D%91%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>文章字数：187,阅读全文大约需要1分钟</p><blockquote><p>遇到一个无法解决的bug？debug发现代码迷之跳跃？添加了代码重新编译，然而出现迷之错误？请收看大型通关策略类游戏《java从入门到放弃》攻略之—《踩坑终极指南》</p></blockquote><h1 id="第一步清空数据库数据"><a href="#第一步清空数据库数据" class="headerlink" title="第一步清空数据库数据"></a>第一步清空数据库数据</h1><ul><li>设置jpa为运行时创建（如果有覆盖）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto&#x3D;create</span><br></pre></td></tr></table></figure><h1 id="第二步清空redis"><a href="#第二步清空redis" class="headerlink" title="第二步清空redis"></a>第二步清空redis</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Redis0:&gt; select 01 &#x2F;&#x2F;选择数据库</span><br><span class="line">Redis01:&gt; flushAll  &#x2F;&#x2F;清空缓存</span><br></pre></td></tr></table></figure><h1 id="第三步重启软件"><a href="#第三步重启软件" class="headerlink" title="第三步重启软件"></a>第三步重启软件</h1><blockquote><p>到这一步之后重启软件一般因为缓存（spring,redis…）导致的问题都能解决了</p></blockquote><h1 id="第四步重启电脑"><a href="#第四步重启电脑" class="headerlink" title="第四步重启电脑"></a>第四步重启电脑</h1><blockquote><p>此问题一般是端口占用，服务冲突，软件抽了等。。。</p></blockquote><h1 id="第五步换电脑"><a href="#第五步换电脑" class="headerlink" title="第五步换电脑"></a>第五步换电脑</h1><blockquote><p>怎么可能是我的代码问题？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 踩坑 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>OSHI查看cpu信息</title>
      <link href="/blog/2020/03/04/OSHI%E6%9F%A5%E7%9C%8Bcpu%E4%BF%A1%E6%81%AF/"/>
      <url>/blog/2020/03/04/OSHI%E6%9F%A5%E7%9C%8Bcpu%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：791,阅读全文大约需要3分钟</p><blockquote><p>OSHI可以跨平台查看服务器信息，其中cpu负载信息为当前占用CPU的时间。需要在一段时间内获取两次，然后相减得出这段时间内所占用的时间。这段时间除以总占用时间就是占用百分比。</p></blockquote><p>环境<code>java1.8</code></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.github.oshi&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;oshi-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.12.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.jvmMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oshi.SystemInfo;</span><br><span class="line"><span class="keyword">import</span> oshi.hardware.CentralProcessor;</span><br><span class="line"><span class="keyword">import</span> oshi.hardware.GlobalMemory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 16:04 2019/8/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OshiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                OshiTest.printlnCpuInfo();</span><br><span class="line">                OshiTest.MemInfo();</span><br><span class="line">                OshiTest.getThread();</span><br><span class="line">                OshiTest.setSysInfo();</span><br><span class="line">                OshiTest.setJvmInfo();</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printlnCpuInfo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println("----------------cpu信息----------------");</span></span><br><span class="line">        SystemInfo systemInfo = <span class="keyword">new</span> SystemInfo();</span><br><span class="line">        CentralProcessor processor = systemInfo.getHardware().getProcessor();</span><br><span class="line">        <span class="keyword">long</span>[] prevTicks = processor.getSystemCpuLoadTicks();</span><br><span class="line">        <span class="comment">// 睡眠1s</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span>[] ticks = processor.getSystemCpuLoadTicks();</span><br><span class="line">        <span class="keyword">long</span> nice = ticks[CentralProcessor.TickType.NICE.getIndex()] - prevTicks[CentralProcessor.TickType.NICE.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> irq = ticks[CentralProcessor.TickType.IRQ.getIndex()] - prevTicks[CentralProcessor.TickType.IRQ.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> softirq = ticks[CentralProcessor.TickType.SOFTIRQ.getIndex()] - prevTicks[CentralProcessor.TickType.SOFTIRQ.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> steal = ticks[CentralProcessor.TickType.STEAL.getIndex()] - prevTicks[CentralProcessor.TickType.STEAL.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> cSys = ticks[CentralProcessor.TickType.SYSTEM.getIndex()] - prevTicks[CentralProcessor.TickType.SYSTEM.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> user = ticks[CentralProcessor.TickType.USER.getIndex()] - prevTicks[CentralProcessor.TickType.USER.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> iowait = ticks[CentralProcessor.TickType.IOWAIT.getIndex()] - prevTicks[CentralProcessor.TickType.IOWAIT.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> idle = ticks[CentralProcessor.TickType.IDLE.getIndex()] - prevTicks[CentralProcessor.TickType.IDLE.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> totalCpu = user + nice + cSys + idle + iowait + irq + softirq + steal;</span><br><span class="line">        System.out.println(<span class="string">"----------------cpu信息----------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"cpu核数:"</span> + processor.getLogicalProcessorCount());</span><br><span class="line">        System.out.println(<span class="string">"cpu系统使用率:"</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format(cSys * <span class="number">1.0</span> / totalCpu));</span><br><span class="line">        System.out.println(<span class="string">"cpu用户使用率:"</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format(user * <span class="number">1.0</span> / totalCpu));</span><br><span class="line">        System.out.println(<span class="string">"cpu当前等待率:"</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format(iowait * <span class="number">1.0</span> / totalCpu));</span><br><span class="line">        System.out.println(<span class="string">"cpu当前使用率:"</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format(<span class="number">1.0</span>-(idle * <span class="number">1.0</span> / totalCpu)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MemInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------------主机内存信息----------------"</span>);</span><br><span class="line">        SystemInfo systemInfo = <span class="keyword">new</span> SystemInfo();</span><br><span class="line">        GlobalMemory memory = systemInfo.getHardware().getMemory();</span><br><span class="line">        <span class="comment">//总内存</span></span><br><span class="line">        <span class="keyword">long</span> totalByte = memory.getTotal();</span><br><span class="line">        <span class="comment">//剩余</span></span><br><span class="line">        <span class="keyword">long</span> acaliableByte = memory.getAvailable();</span><br><span class="line">        System.out.println(<span class="string">"总内存 = "</span> + formatByte(totalByte));</span><br><span class="line">        System.out.println(<span class="string">"使用"</span> + formatByte(totalByte-acaliableByte));</span><br><span class="line">        System.out.println(<span class="string">"剩余内存 = "</span> + formatByte(acaliableByte));</span><br><span class="line">        System.out.println(<span class="string">"使用率："</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format((totalByte-acaliableByte)*<span class="number">1.0</span>/totalByte));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSysInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------------操作系统信息----------------"</span>);</span><br><span class="line">        Properties props = System.getProperties();</span><br><span class="line">        <span class="comment">//系统名称</span></span><br><span class="line">        String osName = props.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="comment">//架构名称</span></span><br><span class="line">        String osArch = props.getProperty(<span class="string">"os.arch"</span>);</span><br><span class="line">        System.out.println(<span class="string">"操作系统名 = "</span> + osName);</span><br><span class="line">        System.out.println(<span class="string">"系统架构 = "</span> + osArch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setJvmInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------------jvm信息----------------"</span>);</span><br><span class="line">        Properties props = System.getProperties();</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        <span class="comment">//jvm总内存</span></span><br><span class="line">        <span class="keyword">long</span> jvmTotalMemoryByte = runtime.totalMemory();</span><br><span class="line">        <span class="comment">//jvm最大可申请</span></span><br><span class="line">        <span class="keyword">long</span> jvmMaxMoryByte = runtime.maxMemory();</span><br><span class="line">        <span class="comment">//空闲空间</span></span><br><span class="line">        <span class="keyword">long</span> freeMemoryByte = runtime.freeMemory();</span><br><span class="line">        <span class="comment">//jdk版本</span></span><br><span class="line">        String jdkVersion = props.getProperty(<span class="string">"java.version"</span>);</span><br><span class="line">        <span class="comment">//jdk路径</span></span><br><span class="line">        String jdkHome = props.getProperty(<span class="string">"java.home"</span>);</span><br><span class="line">        System.out.println(<span class="string">"jvm内存总量 = "</span> + formatByte(jvmTotalMemoryByte));</span><br><span class="line">        System.out.println(<span class="string">"jvm已使用内存 = "</span> + formatByte(jvmTotalMemoryByte-freeMemoryByte));</span><br><span class="line">        System.out.println(<span class="string">"jvm剩余内存 = "</span> + formatByte(freeMemoryByte));</span><br><span class="line">        System.out.println(<span class="string">"jvm内存使用率 = "</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format((jvmTotalMemoryByte-freeMemoryByte)*<span class="number">1.0</span>/jvmTotalMemoryByte));</span><br><span class="line">        System.out.println(<span class="string">"java版本 = "</span> + jdkVersion);</span><br><span class="line">        <span class="comment">//System.out.println("jdkHome = " + jdkHome);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------------线程信息----------------"</span>);</span><br><span class="line">        ThreadGroup currentGroup =Thread.currentThread().getThreadGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (currentGroup.getParent()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="comment">// 返回此线程组的父线程组</span></span><br><span class="line">          currentGroup=currentGroup.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此线程组中活动线程的估计数</span></span><br><span class="line">        <span class="keyword">int</span> noThreads = currentGroup.activeCount();</span><br><span class="line"></span><br><span class="line">        Thread[] lstThreads = <span class="keyword">new</span> Thread[noThreads];</span><br><span class="line">        <span class="comment">//把对此线程组中的所有活动子组的引用复制到指定数组中。</span></span><br><span class="line">        currentGroup.enumerate(lstThreads);</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : lstThreads) &#123;</span><br><span class="line">          System.out.println(<span class="string">"线程数量："</span>+noThreads+<span class="string">" 线程id："</span> + thread.getId() + <span class="string">" 线程名称："</span> + thread.getName() + <span class="string">" 线程状态："</span> + thread.getState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatByte</span><span class="params">(<span class="keyword">long</span> byteNumber)</span></span>&#123;</span><br><span class="line">        <span class="comment">//换算单位</span></span><br><span class="line">        <span class="keyword">double</span> FORMAT = <span class="number">1024.0</span>;</span><br><span class="line">        <span class="keyword">double</span> kbNumber = byteNumber/FORMAT;</span><br><span class="line">        <span class="keyword">if</span>(kbNumber&lt;FORMAT)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##KB"</span>).format(kbNumber);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> mbNumber = kbNumber/FORMAT;</span><br><span class="line">        <span class="keyword">if</span>(mbNumber&lt;FORMAT)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##MB"</span>).format(mbNumber);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> gbNumber = mbNumber/FORMAT;</span><br><span class="line">        <span class="keyword">if</span>(gbNumber&lt;FORMAT)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##GB"</span>).format(gbNumber);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> tbNumber = gbNumber/FORMAT;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##TB"</span>).format(tbNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 没添加slf4j的依赖，不影响</span><br><span class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http:&#x2F;&#x2F;www.slf4j.org&#x2F;codes.html#StaticLoggerBinder for further details.</span><br><span class="line">----------------cpu信息----------------</span><br><span class="line">cpu核数:4</span><br><span class="line">cpu系统使用率:1.88%</span><br><span class="line">cpu用户使用率:2.73%</span><br><span class="line">cpu当前等待率:0%</span><br><span class="line">cpu当前使用率:4.71%</span><br><span class="line">----------------主机内存信息----------------</span><br><span class="line">总内存 &#x3D; 7.88GB</span><br><span class="line">使用5.89GB</span><br><span class="line">剩余内存 &#x3D; 1.99GB</span><br><span class="line">使用率：74.72%</span><br><span class="line">----------------线程信息----------------</span><br><span class="line">线程数量：5 线程id：2 线程名称：Reference Handler 线程状态：WAITING</span><br><span class="line">线程数量：5 线程id：3 线程名称：Finalizer 线程状态：WAITING</span><br><span class="line">线程数量：5 线程id：4 线程名称：Signal Dispatcher 线程状态：RUNNABLE</span><br><span class="line">线程数量：5 线程id：5 线程名称：Attach Listener 线程状态：RUNNABLE</span><br><span class="line">线程数量：5 线程id：1 线程名称：main 线程状态：RUNNABLE</span><br><span class="line">----------------操作系统信息----------------</span><br><span class="line">操作系统名 &#x3D; Windows 7</span><br><span class="line">系统架构 &#x3D; amd64</span><br><span class="line">----------------jvm信息----------------</span><br><span class="line">jvm内存总量 &#x3D; 123MB</span><br><span class="line">jvm已使用内存 &#x3D; 20.46MB</span><br><span class="line">jvm剩余内存 &#x3D; 102.54MB</span><br><span class="line">jvm内存使用率 &#x3D; 16.64%</span><br><span class="line">java版本 &#x3D; 1.8.0_65</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RSA非对称加密案例</title>
      <link href="/blog/2020/03/04/RSA%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%A1%88%E4%BE%8B/"/>
      <url>/blog/2020/03/04/RSA%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：772,阅读全文大约需要3分钟</p><blockquote><p>封装了一个小工具</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><p><code>jdk1.8</code></p></li><li><p><code>maven</code>依赖</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;commons-codec&#x2F;commons-codec --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-codec&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-codec&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.10&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li><p>私钥和公钥这两个对象都有加密和解密的动作，于是定义一个接口 <code>CryptographicProcessor</code>。私钥和公钥都继承这个接口，并实现相应加密和解密动作。</p></li><li><p>工具类<code>SecurityUtils</code>有三个功能: 随机生成秘钥对、获取私钥处理类、获取公钥处理类。</p></li><li><p>具体流程就是:</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 使用SecurityUtils的静态方法生成一个Map，里面是私钥加公钥。</span><br><span class="line">2. 使用SecurityUtils的静态方法传入私钥获取私钥处理器，这个处理器可以使用私钥加密和解密。</span><br><span class="line">3. 把密文和公钥发给其他人，再使用公钥处理器解密，使用公钥加密返回信息，再用私钥解密返回的信息。</span><br></pre></td></tr></table></figure><ol start="4"><li>无论是秘钥还是明文密文，都是<code>byte[]</code>类型。为了方便<code>base64</code>转换成了<code>String</code>，传入值是<code>String</code>的都是会自动<code>Base64</code>的</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="操作接口"><a href="#操作接口" class="headerlink" title="操作接口"></a>操作接口</h2><p>公钥和秘钥处理器都有<strong>加密</strong>和<strong>解密</strong>的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CryptographicProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     *            原信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">encode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     *            密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">decode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成的秘钥Map中公钥的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String RSA_KEY_PUBLIC = <span class="string">"public"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成的秘钥Map中私钥的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String RSA_KEY_PRIVATE = <span class="string">"private"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SecurityUtils</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥处理器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rSAPublicKey</span></span><br><span class="line"><span class="comment">     *            base64公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CryptographicProcessor <span class="title">getRSAPublicKeyProcessor</span><span class="params">(String rSAPublicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RSAPublicKeyProcessor(rSAPublicKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥处理器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rSAPublicKeyBytes</span></span><br><span class="line"><span class="comment">     *            公钥byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CryptographicProcessor <span class="title">getRSAPublicKeyProcessor</span><span class="params">(<span class="keyword">byte</span>[] rSAPublicKeyBytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RSAPublicKeyProcessor(rSAPublicKeyBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取私钥处理器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rSAPrivateKey</span></span><br><span class="line"><span class="comment">     *            base64私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CryptographicProcessor <span class="title">getRSAPrivateKeyProcessor</span><span class="params">(String rSAPrivateKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RSAPrivateKeyProcessor(rSAPrivateKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取私钥处理器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rSAPrivateKeyBytes</span></span><br><span class="line"><span class="comment">     *            私钥byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CryptographicProcessor <span class="title">getRSAPrivateKeyProcessor</span><span class="params">(<span class="keyword">byte</span>[] rSAPrivateKeyBytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RSAPrivateKeyProcessor(rSAPrivateKeyBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成生成base64秘钥秘钥 明文最大长度不能大于秘钥长度 默认大小512byte</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">generateRSAKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> generateRSAKeyPair(<span class="number">512</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成base64秘钥 明文最大长度不能大于秘钥长度</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keySize</span></span><br><span class="line"><span class="comment">     *            秘钥大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">generateRSAKeyPair</span><span class="params">(<span class="keyword">int</span> keySize)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; keyPairMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        KeyPair keyPair = getKeyPair(keySize);</span><br><span class="line">        keyPairMap.put(SecurityUtils.RSA_KEY_PUBLIC, Base64.encodeBase64String(keyPair.getPrivate().getEncoded()));</span><br><span class="line">        keyPairMap.put(SecurityUtils.RSA_KEY_PRIVATE, Base64.encodeBase64String(keyPair.getPrivate().getEncoded()));</span><br><span class="line">        <span class="keyword">return</span> keyPairMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成秘钥 明文最大长度不能大于秘钥长度</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keySize</span></span><br><span class="line"><span class="comment">     *            秘钥大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, <span class="keyword">byte</span>[]&gt; generateRSAKeyBytePair(<span class="keyword">int</span> keySize) <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        Map&lt;String, <span class="keyword">byte</span>[]&gt; keyPairMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        KeyPair keyPair = getKeyPair(keySize);</span><br><span class="line">        keyPairMap.put(SecurityUtils.RSA_KEY_PUBLIC, keyPair.getPublic().getEncoded());</span><br><span class="line">        keyPairMap.put(SecurityUtils.RSA_KEY_PRIVATE, keyPair.getPrivate().getEncoded());</span><br><span class="line">        <span class="keyword">return</span> keyPairMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> KeyPair <span class="title">getKeyPair</span><span class="params">(<span class="keyword">int</span> keySize)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        keyPairGenerator.initialize(keySize);</span><br><span class="line">        <span class="keyword">return</span> keyPairGenerator.generateKeyPair();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------class----------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAPublicKeyProcessor</span> <span class="keyword">implements</span> <span class="title">CryptographicProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> X509EncodedKeySpec x509EncodedKeySpec;</span><br><span class="line">        <span class="keyword">private</span> KeyFactory keyFactory;</span><br><span class="line">        <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line">        <span class="keyword">private</span> Cipher cipher;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">RSAPublicKeyProcessor</span><span class="params">(String rSAPublicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(Base64.decodeBase64(rSAPublicKey));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">RSAPublicKeyProcessor</span><span class="params">(<span class="keyword">byte</span>[] rSAPublicKeyBytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x509EncodedKeySpec = <span class="keyword">new</span> X509EncodedKeySpec(rSAPublicKeyBytes);</span><br><span class="line">            <span class="keyword">this</span>.keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="keyword">this</span>.cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="keyword">this</span>.publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = encode(str.getBytes());</span><br><span class="line">            <span class="keyword">return</span> Base64.encodeBase64String(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">            <span class="keyword">return</span> cipher.doFinal(strs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = decode(Base64.decodeBase64(str));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line">            <span class="keyword">return</span> cipher.doFinal(strs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAPrivateKeyProcessor</span> <span class="keyword">implements</span> <span class="title">CryptographicProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> PKCS8EncodedKeySpec pkcs8EncodedKeySpec;</span><br><span class="line">        <span class="keyword">private</span> KeyFactory keyFactory;</span><br><span class="line">        <span class="keyword">private</span> PrivateKey privateKey;</span><br><span class="line">        <span class="keyword">private</span> Cipher cipher;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">RSAPrivateKeyProcessor</span><span class="params">(String rSAPrivate)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(Base64.decodeBase64(rSAPrivate));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">RSAPrivateKeyProcessor</span><span class="params">(<span class="keyword">byte</span>[] rSAPrivateBytes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.pkcs8EncodedKeySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(rSAPrivateBytes);</span><br><span class="line">            <span class="keyword">this</span>.keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="keyword">this</span>.privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class="line">            <span class="keyword">this</span>.cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(strs);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = encode(str.getBytes());</span><br><span class="line">            <span class="keyword">return</span> Base64.encodeBase64String(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(strs);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = decode(Base64.decodeBase64(str));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">security</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String mess = <span class="string">"哈哈哈"</span>;</span><br><span class="line">            <span class="comment">//秘钥对</span></span><br><span class="line">            Map&lt;String, <span class="keyword">byte</span>[]&gt; keyPair = SecurityUtils.generateRSAKeyBytePair(<span class="number">512</span>);</span><br><span class="line">            <span class="comment">//私钥处理器</span></span><br><span class="line">            CryptographicProcessor privateProcessor =</span><br><span class="line">               SecurityUtils.getRSAPrivateKeyProcessor(keyPair.get(SecurityUtils.RSA_KEY_PRIVATE));</span><br><span class="line">            <span class="comment">//加密的到密文</span></span><br><span class="line">            String cipherText = privateProcessor.encode(mess);</span><br><span class="line">            <span class="comment">//假装发给别人</span></span><br><span class="line">            String res = sendMess(cipherText, keyPair.get(SecurityUtils.RSA_KEY_PUBLIC));</span><br><span class="line">            <span class="comment">//私钥解密公钥加密的密文</span></span><br><span class="line">            System.out.println(<span class="string">"客户端收到回复:"</span>+privateProcessor.decode(res));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 创建失败</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendMess</span><span class="params">(String mess, <span class="keyword">byte</span>[] publicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//根据拿到的公钥生成公钥处理器，网络传输可以生成string类型的秘钥。</span></span><br><span class="line">        CryptographicProcessor publicProce = SecurityUtils.getRSAPublicKeyProcessor(publicKey);</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        System.out.println(<span class="string">"服务端收到:"</span> + publicProce.decode(mess));</span><br><span class="line">        <span class="comment">//加密一个返回值</span></span><br><span class="line">        <span class="keyword">return</span> publicProce.encode(<span class="string">"200"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务端收到:哈哈哈</span><br><span class="line">客户端收到回复:200</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot整合shiro</title>
      <link href="/blog/2020/03/04/springBoot%E6%95%B4%E5%90%88shiro/"/>
      <url>/blog/2020/03/04/springBoot%E6%95%B4%E5%90%88shiro/</url>
      
        <content type="html"><![CDATA[<p>文章字数：448,阅读全文大约需要1分钟</p><blockquote><p><code>shiro</code>是一个可以管理项目权限的框架</p></blockquote><h1 id="springBoot中引入"><a href="#springBoot中引入" class="headerlink" title="springBoot中引入"></a>springBoot中引入</h1><p><code>maven</code>依赖添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.4.0&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="密码加密工具类"><a href="#密码加密工具类" class="headerlink" title="密码加密工具类"></a>密码加密工具类</h1><p><code>shiro</code>提供了加密、生成随机盐的方法，封装成工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.SecureRandomNumberGenerator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.RandomNumberGenerator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 密码加密工具类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordHelper</span></span>&#123;</span><br><span class="line">    <span class="comment">//随机字符串生成器</span></span><br><span class="line">    <span class="keyword">private</span> RandomNumberGenerator randomOb = <span class="keyword">new</span> RandomNumberGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//散列算法名（md5方式）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM_NAME = <span class="string">"md5"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//散列迭代次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_ITERATION = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *  加密用户</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> user 用户，用户名(name)、密码(pwd)、盐\加密因子(salt)</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encryptPassword</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="comment">//生成加密因子，保存盐。</span></span><br><span class="line">        user.setSalt(randomOb.nextBytes().toHex());</span><br><span class="line">        <span class="comment">//加密密码 SimpleHash（算法名，密码，盐的byte，次数）.toHex()</span></span><br><span class="line">        String newPassword = <span class="keyword">new</span> SimpleHash(ALGORITHM_NAME ,user.getPwd,ByteSource.Util.bytes(user.getSalt()),HASH_ITERATION).toHex();</span><br><span class="line">        <span class="comment">//更新密码</span></span><br><span class="line">        user.setPwd(newPassword );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h1><p><code>shiro</code>需要我们提供<code>doGetAuthenticationInfo</code>和<code>doGetAuthorizationInfo</code>的实现，已完成登录认证和权限信息。<br>自定义<code>Realm</code>，继承与<code>AuthorizingRealm</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 为shiro提供登录验证和权限提取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnceladusShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line">    <span class="comment">//用户操作业务层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 提供用户角色和权限获取的逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//需要返回的权限信息</span></span><br><span class="line">         SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">         String userName = (String) principals.getPrimaryPrincipal();</span><br><span class="line">         User user = userService.findUserByName(userName);</span><br><span class="line">         <span class="keyword">for</span> (SysRole role : user.getRoles()) &#123;</span><br><span class="line">            <span class="comment">//设置角色</span></span><br><span class="line">            authorizationInfo.addRole(role.getRole());</span><br><span class="line">            <span class="keyword">for</span> (SysPermission permission : role.getPermissions()) &#123;</span><br><span class="line">                <span class="comment">//设置权限</span></span><br><span class="line">                authorizationInfo.addStringPermission(permission.getName());</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">     <span class="comment">//通过token获取用户名</span></span><br><span class="line">     String userName = (String) token.getPrincipal();</span><br><span class="line">     User user = userService.findUserByName(username);</span><br><span class="line">     <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     SimpleAuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                                         user.getUsername(),</span><br><span class="line">                                         user.getPassword(),</span><br><span class="line">                                         ByteSource.Util.bytes(user.getCredentialsSalt()),</span><br><span class="line">                                         getName());</span><br><span class="line">      <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="shiro配置"><a href="#shiro配置" class="headerlink" title="shiro配置"></a>shiro配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置权限</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shirFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/unauthc"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/home/index"</span>);</span><br><span class="line">        </span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/authc/index"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/authc/admin"</span>, <span class="string">"roles[admin]"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/authc/renewable"</span>, <span class="string">"perms[Create,Update]"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/authc/removable"</span>, <span class="string">"perms[Delete]"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 提供散列算法的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashedCredentialsMatcher hashedCredentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        hashedCredentialsMatcher.setHashAlgorithmName(PasswordHelper.ALGORITHM_NAME); <span class="comment">// 散列算法</span></span><br><span class="line">        hashedCredentialsMatcher.setHashIterations(PasswordHelper.HASH_ITERATIONS); <span class="comment">// 散列次数</span></span><br><span class="line">        <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 设置加密算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EnceladusShiroRealm <span class="title">shiroRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自己实现的Realm</span></span><br><span class="line">        EnceladusShiroRealm shiroRealm = <span class="keyword">new</span> EnceladusShiroRealm();</span><br><span class="line">        shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher()); <span class="comment">// 设置加密算法</span></span><br><span class="line">        <span class="keyword">return</span> shiroRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 设置安全管理类的realm为上面写的realm</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(shiroRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordHelper <span class="title">passwordHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PasswordHelper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常用的过滤器如下：</span><br><span class="line">authc：所有已登陆用户可访问</span><br><span class="line">roles：有指定角色的用户可访问，通过[ ]指定具体角色，这里的角色名称与数据库中配置一致</span><br><span class="line">perms：有指定权限的用户可访问，通过[ ]指定具体权限，这里的权限名称与数据库中配置一致</span><br><span class="line">anon：所有用户可访问，通常作为指定页面的静态资源时使用</span><br></pre></td></tr></table></figure><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>获取权限的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.learnhow.springboot.web.PasswordHelper;</span><br><span class="line">import com.learnhow.springboot.web.entity.User;</span><br><span class="line">import com.learnhow.springboot.web.service.UserService;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping</span><br><span class="line">public class HomeController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private PasswordHelper passwordHelper;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;login&quot;)</span><br><span class="line">    public Object login() &#123;</span><br><span class="line">        return &quot;Here is Login page&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;unauthc&quot;)</span><br><span class="line">    public Object unauthc() &#123;</span><br><span class="line">        return &quot;Here is Unauthc page&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;doLogin&quot;)</span><br><span class="line">    public Object doLogin(@RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line">        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(username, password);</span><br><span class="line">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; catch (IncorrectCredentialsException ice) &#123;</span><br><span class="line">            return &quot;password error!&quot;;</span><br><span class="line">        &#125; catch (UnknownAccountException uae) &#123;</span><br><span class="line">            return &quot;username error!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        User user &#x3D; userService.findUserByName(username);</span><br><span class="line">        subject.getSession().setAttribute(&quot;user&quot;, user);</span><br><span class="line">        return &quot;SUCCESS&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;register&quot;)</span><br><span class="line">    public Object register(@RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        passwordHelper.encryptPassword(user);</span><br><span class="line"></span><br><span class="line">        userService.saveUser(user);</span><br><span class="line">        return &quot;SUCCESS&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权限拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learnhow.springboot.web.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"authc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthcController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User user = (User) subject.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"admin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome Admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"removable"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"removable"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert &amp; update</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"renewable"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">renewable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"renewable"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>windows下批处理BAT简单用法</title>
      <link href="/blog/2020/03/04/windows%E4%B8%8B%E6%89%B9%E5%A4%84%E7%90%86BAT%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
      <url>/blog/2020/03/04/windows%E4%B8%8B%E6%89%B9%E5%A4%84%E7%90%86BAT%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1852,阅读全文大约需要7分钟</p><blockquote><p>bat是windows的dos界面下对于各种命令操作的一中批处理语言，可以作为胶水语言连接其他语言，也可以处理简单的操作以及执行操作系统命令。<br>普通文本文件后缀改成<code>.bat</code>就可以成为批处理文件</p></blockquote><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li><code>REM xxx</code></li><li><code>:: xxx</code></li></ul><h1 id="基础美观操作"><a href="#基础美观操作" class="headerlink" title="基础美观操作"></a>基础美观操作</h1><ul><li><code>title newTitle</code>设置标题</li><li><code>color 01</code>设置颜色，0是黑色背景，1是蓝色前景。其他搭配见<code>color /?</code></li><li><code>mode con cols=113 lines=15 &amp; color 9f</code>设置列113、行15、颜色9f</li><li><code>pause</code>暂停，提示任意输入继续</li></ul><p>#转义</p><ul><li><code>,</code>相当空格</li><li><code>^</code>转义字符</li><li><code>命令1；命令2</code>报错后会继续执行</li></ul><h1 id="基础输入输出"><a href="#基础输入输出" class="headerlink" title="基础输入输出"></a>基础输入输出</h1><ul><li><code>echo &quot;你想说什么&quot;</code>输出文字</li><li><code>echo off</code>关闭c:\user&gt;_ 的前缀及其他提示，只留下光标</li><li><code>echo on</code>恢复回显</li><li><code>@echo off</code>连自身的命令回显都不要</li><li><code>echo.</code>输出空行，换行</li><li><code>echo &quot;somethine&quot;&gt;filename</code>把信息写入文件（覆盖）</li><li><code>echo &quot;somethine&quot;&gt;&gt;filename</code>把信息写入文件（追加）</li><li><code>echo (Ctrl+G)</code>喇叭鸣响，对个ctrl+G可响多次</li><li><code>%0 %1 %2</code>调用批处理时传的参数，<code>%0</code>自身<code>%1</code>第1个<blockquote><p>例：复制自身<code>copy %0 d:\wind.bat</code></p></blockquote></li><li><code>set /p choice=          输入一个字符:</code>获取输入</li></ul><h1 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h1><ul><li><code>第一个命令|第二个命令</code>管道命令，第一个的输出当成第二个的输入。<blockquote><p>例：<code>dir c:\|find “txt”</code></p></blockquote></li><li><code>命令一&amp;命令二</code>组合执行等于<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">命令一</span><br><span class="line">命令二</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><code>&amp;&amp; 和 ||</code> 同java短路</li></ul><h1 id="循环for"><a href="#循环for" class="headerlink" title="循环for"></a>循环for</h1><ul><li><code>for %%i in (set) do somthing</code>有/d /l /r /f 四个属性</li></ul><p><strong>/D属性</strong></p><ul><li><code>for /d %%i in (c:\*) do echo %%i</code>搜索C盘下的文件</li><li><code>for /d %%i in (???) do echo %%i</code>搜索当前目录下有1-3个字母的文件</li></ul><p><strong>/R属性</strong></p><ul><li><code>FOR /R [[drive:]path] %%variable IN (set) DO command [command-parameters]</code>/r后制定根目录，遍历目录树，如果没有路径默认当前目录。set为匹配规则</li><li><code>for /r c:\ %%i in (*.exe) do echo %%i</code>找c盘下的exe文件</li></ul><p><strong>/L属性</strong></p><ul><li><code>for /l %%i in (0,2,6) do @echo %%i</code>从0开始，每次加2，直到6.</li></ul><p><strong>/F属性</strong></p><ul><li><code>FOR /F “eol=; tokens=1,3* delims=,- ” %%i in (test.txt) do echo %%i %%j %%k</code>处理文件test.txt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eol&#x3D;;          分号开头的行为注释行</span><br><span class="line">tokens&#x3D;1,3*    将每行第1段,第3段和剩余字段分别赋予变量%%i，%%j，%%k</span><br><span class="line">delims&#x3D;,-     （减号后有一空格）以逗号减号和空格为分隔符，空格必须放在最后</span><br></pre></td></tr></table></figure><h1 id="循环if"><a href="#循环if" class="headerlink" title="循环if"></a>循环if</h1></li><li>判断<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set &#x2F;p p&#x3D;请输入</span><br><span class="line">if %p% LEQ 9 (</span><br><span class="line"> echo %p%</span><br><span class="line">) else (</span><br><span class="line"> echo 9</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>关系符</li></ul><table><thead><tr><th>含义</th><th>关系符</th></tr></thead><tbody><tr><td>等于</td><td>equ</td></tr><tr><td>大于</td><td>gtr</td></tr><tr><td>大于或等于</td><td>geq</td></tr><tr><td>小于</td><td>lss</td></tr><tr><td>小于或等于</td><td>leq</td></tr><tr><td>不等于</td><td>neq</td></tr><tr><td>- 存在</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if exist %cd%\test.LOG (</span><br><span class="line">echo 存在！</span><br><span class="line">)</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td>- 不存在</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if not exist %cd%\test.LOG (</span><br><span class="line">echo 不存在！</span><br><span class="line">)</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td># 跳转</td><td></td></tr><tr><td>- <code>:start</code>标注一个叫start的点</td><td></td></tr><tr><td>- <code>GOTO start</code>跳转到start</td><td></td></tr></tbody></table><h1 id="文件关联"><a href="#文件关联" class="headerlink" title="文件关联"></a>文件关联</h1><ul><li><code>assoc</code>设置’文件扩展名’关联，关联到’文件类型’</li><li><code>ftype</code>设置’文件类型’关联，关联到’执行程序和参数’</li><li><code>assoc</code>显示所有’文件扩展名’关联</li><li><code>assoc .txt</code>显示.txt代表的’文件类型’，结果显示 .txt=txtfile</li><li><code>assoc .doc</code>显示.doc代表的’文件类型’，结果显示 .doc=Word.Document.8</li><li><code>assoc .exe</code>显示.exe代表的’文件类型’，结果显示 .exe=exefile</li><li><code>ftype</code>显示所有’文件类型’关联</li><li><code>ftype exefile</code>显示exefile类型关联的命令行，结果显示 exefile=”%1” %* </li><li><code>assoc .txt=Word.Document.8</code>设置.txt为word类型的文档，可以看到.txt文件的图标都变了</li></ul><blockquote><p>ftype exefile=”%1” %*<br>恢复 exefile 的正确关联<br>如果该关联已经被破坏，可以运行 command.com ，再输入这条命令</p></blockquote><h1 id="变量延迟"><a href="#变量延迟" class="headerlink" title="变量延迟"></a>变量延迟</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">set a&#x3D;4</span><br><span class="line">set a&#x3D;5 &amp; echo !a!</span><br><span class="line">pause </span><br><span class="line">结果：5</span><br></pre></td></tr></table></figure><h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ATTRIB [+R|-R] [+A|-A] [+S|-S] [+H|-H] [[drive:] [path] filename] [&#x2F;S [&#x2F;D]]</span><br><span class="line">  +   设置属性。</span><br><span class="line">  -    清除属性。</span><br><span class="line">  R   只读文件属性。</span><br><span class="line">  A   存档文件属性。</span><br><span class="line">  S   系统文件属性。</span><br><span class="line">  H   隐藏文件属性。</span><br><span class="line">  [drive:][path][filename]</span><br><span class="line">      指定要处理的文件属性。</span><br><span class="line">  &#x2F;S  处理当前文件夹及其子文件夹中的匹配文件。</span><br><span class="line">  &#x2F;D  也处理文件夹。</span><br></pre></td></tr></table></figure><h1 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h1><ul><li><code>%ALLUSERSPROFILE%</code>本地 返回“所有用户”配置文件的位置。</li><li><code>%APPDATA%</code>本地 返回默认情况下应用程序存储数据的位置。</li><li><code>%CD%</code>本地 返回当前目录字符串。</li><li><code>%CMDCMDLINE%</code>本地 返回用来启动当前的 Cmd.exe 的准确命令行。</li><li><code>%CMDEXTVERSION%</code>系统 返回当前的“命令处理程序扩展”的版本号。</li><li><code>%COMPUTERNAME%</code>系统 返回计算机的名称。</li><li><code>%COMSPEC%</code>系统 返回命令行解释器可执行程序的准确路径。</li><li><code>%DATE%</code>系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关<br>date 命令的详细信息，请参阅 Date。</li><li><code>%ERRORLEVEL%</code>系统 返回上一条命令的错误代码。通常用非零值表示错误。</li><li><code>%HOMEDRIVE%</code>系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</li><li><code>%HOMEPATH%</code>系统 返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</li><li><code>%HOMESHARE%</code>系统 返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</li><li><code>%LOGONSERVER%</code>本地 返回验证当前登录会话的域控制器的名称。</li><li><code>%NUMBER_OF_PROCESSORS%</code>系统 指定安装在计算机上的处理器的数目。</li><li><code>%OS%</code>系统 返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。</li><li><code>%PATH%</code>系统 指定可执行文件的搜索路径。</li><li><code>%PATHEXT%</code>系统 返回操作系统认为可执行的文件扩展名的列表。</li><li><code>%PROCESSOR_ARCHITECTURE%</code>系统 返回处理器的芯片体系结构。值：x86 或 IA64 基于Itanium</li><li><code>%PROCESSOR_IDENTFIER%</code>系统 返回处理器说明。</li><li><code>%PROCESSOR_LEVEL%</code>系统 返回计算机上安装的处理器的型号。</li><li><code>%PROCESSOR_REVISION%</code>系统 返回处理器的版本号。</li><li><code>%PROMPT%</code>本地 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。</li><li><code>%RANDOM%</code>系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。</li><li><code>%SYSTEMDRIVE%</code>系统 返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。</li><li><code>%SYSTEMROOT%</code>系统 返回 Windows server operating system 根目录的位置。</li><li><code>%TEMP%</code>和<code>%TMP%</code>系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其他应用程序则需要 TMP。</li><li><code>%TIME%</code>系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关<br>time 命令的详细信息，请参阅 Time。</li><li><code>%USERDOMAIN%</code>本地 返回包含用户帐户的域的名称。</li><li><code>%USERNAME%</code>本地 返回当前登录的用户的名称。</li><li><code>%USERPROFILE%</code>本地 返回当前用户的配置文件的位置。</li><li><code>%WINDIR%</code>系统 返回操作系统目录的位置。</li></ul><h1 id="自动ftp下载"><a href="#自动ftp下载" class="headerlink" title="自动ftp下载"></a>自动ftp下载</h1><p><code>ftp  -n -s:[[drive:]path]filename</code><br>filename文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">open 90.52.8.3   ＃打开ip</span><br><span class="line">user iware       ＃用户为iware</span><br><span class="line">password8848    ＃密码</span><br><span class="line">bin             ＃二进制传输模式</span><br><span class="line">prompt</span><br><span class="line">cd tmp1         ＃切换至iware用户下的tmp1目录</span><br><span class="line">pwd</span><br><span class="line">lcd d:\download   ＃本地目录</span><br><span class="line">mget *          ＃下载tmp1目录下的所有文件</span><br><span class="line">bye             ＃退出ftp</span><br></pre></td></tr></table></figure><h1 id="通过ping实现延迟，完成进度条"><a href="#通过ping实现延迟，完成进度条" class="headerlink" title="通过ping实现延迟，完成进度条"></a>通过ping实现延迟，完成进度条</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">mode con cols&#x3D;113 lines&#x3D;15 &amp;color 9f</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo  程序正在初始化… </span><br><span class="line">echo.</span><br><span class="line">echo  ┌──────────────────────────────────────┐</span><br><span class="line">set&#x2F;p&#x3D;  ■&lt;nul</span><br><span class="line">for &#x2F;L %%i in (1 1 38) do set &#x2F;p a&#x3D;■&lt;nul&amp;ping &#x2F;n 1 127.0.0.1&gt;nul</span><br><span class="line">echo   100%%</span><br><span class="line">echo  └──────────────────────────────────────┘</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><p>生成5个100以内的随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">for &#x2F;L %%i in (1 1 5) do (</span><br><span class="line">   set &#x2F;a randomNum&#x3D;!random!%%100</span><br><span class="line">   echo 随机数：!randomNum!</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机通识 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>行为型模式（11种）</title>
      <link href="/blog/2020/03/04/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%8811%E7%A7%8D%EF%BC%89/"/>
      <url>/blog/2020/03/04/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%8811%E7%A7%8D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2631,阅读全文大约需要10分钟</p><h1 id="一、责任链模式-Chain-of-Responsibility-Pattern"><a href="#一、责任链模式-Chain-of-Responsibility-Pattern" class="headerlink" title="一、责任链模式(Chain of Responsibility Pattern)"></a>一、责任链模式(Chain of Responsibility Pattern)</h1><p>意图：创建一个处理请求的对象链，对象发送者和对象接受者解耦。责任链上的对象如果不能处理请求，就会把请求发送给下一个责任链节点。</p><p>实现：</p><ol><li>创建责任链节点的抽象类</li><li>使用抽象类生成若干处理节点</li><li>节点依次连接，保存下一个节点的地址</li><li>当请求进入时判断是否是自己处理的类型，不是传给下一个节点。</li><li>请求发送给责任链头节点即可</li></ol><h1 id="二、命令模式-Command-Pattern"><a href="#二、命令模式-Command-Pattern" class="headerlink" title="二、命令模式(Command Pattern)"></a>二、命令模式(Command Pattern)</h1><p>意图：将请求（可以是调用方法的请求）封装成一个对象，再创建一个执行类，可以向执行类中添加请求对象，然后再统一执行。执行前可以任意添加和删除命令。过程有点类似建造者模式，添加添加然后统一执行。</p><p>实现：</p><ol><li>创建一个命令的接口，声明一个<code>execute()</code>执行方法</li><li>创建一个请求类，里面有若干方法。这个方法原本是直接被调用的，现在要被外面包裹成命令，然后多个命令放到一个执行类中按顺序执行。</li><li>实现命令接口，每个命令类代表不同的操作。构造方法接收一个请求类，然后在<code>execute()</code>方法中对于具体执行操作封装。</li><li>创建一个命令调用类，类中包含一个列表存储放入的命令类。其中主要包含</li></ol><ul><li>命令列表（list）</li><li>添加命令的方法</li><li>删除命令的方法</li><li>循环调用命令列表中的命令的执行方法</li><li>还可以有记录执行了那些命令的方法…（可以根据记录还原）</li><li>还可以加上<code>undo()</code>方法，用于撤销执行的命令。具体实现要结合业务。</li></ul><ol start="5"><li>向命令盗用类中添加若干命令，然后调用执行方法统一执行所以的命令</li></ol><h1 id="三、解释器模式（Interpreter-Pattern）"><a href="#三、解释器模式（Interpreter-Pattern）" class="headerlink" title="三、解释器模式（Interpreter Pattern）"></a>三、解释器模式（Interpreter Pattern）</h1><p>意图：将语言或者表达式解析成具体的操作，例如<code>sql</code>解析，数学公式计算（符号处理引擎）等</p><p>实现：</p><ol><li>创建表达式接口<code>Expression</code>，声明一个解析方法<code>interpret</code></li><li>创建终结符类（不能再分割的元素）比如 <code>1 + 2</code>中的<code>1</code>和<code>2</code>都是终结符</li><li>创建非终结符（还能再被分割）<code>1 + 2</code>中的<code>+</code>。<code>+</code>号左右都可以有元素，在语法树上就是父节点，拥有左右两个子节点。而终结符就是叶子节点。</li><li>终结符和非终结符都在解析里定义好自己的功能，<br>如<code>1 + 1</code>中的终结符就是构造函数接受字符串并转化成<code>int</code>类型保存。<br>非终结符<code>+</code>就是构造函数中接收两个终结符，并调用其解析方法结果相加返回</li><li>将需要解释的字符串构建成语法树，即非终结符是父节点，终结符是叶子节点的树。然后深度遍历并解析。</li></ol><h1 id="四、迭代器模式（Iterator-Pattern）"><a href="#四、迭代器模式（Iterator-Pattern）" class="headerlink" title="四、迭代器模式（Iterator Pattern）"></a>四、迭代器模式（Iterator Pattern）</h1><p>意图: 提供一个方便的遍历集合的方法，但是不用暴露内部结构。</p><p>例子： Java中的集合迭代器</p><p>实现：</p><ol><li>创建一个迭代器接口，内部声明<code>hasNext()</code>和<code>next()</code>方法</li><li>创建一个集合类，内部构件好存储的结构，并实现迭代器接口</li><li>内部使用一个游标存储当前访问位置，<code>int index</code></li><li><code>hasNext</code>方法返回游标是否到了结尾</li><li><code>next</code>方法返回当前游标所在的元素，并且游标下移。</li></ol><h1 id="五、中介者模式（Mediator-Pattern）"><a href="#五、中介者模式（Mediator-Pattern）" class="headerlink" title="五、中介者模式（Mediator Pattern）"></a>五、中介者模式（Mediator Pattern）</h1><p>用于降低对象和类之间的通信复杂性。遵循迪米特原则，即最少知道原则。<br>将原来网状的通信方式转换成星型的结构，所有的类都通过一个中介类进行交流。</p><p>实现：</p><ol><li>创建一个中介类，其中有发送信息的方法</li><li>创建沟通的类，其中的发送方法使用的就是中介类的方法进行发送</li></ol><h1 id="六、备忘录模式（Memento-Pattern）"><a href="#六、备忘录模式（Memento-Pattern）" class="headerlink" title="六、备忘录模式（Memento Pattern）"></a>六、备忘录模式（Memento Pattern）</h1><p>允许获取类的内部状态，并且可以设置状态以便回复到导出时的状态。<br>在不破坏封装的前提下可以完成类的备份还原，可以用作游戏存档、撤销操作、历史、事务等。</p><p>实现： </p><ol><li>创建状态的类，其中的成员变量就是从需要还原的类中提取出来的变量。</li><li>创建用于存储和获取状态的类，其中用集合保存状态类。</li><li>需要还原的类中实现提取状态和通过状态类还原的操作，提取也就是把相应的变量赋值给状态类，还原就是把状态类的信息保存到相应变量。</li></ol><h1 id="七、观察者模式（Observer-Pattern）"><a href="#七、观察者模式（Observer-Pattern）" class="headerlink" title="七、观察者模式（Observer Pattern）"></a>七、观察者模式（Observer Pattern）</h1><p>订阅/发布 的模式，发布消息后会通知所有订阅了这个主题<code>topic</code>的类。<br>和中介模式的区别是这个是很明显的主体和客体的结构，一个主体发送信息，多个客体接收。<br>中介模式是所有的类只关心自己和中介类之间的关系，沟通全部交给中介处理。</p><p>实现（mqtt的例子）：</p><ol><li>设备连接<code>mqtt</code>服务器时维持连接（tcp）</li><li>设备主动订阅主题，服务器根据主题保存相应设备信息（在集合里保存观察者的信息）</li><li>主题有新的发布后推送给订阅了此主题的设备</li></ol><h1 id="八、状态模式（State-Pattern）"><a href="#八、状态模式（State-Pattern）" class="headerlink" title="八、状态模式（State Pattern）"></a>八、状态模式（State Pattern）</h1><p>意图：<br>允许类的内部在状态发生改变时改变他的行为<br>代码中有很多改变对象状态的条件语句时，可以使用状态模式将部分条件语句隐藏在类中<br>把类的可能出现的状态都列举并封装了</p><p>缺点：<br>结构较为复杂<br>对于开闭原则的支持不是很好，增加状态一定要修改逻辑<br>类会变庞大</p><p>实现：<br>在类中声明一个状态的属性<br>进行操作之前判断一下状态，然后再执行相应的动作</p><h1 id="九、策略模式（Strategy-Pattern）"><a href="#九、策略模式（Strategy-Pattern）" class="headerlink" title="九、策略模式（Strategy Pattern）"></a>九、策略模式（Strategy Pattern）</h1><p>策略模式就是把操作逻辑封装成不同的类，通过选择不同的类实例化就是选择不同的策略。<br>这种模式可以减少<code>if...else</code>的判断次数，逻辑清晰。<br>算法自由切换，并且拓展性良好<br>缺点是会增加代码量<br>spring中可以直接把类注册为组件，然后再通过名字注入。很方便就能实现</p><p>实现：<br>创建策略的接口，内部有具体的操作方法<br>创建不同的策略实现类，例如<code>+</code>的策略，就是把传入值相加。<code>-</code>的策略就是把传入值相减。<br>实例化策略类，并使用接口操作，执行操作方法。<br>因为是使用接口操作，所以策略类可以更换成其它的策略也可以正常运行</p><h1 id="十、模板模式（Template-Pattern）"><a href="#十、模板模式（Template-Pattern）" class="headerlink" title="十、模板模式（Template Pattern）"></a>十、模板模式（Template Pattern）</h1><p>意图：在抽象类中写好其它几个抽象方法直接的调用关系，具体方法让子类实现。即搭建好累的框架，细节让子类自己实现。</p><p>实现：</p><ol><li>创建一个游戏的抽象类，内部有初始游戏、开始游戏、结束游戏三个抽象方法</li><li>增加一个<code>final play</code>方法，按顺序调用初始、开始、结束三个抽象方法。以指明子类的执行顺序也是这样</li><li>创建子类，实现此抽象类。实现具体的抽象方法</li><li>通过父类执行<code>play</code>方法</li></ol><h1 id="十一、访问者模式（Visitor-Pattern）"><a href="#十一、访问者模式（Visitor-Pattern）" class="headerlink" title="十一、访问者模式（Visitor Pattern）"></a>十一、访问者模式（Visitor Pattern）</h1><p>意图：当一个类的数据结构很稳固，但是操作容易改变。或者类中有很多和结构无关的操作，防止这些操作改变类的数据。所以采用访问者模式进行数据和操作的分离。<br>有良好的拓展性，符合单一职责原则，灵活</p><p>关键：数据类中实现一个接收访问的方法，并调用访问者的访问方法，传入自身<br>访问者根据传入的数据类进行操作</p><p>实现：</p><ol><li>创建一个被访问接口，内部有一个被访问的方法，入参是访问者接口</li><li>访问者接口，内部有访问的方法，入参是被访问者接口</li><li>实现接口</li><li>访问者需要访问时就直接调用被访问者的被访问方法，并使用入参操作值。</li></ol><hr><p>其它设计模式</p><h1 id="空对象模式（Null-Object-Pattern）"><a href="#空对象模式（Null-Object-Pattern）" class="headerlink" title="空对象模式（Null Object Pattern）"></a>空对象模式（Null Object Pattern）</h1><p>意图：用一个代表空的对象代替<code>null</code>，空对象相对于<code>null</code>可以拥有默认的行为。</p><p>实现：<br>创建一个对象接口，有<code>isNil</code>和相应操作的方法<br>创建一个空对象，并实现<code>isNil</code>方法，用于判断当前方法是否为空。并赋予默认方法，例如输出当前为空<br>创建非空对象，实现<code>isNil</code>方法，并实现操作方法，如输出非空<br>然后就可以使用了，比如从集合中取出非空元素并执行。<br>-》 遍历集合，判断是否为空，并执行默认方法</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>查看JVM信息</title>
      <link href="/blog/2020/03/04/%E6%9F%A5%E7%9C%8BJVM%E4%BF%A1%E6%81%AF/"/>
      <url>/blog/2020/03/04/%E6%9F%A5%E7%9C%8BJVM%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：577,阅读全文大约需要2分钟</p><blockquote><p>网上复制的 <a href="https://blog.csdn.net/tian6318/article/details/86485899" target="_blank" rel="noopener">原文链接</a></p></blockquote><h1 id="经检验，此方法在不同的操作系统下不稳定。有些参数获取失败，目前使用的方式是OSHI开源工具获取信息"><a href="#经检验，此方法在不同的操作系统下不稳定。有些参数获取失败，目前使用的方式是OSHI开源工具获取信息" class="headerlink" title="经检验，此方法在不同的操作系统下不稳定。有些参数获取失败，目前使用的方式是OSHI开源工具获取信息"></a>经检验，此方法在不同的操作系统下不稳定。有些参数获取失败，目前使用的方式是OSHI开源工具获取信息</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.management.ClassLoadingMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.CompilationMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.GarbageCollectorMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.MemoryPoolMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.MemoryUsage;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.OperatingSystemMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.RuntimeMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadMXBean;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormatSymbols;</span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> NumberFormat fmtI = <span class="keyword">new</span> DecimalFormat(<span class="string">"###,###"</span>, <span class="keyword">new</span> DecimalFormatSymbols(Locale.ENGLISH));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> NumberFormat fmtD = <span class="keyword">new</span> DecimalFormat(<span class="string">"###,##0.000"</span>, <span class="keyword">new</span> DecimalFormatSymbols(Locale.ENGLISH));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//运行时情况</span></span><br><span class="line">RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();</span><br><span class="line"><span class="comment">//操作系统情况</span></span><br><span class="line">        OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();</span><br><span class="line">        <span class="comment">//线程使用情况</span></span><br><span class="line">        ThreadMXBean threads = ManagementFactory.getThreadMXBean();</span><br><span class="line">        <span class="comment">//堆内存使用情况</span></span><br><span class="line">        MemoryUsage heapMemoryUsage = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();</span><br><span class="line">        <span class="comment">//非堆内存使用情况</span></span><br><span class="line">        MemoryUsage nonHeapMemoryUsage = ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();</span><br><span class="line">        <span class="comment">//类加载情况</span></span><br><span class="line">        ClassLoadingMXBean cl = ManagementFactory.getClassLoadingMXBean();</span><br><span class="line">        <span class="comment">//内存池对象</span></span><br><span class="line">        List&lt;MemoryPoolMXBean&gt; pools = ManagementFactory.getMemoryPoolMXBeans();</span><br><span class="line">        <span class="comment">//编译器和编译情况</span></span><br><span class="line">        CompilationMXBean cm = ManagementFactory.getCompilationMXBean();</span><br><span class="line">        <span class="comment">//获取GC对象（不好用）</span></span><br><span class="line">        List&lt;GarbageCollectorMXBean&gt; gcmList = ManagementFactory.getGarbageCollectorMXBeans();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">        <span class="comment">//运行时情况</span></span><br><span class="line">        System.out.printf(<span class="string">"jvm.name (JVM名称-版本号-供应商):%s | version: %s | vendor: %s  %n"</span>, runtime.getVmName(), runtime.getVmVersion(), runtime.getVmVendor());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.spec.name (JVM规范名称-版本号-供应商):%s | version: %s | vendor: %s  %n"</span>, runtime.getSpecName(), runtime.getSpecVersion(), runtime.getSpecVendor());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.java.version (JVM JAVA版本):%s%n"</span>, System.getProperty(<span class="string">"java.version"</span>));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.start.time (Java虚拟机的启动时间):%s%n"</span>, toDuration(runtime.getStartTime()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.uptime (Java虚拟机的正常运行时间):%s%n"</span>, toDuration(runtime.getUptime()));</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//编译情况</span></span><br><span class="line">        System.out.printf(<span class="string">"compilation.name(编译器名称)：%s%n"</span>,cm.getName());</span><br><span class="line">        System.out.printf(<span class="string">"compilation.total.time(编译器耗时)：%d毫秒%n"</span>,cm.getTotalCompilationTime());</span><br><span class="line">        <span class="keyword">boolean</span> isSupport=cm.isCompilationTimeMonitoringSupported();  </span><br><span class="line">        <span class="keyword">if</span>(isSupport)&#123;  </span><br><span class="line">            System.out.println(<span class="string">"支持即时编译器编译监控"</span>);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            System.out.println(<span class="string">"不支持即时编译器编译监控"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.printf(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//JVM 线程情况</span></span><br><span class="line">        System.out.printf(<span class="string">"jvm.threads.total.count (总线程数(守护+非守护)):%d%n"</span>, threads.getThreadCount());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.threads.daemon.count (守护进程线程数):%d%n"</span>, threads.getDaemonThreadCount());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.threads.peak.count (峰值线程数):%d%n"</span>, threads.getPeakThreadCount());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.threads.total.start.count(Java虚拟机启动后创建并启动的线程总数):%d%n"</span>, threads.getTotalStartedThreadCount());</span><br><span class="line">        <span class="keyword">for</span>(Long threadId : threads.getAllThreadIds()) &#123;</span><br><span class="line">        System.out.printf(<span class="string">"threadId: %d | threadName: %s%n"</span>, threadId, threads.getThreadInfo(threadId).getThreadName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//获取GC信息</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//堆内存情况</span></span><br><span class="line">        System.out.printf(<span class="string">"jvm.heap.init (初始化堆内存):%s %n"</span>,  bytesToMB(heapMemoryUsage.getInit()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.heap.used (已使用堆内存):%s %n"</span>, bytesToMB(heapMemoryUsage.getUsed()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.heap.committed (可使用堆内存):%s %n"</span>, bytesToMB(heapMemoryUsage.getCommitted()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.heap.max (最大堆内存):%s %n"</span>, bytesToMB(heapMemoryUsage.getMax()));</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//非堆内存使用情况</span></span><br><span class="line">        System.out.printf(<span class="string">"jvm.noheap.init (初始化非堆内存):%s %n"</span>,  bytesToMB(nonHeapMemoryUsage.getInit()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.noheap.used (已使用非堆内存):%s %n"</span>,  bytesToMB(nonHeapMemoryUsage.getUsed()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.noheap.committed (可使用非堆内存):%s %n"</span>,  bytesToMB(nonHeapMemoryUsage.getCommitted()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.noheap.max (最大非堆内存):%s %n"</span>, bytesToMB(nonHeapMemoryUsage.getMax()));</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//系统概况</span></span><br><span class="line">        System.out.printf(<span class="string">"os.name(操作系统名称-版本号):%s %s %s %n"</span>, os.getName(), <span class="string">"version"</span>, os.getVersion());</span><br><span class="line">        System.out.printf(<span class="string">"os.arch(操作系统内核):%s%n"</span>, os.getArch());</span><br><span class="line">        System.out.printf(<span class="string">"os.cores(可用的处理器数量):%s %n"</span>, os.getAvailableProcessors());</span><br><span class="line">        System.out.printf(<span class="string">"os.loadAverage(系统负载平均值):%s %n"</span>, os.getSystemLoadAverage());</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//类加载情况</span></span><br><span class="line">        System.out.printf(<span class="string">"class.current.load.count(当前加载类数量):%s %n"</span>, cl.getLoadedClassCount());</span><br><span class="line">        System.out.printf(<span class="string">"class.unload.count(未加载类数量):%s %n"</span>, cl.getUnloadedClassCount());</span><br><span class="line">        System.out.printf(<span class="string">"class.total.load.count(总加载类数量):%s %n"</span>, cl.getTotalLoadedClassCount());</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(MemoryPoolMXBean pool : pools) &#123;</span><br><span class="line">        <span class="keyword">final</span> String kind = pool.getType().name(); </span><br><span class="line">        <span class="keyword">final</span> MemoryUsage usage = pool.getUsage(); </span><br><span class="line">        System.out.println(<span class="string">"内存模型： "</span> + getKindName(kind) + <span class="string">", 内存空间名称： "</span> + getPoolName(pool.getName()) + <span class="string">", jvm."</span> + pool.getName() + <span class="string">".init(初始化):"</span> + bytesToMB(usage.getInit())); </span><br><span class="line">        System.out.println(<span class="string">"内存模型： "</span> + getKindName(kind) + <span class="string">", 内存空间名称： "</span> + getPoolName(pool.getName()) + <span class="string">", jvm."</span> + pool.getName() + <span class="string">".used(已使用): "</span> + bytesToMB(usage.getUsed())); </span><br><span class="line">        System.out.println(<span class="string">"内存模型： "</span> + getKindName(kind) + <span class="string">", 内存空间名称： "</span> + getPoolName(pool.getName()) + <span class="string">", jvm."</span> + pool.getName()+ <span class="string">".committed(可使用):"</span> + bytesToMB(usage.getCommitted())); </span><br><span class="line">        System.out.println(<span class="string">"内存模型： "</span> + getKindName(kind) + <span class="string">", 内存空间名称： "</span> + getPoolName(pool.getName()) + <span class="string">", jvm."</span> + pool.getName() + <span class="string">".max(最大):"</span> + bytesToMB(usage.getMax()));</span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">getKindName</span><span class="params">(String kind)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"NON_HEAP"</span>.equals(kind)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"NON_HEAP(非堆内存)"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HEAP(堆内存)"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">getPoolName</span><span class="params">(String poolName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (poolName) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Code Cache"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(代码缓存区)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Metaspace"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(元空间)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Compressed Class Space"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(类指针压缩空间)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"PS Eden Space"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(伊甸园区)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"PS Survivor Space"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(幸存者区)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"PS Old Gen"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(老年代)"</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> poolName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">bytesToMB</span><span class="params">(<span class="keyword">long</span> bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fmtI.format((<span class="keyword">long</span>)(bytes / <span class="number">1024</span> / <span class="number">1024</span>)) + <span class="string">" MB"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">printSizeInKb</span><span class="params">(<span class="keyword">double</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fmtI.format((<span class="keyword">long</span>) (size / <span class="number">1024</span>)) + <span class="string">" kbytes"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">toDuration</span><span class="params">(<span class="keyword">double</span> uptime)</span> </span>&#123;</span><br><span class="line">        uptime /= <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span> (uptime &lt; <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fmtD.format(uptime) + <span class="string">" seconds"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        uptime /= <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">if</span> (uptime &lt; <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> minutes = (<span class="keyword">long</span>) uptime;</span><br><span class="line">            String s = fmtI.format(minutes) + (minutes &gt; <span class="number">1</span> ? <span class="string">" minutes"</span> : <span class="string">" minute"</span>);</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        uptime /= <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">if</span> (uptime &lt; <span class="number">24</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> hours = (<span class="keyword">long</span>) uptime;</span><br><span class="line">            <span class="keyword">long</span> minutes = (<span class="keyword">long</span>) ((uptime - hours) * <span class="number">60</span>);</span><br><span class="line">            String s = fmtI.format(hours) + (hours &gt; <span class="number">1</span> ? <span class="string">" hours"</span> : <span class="string">" hour"</span>);</span><br><span class="line">            <span class="keyword">if</span> (minutes != <span class="number">0</span>) &#123;</span><br><span class="line">                s += <span class="string">" "</span> + fmtI.format(minutes) + (minutes &gt; <span class="number">1</span> ? <span class="string">" minutes"</span> : <span class="string">" minute"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        uptime /= <span class="number">24</span>;</span><br><span class="line">        <span class="keyword">long</span> days = (<span class="keyword">long</span>) uptime;</span><br><span class="line">        <span class="keyword">long</span> hours = (<span class="keyword">long</span>) ((uptime - days) * <span class="number">24</span>);</span><br><span class="line">        String s = fmtI.format(days) + (days &gt; <span class="number">1</span> ? <span class="string">" days"</span> : <span class="string">" day"</span>);</span><br><span class="line">        <span class="keyword">if</span> (hours != <span class="number">0</span>) &#123;</span><br><span class="line">            s += <span class="string">" "</span> + fmtI.format(hours) + (hours &gt; <span class="number">1</span> ? <span class="string">" hours"</span> : <span class="string">" hour"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate连接池</title>
      <link href="/blog/2020/03/04/RedisTemplate%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/blog/2020/03/04/RedisTemplate%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：51,阅读全文大约需要1分钟</p><blockquote><p>RedisTemplate每次都从连接池中获取一个连接，并执行回调。执行完毕后将连接放回连接池。</p></blockquote><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>基于<code>jdk1.8</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(RedisCallback&lt;T&gt; action, <span class="keyword">boolean</span> exposeConnection, <span class="keyword">boolean</span> pipeline)</span> </span>&#123;</span><br><span class="line">        Assert.isTrue(<span class="keyword">this</span>.initialized, <span class="string">"template not initialized; call afterPropertiesSet() before using it"</span>);</span><br><span class="line">        Assert.notNull(action, <span class="string">"Callback object must not be null"</span>);</span><br><span class="line">        RedisConnectionFactory factory = <span class="keyword">this</span>.getConnectionFactory();</span><br><span class="line">        RedisConnection conn = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Object var11;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.enableTransactionSupport) &#123;</span><br><span class="line">                conn = RedisConnectionUtils.bindConnection(factory, <span class="keyword">this</span>.enableTransactionSupport);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                conn = RedisConnectionUtils.getConnection(factory);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> existingConnection = TransactionSynchronizationManager.hasResource(factory);</span><br><span class="line">            RedisConnection connToUse = <span class="keyword">this</span>.preProcessConnection(conn, existingConnection);</span><br><span class="line">            <span class="keyword">boolean</span> pipelineStatus = connToUse.isPipelined();</span><br><span class="line">            <span class="keyword">if</span> (pipeline &amp;&amp; !pipelineStatus) &#123;</span><br><span class="line">                connToUse.openPipeline();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RedisConnection connToExpose = exposeConnection ? connToUse : <span class="keyword">this</span>.createRedisConnectionProxy(connToUse);</span><br><span class="line">            T result = action.doInRedis(connToExpose);</span><br><span class="line">            <span class="keyword">if</span> (pipeline &amp;&amp; !pipelineStatus) &#123;</span><br><span class="line">                connToUse.closePipeline();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var11 = <span class="keyword">this</span>.postProcessResult(result, connToUse, existingConnection);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RedisConnectionUtils.releaseConnection(conn, factory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var11;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java调用执行外部程序</title>
      <link href="/blog/2020/03/04/java%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/blog/2020/03/04/java%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：85,阅读全文大约需要1分钟</p><blockquote><p>java调用外部程序可以使用<code>Runtime.getRuntime().exec()</code>，他会调用一个新的进程去执行。</p></blockquote><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    　　String cmd = <span class="string">"cmd /c dir c:\\windows"</span>;</span><br><span class="line">    　　<span class="keyword">final</span> Process process = Runtime.getRuntime().exec(cmd);</span><br><span class="line">    　　printMessage(process.getInputStream());</span><br><span class="line">    　　printMessage(process.getErrorStream());</span><br><span class="line">    　　<span class="keyword">int</span> value = process.waitFor();</span><br><span class="line">    　　System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//防止输出流缓存不够导致堵塞，所以开启新的线程读取输出流。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(<span class="keyword">final</span> InputStream input)</span> </span>&#123;</span><br><span class="line">    　　<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">       　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        　　　　Reader reader = <span class="keyword">new</span> InputStreamReader(input);</span><br><span class="line">        　　　　BufferedReader bf = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">        　　　　String line = <span class="keyword">null</span>;</span><br><span class="line">        　　　  <span class="keyword">try</span> &#123;</span><br><span class="line">            　　　　<span class="keyword">while</span>((line=bf.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                　　　　System.out.println(line);</span><br><span class="line">            　　　　&#125;</span><br><span class="line">         　　　　&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            　　　　e.printStackTrace();</span><br><span class="line">         　　　 &#125;</span><br><span class="line">        　&#125;</span><br><span class="line">    　　&#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ResponseBodyAdvice切面操作返回值</title>
      <link href="/blog/2020/03/04/ResponseBodyAdvice%E5%88%87%E9%9D%A2%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
      <url>/blog/2020/03/04/ResponseBodyAdvice%E5%88%87%E9%9D%A2%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：127,阅读全文大约需要1分钟</p><blockquote><p><code>ResponseBodyAdvice</code>可以在注解<code>@ResponseBody</code>将返回值处理成相应格式之前操作返回值。实现这个接口即可完成相应操作。可用于返回值加密</p></blockquote><blockquote><p>@ControllerAdvice标记类</p></blockquote><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Whether this component supports the given controller method return type</span></span><br><span class="line"><span class="comment"> * and the selected &#123;<span class="doctag">@code</span> HttpMessageConverter&#125; type.(此组件是否支持给定的控制器方法返回值类型)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> returnType the return type（返回类型）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converterType the selected converter type(选中的转换器类型)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if &#123;<span class="doctag">@link</span> #beforeBodyWrite&#125; should be invoked;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> false&#125; otherwise（返回是否调用处理方法）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">support</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invoked after an &#123;<span class="doctag">@code</span> HttpMessageConverter&#125; is selected and just before</span></span><br><span class="line"><span class="comment"> * its write method is invoked.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> body the body to be written（需要写操作的body）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> returnType the return type of the controller method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selectedContentType the content type selected through content negotiation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selectedConverterType the converter type selected to write to the response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request the current request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response the current response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the body that was passed in or a modified (possibly new) instance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">T <span class="title">beforeBodyWrite</span><span class="params">(@Nullable T body, MethodParameter returnType, MediaType selectedContentType,</span></span></span><br><span class="line"><span class="function"><span class="params">Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType,</span></span></span><br><span class="line"><span class="function"><span class="params">ServerHttpRequest request, ServerHttpResponse response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>在参数被方法调用之前截取参数的是<code>RequestBodyAdvice</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogRequestBodyAdvice</span> <span class="keyword">implements</span> <span class="title">RequestBodyAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter methodParameter, Type type, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpInputMessage <span class="title">beforeBodyRead</span><span class="params">(HttpInputMessage httpInputMessage, MethodParameter methodParameter, Type type, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> httpInputMessage;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">afterBodyRead</span><span class="params">(Object o, HttpInputMessage httpInputMessage, MethodParameter methodParameter, Type type, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        Method method=methodParameter.getMethod();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;.&#123;&#125;:&#123;&#125;"</span>,method.getDeclaringClass().getSimpleName(),method.getName(),JSON.toJSONString(o));</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handleEmptyBody</span><span class="params">(Object o, HttpInputMessage httpInputMessage, MethodParameter methodParameter, Type type, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        Method method=methodParameter.getMethod();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;.&#123;&#125;"</span>,method.getDeclaringClass().getSimpleName(),method.getName());</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jpa刷新模式</title>
      <link href="/blog/2020/03/04/jpa%E5%88%B7%E6%96%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/blog/2020/03/04/jpa%E5%88%B7%E6%96%B0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：90,阅读全文大约需要1分钟</p><blockquote><p>FlushMode提供了4种缓存模式：MANUAL、COMMIT、AUTO和ALWAYS。使用<code>setFlushModel</code>切换</p></blockquote><ul><li><code>MANUAL</code> 必须手动调用<code>flush()</code></li><li><code>COMMIT</code> 事物提交才会</li><li><code>AUTO</code> 事务提交或者手动刷新，都能将脏数据同步到数据库。除此之外，某些查询出现的时候也会导致缓存刷新。（不过不是很智能）</li><li><code>ALWAYS</code>总是，一般不用</li></ul>]]></content>
      
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jpa基本原理</title>
      <link href="/blog/2020/03/04/jpa%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/blog/2020/03/04/jpa%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：91,阅读全文大约需要1分钟</p><ol><li><code>spring</code>在创建时会搜索所有的<code>JpaRepository</code>，并使用<code>SimpleJpaRepository</code>作为其实现类</li><li><code>SimpleJpaRepository</code>的构造方法接收一个<code>EntityManager</code>，是<code>spring</code>在创建初期就注入了<code>EntityManagerFactory</code>，并生成了一个<code>EntityManager</code>并传入</li><li><code>EntityManager</code>创建<code>Query</code>对象</li><li><code>Query</code>对象<code>getResultList()</code>获取结果（获取一次就关闭了，所以需要及时保存结果）</li></ol>]]></content>
      
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jpa分页</title>
      <link href="/blog/2020/03/04/jpa%E5%88%86%E9%A1%B5/"/>
      <url>/blog/2020/03/04/jpa%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：200,阅读全文大约需要1分钟</p><blockquote><p><code>jpa</code>提供了分页查询的接口，之前使用<code>limit</code>进行分页，但是某些数据库（<code>SQLServer</code>）不支持<code>limit</code>语句，为了兼容于是想到<code>jpa</code>自带的方法</p></blockquote><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序方式，根据id升序</span></span><br><span class="line">Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC,<span class="string">"id"</span>);</span><br><span class="line"><span class="comment">//从第0页，每页数据10条，按照sort指定的方式排序</span></span><br><span class="line">Pageable pageable= <span class="keyword">new</span> PageRequest(<span class="number">0</span>,<span class="number">10</span>,sort );</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">Page&lt;Model&gt; modelPage = modelDao.findAll(pageable);</span><br></pre></td></tr></table></figure><h1 id="结果使用"><a href="#结果使用" class="headerlink" title="结果使用"></a>结果使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getTotalPages()  总共有多少页</span><br><span class="line">getTotalElements()   总共有多少条数据</span><br><span class="line">getNumber() 获取当前页码</span><br><span class="line">getSize() 每页指定有多少元素</span><br><span class="line">getNumberOfElements() 当前页实际有多少元素</span><br><span class="line">hasContent() 当前页是否有数据</span><br><span class="line">getContent() 获取当前页中所有数据（List&lt;T&gt;）</span><br><span class="line">getSort() 获取分页查询排序规则</span><br><span class="line">isFirst() 当前页是否是第一页</span><br><span class="line">isLast() 当前页是否是最后一页</span><br><span class="line">hasPrevious() 是否有上一页</span><br><span class="line">hasNext() 是否有下一页</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jpa主键生成策略</title>
      <link href="/blog/2020/03/04/jpa%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5/"/>
      <url>/blog/2020/03/04/jpa%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：293,阅读全文大约需要1分钟</p><blockquote><p>主键除了自己设置，还有很多种方法可以让数据库自动生成。将注解写在实体类属性上就可以获得相应功能</p></blockquote><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul><li><code>@GeneratorValue</code>注解—-JPA通用策略生成器</li></ul><ol><li>参数GenerationType<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public enum GenerationType&#123;    </span><br><span class="line"> </span><br><span class="line">    TABLE,    &#x2F;&#x2F;特定表生成 见3</span><br><span class="line"> </span><br><span class="line">    SEQUENCE,    &#x2F;&#x2F;数据库底层 见4</span><br><span class="line"> </span><br><span class="line">    IDENTITY,    &#x2F;&#x2F;自增序列生成</span><br><span class="line"> </span><br><span class="line">    AUTO   &#x2F;&#x2F;默认，自动选择</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>参数generator:其它生成器的名字，配合<code>@GenericGenerator</code>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@GeneratedValue(generator&#x3D;&quot;system-uuid&quot;)&#x2F;&#x2F;关联system-uuid</span><br><span class="line">@GenericGenerator(name&#x3D;&quot;system-uuid&quot;, strategy &#x3D; &quot;uuid&quot;)</span><br><span class="line">&#x2F;&#x2F;system-uuid策略是uuid 还可以是uuid.hex（16进制）共12种策略</span><br></pre></td></tr></table></figure></li><li>TABLE生成策略使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">@Column(name&#x3D;&quot;id&quot;)</span><br><span class="line">@GeneratedValue(strategy&#x3D;GenerationType.TABLE,generator&#x3D;&quot;table_gen&quot;)</span><br><span class="line">@TableGenerator(</span><br><span class="line">name &#x3D; &quot;table_gen&quot;,  </span><br><span class="line">table&#x3D;&quot;fendo_generator&quot;,  </span><br><span class="line">pkColumnName&#x3D;&quot;seq_name&quot;,     &#x2F;&#x2F;指定主键的名字</span><br><span class="line">pkColumnValue&#x3D;&quot;fendos&quot;,      &#x2F;&#x2F;指定下次插入主键时使用默认的值</span><br><span class="line">valueColumnName&#x3D;&quot;seq_id&quot;,    &#x2F;&#x2F;该主键当前所生成的值，它的值将会随着每次创建累加</span><br><span class="line">initialValue &#x3D; 1,            &#x2F;&#x2F;初始化值</span><br><span class="line">allocationSize&#x3D;1             &#x2F;&#x2F;累加值</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>SEQUENCE使用<blockquote><p>部分数据库(Oracle,PostgreSQL,DB2)支持序列对象,因为其不支持主键自增，所以这是自增的补充方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.SEQUENCE,generator&#x3D;&quot;fendo_seq&quot;)  </span><br><span class="line">@SequenceGenerator(name&#x3D;&quot;fendo_seq&quot;, sequenceName&#x3D;&quot;seq_name&quot;)</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>@GenericGenerator</code>注解—-自定义主键生成策略<br>可选部分<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GENERATORS.put(&quot;uuid&quot;, UUIDHexGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;hilo&quot;, TableHiLoGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;assigned&quot;, Assigned.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;identity&quot;, IdentityGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;select&quot;, SelectGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;sequence&quot;, SequenceGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;seqhilo&quot;, SequenceHiLoGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;increment&quot;, IncrementGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;foreign&quot;, ForeignGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;guid&quot;, GUIDGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;uuid.hex&quot;, UUIDHexGenerator.class); &#x2F;&#x2F;uuid.hex is deprecated  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;sequence-identity&quot;, SequenceIdentityGenerator.class);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jquery-validate表单验证</title>
      <link href="/blog/2020/03/04/jquery-validate%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/blog/2020/03/04/jquery-validate%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：520,阅读全文大约需要2分钟</p><blockquote><p>jquery.validate.min.js 是一款基于jq的表单验证工具。找到的教程大部分都是同步提交下的使用，以下是我找到的ajax提交方式下的使用。</p></blockquote><h1 id="使用内置验证规则"><a href="#使用内置验证规则" class="headerlink" title="使用内置验证规则"></a>使用内置验证规则</h1><ol><li><p>为表单添加表单验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#cForm&quot;).validate();</span><br></pre></td></tr></table></figure><p>表单验证错误信息输出位置自定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- input是表单的输入框 --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;inputMain&quot;&gt;用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; &#x2F;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- for和input的name绑定 --&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;height:20px;&quot;&gt;&lt;label id&#x3D;&quot;user-error&quot; class&#x3D;&quot;error&quot; for&#x3D;&quot;user&quot;&gt;&lt;&#x2F;label&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#cForm input[name&#x3D;&#39;name&#39;]&quot;).rules(&quot;add&quot;,&#123;required: true&#125;) &#x2F;&#x2F;规则的意思是必填</span><br></pre></td></tr></table></figure></li></ol><p>3.ajax前验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if($(&quot;#categoryForm&quot;).valid())&#123;&#x2F;&#x2F;验证并返回结果</span><br><span class="line">    &#x2F;&#x2F;ajax...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>规则和验证信息自定义可以自己百度，信息不写会有默认规则。</p></blockquote><p>附较为详细的规则及自定义提示信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">$().ready(function() &#123;</span><br><span class="line">&#x2F;&#x2F; 在键盘按下并释放及提交后验证提交表单</span><br><span class="line">  $(&quot;#signupForm&quot;).validate(&#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      firstname: &quot;required&quot;,</span><br><span class="line">      lastname: &quot;required&quot;,</span><br><span class="line">      username: &#123;</span><br><span class="line">        required: true,</span><br><span class="line">        minlength: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      password: &#123;</span><br><span class="line">        required: true,</span><br><span class="line">        minlength: 5</span><br><span class="line">      &#125;,</span><br><span class="line">      confirm_password: &#123;</span><br><span class="line">        required: true,</span><br><span class="line">        minlength: 5,</span><br><span class="line">        equalTo: &quot;#password&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      email: &#123;</span><br><span class="line">        required: true,</span><br><span class="line">        email: true</span><br><span class="line">      &#125;,</span><br><span class="line">      topic: &#123;</span><br><span class="line">        required: &quot;#newsletter:checked&quot;,</span><br><span class="line">        minlength: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      agree: &quot;required&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    messages: &#123;</span><br><span class="line">      firstname: &quot;请输入您的名字&quot;,</span><br><span class="line">      lastname: &quot;请输入您的姓氏&quot;,</span><br><span class="line">      username: &#123;</span><br><span class="line">        required: &quot;请输入用户名&quot;,</span><br><span class="line">        minlength: &quot;用户名必需由两个字母组成&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      password: &#123;</span><br><span class="line">        required: &quot;请输入密码&quot;,</span><br><span class="line">        minlength: &quot;密码长度不能小于 5 个字母&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      confirm_password: &#123;</span><br><span class="line">        required: &quot;请输入密码&quot;,</span><br><span class="line">        minlength: &quot;密码长度不能小于 5 个字母&quot;,</span><br><span class="line">        equalTo: &quot;两次密码输入不一致&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      email: &quot;请输入一个正确的邮箱&quot;,</span><br><span class="line">      agree: &quot;请接受我们的声明&quot;,</span><br><span class="line">      topic: &quot;请选择两个主题&quot;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="自定义验证规则"><a href="#自定义验证规则" class="headerlink" title="自定义验证规则"></a>自定义验证规则</h1><blockquote><p>其他操作参考上面</p></blockquote><ol><li>添加规则<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jQuery.validator.addMethod(&quot;validName&quot;, function(value, element)&#123;</span><br><span class="line">    var obValue&#x3D;value;&#x2F;&#x2F;对象的值</span><br><span class="line">    var ob&#x3D;element;&#x2F;&#x2F;需要处理的对象</span><br><span class="line">    return true;</span><br><span class="line">&#125;, &quot;提示信息&quot;);</span><br></pre></td></tr></table></figure></li></ol><p>2.为表单元素添加规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#nameInput&quot;).rules(&quot;add&quot;,&#123;</span><br><span class="line">      validName:true; &#x2F;&#x2F;规则名：期望值（未达到期望值提示自定义的错误信息）</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.validator.addMethod(&quot;af&quot;,function(value,element,params)&#123;  </span><br><span class="line">    if(value.length&gt;1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if(value&gt;&#x3D;params[0] &amp;&amp; value&lt;&#x3D;params[1])&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,&quot;必须是一个字母,且a-f&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username:&#123;</span><br><span class="line">   af:[&quot;a&quot;,&quot;f&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其它方式提交表单"><a href="#其它方式提交表单" class="headerlink" title="其它方式提交表单"></a>其它方式提交表单</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".selector"</span>).validate(&#123;     </span><br><span class="line">submitHandler: <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span></span><br><span class="line"><span class="function">  </span>&#123;      </span><br><span class="line">     $(form).ajaxSubmit();     </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><ol><li><p>只验证不提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$().ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//只验证不提交</span></span><br><span class="line"> $(<span class="string">"#signupForm"</span>).validate(&#123;</span><br><span class="line">        debug:<span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>默认参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置默认参数，使用其它方式提交</span></span><br><span class="line">$.validator.setDefaults(&#123;</span><br><span class="line">  submitHandler: <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123; alert(<span class="string">"提交事件!"</span>);form.submit(); &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>错误显示位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认是追加到元素后面</span></span><br><span class="line">errorPlacement: <span class="function"><span class="keyword">function</span>(<span class="params">error, element</span>) </span>&#123;  </span><br><span class="line">    error.appendTo(element.parent());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>远程校验</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">remote: &#123;</span><br><span class="line">    url: <span class="string">"check-email.php"</span>,     <span class="comment">//后台处理程序</span></span><br><span class="line">    type: <span class="string">"post"</span>,               <span class="comment">//数据发送方式</span></span><br><span class="line">    dataType: <span class="string">"json"</span>,           <span class="comment">//接受数据格式   </span></span><br><span class="line">    data: &#123;                     <span class="comment">//要传递的数据</span></span><br><span class="line">        username: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $(<span class="string">"#username"</span>).val();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js下载base64形式的文件</title>
      <link href="/blog/2020/03/04/js%E4%B8%8B%E8%BD%BDbase64%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2020/03/04/js%E4%B8%8B%E8%BD%BDbase64%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：69,阅读全文大约需要1分钟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* content base64格式数据</span></span><br><span class="line"><span class="comment">* fileName 文件名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">content, fileName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base64ToBlob = <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parts = code.split(<span class="string">';base64,'</span>);</span><br><span class="line">        <span class="keyword">let</span> contentType = parts[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> raw = <span class="built_in">window</span>.atob(parts[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">let</span> rawLength = raw.length;</span><br><span class="line">        <span class="keyword">let</span> uInt8Array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawLength);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rawLength; ++i) &#123;</span><br><span class="line">            uInt8Array[i] = raw.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Blob([uInt8Array], &#123;</span><br><span class="line">            type: contentType</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">let</span> blob = base64ToBlob(content); <span class="comment">//new Blob([content]);</span></span><br><span class="line">    <span class="keyword">let</span> evt = <span class="built_in">document</span>.createEvent(<span class="string">"HTMLEvents"</span>);</span><br><span class="line">    evt.initEvent(<span class="string">"click"</span>, <span class="literal">true</span>, <span class="literal">true</span>); <span class="comment">//initEvent 不加后两个参数在FF下会报错  事件类型，是否冒泡，是否阻止浏览器的默认行为</span></span><br><span class="line">    aLink.download = fileName;</span><br><span class="line">    aLink.href = URL.createObjectURL(blob);</span><br><span class="line">    aLink.click();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js事件绑定</title>
      <link href="/blog/2020/03/04/js%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/"/>
      <url>/blog/2020/03/04/js%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1778,阅读全文大约需要7分钟</p><h1 id="绑定方法"><a href="#绑定方法" class="headerlink" title="绑定方法"></a>绑定方法</h1><ol><li><p><code>dom.addEventListener(&quot;click&quot;,func,false);</code><br>对dom对象绑定事件，用<code>func</code>函数处理事件，<code>false</code>代表组织冒泡</p></li><li><p><code>dom.removeEventListener(&quot;click&quot;, myFunction);</code>移除</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passwordOb.addEventListener(<span class="string">"keyup"</span>,checkFun,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//处理事件的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFun</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"元素："</span>+e.target+<span class="string">"触发了事件"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><strong>鼠标事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>点击对象触发</td></tr><tr><td>oncontextmenu</td><td>点击右键打开上下文菜单世触发</td></tr><tr><td>ondblclick</td><td>双击对象触发</td></tr><tr><td>onmousedown</td><td>鼠标按钮按下</td></tr><tr><td>onmouseenter</td><td>鼠标指针移动到元素上(事件不支持冒泡)</td></tr><tr><td>onmouseleave</td><td>鼠标指针移出元素(事件不支持冒泡)</td></tr><tr><td>onmousemove</td><td>元素上的指针移动时触发</td></tr><tr><td>onmouseover</td><td>鼠标移到元素上(事件支持冒泡)</td></tr><tr><td>onmouseout</td><td>鼠标从元素上移开(事件支持冒泡)</td></tr><tr><td>onmouseup</td><td>鼠标按键松开</td></tr></tbody></table><p><strong>键盘事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onkeydown</td><td>某个键盘按键被按下</td></tr><tr><td>onkeypress</td><td>键盘按键被按下并松开</td></tr><tr><td>onkeyup</td><td>按键被松开</td></tr></tbody></table><p><strong>对象事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>图像的加载被打断</td></tr><tr><td>onbeforeunload</td><td>即将离开页面(刷新或关闭)时触发</td></tr><tr><td>onerror</td><td>加载文档或图像失败时触发</td></tr><tr><td>onhashchange</td><td>当该事件在当前的URL的锚部分发生修改时触发</td></tr><tr><td>onload</td><td>一张页面或者图像完成加载</td></tr><tr><td>onpageshow</td><td>用户访问页面触发（离开后）</td></tr><tr><td>onpagehide</td><td>当用户离开当前网页跳转到另一个页面触发</td></tr><tr><td>onresize</td><td>窗口或框架被调整大小</td></tr><tr><td>onscroll</td><td>文档被滚动时发生</td></tr><tr><td>onunload</td><td>用户退出页面(beforeunload-&gt;unload-&gt;pagehide)</td></tr></tbody></table><p><strong>表单事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onchange</td><td>表单内容改变</td></tr><tr><td>onfocus</td><td>获取焦点</td></tr><tr><td>onfocusin</td><td>即将获取焦点触发</td></tr><tr><td>onfocusout</td><td>即将失去焦点触发</td></tr><tr><td>oninput</td><td>元素获取用户输入时触发</td></tr><tr><td>onreset</td><td>表单重置时触发</td></tr><tr><td>onsearch</td><td>用户向搜索域输入文本</td></tr><tr><td>onselect</td><td>选取文本时触发(选中一小段文字)</td></tr><tr><td>onsubmit</td><td>表单提交</td></tr></tbody></table><p><strong>剪贴板事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>oncopy</td><td>用户拷贝元素内容时触发</td></tr><tr><td>oncut</td><td>剪切元素时触发</td></tr><tr><td>onpaste</td><td>用户粘贴元素内容时触发</td></tr></tbody></table><p><strong>打印事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onafterprint</td><td>页面已经开始打印，或者打印窗口已经关闭时触发</td></tr><tr><td>onbeforeprint</td><td>页面即将开始打印时触发</td></tr></tbody></table><p><strong>拖动事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>ondrag</td><td>元素正在拖动时触发</td></tr><tr><td>ondragend</td><td>元素完成拖动时</td></tr><tr><td>ondragenter</td><td>拖动元素放入放置目标时</td></tr><tr><td>ondragleave</td><td>事件在拖动元素离开放置目标时触发</td></tr><tr><td>ondragover</td><td>元素放置在目标上触发</td></tr><tr><td>ondragstart</td><td>用户开始拖动元素</td></tr><tr><td>ondrop</td><td>拖动元素放置在目标区域时触发</td></tr></tbody></table><p><strong>多媒体</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>视频、音频终止时触发</td></tr><tr><td>oncanplay</td><td>用户可以开始播放视频、音频时触发</td></tr><tr><td>oncanplaythrough</td><td>视频、音频可以正常播放，不用停顿和缓冲时触发</td></tr><tr><td>ondurationchange</td><td>事件在视频、音频时长发生变化时触发</td></tr><tr><td>onemptied</td><td>播放列表为空时触发</td></tr><tr><td>onended</td><td>视频、音频播放结束时触发</td></tr><tr><td>onerror</td><td>视频、音频数据加载期间发生错误</td></tr><tr><td>onloadeddata</td><td>浏览器加载视频、音频时当前帧时触发</td></tr><tr><td>onloadedmetadata</td><td>指定的视频、音频元数据加载后触发</td></tr><tr><td>onloadstart</td><td>浏览器开始勋在指定视频、音频时触发</td></tr><tr><td>onpause</td><td>视频、音频暂停时触发</td></tr><tr><td>onplay</td><td>视频、音频开始时触发</td></tr><tr><td>onplaying</td><td>视频、音频暂停或者在缓冲后准备重新开始时触发</td></tr><tr><td>onprogress</td><td>浏览器下载指定视频、音频时触发</td></tr><tr><td>onratechange</td><td>视频、音频播放速度发生改变时触发</td></tr><tr><td>onseeked</td><td>重新定位视频、音频时触发</td></tr><tr><td>onseeking</td><td>重新定位视频、音频时触发</td></tr><tr><td>onstalled</td><td>浏览器获取媒体数据，但是媒体数据不可用时触发</td></tr><tr><td>onsuspend</td><td>浏览器读取媒体数据终止时触发</td></tr><tr><td>ontimeupdate</td><td>当前播放位置发送改变时触发</td></tr><tr><td>onvolumechange</td><td>当音量发送改变时触发</td></tr><tr><td>onwaiting</td><td>视频由于要播放下一帧而需要缓存时触发</td></tr></tbody></table><p><strong>动画事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>animationend</td><td>css动画结束播放时</td></tr><tr><td>animationiteration</td><td>css动画重复播放时</td></tr><tr><td>animationstart</td><td>css动画开始播放时触发</td></tr></tbody></table><p><strong>过度事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>transitionend</td><td>css完成过度后触发</td></tr></tbody></table><p><strong>其它事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onmessage</td><td>从对象接收到消息时触发（如websocket）</td></tr><tr><td>ononline</td><td>浏览器开始在线工作时触发</td></tr><tr><td>onoffiline</td><td>浏览器开始离线工作时触发</td></tr><tr><td>onpopstate</td><td>浏览历史发生改变时触发</td></tr><tr><td>onshow</td><td><menu>元素在上下文菜单显示时触发</td></tr><tr><td>onstorage</td><td>web strage更新时触发</td></tr><tr><td>ontoggle</td><td>打开或关闭<details>元素时触发</td></tr><tr><td>onwheel</td><td>鼠标滚轮在元素上上下滚动时触发</td></tr></tbody></table><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p><strong>属性</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>bubbles</td><td>boolean 事件是否是起泡事件</td></tr><tr><td>cancelable</td><td>boolean 事件是否可取消默认动作</td></tr><tr><td>currentTarget</td><td>返回事件触发器监听的元素</td></tr><tr><td>eventPhase</td><td>事件传播的当前阶段</td></tr><tr><td>target</td><td>触发此时间的元素</td></tr><tr><td>timeStamp</td><td>时间生成的时间和日期</td></tr><tr><td>type</td><td>当前Event对象表示的时间的名称</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>initEvent()</td><td>初始化新创建的Event对象的属性</td></tr><tr><td>preventDefault()</td><td>通知浏览器不要执行事件关联的默认动作</td></tr><tr><td>stopPropagation()</td><td>不再派发事件</td></tr></tbody></table><p><strong>其它方法</strong></p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>handleEvent()</td><td>把任意对象注册成为事件处理程序</td></tr><tr><td>createEvent()</td><td>该方法将创建一种新的事件类型，该类型由参数 eventType 指定</td></tr></tbody></table><h1 id="键盘鼠标对象属性"><a href="#键盘鼠标对象属性" class="headerlink" title="键盘鼠标对象属性"></a>键盘鼠标对象属性</h1><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>altKey</td><td>事件触发时，alt是否被按下</td></tr><tr><td>button</td><td>那个鼠标按钮被点击</td></tr><tr><td>clientX</td><td>鼠标指针水平位置(浏览器内容区域的左上角,页面滚动参照点会变)</td></tr><tr><td>clientY</td><td>鼠标指针纯质坐标</td></tr><tr><td>Location</td><td>按键在设备上的位置</td></tr><tr><td>charCode</td><td>onkeypress事件触发按键值的字母代码</td></tr><tr><td>key</td><td>按下按键时返回按键的标识符</td></tr><tr><td>keyCode</td><td>键盘字符代码</td></tr><tr><td>which</td><td>键盘字符代码</td></tr><tr><td>metaKey</td><td>meta按键是否被按下</td></tr><tr><td>relatedTarget</td><td>与事件的目标节点相关的节点</td></tr><tr><td>screenX</td><td>触发事件的水平位置，以显示器作为参照点</td></tr><tr><td>screenY</td><td>垂直左边</td></tr><tr><td>shiftKey</td><td>shift按钮是否被按下</td></tr></tbody></table><p>(pageX参照内容区域左上角，不会随滚动而变化)</p><p>initMouseEvent()//    初始化鼠标事件对象的值<br>initKeyboardEvent()//    初始化键盘事件对象的值</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js初始化操作</title>
      <link href="/blog/2020/03/04/js%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2020/03/04/js%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：432,阅读全文大约需要1分钟</p><blockquote><p>在页面加载完成之后我们通常要进行一下初始化js操作，比如根据默认选项调整界面，检测驱动等。除了直接在js里调用函数外，还有几种方式指定函数运行时机。</p></blockquote><h1 id="一、ready-和onload"><a href="#一、ready-和onload" class="headerlink" title="一、ready()和onload()"></a>一、ready()和onload()</h1><ul><li><code>jquery</code>的<code>ready()</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>javascript</code>的<code>onload()</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload()=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>以下是对比：<br>\  | windo.onload()  |$(document).ready<br>—|—|—<br>加载时机|图片等信息全部加载完成之后|Dom结构加载之后，不用等图片<br>执行次数|文件中有多个此函数，最后一个覆盖所有|按顺序执行<br>简写|无|$(function(){})</p><h1 id="二、立即执行函数"><a href="#二、立即执行函数" class="headerlink" title="二、立即执行函数"></a>二、立即执行函数</h1><p>创建完函数后立刻执行，和直接调用差不多。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ..</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h1 id="三、js定时，延时"><a href="#三、js定时，延时" class="headerlink" title="三、js定时，延时"></a>三、js定时，延时</h1><blockquote><p>这两个应该不算是初始化，延时执行在特定情况下倒是可以用作初始化。比如初始化操作的节点可能是ajax返回的…好吧，不过他们确实算是让函数在特定时间执行。</p></blockquote><ul><li>定时（多次）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数体，时间</span></span><br><span class="line"> setInterval(<span class="string">"alert('test')"</span>,<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//传入函数体</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"Hello"</span>); &#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="comment">//清除定时</span></span><br><span class="line"><span class="keyword">var</span> myVar = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; myTimer() &#125;, <span class="number">1000</span>);</span><br><span class="line">clearInterval(myVar);</span><br></pre></td></tr></table></figure></li><li>延时（一次）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123; alert(&quot;Hello&quot;); &#125;, 3000);</span><br><span class="line">&#x2F;&#x2F;其它传参方式</span><br><span class="line">setTimeout(function, milliseconds, param1, param2, ...)</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js图片点击放大效果</title>
      <link href="/blog/2020/03/04/js%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7%E6%95%88%E6%9E%9C/"/>
      <url>/blog/2020/03/04/js%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：97,阅读全文大约需要1分钟</p><blockquote><p>类似qq空间图片点击放大（灯箱效果）</p></blockquote><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/lightbox/lightbox.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"js/lightbox/css/lightbox.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="单张图片"><a href="#单张图片" class="headerlink" title="单张图片"></a>单张图片</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-1.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"img1"</span> <span class="attr">data-title</span>=<span class="string">"图片一"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xxx"</span> <span class="attr">title</span>=<span class="string">"缩略图"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图片组（组内可以切换）"><a href="#图片组（组内可以切换）" class="headerlink" title="图片组（组内可以切换）"></a>图片组（组内可以切换）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-1.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"group2"</span> <span class="attr">data-title</span>=<span class="string">"图片标题一"</span>&gt;</span>缩略图...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-2.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"group2"</span> <span class="attr">data-title</span>=<span class="string">"图片标题二"</span>&gt;</span>缩略图...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-3.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"group2"</span> <span class="attr">data-title</span>=<span class="string">"图片标题三"</span>&gt;</span>缩略图...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-4.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"group2"</span> <span class="attr">data-title</span>=<span class="string">"图片标题四"</span>&gt;</span>缩略图...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js操作MQTT</title>
      <link href="/blog/2020/03/04/js%E6%93%8D%E4%BD%9CMQTT/"/>
      <url>/blog/2020/03/04/js%E6%93%8D%E4%BD%9CMQTT/</url>
      
        <content type="html"><![CDATA[<p>文章字数：233,阅读全文大约需要1分钟</p><blockquote><p><code>MQTT</code>是一个基于<strong>发布/订阅</strong>模式的消息协议，专门为硬件性能低下且网络状况糟糕情况设计的。消息轻量级，可以根据设置保证消息一定到达。实现<code>MQTT</code>的中间件有很多，本文采用<code>activeMQ</code></p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li>页面引入<code>mqttws31.min.js</code>即可</li><li>下载并开启<code>activeMQ</code>，设置好<code>MQTT</code>。</li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建连接</span></span><br><span class="line"><span class="keyword">var</span> mqttHost = <span class="string">"127.0.0.1"</span>;  <span class="comment">// mqtt服务地址</span></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">8083</span>;</span><br><span class="line"><span class="keyword">var</span> clientId = <span class="string">"test123"</span>;</span><br><span class="line">client = <span class="keyword">new</span> Paho.MQTT.Client(mqttHost, port , clientId );</span><br><span class="line">client.connect(&#123;</span><br><span class="line">        <span class="comment">//连接服务器并注册连接成功处理事件</span></span><br><span class="line">        onSuccess: onConnect,</span><br><span class="line">        cleanSession:<span class="literal">false</span>,</span><br><span class="line">        useSSL:<span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 心跳</span></span><br><span class="line">        keepAliveInterval:<span class="number">200</span>,</span><br><span class="line">        timeout:<span class="number">5</span>,</span><br><span class="line">        <span class="comment">//userName:"ss",</span></span><br><span class="line">        <span class="comment">//password:"xxx",</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 连接成功就订阅主题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onConnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//订阅主题</span></span><br><span class="line">        client.subscribe(<span class="string">"topic-name"</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">client.onConnectionLost = <span class="function"><span class="keyword">function</span> (<span class="params">responseObject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(responseObject.errorCode !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"连接已断开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">client.onMessageArrived = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ss = message.destinationName;</span><br><span class="line">        <span class="keyword">var</span> meg = message.payloadString;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"收到新消息："</span> + meg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推送信息给指定主题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMess</span>(<span class="params">messStr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(client.isConnected())&#123;</span><br><span class="line">            <span class="keyword">var</span> message = <span class="keyword">new</span> Paho.MQTT.Message(messStr);</span><br><span class="line">            <span class="comment">// 推送给主题</span></span><br><span class="line">            message.destinationName = <span class="string">"topic-name1"</span>;</span><br><span class="line">            client.send(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js构造方法</title>
      <link href="/blog/2020/03/04/js%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
      <url>/blog/2020/03/04/js%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1,阅读全文大约需要1分钟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name=name;</span><br><span class="line">  <span class="keyword">this</span>.type=<span class="string">"people"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>)；</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ推送方式</title>
      <link href="/blog/2020/03/04/RocketMQ%E6%8E%A8%E9%80%81%E6%96%B9%E5%BC%8F/"/>
      <url>/blog/2020/03/04/RocketMQ%E6%8E%A8%E9%80%81%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：188,阅读全文大约需要1分钟</p><blockquote><p>阿里巴巴用java开发的消息中间件，支持大规模topic数量，性能好。</p></blockquote><h1 id="推送方式"><a href="#推送方式" class="headerlink" title="推送方式"></a>推送方式</h1><ol><li><p><code>pull</code>模式：拉取，<code>DefaultMQPullConsumer</code>模式。是由客户端主动向<code>MQ</code>请求数据，主动权在客户端，先拉取数据再消费。不会因为推送太快而处理不及时。</p></li><li><p><code>push</code>模式：推送，<code>DefaultMQPushConsumer</code>模式。一般的<code>push</code>是<code>MQ</code>主动推送信息，但是可能会导致消费者跟不上推送速度。<code>RocketMQ</code>采用的是长轮询的方式，客户端访问<code>MQ</code>，有信息就拉取关闭连接消费，然后再请求并拉取。没有信息请求就会等待新信息，知道超时，超时会关闭连接并再次发送新的请求。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>js读取文件</title>
      <link href="/blog/2020/03/04/js%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2020/03/04/js%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：209,阅读全文大约需要1分钟</p><blockquote><p>之前有一个文件转成base64的js操作，其中有一部分是文件的读取。以前没有看到过js的文件操作，这一次特地找了一个demo。原生的javascript好像只支持文件读取，文件的写入似乎不支持。</p></blockquote><h1 id="js读取选中的文件"><a href="#js读取选中的文件" class="headerlink" title="js读取选中的文件"></a>js读取选中的文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">var</span><br><span class="line">    fileInput &#x3D; document.getElementById(&#39;test-image-file&#39;),</span><br><span class="line">    info &#x3D; document.getElementById(&#39;test-file-info&#39;),</span><br><span class="line">    preview &#x3D; document.getElementById(&#39;test-image-preview&#39;);</span><br><span class="line"> &#x2F;&#x2F; 监听change事件:</span><br><span class="line"> fileInput.addEventListenser(&#39;change&#39;,function()&#123;</span><br><span class="line">    &#x2F;&#x2F;清除背景图片</span><br><span class="line">    preview.style.backgroundImage &#x3D; &#39;&#39;;</span><br><span class="line">    &#x2F;&#x2F;检查文件是否选择</span><br><span class="line">    if (!fileInput.value) &#123;</span><br><span class="line">        info.innerHTML &#x3D; &#39;没有选择文件&#39;;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;获取File引用</span><br><span class="line">    var file &#x3D; fileInput.files[0];</span><br><span class="line">    &#x2F;&#x2F;获取file信息</span><br><span class="line">    info.innerHTML &#x3D; &#96;</span><br><span class="line">                    文件: $&#123;file.name&#125;</span><br><span class="line">                    大小: $&#123;file.size&#125;</span><br><span class="line">                    修改: $&#123;file.lastModifiedDate&#125;</span><br><span class="line">                    &#96;;</span><br><span class="line">    if (file.type !&#x3D;&#x3D; &#39;image&#x2F;jpeg&#39; &amp;&amp; file.type !&#x3D;&#x3D; &#39;image&#x2F;png&#39; &amp;&amp; file.type !&#x3D;&#x3D; &#39;image&#x2F;gif&#39;) &#123;</span><br><span class="line">        alert(&#39;不是有效的图片文件!&#39;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;读取文件</span><br><span class="line">    var reader &#x3D; new FileReader();</span><br><span class="line">    reader.onload &#x3D; function(e)&#123;</span><br><span class="line">        var </span><br><span class="line">            data &#x3D; e.target.result;</span><br><span class="line">            preview.style.backgroundImage &#x3D; &#39;url(&#39; + data + &#39;)&#39;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;以dataURL的形式读取文件</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jpa环境搭建</title>
      <link href="/blog/2020/03/04/jpa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/blog/2020/03/04/jpa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：246,阅读全文大约需要1分钟</p><blockquote><p>搭建一个基础的jpa</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p><code>pom.xml</code>中加入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="model层"><a href="#model层" class="headerlink" title="model层"></a>model层</h1><p>主要作用是和数据库映射的实体类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;用lombok或者自己写get和set</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@Entity &#x2F;&#x2F;标注给spring</span><br><span class="line">public class User&#123;</span><br><span class="line">  @Id      </span><br><span class="line">  @GeneratedValue(strategy&#x3D;GenerationType.AUTO)</span><br><span class="line">  private String id;&#x2F;&#x2F;id,自增</span><br><span class="line">  private String name;&#x2F;&#x2F;其它属性自动关联</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h1><p>数据库操作，一个model对应一个Dao</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&lt;实体类model,id类型&gt;</span><br><span class="line">public interface UserDao extends JpaRepository&lt;User, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承之后基本的增删改查功能都具备了</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>application.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;123456</span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line"># 每次运行创建新的表</span><br><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto&#x3D;create</span><br><span class="line"># validate 每次运行时验证表结构</span><br><span class="line"># create 每次新建</span><br><span class="line"># create-drop 加载创建，退出删除</span><br><span class="line"># update 追加更新</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jpa实体关联</title>
      <link href="/blog/2020/03/04/jpa%E5%AE%9E%E4%BD%93%E5%85%B3%E8%81%94/"/>
      <url>/blog/2020/03/04/jpa%E5%AE%9E%E4%BD%93%E5%85%B3%E8%81%94/</url>
      
        <content type="html"><![CDATA[<p>文章字数：697,阅读全文大约需要2分钟</p><blockquote><p>实体间关联有<code>@OneToOne</code>、<code>@OneToMany</code> or <code>@ManyToOne</code>、<code>ManyToMany</code>三种关系。其中，联机操作时只能One端操作Many端，代码层面则是<code>cascade = CascadeType.ALL</code>只能写在One端。One端删除，修改可以影响到Many端。反之则不允许。</p></blockquote><h1 id="一、-OneToOne关系映射"><a href="#一、-OneToOne关系映射" class="headerlink" title="一、@OneToOne关系映射"></a>一、@OneToOne关系映射</h1><blockquote><p>一个人有一个地址，就是一对一关系。其中people表的<strong>地址id</strong>对应<strong>地址表的id</strong></p></blockquote><p><strong>1.1 通过外键关联一对一关系</strong></p><p>people（id,name,<strong>addressId</strong>）<br>address(<strong>id</strong>,phone,city,address)</p><p><code>People.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//People是关系的维护端，当删除 people，会级联删除 address。默认不联级。</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade=CascadeType.ALL)</span><br><span class="line">    <span class="comment">//加入表中的字段(name)addressId,参考对应Address的id(referencedColumnName )</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"addressId"</span>, referencedColumnName = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Address.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"phone"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"city"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"address"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.2 通过关联表保持</strong><br>People(<strong>id</strong>,name)<br>Address(<strong>id</strong>,address)<br>PeopleAddr(<strong>PeopleId</strong>,<strong>addrId</strong>)关联表</p><p><code>People.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade=CascadeType.ALL)<span class="comment">//People是关系的维护端</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"PeopleAddr"</span>,<span class="comment">//关系表名</span></span><br><span class="line">            joinColumns = <span class="meta">@JoinColumn</span>(name=<span class="string">"PeopleId"</span>),<span class="comment">//对应当前主键的</span></span><br><span class="line">            inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"addressId"</span>))<span class="comment">//对应关联表的id的字段</span></span><br><span class="line">    <span class="keyword">private</span> Address address;<span class="comment">//关联表-地址实体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、-OneToMany-和-ManyToOne"><a href="#二、-OneToMany-和-ManyToOne" class="headerlink" title="二、@OneToMany 和 @ManyToOne"></a>二、@OneToMany 和 @ManyToOne</h1><blockquote><p>一个班级有很多同学（一对多），班级被删除班上的同学的数据也没了（联级删除，默认没有）。删除同学的数据不会影响到班级（many不能影响one）</p></blockquote><p><code>myClass.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// 主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY) <span class="comment">// 自增长策略</span></span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">//id</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"姓名不能为空"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指定Article的author字段关联id,mappedBy还代表放弃维护关系。即当自身修改删除时不会触发关联对象的相应操作。对应的，由对方维护。即文章修改了，作者对象下的文章列表也会相应修改。</span></span><br><span class="line">    <span class="comment">//fetch=FetchType.LAZY 懒加载，不会马上加载。对于马上要用的可以设置马上加载</span></span><br><span class="line">    <span class="comment">//mappendBy和JoinColumn相比一个放弃维护，另一个是建立联系（一端放弃，另一端建立）</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"author"</span>,cascade=CascadeType.ALL,fetch=FetchType.LAZY)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Article&gt; articleList;<span class="comment">//文章列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Article.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.MERGE,CascadeType.REFRESH&#125;,optional=<span class="keyword">false</span>)<span class="comment">//可选属性optional=false,表示author不能为空。删除文章，不影响用户</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"author_id"</span>)<span class="comment">//设置在article表中的关联字段(外键)</span></span><br><span class="line">    <span class="keyword">private</span> Author author;<span class="comment">//所属作者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、-ManyToMany"><a href="#三、-ManyToMany" class="headerlink" title="三、@ManyToMany"></a>三、@ManyToMany</h1><ul><li>由其中一端维护关系</li><li>被维护的一端无法直接删除，需要解除关系后才能删除。或者直接删除维护的一端，关系自动解除。</li><li><code>User.getAuthority().remove(authority)</code>解除关系</li><li><code>User.setAuthorities(authorities)</code>绑定关系</li><li>多对多一般不设置联级操作</li></ul><p>用户和权限组的例子就是多对多<br><code>User.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToMany</span></span><br><span class="line"><span class="meta">@JoinTable</span>(name = <span class="string">"user_authority"</span>,joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"user_id"</span>),</span><br><span class="line">inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"authority_id"</span>))</span><br><span class="line"><span class="keyword">private</span> List&lt;Authority&gt; authorityList;</span><br></pre></td></tr></table></figure><ul><li>不使用@JoinTable注解，默认生成的关联表名称为主表表名+下划线+从表表名<code>user_authority</code></li><li>关联到主表的外键名：主表名+下划线+主表中的主键列名<code>user_id</code></li><li>关联到从表的外键名：主表中用于关联的属性名+下划线+从表的主键列名<code>authority_id</code></li><li>主表就是关系维护端对应的表，从表就是关系被维护端对应的表</li></ul><p><code>Authority.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToMany</span>(mappedBy = <span class="string">"authorityList"</span>)</span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; userList;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jpa规则</title>
      <link href="/blog/2020/03/04/jpa%E8%A7%84%E5%88%99/"/>
      <url>/blog/2020/03/04/jpa%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：232,阅读全文大约需要1分钟</p><h1 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h1><table><thead><tr><th align="center">NO</th><th align="center">关键词</th><th>实例</th><th>sql</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">And</td><td>findByNameAndAge</td><td>where name=?1 and age=?2</td></tr><tr><td align="center">2</td><td align="center">Or</td><td>findByLastnameOrFirstname</td><td>where lastname=?1 or firstname=2?</td></tr><tr><td align="center">3</td><td align="center">Is,Equals</td><td>findByFirstnameIs;等于findByFirstname</td><td>where name=?1</td></tr><tr><td align="center">4</td><td align="center">Between</td><td>findByStartDateBetween</td><td>where startDate between ?1 and ?2</td></tr><tr><td align="center">5</td><td align="center">LessThan</td><td>findByAgeLessThan</td><td>where age &lt; ?1</td></tr><tr><td align="center">6</td><td align="center">LessThanEqual</td><td>findByAgeLessThanEqual</td><td>where age&lt;= ?1</td></tr><tr><td align="center">7</td><td align="center">GreaterThan</td><td>findByAgeGreaterThan</td><td>where age &gt;?1</td></tr><tr><td align="center">8</td><td align="center">GreaterThanEqual</td><td>findByAgeGreaterThanEqual</td><td>where age &gt;= ?1</td></tr><tr><td align="center">9</td><td align="center">After</td><td>findByStartDateAfter</td><td>where startDate &gt; ?1</td></tr><tr><td align="center">10</td><td align="center">Before</td><td>findByStartDateBefore</td><td>where startDate &lt; ?1</td></tr><tr><td align="center">11</td><td align="center">IsNull</td><td>findByAgeIsNull</td><td>where age is null</td></tr><tr><td align="center">12</td><td align="center">IsNotNull/NotNull</td><td>findByAge(Is)NotNull</td><td>where age not null</td></tr><tr><td align="center">13</td><td align="center">Like</td><td>findByFirstnameLike</td><td>where firstname like ?1</td></tr><tr><td align="center">14</td><td align="center">NotLike</td><td>findByFirstnameNotLike</td><td>where firstname not like ?1</td></tr><tr><td align="center">15</td><td align="center">StartingWith</td><td>findByFirstnameStartingWith</td><td>where firstname like ?1(参数前加上%)</td></tr><tr><td align="center">16</td><td align="center">EndingWith</td><td>findByFirstnameEndingWith</td><td>where firstname like ?1(参数后加%)</td></tr><tr><td align="center">17</td><td align="center">Containing</td><td>findByFirstnameContaining</td><td>where first like ?1(参数前后%)</td></tr><tr><td align="center">18</td><td align="center">OrderBy</td><td>findByAgeOrderByLastNameDesc</td><td>where age = ?1 order by lastname desc</td></tr><tr><td align="center">19</td><td align="center">Not</td><td>findByLastnameNot</td><td>where lastname != ?1</td></tr><tr><td align="center">20</td><td align="center">In</td><td>findByAgeIn(Collection<Age> ages)</td><td>where age in ?1</td></tr><tr><td align="center">21</td><td align="center">NotIn</td><td>findByAgeNotIn(Collection<Age> age)</td><td>where age not in ?1</td></tr><tr><td align="center">22</td><td align="center">TRUE</td><td>findByActiveTrue()</td><td>where active = true</td></tr><tr><td align="center">23</td><td align="center">FALSE</td><td>findByActiveFalse()</td><td>where active=false</td></tr><tr><td align="center">24</td><td align="center">IgnoreCase(忽略大小写)</td><td>findByFirsrnameIgnoreCase</td><td>where UPPER(firstname) = UPPER(?1)//转为大写</td></tr><tr><td align="center">25</td><td align="center">existsBy</td><td>existsByUserId(long userId)</td><td>where exists(..where userid=?1)</td></tr></tbody></table><h1 id="排序分页"><a href="#排序分页" class="headerlink" title="排序分页"></a>排序分页</h1><p>方法最后一个参数是<code>Sort</code>或者<code>Pageable</code>会提取信息进行排序或分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Page <span class="title">findAll</span><span class="params">(new PageRequest(pageNo,pageSize)</span>)</span></span><br></pre></td></tr></table></figure><ul><li><strong>排序</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Cus&gt; <span class="title">findBySexOrderByName</span><span class="params">(String sex)</span></span>; <span class="comment">//名称正序（正序时，推荐此方式，简单）</span></span><br><span class="line"><span class="function">List&lt;Cus&gt; <span class="title">findBySexOrderByNameAsc</span><span class="params">(String sex)</span></span>; <span class="comment">//名称正序（效果同上）</span></span><br><span class="line"><span class="function">List&lt;Cus&gt; <span class="title">findBySexOrderByNameDesc</span><span class="params">(String sex)</span></span>; <span class="comment">//名称倒序</span></span><br></pre></td></tr></table></figure></li><li><strong>条数限制</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Resource <span class="title">findFirstByFather_idOrderByOrderNumDesc</span><span class="params">(Long fatherId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">findFirstByOrderByLastnameAsc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">findTopByOrderByAgeDesc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Page&lt;User&gt; <span class="title">queryFirst10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Slice&lt;User&gt; <span class="title">findTop3ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findFirst10ByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findTop10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure></li><li><strong>计数</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Long <span class="title">countByLastname</span><span class="params">(String lastname)</span></span>;</span><br></pre></td></tr></table></figure></li><li><strong>删除</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteByProject_Id</span><span class="params">(Long id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteByProject_Cus_id</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven-使用</title>
      <link href="/blog/2020/03/04/maven-%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/03/04/maven-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：6055,阅读全文大约需要24分钟</p><blockquote><p>maven是apache的一个纯java的管理项目构建，依赖构建，项目报告，项目文档等步骤的工具。<br>maven基于POM( Project Object Model，项目对象模型 )这个xml文档里的项目信息管理构建项目</p></blockquote><h1 id="基本构成"><a href="#基本构成" class="headerlink" title="基本构成"></a>基本构成</h1><blockquote><p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns &#x3D; &quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">    xmlns:xsi &#x3D; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation &#x3D; &quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0</span><br><span class="line">    http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 模型版本 --&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：&#x2F;com&#x2F;companyname&#x2F;project-group --&gt;</span><br><span class="line">    &lt;groupId&gt;com.companyname.project-group&lt;&#x2F;groupId&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span><br><span class="line">    &lt;artifactId&gt;project&lt;&#x2F;artifactId&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 版本号 --&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>除了以上的基本信息外，还有很多默认信息。maven没有指定父级pom（<code>Super pom</code>）时会指定一个默认的父级。父级和自身的构建信息组成了<code>effective pom</code>,这是maven执行的依据。<br>查看<code>effective pom</code>-也就是父级+自身配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn help:effective-pom</span><br></pre></td></tr></table></figure><h1 id="maven-配置文件"><a href="#maven-配置文件" class="headerlink" title="maven 配置文件"></a>maven 配置文件</h1><table><thead><tr><th>类型</th><th>位置</th></tr></thead><tbody><tr><td>项目级（Per Project）</td><td>定义在项目的POM文件pom.xml中</td></tr><tr><td>用户级 （Per User）</td><td>定义在Maven的设置xml文件中 (%USER_HOME%/.m2/settings.xml)</td></tr><tr><td>全局（Global）</td><td>定义在 Maven 全局的设置 xml 文件中 (%M2_HOME%/conf/settings.xml)</td></tr></tbody></table><p>也可以在pom中写入多个<code>profile</code>信息，并激活某一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;-P+id</span><br><span class="line">mvn test -Pporfileid</span><br></pre></td></tr></table></figure><h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><blockquote><p>maven通过中央仓库(maven提供)，本地仓库(使用过的都会保存在本地)，远程仓库（自定义）组成</p></blockquote><p>远程仓库定义，先本地找，再中央仓库找不到会去远程找再找不到报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">   xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">   xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0</span><br><span class="line">   http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">   &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">   &lt;groupId&gt;com.companyname.projectgroup&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;project&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;com.companyname.common-lib&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;common-lib&lt;&#x2F;artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">   &lt;repositories&gt;</span><br><span class="line">      &lt;repository&gt;</span><br><span class="line">         &lt;id&gt;companyname.lib1&lt;&#x2F;id&gt;</span><br><span class="line">         &lt;url&gt;http:&#x2F;&#x2F;download.companyname.org&#x2F;maven2&#x2F;lib1&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;&#x2F;repository&gt;</span><br><span class="line">      &lt;repository&gt;</span><br><span class="line">         &lt;id&gt;companyname.lib2&lt;&#x2F;id&gt;</span><br><span class="line">         &lt;url&gt;http:&#x2F;&#x2F;download.companyname.org&#x2F;maven2&#x2F;lib2&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;&#x2F;repository&gt;</span><br><span class="line">   &lt;&#x2F;repositories&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>alibaba国内maven镜像，可以解决maven仓库速度慢的问题<br>maven根目录-&gt;<code>conf</code>-&gt;<code>setting.xml</code>添加到<code>mirrors</code>节点下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;        </span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br></pre></td></tr></table></figure><p>pom里添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;repositories&gt;  </span><br><span class="line">        &lt;repository&gt;  </span><br><span class="line">            &lt;id&gt;alimaven&lt;&#x2F;id&gt;  </span><br><span class="line">            &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;  </span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;  </span><br><span class="line">            &lt;releases&gt;  </span><br><span class="line">                &lt;enabled&gt;true&lt;&#x2F;enabled&gt;  </span><br><span class="line">            &lt;&#x2F;releases&gt;  </span><br><span class="line">            &lt;snapshots&gt;  </span><br><span class="line">                &lt;enabled&gt;false&lt;&#x2F;enabled&gt;  </span><br><span class="line">            &lt;&#x2F;snapshots&gt;  </span><br><span class="line">        &lt;&#x2F;repository&gt;  </span><br><span class="line">&lt;&#x2F;repositories&gt;</span><br></pre></td></tr></table></figure><h1 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h1><ul><li>快照，相对于版本，快照信息可以自动获取最新的快照，而版本则是固定的。在开发阶段快照比较试用</li><li>文档构建，maven可以生成软件说明文档</li><li>自动化构建部署</li><li>依赖管理，插件使用</li></ul><h1 id="maven标签大全"><a href="#maven标签大全" class="headerlink" title="maven标签大全"></a>maven标签大全</h1><blockquote><p>摘自<a href="https://www.runoob.com/maven/maven-pom.html" target="_blank" rel="noopener">菜鸟教程</a>，control+f可以快速查找标签信息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0http:&#x2F;&#x2F;maven.apache.org&#x2F;maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">    &lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 </span><br><span class="line">        version。 --&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;!--被继承的父项目的构件标识符 --&gt;</span><br><span class="line">        &lt;artifactId &#x2F;&gt;</span><br><span class="line">        &lt;!--被继承的父项目的全球唯一标识符 --&gt;</span><br><span class="line">        &lt;groupId &#x2F;&gt;</span><br><span class="line">        &lt;!--被继承的父项目的版本 --&gt;</span><br><span class="line">        &lt;version &#x2F;&gt;</span><br><span class="line">        &lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是..&#x2F;pom.xml。Maven首先在构建当前项目的地方寻找父项 </span><br><span class="line">            目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span><br><span class="line">        &lt;relativePath &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：&#x2F;com&#x2F;mycompany&#x2F;app --&gt;</span><br><span class="line">    &lt;groupId&gt;asia.banseon&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 </span><br><span class="line">        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 --&gt;</span><br><span class="line">    &lt;artifactId&gt;banseon-maven2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!--项目的名称, Maven产生的文档用 --&gt;</span><br><span class="line">    &lt;name&gt;banseon-maven&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;!--项目主页的URL, Maven产生的文档用 --&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;www.baidu.com&#x2F;banseon&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 </span><br><span class="line">        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;</span><br><span class="line">    &lt;description&gt;A maven project to study maven.&lt;&#x2F;description&gt;</span><br><span class="line">    &lt;!--描述了这个项目构建环境中的前提条件。 --&gt;</span><br><span class="line">    &lt;prerequisites&gt;</span><br><span class="line">        &lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span><br><span class="line">        &lt;maven &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;prerequisites&gt;</span><br><span class="line">    &lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span><br><span class="line">    &lt;issueManagement&gt;</span><br><span class="line">        &lt;!--问题管理系统（例如jira）的名字， --&gt;</span><br><span class="line">        &lt;system&gt;jira&lt;&#x2F;system&gt;</span><br><span class="line">        &lt;!--该项目使用的问题管理系统的URL --&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;jira.baidu.com&#x2F;banseon&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;issueManagement&gt;</span><br><span class="line">    &lt;!--项目持续集成信息 --&gt;</span><br><span class="line">    &lt;ciManagement&gt;</span><br><span class="line">        &lt;!--持续集成系统的名字，例如continuum --&gt;</span><br><span class="line">        &lt;system &#x2F;&gt;</span><br><span class="line">        &lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span><br><span class="line">        &lt;url &#x2F;&gt;</span><br><span class="line">        &lt;!--构建完成时，需要通知的开发者&#x2F;用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span><br><span class="line">        &lt;notifiers&gt;</span><br><span class="line">            &lt;!--配置一种方式，当构建中断时，以该方式通知用户&#x2F;开发者 --&gt;</span><br><span class="line">            &lt;notifier&gt;</span><br><span class="line">                &lt;!--传送通知的途径 --&gt;</span><br><span class="line">                &lt;type &#x2F;&gt;</span><br><span class="line">                &lt;!--发生错误时是否通知 --&gt;</span><br><span class="line">                &lt;sendOnError &#x2F;&gt;</span><br><span class="line">                &lt;!--构建失败时是否通知 --&gt;</span><br><span class="line">                &lt;sendOnFailure &#x2F;&gt;</span><br><span class="line">                &lt;!--构建成功时是否通知 --&gt;</span><br><span class="line">                &lt;sendOnSuccess &#x2F;&gt;</span><br><span class="line">                &lt;!--发生警告时是否通知 --&gt;</span><br><span class="line">                &lt;sendOnWarning &#x2F;&gt;</span><br><span class="line">                &lt;!--不赞成使用。通知发送到哪里 --&gt;</span><br><span class="line">                &lt;address &#x2F;&gt;</span><br><span class="line">                &lt;!--扩展配置项 --&gt;</span><br><span class="line">                &lt;configuration &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;notifier&gt;</span><br><span class="line">        &lt;&#x2F;notifiers&gt;</span><br><span class="line">    &lt;&#x2F;ciManagement&gt;</span><br><span class="line">    &lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span><br><span class="line">    &lt;inceptionYear &#x2F;&gt;</span><br><span class="line">    &lt;!--项目相关邮件列表信息 --&gt;</span><br><span class="line">    &lt;mailingLists&gt;</span><br><span class="line">        &lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span><br><span class="line">        &lt;mailingList&gt;</span><br><span class="line">            &lt;!--邮件的名称 --&gt;</span><br><span class="line">            &lt;name&gt;Demo&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span><br><span class="line">            &lt;post&gt;banseon@126.com&lt;&#x2F;post&gt;</span><br><span class="line">            &lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span><br><span class="line">            &lt;subscribe&gt;banseon@126.com&lt;&#x2F;subscribe&gt;</span><br><span class="line">            &lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span><br><span class="line">            &lt;unsubscribe&gt;banseon@126.com&lt;&#x2F;unsubscribe&gt;</span><br><span class="line">            &lt;!--你可以浏览邮件信息的URL --&gt;</span><br><span class="line">            &lt;archive&gt;http:&#x2F;hi.baidu.com&#x2F;banseon&#x2F;demo&#x2F;dev&#x2F;&lt;&#x2F;archive&gt;</span><br><span class="line">        &lt;&#x2F;mailingList&gt;</span><br><span class="line">    &lt;&#x2F;mailingLists&gt;</span><br><span class="line">    &lt;!--项目开发者列表 --&gt;</span><br><span class="line">    &lt;developers&gt;</span><br><span class="line">        &lt;!--某个项目开发者的信息 --&gt;</span><br><span class="line">        &lt;developer&gt;</span><br><span class="line">            &lt;!--SCM里项目开发者的唯一标识符 --&gt;</span><br><span class="line">            &lt;id&gt;HELLO WORLD&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!--项目开发者的全名 --&gt;</span><br><span class="line">            &lt;name&gt;banseon&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--项目开发者的email --&gt;</span><br><span class="line">            &lt;email&gt;banseon@126.com&lt;&#x2F;email&gt;</span><br><span class="line">            &lt;!--项目开发者的主页的URL --&gt;</span><br><span class="line">            &lt;url &#x2F;&gt;</span><br><span class="line">            &lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span><br><span class="line">            &lt;roles&gt;</span><br><span class="line">                &lt;role&gt;Project Manager&lt;&#x2F;role&gt;</span><br><span class="line">                &lt;role&gt;Architect&lt;&#x2F;role&gt;</span><br><span class="line">            &lt;&#x2F;roles&gt;</span><br><span class="line">            &lt;!--项目开发者所属组织 --&gt;</span><br><span class="line">            &lt;organization&gt;demo&lt;&#x2F;organization&gt;</span><br><span class="line">            &lt;!--项目开发者所属组织的URL --&gt;</span><br><span class="line">            &lt;organizationUrl&gt;http:&#x2F;&#x2F;hi.baidu.com&#x2F;banseon&lt;&#x2F;organizationUrl&gt;</span><br><span class="line">            &lt;!--项目开发者属性，如即时消息如何处理等 --&gt;</span><br><span class="line">            &lt;properties&gt;</span><br><span class="line">                &lt;dept&gt;No&lt;&#x2F;dept&gt;</span><br><span class="line">            &lt;&#x2F;properties&gt;</span><br><span class="line">            &lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;</span><br><span class="line">            &lt;timezone&gt;-5&lt;&#x2F;timezone&gt;</span><br><span class="line">        &lt;&#x2F;developer&gt;</span><br><span class="line">    &lt;&#x2F;developers&gt;</span><br><span class="line">    &lt;!--项目的其他贡献者列表 --&gt;</span><br><span class="line">    &lt;contributors&gt;</span><br><span class="line">        &lt;!--项目的其他贡献者。参见developers&#x2F;developer元素 --&gt;</span><br><span class="line">        &lt;contributor&gt;</span><br><span class="line">            &lt;name &#x2F;&gt;</span><br><span class="line">            &lt;email &#x2F;&gt;</span><br><span class="line">            &lt;url &#x2F;&gt;</span><br><span class="line">            &lt;organization &#x2F;&gt;</span><br><span class="line">            &lt;organizationUrl &#x2F;&gt;</span><br><span class="line">            &lt;roles &#x2F;&gt;</span><br><span class="line">            &lt;timezone &#x2F;&gt;</span><br><span class="line">            &lt;properties &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;contributor&gt;</span><br><span class="line">    &lt;&#x2F;contributors&gt;</span><br><span class="line">    &lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span><br><span class="line">    &lt;licenses&gt;</span><br><span class="line">        &lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span><br><span class="line">        &lt;license&gt;</span><br><span class="line">            &lt;!--license用于法律上的名称 --&gt;</span><br><span class="line">            &lt;name&gt;Apache 2&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--官方的license正文页面的URL --&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;www.baidu.com&#x2F;banseon&#x2F;LICENSE-2.0.txt&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt;</span><br><span class="line">            &lt;distribution&gt;repo&lt;&#x2F;distribution&gt;</span><br><span class="line">            &lt;!--关于license的补充信息 --&gt;</span><br><span class="line">            &lt;comments&gt;A business-friendly OSS license&lt;&#x2F;comments&gt;</span><br><span class="line">        &lt;&#x2F;license&gt;</span><br><span class="line">    &lt;&#x2F;licenses&gt;</span><br><span class="line">    &lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span><br><span class="line">    &lt;scm&gt;</span><br><span class="line">        &lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span><br><span class="line">        &lt;connection&gt;</span><br><span class="line">            scm:svn:http:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon&#x2F;maven&#x2F;banseon&#x2F;banseon-maven2-trunk(dao-trunk)</span><br><span class="line">        &lt;&#x2F;connection&gt;</span><br><span class="line">        &lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span><br><span class="line">        &lt;developerConnection&gt;</span><br><span class="line">            scm:svn:http:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon&#x2F;maven&#x2F;banseon&#x2F;dao-trunk</span><br><span class="line">        &lt;&#x2F;developerConnection&gt;</span><br><span class="line">        &lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;</span><br><span class="line">        &lt;tag &#x2F;&gt;</span><br><span class="line">        &lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;scm&gt;</span><br><span class="line">    &lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span><br><span class="line">    &lt;organization&gt;</span><br><span class="line">        &lt;!--组织的全名 --&gt;</span><br><span class="line">        &lt;name&gt;demo&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;!--组织主页的URL --&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;www.baidu.com&#x2F;banseon&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;organization&gt;</span><br><span class="line">    &lt;!--构建项目需要的信息 --&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span><br><span class="line">        &lt;sourceDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span><br><span class="line">        &lt;scriptSourceDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span><br><span class="line">        &lt;testSourceDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--被编译过的应用程序class文件存放的目录。 --&gt;</span><br><span class="line">        &lt;outputDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--被编译过的测试class文件存放的目录。 --&gt;</span><br><span class="line">        &lt;testOutputDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--使用来自该项目的一系列构建扩展 --&gt;</span><br><span class="line">        &lt;extensions&gt;</span><br><span class="line">            &lt;!--描述使用到的构建扩展。 --&gt;</span><br><span class="line">            &lt;extension&gt;</span><br><span class="line">                &lt;!--构建扩展的groupId --&gt;</span><br><span class="line">                &lt;groupId &#x2F;&gt;</span><br><span class="line">                &lt;!--构建扩展的artifactId --&gt;</span><br><span class="line">                &lt;artifactId &#x2F;&gt;</span><br><span class="line">                &lt;!--构建扩展的版本 --&gt;</span><br><span class="line">                &lt;version &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;extension&gt;</span><br><span class="line">        &lt;&#x2F;extensions&gt;</span><br><span class="line">        &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span><br><span class="line">        &lt;defaultGoal &#x2F;&gt;</span><br><span class="line">        &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;!-- 描述了资源的目标路径。该路径相对target&#x2F;classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 </span><br><span class="line">                    子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org&#x2F;apache&#x2F;maven &#x2F;messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span><br><span class="line">                &lt;targetPath &#x2F;&gt;</span><br><span class="line">                &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span><br><span class="line">                &lt;filtering &#x2F;&gt;</span><br><span class="line">                &lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;</span><br><span class="line">                &lt;directory &#x2F;&gt;</span><br><span class="line">                &lt;!--包含的模式列表，例如**&#x2F;*.xml. --&gt;</span><br><span class="line">                &lt;includes &#x2F;&gt;</span><br><span class="line">                &lt;!--排除的模式列表，例如**&#x2F;*.xml --&gt;</span><br><span class="line">                &lt;excludes &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;resource&gt;</span><br><span class="line">        &lt;&#x2F;resources&gt;</span><br><span class="line">        &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span><br><span class="line">        &lt;testResources&gt;</span><br><span class="line">            &lt;!--这个元素描述了测试相关的所有资源路径，参见build&#x2F;resources&#x2F;resource元素的说明 --&gt;</span><br><span class="line">            &lt;testResource&gt;</span><br><span class="line">                &lt;targetPath &#x2F;&gt;</span><br><span class="line">                &lt;filtering &#x2F;&gt;</span><br><span class="line">                &lt;directory &#x2F;&gt;</span><br><span class="line">                &lt;includes &#x2F;&gt;</span><br><span class="line">                &lt;excludes &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;testResource&gt;</span><br><span class="line">        &lt;&#x2F;testResources&gt;</span><br><span class="line">        &lt;!--构建产生的所有文件存放的目录 --&gt;</span><br><span class="line">        &lt;directory &#x2F;&gt;</span><br><span class="line">        &lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span><br><span class="line">        &lt;finalName &#x2F;&gt;</span><br><span class="line">        &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span><br><span class="line">        &lt;filters &#x2F;&gt;</span><br><span class="line">        &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;!--使用的插件列表 。 --&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!--plugin元素包含描述插件所需要的信息。 --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;!--插件在仓库里的group ID --&gt;</span><br><span class="line">                    &lt;groupId &#x2F;&gt;</span><br><span class="line">                    &lt;!--插件在仓库里的artifact ID --&gt;</span><br><span class="line">                    &lt;artifactId &#x2F;&gt;</span><br><span class="line">                    &lt;!--被使用的插件的版本（或版本范围） --&gt;</span><br><span class="line">                    &lt;version &#x2F;&gt;</span><br><span class="line">                    &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span><br><span class="line">                    &lt;extensions &#x2F;&gt;</span><br><span class="line">                    &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;!--execution元素包含了插件执行需要的信息 --&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span><br><span class="line">                            &lt;id &#x2F;&gt;</span><br><span class="line">                            &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span><br><span class="line">                            &lt;phase &#x2F;&gt;</span><br><span class="line">                            &lt;!--配置的执行目标 --&gt;</span><br><span class="line">                            &lt;goals &#x2F;&gt;</span><br><span class="line">                            &lt;!--配置是否被传播到子POM --&gt;</span><br><span class="line">                            &lt;inherited &#x2F;&gt;</span><br><span class="line">                            &lt;!--作为DOM对象的配置 --&gt;</span><br><span class="line">                            &lt;configuration &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;execution&gt;</span><br><span class="line">                    &lt;&#x2F;executions&gt;</span><br><span class="line">                    &lt;!--项目引入插件所需要的额外依赖 --&gt;</span><br><span class="line">                    &lt;dependencies&gt;</span><br><span class="line">                        &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                        &lt;dependency&gt;</span><br><span class="line">                            ......</span><br><span class="line">                        &lt;&#x2F;dependency&gt;</span><br><span class="line">                    &lt;&#x2F;dependencies&gt;</span><br><span class="line">                    &lt;!--任何配置是否被传播到子项目 --&gt;</span><br><span class="line">                    &lt;inherited &#x2F;&gt;</span><br><span class="line">                    &lt;!--作为DOM对象的配置 --&gt;</span><br><span class="line">                    &lt;configuration &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;&#x2F;plugins&gt;</span><br><span class="line">        &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">        &lt;!--使用的插件列表 --&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--参见build&#x2F;pluginManagement&#x2F;plugins&#x2F;plugin元素 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId &#x2F;&gt;</span><br><span class="line">                &lt;artifactId &#x2F;&gt;</span><br><span class="line">                &lt;version &#x2F;&gt;</span><br><span class="line">                &lt;extensions &#x2F;&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id &#x2F;&gt;</span><br><span class="line">                        &lt;phase &#x2F;&gt;</span><br><span class="line">                        &lt;goals &#x2F;&gt;</span><br><span class="line">                        &lt;inherited &#x2F;&gt;</span><br><span class="line">                        &lt;configuration &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        ......</span><br><span class="line">                    &lt;&#x2F;dependency&gt;</span><br><span class="line">                &lt;&#x2F;dependencies&gt;</span><br><span class="line">                &lt;goals &#x2F;&gt;</span><br><span class="line">                &lt;inherited &#x2F;&gt;</span><br><span class="line">                &lt;configuration &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">    &lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span><br><span class="line">            &lt;id &#x2F;&gt;</span><br><span class="line">            &lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</span><br><span class="line">            &lt;activation&gt;</span><br><span class="line">                &lt;!--profile默认是否激活的标志 --&gt;</span><br><span class="line">                &lt;activeByDefault &#x2F;&gt;</span><br><span class="line">                &lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span><br><span class="line">                &lt;jdk &#x2F;&gt;</span><br><span class="line">                &lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span><br><span class="line">                &lt;os&gt;</span><br><span class="line">                    &lt;!--激活profile的操作系统的名字 --&gt;</span><br><span class="line">                    &lt;name&gt;Windows XP&lt;&#x2F;name&gt;</span><br><span class="line">                    &lt;!--激活profile的操作系统所属家族(如 &#39;windows&#39;) --&gt;</span><br><span class="line">                    &lt;family&gt;Windows&lt;&#x2F;family&gt;</span><br><span class="line">                    &lt;!--激活profile的操作系统体系结构 --&gt;</span><br><span class="line">                    &lt;arch&gt;x86&lt;&#x2F;arch&gt;</span><br><span class="line">                    &lt;!--激活profile的操作系统版本 --&gt;</span><br><span class="line">                    &lt;version&gt;5.1.2600&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;&#x2F;os&gt;</span><br><span class="line">                &lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span><br><span class="line">                &lt;property&gt;</span><br><span class="line">                    &lt;!--激活profile的属性的名称 --&gt;</span><br><span class="line">                    &lt;name&gt;mavenVersion&lt;&#x2F;name&gt;</span><br><span class="line">                    &lt;!--激活profile的属性的值 --&gt;</span><br><span class="line">                    &lt;value&gt;2.0.3&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;&#x2F;property&gt;</span><br><span class="line">                &lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span><br><span class="line">                &lt;file&gt;</span><br><span class="line">                    &lt;!--如果指定的文件存在，则激活profile。 --&gt;</span><br><span class="line">                    &lt;exists&gt;&#x2F;usr&#x2F;local&#x2F;hudson&#x2F;hudson-home&#x2F;jobs&#x2F;maven-guide-zh-to-production&#x2F;workspace&#x2F;</span><br><span class="line">                    &lt;&#x2F;exists&gt;</span><br><span class="line">                    &lt;!--如果指定的文件不存在，则激活profile。 --&gt;</span><br><span class="line">                    &lt;missing&gt;&#x2F;usr&#x2F;local&#x2F;hudson&#x2F;hudson-home&#x2F;jobs&#x2F;maven-guide-zh-to-production&#x2F;workspace&#x2F;</span><br><span class="line">                    &lt;&#x2F;missing&gt;</span><br><span class="line">                &lt;&#x2F;file&gt;</span><br><span class="line">            &lt;&#x2F;activation&gt;</span><br><span class="line">            &lt;!--构建项目所需要的信息。参见build元素 --&gt;</span><br><span class="line">            &lt;build&gt;</span><br><span class="line">                &lt;defaultGoal &#x2F;&gt;</span><br><span class="line">                &lt;resources&gt;</span><br><span class="line">                    &lt;resource&gt;</span><br><span class="line">                        &lt;targetPath &#x2F;&gt;</span><br><span class="line">                        &lt;filtering &#x2F;&gt;</span><br><span class="line">                        &lt;directory &#x2F;&gt;</span><br><span class="line">                        &lt;includes &#x2F;&gt;</span><br><span class="line">                        &lt;excludes &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;resource&gt;</span><br><span class="line">                &lt;&#x2F;resources&gt;</span><br><span class="line">                &lt;testResources&gt;</span><br><span class="line">                    &lt;testResource&gt;</span><br><span class="line">                        &lt;targetPath &#x2F;&gt;</span><br><span class="line">                        &lt;filtering &#x2F;&gt;</span><br><span class="line">                        &lt;directory &#x2F;&gt;</span><br><span class="line">                        &lt;includes &#x2F;&gt;</span><br><span class="line">                        &lt;excludes &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;testResource&gt;</span><br><span class="line">                &lt;&#x2F;testResources&gt;</span><br><span class="line">                &lt;directory &#x2F;&gt;</span><br><span class="line">                &lt;finalName &#x2F;&gt;</span><br><span class="line">                &lt;filters &#x2F;&gt;</span><br><span class="line">                &lt;pluginManagement&gt;</span><br><span class="line">                    &lt;plugins&gt;</span><br><span class="line">                        &lt;!--参见build&#x2F;pluginManagement&#x2F;plugins&#x2F;plugin元素 --&gt;</span><br><span class="line">                        &lt;plugin&gt;</span><br><span class="line">                            &lt;groupId &#x2F;&gt;</span><br><span class="line">                            &lt;artifactId &#x2F;&gt;</span><br><span class="line">                            &lt;version &#x2F;&gt;</span><br><span class="line">                            &lt;extensions &#x2F;&gt;</span><br><span class="line">                            &lt;executions&gt;</span><br><span class="line">                                &lt;execution&gt;</span><br><span class="line">                                    &lt;id &#x2F;&gt;</span><br><span class="line">                                    &lt;phase &#x2F;&gt;</span><br><span class="line">                                    &lt;goals &#x2F;&gt;</span><br><span class="line">                                    &lt;inherited &#x2F;&gt;</span><br><span class="line">                                    &lt;configuration &#x2F;&gt;</span><br><span class="line">                                &lt;&#x2F;execution&gt;</span><br><span class="line">                            &lt;&#x2F;executions&gt;</span><br><span class="line">                            &lt;dependencies&gt;</span><br><span class="line">                                &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                                &lt;dependency&gt;</span><br><span class="line">                                    ......</span><br><span class="line">                                &lt;&#x2F;dependency&gt;</span><br><span class="line">                            &lt;&#x2F;dependencies&gt;</span><br><span class="line">                            &lt;goals &#x2F;&gt;</span><br><span class="line">                            &lt;inherited &#x2F;&gt;</span><br><span class="line">                            &lt;configuration &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;plugin&gt;</span><br><span class="line">                    &lt;&#x2F;plugins&gt;</span><br><span class="line">                &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">                &lt;plugins&gt;</span><br><span class="line">                    &lt;!--参见build&#x2F;pluginManagement&#x2F;plugins&#x2F;plugin元素 --&gt;</span><br><span class="line">                    &lt;plugin&gt;</span><br><span class="line">                        &lt;groupId &#x2F;&gt;</span><br><span class="line">                        &lt;artifactId &#x2F;&gt;</span><br><span class="line">                        &lt;version &#x2F;&gt;</span><br><span class="line">                        &lt;extensions &#x2F;&gt;</span><br><span class="line">                        &lt;executions&gt;</span><br><span class="line">                            &lt;execution&gt;</span><br><span class="line">                                &lt;id &#x2F;&gt;</span><br><span class="line">                                &lt;phase &#x2F;&gt;</span><br><span class="line">                                &lt;goals &#x2F;&gt;</span><br><span class="line">                                &lt;inherited &#x2F;&gt;</span><br><span class="line">                                &lt;configuration &#x2F;&gt;</span><br><span class="line">                            &lt;&#x2F;execution&gt;</span><br><span class="line">                        &lt;&#x2F;executions&gt;</span><br><span class="line">                        &lt;dependencies&gt;</span><br><span class="line">                            &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                            &lt;dependency&gt;</span><br><span class="line">                                ......</span><br><span class="line">                            &lt;&#x2F;dependency&gt;</span><br><span class="line">                        &lt;&#x2F;dependencies&gt;</span><br><span class="line">                        &lt;goals &#x2F;&gt;</span><br><span class="line">                        &lt;inherited &#x2F;&gt;</span><br><span class="line">                        &lt;configuration &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;plugin&gt;</span><br><span class="line">                &lt;&#x2F;plugins&gt;</span><br><span class="line">            &lt;&#x2F;build&gt;</span><br><span class="line">            &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span><br><span class="line">            &lt;modules &#x2F;&gt;</span><br><span class="line">            &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span><br><span class="line">            &lt;repositories&gt;</span><br><span class="line">                &lt;!--参见repositories&#x2F;repository元素 --&gt;</span><br><span class="line">                &lt;repository&gt;</span><br><span class="line">                    &lt;releases&gt;</span><br><span class="line">                        &lt;enabled &#x2F;&gt;</span><br><span class="line">                        &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                        &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;releases&gt;</span><br><span class="line">                    &lt;snapshots&gt;</span><br><span class="line">                        &lt;enabled &#x2F;&gt;</span><br><span class="line">                        &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                        &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;snapshots&gt;</span><br><span class="line">                    &lt;id &#x2F;&gt;</span><br><span class="line">                    &lt;name &#x2F;&gt;</span><br><span class="line">                    &lt;url &#x2F;&gt;</span><br><span class="line">                    &lt;layout &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;repository&gt;</span><br><span class="line">            &lt;&#x2F;repositories&gt;</span><br><span class="line">            &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span><br><span class="line">            &lt;pluginRepositories&gt;</span><br><span class="line">                &lt;!--包含需要连接到远程插件仓库的信息.参见repositories&#x2F;repository元素 --&gt;</span><br><span class="line">                &lt;pluginRepository&gt;</span><br><span class="line">                    &lt;releases&gt;</span><br><span class="line">                        &lt;enabled &#x2F;&gt;</span><br><span class="line">                        &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                        &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;releases&gt;</span><br><span class="line">                    &lt;snapshots&gt;</span><br><span class="line">                        &lt;enabled &#x2F;&gt;</span><br><span class="line">                        &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                        &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;snapshots&gt;</span><br><span class="line">                    &lt;id &#x2F;&gt;</span><br><span class="line">                    &lt;name &#x2F;&gt;</span><br><span class="line">                    &lt;url &#x2F;&gt;</span><br><span class="line">                    &lt;layout &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">            &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">            &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span><br><span class="line">            &lt;dependencies&gt;</span><br><span class="line">                &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                &lt;dependency&gt;</span><br><span class="line">                    ......</span><br><span class="line">                &lt;&#x2F;dependency&gt;</span><br><span class="line">            &lt;&#x2F;dependencies&gt;</span><br><span class="line">            &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span><br><span class="line">            &lt;reports &#x2F;&gt;</span><br><span class="line">            &lt;!--该元素包括使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;</span><br><span class="line">            &lt;reporting&gt;</span><br><span class="line">                ......</span><br><span class="line">            &lt;&#x2F;reporting&gt;</span><br><span class="line">            &lt;!--参见dependencyManagement元素 --&gt;</span><br><span class="line">            &lt;dependencyManagement&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        ......</span><br><span class="line">                    &lt;&#x2F;dependency&gt;</span><br><span class="line">                &lt;&#x2F;dependencies&gt;</span><br><span class="line">            &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line">            &lt;!--参见distributionManagement元素 --&gt;</span><br><span class="line">            &lt;distributionManagement&gt;</span><br><span class="line">                ......</span><br><span class="line">            &lt;&#x2F;distributionManagement&gt;</span><br><span class="line">            &lt;!--参见properties元素 --&gt;</span><br><span class="line">            &lt;properties &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;profile&gt;</span><br><span class="line">    &lt;&#x2F;profiles&gt;</span><br><span class="line">    &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span><br><span class="line">    &lt;modules &#x2F;&gt;</span><br><span class="line">    &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;!--包含需要连接到远程仓库的信息 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;!--如何处理远程仓库里发布版本的下载 --&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span><br><span class="line">                &lt;enabled &#x2F;&gt;</span><br><span class="line">                &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span><br><span class="line">                &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                &lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span><br><span class="line">                &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;releases&gt;</span><br><span class="line">            &lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 </span><br><span class="line">                策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories&#x2F;repository&#x2F;releases元素 --&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled &#x2F;&gt;</span><br><span class="line">                &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;snapshots&gt;</span><br><span class="line">            &lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span><br><span class="line">            &lt;id&gt;banseon-repository-proxy&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!--远程仓库名称 --&gt;</span><br><span class="line">            &lt;name&gt;banseon-repository-proxy&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--远程仓库URL，按protocol:&#x2F;&#x2F;hostname&#x2F;path形式 --&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;192.168.1.169:9999&#x2F;repository&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 </span><br><span class="line">                而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span><br><span class="line">            &lt;layout&gt;default&lt;&#x2F;layout&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;&#x2F;repositories&gt;</span><br><span class="line">    &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;!--包含需要连接到远程插件仓库的信息.参见repositories&#x2F;repository元素 --&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">            ......</span><br><span class="line">        &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">    &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;!--依赖的group ID --&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;!--依赖的artifact ID --&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-artifact&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span><br><span class="line">            &lt;version&gt;3.8.1&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， </span><br><span class="line">                尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span><br><span class="line">            &lt;type&gt;jar&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 </span><br><span class="line">                JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;</span><br><span class="line">            &lt;classifier&gt;&lt;&#x2F;classifier&gt;</span><br><span class="line">            &lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span><br><span class="line">                - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 </span><br><span class="line">                - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span><br><span class="line">            &lt;systemPath&gt;&lt;&#x2F;systemPath&gt;</span><br><span class="line">            &lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;&#x2F;exclusions&gt;</span><br><span class="line">            &lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span><br><span class="line">    &lt;reports&gt;&lt;&#x2F;reports&gt;</span><br><span class="line">    &lt;!--该元素描述使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span><br><span class="line">    &lt;reporting&gt;</span><br><span class="line">        &lt;!--true，则，网站不包括默认的报表。这包括&quot;项目信息&quot;菜单中的报表。 --&gt;</span><br><span class="line">        &lt;excludeDefaults &#x2F;&gt;</span><br><span class="line">        &lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;&#x2F;site。 --&gt;</span><br><span class="line">        &lt;outputDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--使用的报表插件和他们的配置。 --&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--plugin元素包含描述报表插件需要的信息 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;!--报表插件在仓库里的group ID --&gt;</span><br><span class="line">                &lt;groupId &#x2F;&gt;</span><br><span class="line">                &lt;!--报表插件在仓库里的artifact ID --&gt;</span><br><span class="line">                &lt;artifactId &#x2F;&gt;</span><br><span class="line">                &lt;!--被使用的报表插件的版本（或版本范围） --&gt;</span><br><span class="line">                &lt;version &#x2F;&gt;</span><br><span class="line">                &lt;!--任何配置是否被传播到子项目 --&gt;</span><br><span class="line">                &lt;inherited &#x2F;&gt;</span><br><span class="line">                &lt;!--报表插件的配置 --&gt;</span><br><span class="line">                &lt;configuration &#x2F;&gt;</span><br><span class="line">                &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;</span><br><span class="line">                &lt;reportSets&gt;</span><br><span class="line">                    &lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;</span><br><span class="line">                    &lt;reportSet&gt;</span><br><span class="line">                        &lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;</span><br><span class="line">                        &lt;id &#x2F;&gt;</span><br><span class="line">                        &lt;!--产生报表集合时，被使用的报表的配置 --&gt;</span><br><span class="line">                        &lt;configuration &#x2F;&gt;</span><br><span class="line">                        &lt;!--配置是否被继承到子POMs --&gt;</span><br><span class="line">                        &lt;inherited &#x2F;&gt;</span><br><span class="line">                        &lt;!--这个集合里使用到哪些报表 --&gt;</span><br><span class="line">                        &lt;reports &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;reportSet&gt;</span><br><span class="line">                &lt;&#x2F;reportSets&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;reporting&gt;</span><br><span class="line">    &lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact </span><br><span class="line">        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                ......</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line">    &lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;</span><br><span class="line">    &lt;distributionManagement&gt;</span><br><span class="line">        &lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories&#x2F;repository元素 --&gt;</span><br><span class="line">            &lt;uniqueVersion &#x2F;&gt;</span><br><span class="line">            &lt;id&gt;banseon-maven2&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;banseon maven2&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;file:&#x2F;&#x2F;$&#123;basedir&#125;&#x2F;target&#x2F;deploy&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;layout &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">        &lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement&#x2F;repository元素 --&gt;</span><br><span class="line">        &lt;snapshotRepository&gt;</span><br><span class="line">            &lt;uniqueVersion &#x2F;&gt;</span><br><span class="line">            &lt;id&gt;banseon-maven2&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;Banseon-maven2 Snapshot Repository&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;scp:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon:&#x2F;usr&#x2F;local&#x2F;maven-snapshot&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;layout &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;snapshotRepository&gt;</span><br><span class="line">        &lt;!--部署项目的网站需要的信息 --&gt;</span><br><span class="line">        &lt;site&gt;</span><br><span class="line">            &lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span><br><span class="line">            &lt;id&gt;banseon-site&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!--部署位置的名称 --&gt;</span><br><span class="line">            &lt;name&gt;business api website&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--部署位置的URL，按protocol:&#x2F;&#x2F;hostname&#x2F;path形式 --&gt;</span><br><span class="line">            &lt;url&gt;</span><br><span class="line">                scp:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon:&#x2F;var&#x2F;www&#x2F;localhost&#x2F;banseon-web</span><br><span class="line">            &lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;site&gt;</span><br><span class="line">        &lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;</span><br><span class="line">        &lt;downloadUrl &#x2F;&gt;</span><br><span class="line">        &lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span><br><span class="line">        &lt;relocation&gt;</span><br><span class="line">            &lt;!--构件新的group ID --&gt;</span><br><span class="line">            &lt;groupId &#x2F;&gt;</span><br><span class="line">            &lt;!--构件新的artifact ID --&gt;</span><br><span class="line">            &lt;artifactId &#x2F;&gt;</span><br><span class="line">            &lt;!--构件新的版本号 --&gt;</span><br><span class="line">            &lt;version &#x2F;&gt;</span><br><span class="line">            &lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span><br><span class="line">            &lt;message &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;relocation&gt;</span><br><span class="line">        &lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 </span><br><span class="line">            Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt;</span><br><span class="line">        &lt;status &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;distributionManagement&gt;</span><br><span class="line">    &lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;&#x2F;name&gt;。 --&gt;</span><br><span class="line">    &lt;properties &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm调优工具VisualVM</title>
      <link href="/blog/2020/03/04/jvm%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7VisualVM/"/>
      <url>/blog/2020/03/04/jvm%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7VisualVM/</url>
      
        <content type="html"><![CDATA[<p>文章字数：546,阅读全文大约需要2分钟</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>VisualVM 是Netbeans的profile子项目，已在JDK6.0 update 7 中自带，能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈(如100个String对象分别由哪几个对象分配出来的)。在JDK_HOME/bin(默认是C:\Program Files\Java\jdk1.6.0_13\bin)目录下面，有一个jvisualvm.exe文件，双击打开，从UI上来看，这个软件是基于NetBeans开发的了。<br>VisualVM 提供了一个可视界面，用于查看 Java 虚拟机 (Java Virtual Machine, JVM) 上运行的基于 Java 技术的应用程序的详细信息。VisualVM 对 Java Development Kit (JDK) 工具所检索的 JVM 软件相关数据进行组织，并通过一种使您可以快速查看有关多个 Java 应用程序的数据的方式提供该信息。您可以查看本地应用程序或远程主机上运行的应用程序的相关数据。此外，还可以捕获有关 JVM 软件实例的数据，并将该数据保存到本地系统，以供后期查看或与其他用户共享。</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>主要有：监控、线程、Visual GC这些功能，还可以使用插件增加功能</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本命令</title>
      <link href="/blog/2020/03/04/markdown%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2020/03/04/markdown%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：431,阅读全文大约需要1分钟</p><blockquote><p>回顾一下markdown命令<br>内容有：1.标题  2.字体  3.引用  4.分割线  5.图片  6.超链接  7.列表  8.表格  9.代码</p></blockquote><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br></pre></td></tr></table></figure><p>效果： </p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="2-字体"><a href="#2-字体" class="headerlink" title="2. 字体"></a>2. 字体</h1><p><code>**加粗**</code> <strong>加粗</strong></p><p><code>*斜体*</code><em>斜体</em></p><p><code>***斜体加粗***</code><strong><em>斜体加粗</em></strong></p><p><code>~~删除线~~</code> <del>删除线</del></p><h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;一级引用</span><br><span class="line"></span><br><span class="line">&gt;&gt;二级引用</span><br></pre></td></tr></table></figure><blockquote><p>一级引用</p></blockquote><blockquote><blockquote><p>二级引用</p></blockquote></blockquote><h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h1><p><code>三个以上--- 或者***</code></p><h1 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h1><figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 6.超链接</span><br><span class="line"></span><br><span class="line">&#96; [超链接名](超链接地址&quot;超链接title&quot;)   title可不加 &#96;</span><br><span class="line"></span><br><span class="line"># 7.列表</span><br><span class="line"></span><br><span class="line">1. 无序列表</span><br><span class="line"></span><br><span class="line">&#96; - 内容 + 内容 * 内容   三种都行 符号空格内容 &#96;</span><br></pre></td></tr></table></figure><ul><li>xxx</li><li>xxx<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- xxx</span><br><span class="line">- xxx</span><br><span class="line"></span><br><span class="line">2. 有序列表</span><br></pre></td></tr></table></figure></li></ul><ol><li>xxx</li><li>xxx<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 8.表格</span><br><span class="line"></span><br><span class="line">&gt; &#96;---&#96; 默认左对齐， &#96;:---:&#96;居中对齐，&#96;---:&#96;右对齐</span><br></pre></td></tr></table></figure></li></ol><p>表头|表头|表头</p><p>—|:—:|—:</p><p>内容|xxx|xxx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 9.代码</span><br></pre></td></tr></table></figure><p><code>单行代码</code><br>//以下是多行代码<br>三个` (```)</p><p>多行代码</p><p>多行代码</p><p>三个` (```)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;单行代码&#96;</span><br></pre></td></tr></table></figure><p>多行代码</p><pre><code></code></pre>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven-archetype</title>
      <link href="/blog/2020/03/04/maven-archetype/"/>
      <url>/blog/2020/03/04/maven-archetype/</url>
      
        <content type="html"><![CDATA[<p>文章字数：649,阅读全文大约需要2分钟</p><blockquote><p><code>maven archetype</code>是<code>maven</code>提供的模板工具包，可以帮助用户提供项目模板。</p></blockquote><h1 id="常用的模板"><a href="#常用的模板" class="headerlink" title="常用的模板"></a>常用的模板</h1><ol><li><p><code>cocoon-22-archetype-webapp</code>: 有<code>applicationContext.xml</code>、<code>log4j.xml</code>、<code>web.xml</code>三个</p></li><li><p><code>maven-archetype-quickstart</code>: 简单的<code>java</code>程序模板，有测试类和普通入口</p></li><li><p><code>mavne-archetype-webapp</code>: 简单的<code>jsp</code>项目模板，里面有<code>web.xml</code>和<code>index.jsp</code></p></li></ol><h1 id="41个模板"><a href="#41个模板" class="headerlink" title="41个模板"></a>41个模板</h1><ol><li><code>appfuse-basic-jsf</code> (创建一个基于Hibernate，Spring和JSF的Web应用程序的原型) </li><li><code>appfuse-basic-spring</code> (创建一个基于Hibernate，Spring和Spring MVC的Web应用程序的原型) </li><li><code>appfuse-basic-struts</code> (创建一个基于Hibernate，Spring和Struts 2的Web应用程序的原型) </li><li><code>appfuse-basic-tapestry</code> (创建一个基于Hibernate，Spring 和 Tapestry 4的Web应用程序的原型) </li><li><code>appfuse-core</code>(创建一个基于Hibernate，Spring 和 XFire的jar应用程序的原型) </li><li><code>appfuse-modular-jsf</code>(创建一个基于Hibernate，Spring和JSF的模块化应用原型) </li><li><code>appfuse-modular-spring</code> (创建一个基于Hibernate, Spring 和 Spring MVC 的模块化应用原型) </li><li><code>appfuse-modular-struts</code> (创建一个基于Hibernate, Spring 和 Struts 2 的模块化应用原型) </li><li><code>appfuse-modular-tapestry</code> (创建一个基于 Hibernate, Spring 和 Tapestry 4 的模块化应用原型) </li><li><code>maven-archetype-j2ee-simple</code> (一个简单的J2EE的Java应用程序) </li><li><code>maven-archetype-marmalade-mojo</code> (一个Maven的 插件开发项目 using marmalade) </li><li><code>maven-archetype-mojo</code> (一个Maven的Java插件开发项目) </li><li><code>maven-archetype-portlet</code> (一个简单的portlet应用程序) </li><li><code>maven-archetype-profiles</code></li><li><code>maven-archetype-quickstart</code> </li><li><code>maven-archetype-site-simple</code> (简单的网站生成项目) </li><li><code>maven-archetype-site</code> (更复杂的网站项目) </li><li><code>maven-archetype-webapp</code> (一个简单的Java Web应用程序) </li><li><code>jini-service-archetype</code> (Archetype for Jini service project creation) </li><li><code>softeu-archetype-seam</code> (JSF+Facelets+Seam Archetype) </li><li><code>softeu-archetype-seam-simple</code> (JSF+Facelets+Seam (无残留) 原型) </li><li><code>softeu-archetype-jsf</code> (JSF+Facelets 原型) </li><li><code>jpa-maven-archetype</code> (JPA 应用程序) </li><li><code>spring-osgi-bundle-archetype</code> (Spring-OSGi 原型) </li><li><code>confluence-plugin-archetype</code> (Atlassian 聚合插件原型) </li><li><code>jira-plugin-archetype</code> (Atlassian JIRA 插件原型) </li><li><code>maven-archetype-har</code> (Hibernate 存档) </li><li><code>maven-archetype-sar</code> (JBoss 服务存档) </li><li><code>wicket-archetype-quickstart</code> (一个简单的Apache Wicket的项目) </li><li><code>scala-archetype-simple</code> (一个简单的scala的项目) </li><li><code>lift-archetype-blank</code> (一个 blank/empty liftweb 项目) </li><li><code>lift-archetype-basic</code> (基本（liftweb）项目) </li><li><code>cocoon-22-archetype-block-plain</code> ([<a href="http://cocoapacorg2/maven-plugins/]" target="_blank" rel="noopener">http://cocoapacorg2/maven-plugins/]</a>) </li><li><code>cocoon-22-archetype-block</code> ([<a href="http://cocoapacorg2/maven-plugins/]" target="_blank" rel="noopener">http://cocoapacorg2/maven-plugins/]</a>) </li><li><code>cocoon-22-archetype-webapp</code> ([<a href="http://cocoapacorg2/maven-plugins/]" target="_blank" rel="noopener">http://cocoapacorg2/maven-plugins/]</a>) </li><li><code>myfaces-archetype-helloworld</code> (使用MyFaces的一个简单的原型) </li><li><code>myfaces-archetype-helloworld-facelets</code> (一个使用MyFaces和Facelets的简单原型) </li><li><code>myfaces-archetype-trinidad</code> (一个使用MyFaces和Trinidad的简单原型) </li><li><code>myfaces-archetype-jsfcomponents</code> (一种使用MyFaces创建定制JSF组件的简单的原型) </li><li><code>gmaven-archetype-basic</code> (Groovy的基本原型) </li><li><code>gmaven-archetype-mojo</code> (Groovy mojo 原型)</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList原理</title>
      <link href="/blog/2020/03/04/ArrayList%E5%8E%9F%E7%90%86/"/>
      <url>/blog/2020/03/04/ArrayList%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：539,阅读全文大约需要2分钟</p><blockquote><p><code>ArrayList</code>内部使用数组保存元素，所以查找添加和查找的速度都很快。但是达到一定的数量需要扩容，而扩容是开销很大的操作。如果需要频繁插入和删除元素，可以使用<code>LinkedList</code>。</p></blockquote><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li><p>线程不安全，即可以同时被多个线程操作。可能会导致数据读和写操作直接数据被篡改。可以使用<code>Collections.synchronizedList(List l)</code>获取一个线程安全的<code>ArrayList</code>。或者使用<code>juc</code>的<code>CopyOnWriteArrayList</code>类</p></li><li><p>实现了<code>Serializable</code>可以序列化</p></li><li><p>初始化大小为10，当元素数量超出这个大小时会触发扩容。扩容大小为原来的1.5倍。</p></li><li><p>内部使用<code>private transient Object[] elementData</code>数组存储信息。</p></li></ol><h1 id="扩容过程"><a href="#扩容过程" class="headerlink" title="扩容过程"></a>扩容过程</h1><ol><li><p>初始化创建指定大小的数组，不写默认10</p></li><li><p>插入元素时检测长度是否超出当前数组最大值</p></li><li><p>超出新建一个数组，大小为原来的1.5倍</p></li><li><p>把原数组的信息迁移到新的数组上。<br>数组迁移内部使用了<code>Arrays.copyof()</code>,这个方法新建了一个数组并使用<code>System.arraycopy()</code>方法复制信息到新数组。<br><code>System.arraycopy()</code>是<code>native</code>方法，最后使用的是c的<code>memmove()</code>函数，所以效率很高</p></li></ol><h1 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h1><ol><li>能够确定存储信息数量时最好指定初始化大小，避免多次触发扩容操作。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>loadClass、findClass、defineClass</title>
      <link href="/blog/2020/03/04/loadClass%E3%80%81findClass%E3%80%81defineClass/"/>
      <url>/blog/2020/03/04/loadClass%E3%80%81findClass%E3%80%81defineClass/</url>
      
        <content type="html"><![CDATA[<p>文章字数：261,阅读全文大约需要1分钟</p><h1 id="loadClass"><a href="#loadClass" class="headerlink" title="loadClass"></a>loadClass</h1><p>加载一个类，传入名字或位置</p><ol><li>调用<code>findLoadedClass(String)</code>检测是否这个类已经被加载</li><li>没有被加载则调用父类的<code>loadClass()</code>方法，直到找到或者父类为空(说明是启动类加载器)</li><li>到了启动类加载器都没有就调用<code>findClass(String)</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="findClass"><a href="#findClass" class="headerlink" title="findClass"></a>findClass</h1><ol><li>根据名称或位置加载.class字节码,然后使用defineClass</li><li>通常由子类去实现<br><code>loadClass</code>的源码可以看到，最后如果还是找不到类就会调用<code>findClass</code>。但是<code>ClassLoader</code>的<code>findClass</code>是直接抛出异常，自定义类加载器需要实现此方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="definclass"><a href="#definclass" class="headerlink" title="definclass"></a>definclass</h1><ol><li>把字节码转化为Class</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven依赖冲突</title>
      <link href="/blog/2020/03/04/maven%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/"/>
      <url>/blog/2020/03/04/maven%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：447,阅读全文大约需要1分钟</p><blockquote><p><code>maven</code>的依赖添加并不是只添加一个依赖。添加的依赖包里如果也有依赖其他的包，则会一同被添加进来，形成依赖树。而有时这些被动添加进来的依赖并不是我们想要的版本，导致依赖冲突。</p></blockquote><h1 id="发现依赖冲突"><a href="#发现依赖冲突" class="headerlink" title="发现依赖冲突"></a>发现依赖冲突</h1><ol><li><p>程序运行中发生类未找到，方法未找到，版本不匹配等问题都可能是依赖冲突导致的。依赖了一个低版本的包，导致一些类和方法找不到。</p></li><li><p>可以通过<code>maven</code>提供的依赖树查看功能看目前依赖的是那个包，然后查看应该依赖的包，并进行对比。</p></li></ol><h1 id="解决依赖冲突"><a href="#解决依赖冲突" class="headerlink" title="解决依赖冲突"></a>解决依赖冲突</h1><ol><li><p>利用<code>maven</code>的最小依赖路径原则，在更近的路径，如本包下引入需要的依赖。</p></li><li><p>可以使用<code>exclusions</code>排除包中不需要的依赖</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;exclusions&gt;</span><br><span class="line">    &lt;exclusion&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;&#x2F;exclusion&gt;</span><br><span class="line">  &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mqttv3实现mqttCLient端</title>
      <link href="/blog/2020/03/04/mqttv3%E5%AE%9E%E7%8E%B0mqttCLient%E7%AB%AF/"/>
      <url>/blog/2020/03/04/mqttv3%E5%AE%9E%E7%8E%B0mqttCLient%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：175,阅读全文大约需要1分钟</p><blockquote><p>使用<code>org.eclipse.paho.client.mqttv3</code>包下的工具创建<code>mqtt</code>连接，并订阅和发布消息。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String topic = <span class="string">"defaultTopic"</span>;</span><br><span class="line">        String content = <span class="string">"Message from 123xxx"</span>;</span><br><span class="line">        <span class="keyword">int</span> qos = <span class="number">2</span>;</span><br><span class="line">        String broker = <span class="string">"tcp://127.0.0.1:1883"</span>;</span><br><span class="line"></span><br><span class="line">        String clientId=<span class="string">"123xxx"</span>;</span><br><span class="line">        String userName = <span class="string">"admin"</span>;</span><br><span class="line">        String pwd = <span class="string">"admin"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 不传递persistence默认使用文件保存未发送的消息，传递null使用内存保存未发送的消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            MqttClient mqttClient = <span class="keyword">new</span> MqttClient(broker, clientId, <span class="keyword">null</span>);</span><br><span class="line">            MqttConnectOptions connOpts = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 再次连接时是否清除上次的session，即重新连接时是否不接收未收到的消息。只有重新连接时才能够更改此参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            connOpts.setCleanSession(<span class="keyword">true</span>);</span><br><span class="line">            connOpts.setUserName(userName);</span><br><span class="line">            connOpts.setPassword(pwd.toCharArray());</span><br><span class="line">            <span class="comment">// 发起连接</span></span><br><span class="line">            mqttClient.connect(connOpts);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 订阅</span></span><br><span class="line">            MqttCallback callback = <span class="keyword">new</span> MessageProcess();</span><br><span class="line">            mqttClient.setCallback(callback);</span><br><span class="line">            mqttClient.subscribe(topic);</span><br><span class="line">            <span class="comment">// 发布</span></span><br><span class="line">            <span class="comment">// 1.创建需要发布的消息</span></span><br><span class="line">            MqttMessage message = <span class="keyword">new</span> MqttMessage(content.getBytes());</span><br><span class="line">            message.setQos(qos);</span><br><span class="line">            <span class="comment">// 2.循环模拟发布</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                mqttClient.publish(topic, message);</span><br><span class="line">                System.out.println(<span class="string">"Message published"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException me) &#123;</span><br><span class="line">            System.out.println(<span class="string">"reasonCode "</span> + me.getReasonCode());</span><br><span class="line">            System.out.println(<span class="string">"message "</span> + me.getMessage());</span><br><span class="line">            System.out.println(<span class="string">"localizedMessage "</span> + me.getLocalizedMessage());</span><br><span class="line">            System.out.println(<span class="string">"cause "</span> + me.getCause());</span><br><span class="line">            System.out.println(<span class="string">"exception "</span> + me.getMessage());</span><br><span class="line">            me.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProcess</span> <span class="keyword">implements</span> <span class="title">MqttCallback</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 断线 手动重连</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] mess = message.getPayload();</span><br><span class="line">            System.out.println(<span class="string">"topic["</span> + topic + <span class="string">"]:"</span> + <span class="keyword">new</span> String(mess));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken iMqttDeliveryToken)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 确认信息已经传递完毕调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Integration-Channel</title>
      <link href="/blog/2020/03/04/Spring-Integration-Channel/"/>
      <url>/blog/2020/03/04/Spring-Integration-Channel/</url>
      
        <content type="html"><![CDATA[<p>文章字数：374,阅读全文大约需要1分钟</p><blockquote><p><code>channel</code>最主要的作用就是作为一个传输<code>Message</code>的管道，<code>Spring Integration</code>中实现了各种各样的<code>channel</code>可以满足不同的需求。</p></blockquote><h1 id="一、顶级接口"><a href="#一、顶级接口" class="headerlink" title="一、顶级接口"></a>一、顶级接口</h1><ol><li><code>MessageChannel</code>: 该接口中没有提供从<code>channel</code>中接收的方法，因为接收的方法被两个子接口表示。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">send</span><span class="params">(Message&lt;?&gt; message)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">sned</span><span class="params">(Message&lt;?&gt; message, <span class="keyword">long</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>PollableChannel</code>: 接收的子接口，具备轮询获取消息的能力。要求消息消费者或者框架周期性检测消息是否可达。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Message&lt;?&gt; receive();</span><br><span class="line">Message&lt;?&gt; receive(<span class="keyword">long</span> timeout);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>SubscribableChannel</code>: 发送消息给订阅了<code>MessageHanlder</code>的订阅者</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">subscribe</span><span class="params">(MessageHandler handler)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">unsubscribe</span><span class="params">(MessageHandler hanlder)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="二、常用channel"><a href="#二、常用channel" class="headerlink" title="二、常用channel"></a>二、常用channel</h1><ol><li><p><code>DirectChannel</code>: 默认的<code>Spring Integration</code>默认的消息通道，它允许将消息发送给一个订阅者，然后阻碍发送直到消息被接收。同步发送。</p></li><li><p><code>QueueChannel</code>: 允许消息接收者轮询获得消息，用一个队列<code>queue</code>接收消息，队列的容量大小可配置。异步发送</p></li><li><p><code>PublishSubscribeChannel</code>: 允许广播消息给所有订阅者，不支持缓存即<code>Quenue</code></p></li><li><p><code>PriorityChannel</code>: 可以按照优先级将数据存储到队列</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap的存储原理</title>
      <link href="/blog/2020/03/04/HashMap%E7%9A%84%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/"/>
      <url>/blog/2020/03/04/HashMap%E7%9A%84%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：173,阅读全文大约需要1分钟</p><ol><li><p>内部使用<code>transient Node&lt;K,V&gt;[] table;</code>存储数据</p></li><li><p>插入和读取元素主要通过<code>hash</code>算法将<code>key</code>转换成相应数组下标。当多个元素拥有同一个<code>hash</code>值时这些元素就会在这个数组下形成链表，（jdk1.8）之后链表元素超过8个就会使用红黑树的形式存储。</p></li><li><p>插入之前会判断一下是否需要扩容，扩容机制另一篇文章有说明。<a href="https://www.jianshu.com/p/06ac1a057e25" target="_blank" rel="noopener">HashMap扩容机制</a></p></li><li><p>序列化时<code>table</code>字段不会被保存因为被<code>transient</code>修饰。<code>HashMap</code>重写了<code>writeObject</code>和<code>readObject</code>方法，以保证系列化时数据的保存。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot国际化</title>
      <link href="/blog/2020/03/04/SpringBoot%E5%9B%BD%E9%99%85%E5%8C%96/"/>
      <url>/blog/2020/03/04/SpringBoot%E5%9B%BD%E9%99%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>文章字数：181,阅读全文大约需要1分钟</p><blockquote><p><a href="https://www.jianshu.com/p/e2eae08f3255" target="_blank" rel="noopener">https://www.jianshu.com/p/e2eae08f3255</a></p></blockquote><h1 id="配置参数-bean"><a href="#配置参数-bean" class="headerlink" title="配置参数(bean)"></a>配置参数(bean)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认解析器 其中locale表示默认语言</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SessionLocaleResolver localeResolver = <span class="keyword">new</span> SessionLocaleResolver();</span><br><span class="line">        <span class="comment">//设置默认英语</span></span><br><span class="line">        localeResolver.setDefaultLocale(Locale.US);</span><br><span class="line">        <span class="comment">//注入Bean</span></span><br><span class="line">        <span class="keyword">return</span> localeResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认拦截器 其中lang表示切换语言的参数名</span></span><br><span class="line"><span class="comment">     * 例如:   ?lang=zh_CN</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">localeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">                LocaleChangeInterceptor localeInterceptor = <span class="keyword">new</span> LocaleChangeInterceptor();</span><br><span class="line">                localeInterceptor.setParamName(<span class="string">"lang"</span>);</span><br><span class="line">                registry.addInterceptor(localeInterceptor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置国际化文件存放的地方</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">messages:</span></span><br><span class="line">        <span class="attr">basename:</span> <span class="string">static/i18n/messages</span>  <span class="comment">#相对路径，开头没有/</span></span><br></pre></td></tr></table></figure><p><code>classpath:/static/i18n</code>目录中添加文件:</p><ol><li>默认文件<code>messages.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认翻译</span><br></pre></td></tr></table></figure></li><li>美式英语<code>messages_en_US.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.title&#x3D;User Login</span><br></pre></td></tr></table></figure></li><li>简体中文<code>messages_zh_CN.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.title&#x3D;用户登陆</span><br></pre></td></tr></table></figure></li></ol><h1 id="后端使用国际化"><a href="#后端使用国际化" class="headerlink" title="后端使用国际化"></a>后端使用国际化</h1><ul><li>编写通用国际化工具类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageUtils</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageUtils</span><span class="params">(MessageSource messageSource)</span> </span>&#123;</span><br><span class="line">        MessageUtils.messageSource = messageSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单个国际化翻译值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String msgKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> messageSource.getMessage(msgKey,  <span class="keyword">null</span>, LocaleContextHolder.getLocale());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> msgKey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="freeMarker中获取"><a href="#freeMarker中获取" class="headerlink" title="freeMarker中获取"></a>freeMarker中获取</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">    &lt;!--引入--&gt;</span><br><span class="line">     &lt;#import &quot;spring.ftl&quot; as spring&gt;</span><br><span class="line">     &lt;#assign arg &#x3D; [&quot;AAA&quot;,&quot;张三&quot;]&gt;</span><br><span class="line">     &lt;title&gt;&lt;@spring.messageArgs &quot;title&quot; ,arg &#x2F;&gt;&lt;&#x2F;title&gt;</span><br><span class="line">     &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;br&#x2F;&gt;</span><br><span class="line"> &lt;a class&#x3D;&quot;changeLang&quot; href&#x3D;&quot;javascript:void(0);&quot;&gt;english&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;</span><br><span class="line"> &lt;a class&#x3D;&quot;changeLang&quot; href&#x3D;&quot;javascript:void(0);&quot;&gt;中文&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;</span><br><span class="line"> &lt;!--使用--&gt;</span><br><span class="line"> &lt;@spring.message code&#x3D;&quot;user.loginname&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;$&#123;request.contextPath&#125;&#x2F;static&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">     $(&quot;.changeLang&quot;).on(&quot;click&quot;, function () &#123;</span><br><span class="line">         switch ($(this).text()) &#123;</span><br><span class="line">             case &quot;中文&quot;: &#123;</span><br><span class="line">                 window.location.href &#x3D; &quot;index?_lang&#x3D;zh_CN&quot;;</span><br><span class="line">                 break;</span><br><span class="line">             &#125;</span><br><span class="line">             case &quot;english&quot;: &#123;</span><br><span class="line">                 window.location.href &#x3D; &quot;index?_lang&#x3D;en_US&quot;;</span><br><span class="line">                 break;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>netty+websocket</title>
      <link href="/blog/2020/03/04/netty+websocket/"/>
      <url>/blog/2020/03/04/netty+websocket/</url>
      
        <content type="html"><![CDATA[<p>文章字数：307,阅读全文大约需要1分钟</p><blockquote><p>使用netty构建websocket服务器</p></blockquote><h1 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"> </span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap sb = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            sb.option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>);</span><br><span class="line">            sb.group(group, bossGroup) <span class="comment">// 绑定线程池</span></span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>) // 指定使用的<span class="title">channel</span></span></span><br><span class="line"><span class="class">                    .<span class="title">localAddress</span>(<span class="title">this</span>.<span class="title">port</span>)// 绑定监听端口</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123; <span class="comment">// 绑定客户端连接时候触发操作</span></span><br><span class="line"> </span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            System.out.println(<span class="string">"收到新连接"</span>);</span><br><span class="line">                            <span class="comment">//websocket协议本身是基于http协议的，所以这边也要使用http解编码器</span></span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                            <span class="comment">//以块的方式来写的处理器</span></span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> MyWebSocketHandler());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">"/ws"</span>, <span class="string">"WebSocket"</span>, <span class="keyword">true</span>, <span class="number">65536</span> * <span class="number">10</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture cf = sb.bind().sync(); <span class="comment">// 服务器异步创建绑定</span></span><br><span class="line">            System.out.println(NettyServer.class + " 启动正在监听： " + cf.channel().localAddress());</span><br><span class="line">            cf.channel().closeFuture().sync(); <span class="comment">// 关闭服务器通道</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully().sync(); <span class="comment">// 释放线程池资源</span></span><br><span class="line">            bossGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通道处理"><a href="#通道处理" class="headerlink" title="通道处理"></a>通道处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"与客户端建立连接，通道开启！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加到channelGroup通道组</span></span><br><span class="line">        MyChannelHandlerPool.channelGroup.add(ctx.channel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"与客户端断开连接，通道关闭！"</span>);</span><br><span class="line">        <span class="comment">//添加到channelGroup 通道组</span></span><br><span class="line">        MyChannelHandlerPool.channelGroup.remove(ctx.channel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//首次连接是FullHttpRequest，处理参数 by zhengkai.blog.csdn.net</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != msg &amp;&amp; msg <span class="keyword">instanceof</span> FullHttpRequest) &#123;</span><br><span class="line">            FullHttpRequest request = (FullHttpRequest) msg;</span><br><span class="line">            String uri = request.uri();</span><br><span class="line"></span><br><span class="line">            Map paramMap=getUrlParams(uri);</span><br><span class="line">            System.out.println(<span class="string">"接收到的参数是："</span>+JSON.toJSONString(paramMap));</span><br><span class="line">            <span class="comment">//如果url包含参数，需要处理</span></span><br><span class="line">            <span class="keyword">if</span>(uri.contains(<span class="string">"?"</span>))&#123;</span><br><span class="line">                String newUri=uri.substring(<span class="number">0</span>,uri.indexOf(<span class="string">"?"</span>));</span><br><span class="line">                System.out.println(newUri);</span><br><span class="line">                request.setUri(newUri);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> TextWebSocketFrame)&#123;</span><br><span class="line">            <span class="comment">//正常的TEXT消息类型</span></span><br><span class="line">            TextWebSocketFrame frame=(TextWebSocketFrame)msg;</span><br><span class="line">            System.out.println(<span class="string">"客户端收到服务器数据："</span> +frame.text());</span><br><span class="line">            sendAllMessage(frame.text());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.channelRead(ctx, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, TextWebSocketFrame textWebSocketFrame)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendAllMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//收到信息后，群发给所有channel</span></span><br><span class="line">        MyChannelHandlerPool.channelGroup.writeAndFlush( <span class="keyword">new</span> TextWebSocketFrame(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map <span class="title">getUrlParams</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        url = url.replace(<span class="string">"?"</span>,<span class="string">";"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!url.contains(<span class="string">";"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (url.split(<span class="string">";"</span>).length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            String[] arr = url.split(<span class="string">";"</span>)[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : arr)&#123;</span><br><span class="line">                String key = s.split(<span class="string">"="</span>)[<span class="number">0</span>];</span><br><span class="line">                String value = s.split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line">                map.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>  map;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>后端有做参数截取，url里可以直接放参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;127.0.0.1:12345&#x2F;ws?uid&#x3D;666&amp;gid&#x3D;777&quot;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaIO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>oop-klass二分模型</title>
      <link href="/blog/2020/03/04/oop-klass%E4%BA%8C%E5%88%86%E6%A8%A1%E5%9E%8B/"/>
      <url>/blog/2020/03/04/oop-klass%E4%BA%8C%E5%88%86%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：305,阅读全文大约需要1分钟</p><blockquote><p><code>HotSpot JVM</code>中<code>java</code>的对象是用<code>OOP-Klass</code>模型来对应的。</p></blockquote><h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><p><code>Ordinary Object Pointer</code> 普通对象指针，主要职能是标识对象的实例数据（存储在堆里）。<br>根据<code>JVM</code>内部使用的对象业务类型，具有多种<code>oopDesc</code>子类，比如<code>instanceOopDesc</code>表示类的实例，<code>arrayOopDesc</code>表示数组。<br>包含：</p><ol><li><code>Mark Word</code>主要存储对象运行时记录信息，如<code>hashcode</code>、<code>GC</code>分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等；</li><li>元数据指针，<code>_metadata</code>成员，可以表示未压缩和压缩的<code>Klass</code>指针，指向<code>Klass</code>对象（存储元数据的类）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">oopDesc</span> &#123;</span></span><br><span class="line"> <span class="comment">//....</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">volatile</span> markOop _mark;</span><br><span class="line">  <span class="keyword">union</span> _metadata &#123;</span><br><span class="line">    Klass*      _klass;</span><br><span class="line">    narrowKlass _compressed_klass;</span><br><span class="line">  &#125; _metadata;</span><br><span class="line"> <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Klass"><a href="#Klass" class="headerlink" title="Klass"></a>Klass</h1><p>包含<strong>元数据</strong>和<strong>方法信息</strong>，用来描述<code>java</code>类（存储在方法区）<br>每个已加载的<code>java</code>类都会创建一个<code>instanceKlass</code>对象，用来标识<code>java</code>内部类型的机制。<br>包含：</p><ol><li><code>ClassState</code>: 描述了类加载的状态：分配、加载、连接、初始化</li><li><code>instanceKlass</code>: 声明接口、字段、方法数组、常量池、源文件名等</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">instanceKlass</span>:</span> <span class="keyword">public</span> Klass &#123;</span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">VMStructs</span>;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">enum</span> ClassState &#123;</span><br><span class="line">    unparsable_by_gc = <span class="number">0</span>,               <span class="comment">// object is not yet parsable by gc. Value of _init_state at object allocation.</span></span><br><span class="line">    allocated,                          <span class="comment">// allocated (but not yet linked)</span></span><br><span class="line">    loaded,                             <span class="comment">// loaded and inserted in class hierarchy (but not linked yet)</span></span><br><span class="line">    linked,                             <span class="comment">// successfully linked/verified (but not initialized yet)</span></span><br><span class="line">    being_initialized,                  <span class="comment">// currently running class initializer</span></span><br><span class="line">    fully_initialized,                  <span class="comment">// initialized (successfull final state)</span></span><br><span class="line">    initialization_error                <span class="comment">// error happened during initialization</span></span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//部分内容省略</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="comment">// Method array.  方法数组</span></span><br><span class="line">  objArrayOop     _methods; </span><br><span class="line">  <span class="comment">// Interface (klassOops) this class declares locally to implement.</span></span><br><span class="line">  objArrayOop     _local_interfaces;  <span class="comment">//该类声明要实现的接口.</span></span><br><span class="line">  <span class="comment">// Instance and static variable information</span></span><br><span class="line">  typeArrayOop    _fields; </span><br><span class="line">  <span class="comment">// Constant pool for this class.</span></span><br><span class="line">  constantPoolOop _constants;     <span class="comment">//常量池</span></span><br><span class="line">  <span class="comment">// Class loader used to load this class, NULL if VM loader used.</span></span><br><span class="line">  oop             _class_loader;  <span class="comment">//类加载器</span></span><br><span class="line">  typeArrayOop    _inner_classes;   <span class="comment">//内部类</span></span><br><span class="line">  Symbol*         _source_file_name;   <span class="comment">//源文件名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HttpServletRequestWrapper过滤HttpRequest请求</title>
      <link href="/blog/2020/03/04/HttpServletRequestWrapper%E8%BF%87%E6%BB%A4HttpRequest%E8%AF%B7%E6%B1%82/"/>
      <url>/blog/2020/03/04/HttpServletRequestWrapper%E8%BF%87%E6%BB%A4HttpRequest%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>文章字数：32,阅读全文大约需要1分钟</p><blockquote><p><code>HttpServletRequestWrapper</code>使用了装饰模式可以增强<code>request</code></p></blockquote><h1 id="包装"><a href="#包装" class="headerlink" title="包装"></a>包装</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request=<span class="keyword">new</span> RequestWrapper((HttpServletRequest)request);</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写需要修改的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> filter(<span class="keyword">super</span>.getRequest().getParameter(<span class="string">"name"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//过滤...</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">filter</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>redisTemplate使用后断开连接</title>
      <link href="/blog/2020/03/04/redisTemplate%E4%BD%BF%E7%94%A8%E5%90%8E%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/"/>
      <url>/blog/2020/03/04/redisTemplate%E4%BD%BF%E7%94%A8%E5%90%8E%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：55,阅读全文大约需要1分钟</p><blockquote><p>使用redisTemplate来操作redis，而redisTemplate并不会自动释放连接。可以使用<code>redis.maxIdle=1000</code>增加连接池大小，但是治标不治本。</p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>使用<code>try...finally</code>包裹操作，在finally里<br><code>RedisConnectionUtils.unbindConnection(redisTemplate.getConnectionFactory());</code><br>断开连接</p>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-RestTemplate</title>
      <link href="/blog/2020/03/04/SpringBoot-RestTemplate/"/>
      <url>/blog/2020/03/04/SpringBoot-RestTemplate/</url>
      
        <content type="html"><![CDATA[<p>文章字数：394,阅读全文大约需要1分钟</p><blockquote><p><code>RestTemplate</code>是spring提供的访问Rest服务的客户端，默认使用jdk的http连接工具（HttpURLConnection）。可以通过<code>setRequestFactory</code>属性切换到其它http源， <code>Apache</code> <code>HttpComponents</code> 、<code>Netty</code> 、<code>OkHttp</code>等。</p></blockquote><h1 id="一、入口"><a href="#一、入口" class="headerlink" title="一、入口"></a>一、入口</h1><p>入口方法主要根据HTP的六个方法制定的：</p><table><thead><tr><th align="center">HTTP method</th><th align="center">RestTempalte methods</th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">getForObject</td></tr><tr><td align="center">-</td><td align="center">getForENtity</td></tr><tr><td align="center">POST</td><td align="center">poetForLocation</td></tr><tr><td align="center">-</td><td align="center">postForObject</td></tr><tr><td align="center">DELETE</td><td align="center">delete</td></tr><tr><td align="center">PUT</td><td align="center">put</td></tr><tr><td align="center">HEAD</td><td align="center">headForHeaders</td></tr><tr><td align="center">OPTIONS</td><td align="center">optionsForAllow</td></tr><tr><td align="center">通用方法</td><td align="center">exchange</td></tr><tr><td align="center">-</td><td align="center">execute</td></tr></tbody></table><p>注：默认使用<code>HttpMessageConverter</code>实例完成<code>POJP</code>和<code>HTTP</code>的转换，也可以通过<code>setMessageConverters</code>注册其它的转换器。（<code>@ResponseBody</code>使用的也是<code>HttpMessageConverter</code>）</p><h1 id="二、GET"><a href="#二、GET" class="headerlink" title="二、GET"></a>二、GET</h1><blockquote><p><code>getForObject()</code>和<code>getForEntity()</code> 解析类写String.class获取的就是字符串形式的数据</p></blockquote><h2 id="getForObject-方法"><a href="#getForObject-方法" class="headerlink" title="getForObject()方法"></a>getForObject()方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables)&#123;&#125;</span><br><span class="line">public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span><br><span class="line">public &lt;T&gt; T getForObject(URI url, Class&lt;T&gt; responseType)</span><br></pre></td></tr></table></figure><p>注：getForObject()比getForEntity()多了<code>HTTP</code>转换成<code>POJO</code>，但是省略了<code>response</code>信息。</p><h2 id="getForObject-方法实例"><a href="#getForObject-方法实例" class="headerlink" title="getForObject()方法实例"></a>getForObject()方法实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void restTemplateGetTest()&#123;</span><br><span class="line">  RestTemplate restTemplate &#x3D; new RestTemplate();</span><br><span class="line">&#x2F;&#x2F;无参</span><br><span class="line">  MessObj messObj1 &#x3D; restTemplate.getForObject(&quot;http:&#x2F;&#x2F;xxx.com&#x2F;test&quot;,MessObj .class);</span><br><span class="line">&#x2F;&#x2F;占位符传参</span><br><span class="line">  MessObj messObj2 &#x3D; restTemplate.getForObject(&quot;http:&#x2F;&#x2F;xxx.com&#x2F;test&#x2F;&#123;1&#125;&#x2F;&#123;2&#125;&quot;,MessObj .class,&quot;参数1&quot;,&quot;参数2&quot;);</span><br><span class="line">&#x2F;&#x2F;map传参</span><br><span class="line">  Map&lt;String,String&gt; map &#x3D; new HashMap();</span><br><span class="line">  map.put(&quot;id&quot;,&quot;1&quot;);</span><br><span class="line">  map.put(&quot;name&quot;,&quot;zs&quot;)</span><br><span class="line">  MessObj messObj1 &#x3D; restTemplate.getForObject(&quot;http:&#x2F;&#x2F;xxx.com&#x2F;test&quot;,MessObj .class,map);</span><br><span class="line">&#x2F;&#x2F;结果：messObj&#123;status&#x3D;200,data&#x3D;[&#123;a&#x3D;1&#125;...]...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getForEntity-方法"><a href="#getForEntity-方法" class="headerlink" title="getForEntity()方法"></a>getForEntity()方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Object... uriVariables)&#123;&#125;</span><br><span class="line">public &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)&#123;&#125;</span><br><span class="line">public &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(URI url, Class&lt;T&gt; responseType)&#123;&#125;</span><br></pre></td></tr></table></figure><p>注：返回的是<code>ResponseEntity</code>对象，需要<code>json</code>工具解析成<code>pojo</code>。<code>ResponseEntity</code>有<code>HttpStatus getStatusCode()</code>、<code>BodyBuilder</code>、<code>created(URI location)</code>等方法，方便查看更多信息。</p><p>ResponseEntity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public HttpStatus getStatusCode()&#123;&#125;</span><br><span class="line">public int getStatusCodeValue()&#123;&#125;</span><br><span class="line">public boolean equals(@Nullable Object other) &#123;&#125;</span><br><span class="line">public String toString() &#123;&#125;</span><br><span class="line">public static BodyBuilder status(HttpStatus status) &#123;&#125;</span><br><span class="line">public static BodyBuilder ok() &#123;&#125;</span><br><span class="line">public static &lt;T&gt; ResponseEntity&lt;T&gt; ok(T body) &#123;&#125;</span><br><span class="line">public static BodyBuilder created(URI location) &#123;&#125;</span><br></pre></td></tr></table></figure><p>HttpStatus.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public enum HttpStatus &#123;</span><br><span class="line">public boolean is1xxInformational() &#123;&#125;</span><br><span class="line">public boolean is2xxSuccessful() &#123;&#125;</span><br><span class="line">public boolean is3xxRedirection() &#123;&#125;</span><br><span class="line">public boolean is4xxClientError() &#123;&#125;</span><br><span class="line">public boolean is5xxServerError() &#123;&#125;</span><br><span class="line">public boolean isError() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BodyBuilder.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface BodyBuilder extends HeadersBuilder&lt;BodyBuilder&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;设置正文的长度，以字节为单位，由Content-Length标头</span><br><span class="line">      BodyBuilder contentLength(long contentLength);</span><br><span class="line">    &#x2F;&#x2F;设置body的MediaType 类型</span><br><span class="line">      BodyBuilder contentType(MediaType contentType);</span><br><span class="line">    &#x2F;&#x2F;设置响应实体(ResponseEntity)的主体(内容)并返回它。</span><br><span class="line">      &lt;T&gt; ResponseEntity&lt;T&gt; body(@Nullable T body);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>getForEntity()方法实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void gettTest()&#123;</span><br><span class="line">    RestTemplate resTemplate &#x3D; new RestTemplate();</span><br><span class="line">    ResponseEntity&lt;MessObj&gt; entity &#x3D; restTemplate.getForEntity(&quot;http:&#x2F;&#x2F;xx.com&#x2F;test&quot;,MessObj.class);</span><br><span class="line">    HttpStatus hsc &#x3D; entity.getStatusCode();</span><br><span class="line">    MessObj msObj &#x3D; entity.getBody();</span><br><span class="line">    ResponseEntity.BodyBuilder status &#x3D; ResponseEntity.status(hsc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、POST"><a href="#三、POST" class="headerlink" title="三、POST"></a>三、POST</h1><blockquote><p><code>postForObject()</code>和<code>postForEntity()</code></p></blockquote><h2 id="postForObject方法"><a href="#postForObject方法" class="headerlink" title="postForObject方法"></a>postForObject方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span><br><span class="line">            throws RestClientException &#123;&#125;</span><br><span class="line">public &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span><br><span class="line">            throws RestClientException &#123;&#125;</span><br><span class="line">public &lt;T&gt; T postForObject(URI url, @Nullable Object request, Class&lt;T&gt; responseType) throws RestClientException &#123;&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="comment">//第一个参数url</span></span><br><span class="line">    String url = <span class="string">"http://xxx.com/test"</span>;</span><br><span class="line">    <span class="comment">//第二个参数request(val,header)</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.setContentType(MediaType);</span><br><span class="line">    <span class="comment">//一个key对应多个val的map</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; map= <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    map.add(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>);    </span><br><span class="line">    <span class="comment">//request</span></span><br><span class="line">    HttpEntity&lt;MultiValueMap&lt;String,String&gt;&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(map,headers);</span><br><span class="line">    <span class="comment">//执行 url,http主</span></span><br><span class="line">    ResponseEntity&lt;String&gt; response = restTemplate.postForEntity(url,request,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//返回值&#123;"status":500,"msg":"xxx","data":null&#125;</span></span><br><span class="line">    System.out.println(response.getBody());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头类型<br>MediaType</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">json : application&#x2F;json</span><br><span class="line">xml : application&#x2F;xml</span><br><span class="line">png : image&#x2F;png</span><br><span class="line">jpg : image&#x2F;jpeg</span><br><span class="line">gif : imge&#x2F;gif</span><br></pre></td></tr></table></figure><h2 id="excute-和exchange"><a href="#excute-和exchange" class="headerlink" title="excute()和exchange()"></a>excute()和exchange()</h2><p><code>excute()</code>返回映射对象<code>&lt;T&gt;</code>,<code>exchange()</code>返回<code>ResponseEntity&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">restTemplate.exchange(</span><br><span class="line">         String url, <span class="comment">//地址</span></span><br><span class="line">         HttpMethod method,<span class="comment">//请求类型(HttpMethod.POST/PUT/DELETE/GET)</span></span><br><span class="line">         HttpEntity requestEntity, <span class="comment">//请求主体：请求体、头、内容</span></span><br><span class="line">         Class responseType, <span class="comment">//返回实体类</span></span><br><span class="line">         Object uriVariables[]<span class="comment">//url参数</span></span><br><span class="line">     )</span><br></pre></td></tr></table></figure><h1 id="设置超时"><a href="#设置超时" class="headerlink" title="设置超时"></a>设置超时</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SimpleClientHttpRequestFactory clientHttpRequestFactory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        clientHttpRequestFactory.setConnectTimeout(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">        clientHttpRequestFactory.setReadTimeout(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">        RestTemplate rest = <span class="keyword">new</span> RestTemplate(clientHttpRequestFactory);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python线程和进程</title>
      <link href="/blog/2020/03/04/python%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
      <url>/blog/2020/03/04/python%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：181,阅读全文大约需要1分钟</p><h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><p>线程和进程都是并发操作，多个代码块并行（几乎）操作</p><h1 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h1><p>进程是操作系统级别的，等于打开多个程序<br>线程是进程下又开辟的多个并行代码</p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>线程开销小，但是<code>python</code>的线程是基于解释器的，解释器有个全局锁。实际上代码还是串行执行的。<br>进程开销大但是是并行处理，能够利用多核处理器的优势。<br>线程在io密集时可以使用，计算密集的状态下不仅并行和单线程时间一样，还要多算线程切换的消耗。计算密集的情况下还是使用多进程。</p>]]></content>
      
      
      <categories>
          
          <category> 其它语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Integer类型之间比较</title>
      <link href="/blog/2020/03/04/Integer%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E6%AF%94%E8%BE%83/"/>
      <url>/blog/2020/03/04/Integer%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p>文章字数：51,阅读全文大约需要1分钟<br>直接比较<code>==</code>对比的是类的地址，<code>equals</code>才是对比值。但是<code>equals</code>对比似乎会有bug，最好使用<code>ob.intValue()</code>转换成<code>int</code>再比较，或者<code>float(ob)</code>转成其他类型比较</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Buffered包装的IO流效率</title>
      <link href="/blog/2020/03/04/Buffered%E5%8C%85%E8%A3%85%E7%9A%84IO%E6%B5%81%E6%95%88%E7%8E%87/"/>
      <url>/blog/2020/03/04/Buffered%E5%8C%85%E8%A3%85%E7%9A%84IO%E6%B5%81%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>文章字数：403,阅读全文大约需要1分钟</p><blockquote><p>带<code>Buffer</code>的<code>IO</code>流是为了效率而创造出来的，然而实际上不是所有的情况下效率都比普通io高。</p></blockquote><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><ol><li><code>BufferedInputStream</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        getBufIfOpen(); <span class="comment">// Check for closed stream</span></span><br><span class="line">        <span class="keyword">if</span> ((off | len | (off + len) | (b.length - (off + len))) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> nread = read1(b, off + n, len - n);</span><br><span class="line">            <span class="keyword">if</span> (nread &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (n == <span class="number">0</span>) ? nread : n;</span><br><span class="line">            n += nread;</span><br><span class="line">            <span class="keyword">if</span> (n &gt;= len)</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line">            <span class="comment">// if not closed but no bytes available, return</span></span><br><span class="line">            InputStream input = in;</span><br><span class="line">            <span class="keyword">if</span> (input != <span class="keyword">null</span> &amp;&amp; input.available() &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">read1</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> avail = count - pos;</span><br><span class="line">        <span class="keyword">if</span> (avail &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* If the requested length is at least as large as the buffer, and</span></span><br><span class="line"><span class="comment">               if there is no mark/reset activity, do not bother to copy the</span></span><br><span class="line"><span class="comment">               bytes into the local buffer.  In this way buffered streams will</span></span><br><span class="line"><span class="comment">               cascade harmlessly. */</span></span><br><span class="line">            <span class="keyword">if</span> (len &gt;= getBufIfOpen().length &amp;&amp; markpos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> getInIfOpen().read(b, off, len);</span><br><span class="line">            &#125;</span><br><span class="line">            fill();</span><br><span class="line">            avail = count - pos;</span><br><span class="line">            <span class="keyword">if</span> (avail &lt;= <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = (avail &lt; len) ? avail : len;</span><br><span class="line">        System.arraycopy(getBufIfOpen(), pos, b, off, cnt);</span><br><span class="line">        pos += cnt;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>BufferedInputStream</code>的<code>read</code>方法本质上也是调用<code>FilterInputStream</code>的<code>read</code>方法，<code>IO</code>的次数差不多，特殊情况下还会比<code>FilterInputStream</code>多。</p><ol start="2"><li><code>BufferedOutputStream</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream out)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(out, <span class="number">8192</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= buf.length) &#123;</span><br><span class="line">            flushBuffer();</span><br><span class="line">        &#125;</span><br><span class="line">        buf[count++] = (<span class="keyword">byte</span>)b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (len &gt;= buf.length) &#123;</span><br><span class="line">            <span class="comment">/* If the request length exceeds the size of the output buffer,</span></span><br><span class="line"><span class="comment">               flush the output buffer and then write the data directly.</span></span><br><span class="line"><span class="comment">               In this way buffered streams will cascade harmlessly. */</span></span><br><span class="line">            flushBuffer();</span><br><span class="line">            out.write(b, off, len);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; buf.length - count) &#123;</span><br><span class="line">            flushBuffer();</span><br><span class="line">        &#125;</span><br><span class="line">        System.arraycopy(b, off, buf, count, len);</span><br><span class="line">        count += len;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>初始化的时候声明了一个<code>8192</code>大小的<code>byte[]</code>数组，每次写入都是直接写入数组中。当调用刷新方法，或者数组满了才会调用<code>FilterOutputStream</code>的<code>write</code>将数组中的数据写入<code>IO</code>。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p><code>read</code>方法在获取到的长度小于预期的长度时会再次尝试读取剩余的长度，其它和原生<code>IO</code>一样</p></li><li><p><code>write</code>方法本质是先把数据写入内置的<code>byte[]</code>中，等到了一定大小再调用父类方法一次性写入。和自己在外部把信息写入<code>byte[]</code>再写入是一样的。</p></li><li><p><code>write</code>方法在写入的数据大于初始化缓冲区的情况下还会增加<code>IO</code>次数，因为写入后检测到大于缓存区就会马上写入<code>IO</code>，再写入剩下的。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> javaIO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python基本语法</title>
      <link href="/blog/2020/03/04/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/blog/2020/03/04/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：989,阅读全文大约需要3分钟</p><blockquote><p>指定字符编码 <code># -*- coding: utf-8 -*-</code></p></blockquote><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><ol><li>输入 <code>name = input()</code></li><li>输出 <code>print(&#39;1+1=&#39;,1+1)</code></li></ol><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><ol><li><p>if</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># :后面的缩进（4个空格）都是代码块</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">elif</span> a = <span class="number">0</span>:</span><br><span class="line">    print(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure></li><li><p>for</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    sum = sum + x</span><br></pre></td></tr></table></figure><ol start="3"><li>while</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="4"><li>退出</li></ol><ul><li><code>break</code>退出所有循环</li><li><code>continue</code>退出本次循环</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote><p>变量不用声明，直接用 a=123</p></blockquote><ol><li>整数 <code>1</code></li><li>浮点数 <code>1.23</code></li><li>字符串</li></ol><ul><li><code>&#39; &#39;</code></li><li><code>&quot; &quot;</code></li><li><code>r&#39; &#39;</code> 内部不转义</li><li><code>&#39;&#39;&#39; sss &#39;&#39;&#39;</code> 多行文本</li></ul><ol start="4"><li>布尔值 <code>True</code> <code>False</code>使用<code>and</code> <code>or</code> <code>not</code>运算</li><li>空值 <code>None</code></li></ol><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ol><li><code>list</code></li></ol><ul><li>声明 <code>classmates = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</code></li><li>长度 <code>len(classmates)</code></li><li>正向下标取值<code>classmates[0]</code> 第一个</li><li>负向下标取值<code>classmates[-1]</code> 最后一个</li><li>追加到末尾<code>classmates.append(&#39;Adam&#39;)</code></li><li>插入指定位置<code>classmates.insert(1, &#39;Jack&#39;)</code></li><li>删除末尾<code>classmates.pop()</code></li><li>删除指定位置<code>classmates.pop(1)</code></li><li>切片获取 <code>r[0:3]</code>从0取到3,0可省略</li></ul><ol start="2"><li><code>tuple</code>不可变集合</li></ol><ul><li>声明<code>classmates = (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)</code></li><li>声明空的<code>tuple</code> ：<code>t = ()</code></li><li>声明一个：<code>t = (1,)</code>为了和数值型区分，后面加<code>,</code></li></ul><ol start="4"><li><code>dict</code>:键值对</li></ol><ul><li>声明 <code>d = {&#39;Michael&#39;: 95, &#39;Bob&#39;: 75, &#39;Tracy&#39;: 85}</code></li><li>取出<code>d[&#39;Michael&#39;]</code>或者<code>d.get(&#39;Michael&#39;)</code></li><li>判断是否<code>key</code>在字典中<code>&#39;Thomas&#39; in d</code>返回布尔</li><li>删除<code>d.pop(&#39;Bob&#39;)</code></li></ul><ol start="5"><li><code>set</code>无序集合</li></ol><ul><li>声明<code>s = set([1, 2, 3])</code></li><li>添加<code>s.add(4)</code></li><li>删除<code>remove(key)</code></li><li>交集并集<code>s1 &amp; s2</code> <code>s1 | s2</code></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ol><li><p>函数赋值<code>a = abs</code>指向<code>abs()</code>,然后<code>a()</code></p></li><li><p>声明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_fun</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="comment"># 返回None</span></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure></li><li><p>空函数</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 占位，也可用于循环的占位</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ol start="4"><li>返回多值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实是个cuple</span></span><br><span class="line">x, y = xx()</span><br></pre></td></tr></table></figure><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li>对象迭代</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    print(key)</span><br></pre></td></tr></table></figure><ul><li>声明</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># object代表父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cl</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># self代表本身，永远是第一个</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span></span></span><br><span class="line">        self.name = nema</span><br></pre></td></tr></table></figure><p><code>c = Cl(&#39;123&#39;)</code></p><ul><li><p>指定对象可以使用的属性<br><code>__slots__ = (&#39;name&#39;, &#39;age&#39;)</code>仅当前类有用，子类无作用</p></li><li><p>toString 写<code>__str__</code>方法</p></li><li><p>类作用于<code>len()</code>：写<code>__len__</code>方法</p></li><li><p>对象可以被遍历</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 迭代器每次都会调用这个方法，接收返回</span></span><br><span class="line">    <span class="comment"># raise StopIteration()退出（抛出异常）</span></span><br></pre></td></tr></table></figure><ul><li>get set</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">@score.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span></span><br></pre></td></tr></table></figure><p><code>s.score</code>:等于<code>s.get_sore()</code><br><code>s.score = 60</code>:<code>s.set_sore(60)</code></p><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><ol><li>map/reduce<br><code>r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</code>f是函数，接收一个值，map会把list的参数一个个传进去</li></ol><p><code>reduce(f, [x1, x2, x3, x4])</code>f是函数，接收两个值第一个是上一个的返回值，第二个是list的元素</p><ol start="2"><li><p>filter <code>filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15])</code>返回满足条件的集合</p></li><li><p><code>sorted([36, 5, -12, 9, -21])</code>排序</p></li><li><p>函数可以返回函数</p></li><li><p>获取函数变量的方法名<code>fun.__name__</code></p></li></ol><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul><li>定义<code>abc.py</code>就是<code>abc</code>模块</li><li>引入<code>import abc</code></li></ul><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><ol><li><code>range(5)</code>生成 0-5 的有序集合</li><li><code>list(range(5))</code>展示list</li><li><code>b = a.replace(&#39;a&#39;, &#39;A&#39;)</code>字符替换</li><li><code>help(abs)</code>查看函数说明</li><li><code>abs(100)</code>取整</li><li><code>int()</code>转换类型</li><li><code>max(1,2,3,)</code>取最大值</li><li><code>hex()</code>十进制转16</li><li><code>now()</code>现在的时间</li><li><code>type(&#39;abc&#39;)</code>获取类型，也可以传对象</li></ol><h1 id="io"><a href="#io" class="headerlink" title="io"></a>io</h1><ol><li>打开文件</li></ol><ul><li><code>f = open(&#39;/Users/michael/test.txt&#39;, &#39;r&#39;)</code>r只读</li><li><code>f = open(&#39;/Users/michael/gbk.txt&#39;, &#39;r&#39;, encoding=&#39;gbk&#39;)</code>指定字符编码</li><li><code>f = open(&#39;/Users/michael/gbk.txt&#39;, &#39;r&#39;, encoding=&#39;gbk&#39;, errors=&#39;ignore&#39;)</code>字符编码错误忽略</li></ul><ol start="2"><li><p>读取<code>f.read()</code></p></li><li><p>关闭<code>f.close()</code></p></li><li><p>安全打开(有异常也关闭)</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"> <span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><ol start="5"><li><p>自动关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure></li><li><p>其它读</p></li></ol><ul><li><code>read(size)</code>读取固定大小</li><li><code>readline()</code>读取一行</li><li><code>readlines()</code>读一行，返回所有内容的list</li></ul><ol start="7"><li>写</li></ol><ul><li>覆盖<code>w</code>追加<code>a</code></li><li><code>f.write(&#39;Hello, world!&#39;)</code></li></ul><ol start="8"><li>StringIO,BytesIO</li></ol><ul><li><code>f = StringIO(&#39;Hello!\nHi!\nGoodbye!&#39;)</code>string转成io</li><li><code>f = BytesIO()</code>然后写<code>f.write(&#39;中文&#39;.encode(&#39;utf-8&#39;))</code><br><code>f.getvalue()</code> : <code>b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;</code>二进制数据</li></ul><ol start="9"><li>文件目录<br>import os</li></ol><ul><li><code>os.rename(&#39;test.txt&#39;, &#39;test.py&#39;)</code>重命名</li><li><code>os.remove(&#39;test.py&#39;)</code>删除</li><li><code>os.mkdir(&#39;/Users/michael/testdir&#39;)</code>创建目录</li><li><code>os.rmdir(&#39;/Users/michael/testdir&#39;)</code>删除目录</li></ul><ol start="10"><li>对象写入</li></ol><ul><li>转换成bytes: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">f = open(<span class="string">'dump.txt'</span>, <span class="string">'wb'</span>)</span><br><span class="line">d = dict(name=<span class="string">'Bob'</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line">pickle.dumps(d)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li>转json<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">d = dict(name=<span class="string">'Bob'</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line">json.dumps(d)</span><br><span class="line"><span class="comment"># 解析json</span></span><br><span class="line">json.loads(json_str)</span><br></pre></td></tr></table></figure></li></ul><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ol><li>支持多进程</li><li>多线程<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=loop, name=<span class="string">'LoopThread'</span>)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 其它语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成MQTT</title>
      <link href="/blog/2020/03/04/SpringBoot%E9%9B%86%E6%88%90MQTT/"/>
      <url>/blog/2020/03/04/SpringBoot%E9%9B%86%E6%88%90MQTT/</url>
      
        <content type="html"><![CDATA[<p>文章字数：289,阅读全文大约需要1分钟</p><blockquote><p>使用<code>SpringBoot</code>进行<code>MQTT</code>的推送和订阅主题。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><p><code>jdk1.8</code></p></li><li><p><code>maven</code></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-integration&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.integration&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-integration-stream&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.integration&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-integration-mqtt&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttConnectOptions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.annotation.IntegrationComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.annotation.ServiceActivator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.channel.DirectChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.endpoint.MessageProducerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.core.MqttPahoClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.inbound.MqttPahoMessageDrivenChannelAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.outbound.MqttPahoMessageHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.support.DefaultPahoMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// spring Integration组件扫描，MessageChannel使用的就是这个组件</span></span><br><span class="line"><span class="meta">@IntegrationComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqttConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">"userName"</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mqtt 服务地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mqtt.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String hostUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备id,用来区分不同的设备连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mqtt.client.id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅那个主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mqtt.topic&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String defaultTopic;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建连接的工厂</span></span><br><span class="line"><span class="comment">     * 用于构建MessageHandler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MqttPahoClientFactory <span class="title">mqttClientFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultMqttPahoClientFactory factory = <span class="keyword">new</span> DefaultMqttPahoClientFactory();</span><br><span class="line">        MqttConnectOptions mqttConnectOptions=<span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">        <span class="comment">// mqtt服务器url</span></span><br><span class="line">        mqttConnectOptions.setServerURIs(<span class="keyword">new</span> String[]&#123;hostUrl&#125;);</span><br><span class="line">        <span class="comment">// 设置会话心跳时间(秒)</span></span><br><span class="line">        mqttConnectOptions.setKeepAliveInterval(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 每次请求是否清空连接记录</span></span><br><span class="line">        mqttConnectOptions.setCleanSession(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 可以设置用户名密码</span></span><br><span class="line">        mqttConnectOptions.setUserName(username);</span><br><span class="line">        mqttConnectOptions.setPassword(password.toCharArray());</span><br><span class="line">        factory.setConnectionOptions(mqttConnectOptions);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* --------------------发布配置----------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 发布信息的MessageHandler</span></span><br><span class="line"><span class="comment">     * 订阅 mqttOutboundChannel 通道的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mqttClientFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ServiceActivator</span>(inputChannel = <span class="string">"mqttOutboundChannel"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageHandler <span class="title">mqttOutbound</span><span class="params">(MqttPahoClientFactory mqttClientFactory)</span> </span>&#123;</span><br><span class="line">        MqttPahoMessageHandler messageHandler = <span class="keyword">new</span> MqttPahoMessageHandler(clientId, mqttClientFactory);</span><br><span class="line">        messageHandler.setAsync(<span class="keyword">true</span>);</span><br><span class="line">        messageHandler.setDefaultQos(<span class="number">0</span>);</span><br><span class="line">        messageHandler.setDefaultRetained(<span class="keyword">false</span>);</span><br><span class="line">        messageHandler.setAsyncEvents(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> messageHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageChannel <span class="title">mqttOutboundChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* --------------------接收配置-------------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理订阅的MessageHandler</span></span><br><span class="line"><span class="comment">     * 订阅 aaInboundChannel 通道的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ServiceActivator</span>(inputChannel = <span class="string">"mqttInboundChannel"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageHandler <span class="title">newHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message -&gt; System.out.println(<span class="string">"收到消息 = "</span> + message.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageChannel <span class="title">mqttInboundChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 订阅主题，可订阅多个主题</span></span><br><span class="line"><span class="comment">     * 2. 将主题返回的内容发布到指定的 MessageChannel 里</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mqttClientFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageProducerSupport <span class="title">mqttInbound</span><span class="params">(MqttPahoClientFactory mqttClientFactory)</span> </span>&#123;</span><br><span class="line">        MqttPahoMessageDrivenChannelAdapter adapter = <span class="keyword">new</span> MqttPahoMessageDrivenChannelAdapter(clientId, mqttClientFactory, defaultTopic);</span><br><span class="line">        adapter.setConverter(<span class="keyword">new</span> DefaultPahoMessageConverter());</span><br><span class="line">        adapter.setQos(<span class="number">0</span>);</span><br><span class="line">        adapter.setOutputChannel(mqttInboundChannel());</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面配置了订阅了一个<code>DirectChannel</code>，接收到消息后推送给<code>MQTT</code><br>下面就是如何使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@MessagingGateway</span>(defaultRequestChannel = <span class="string">"mqttOutboundChannel"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MsgWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendToMqtt</span><span class="params">(String data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendToMqtt</span><span class="params">(String payload,@Header(MqttHeaders.TOPIC)</span> String topic)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendToMqtt</span><span class="params">(@Header(MqttHeaders.TOPIC)</span> String topic, @<span class="title">Header</span><span class="params">(MqttHeaders.QOS)</span> <span class="keyword">int</span> qos, String payload)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBean生命周期</title>
      <link href="/blog/2020/03/04/springBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/blog/2020/03/04/springBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：456,阅读全文大约需要1分钟</p><blockquote><p>SpringBean从创建、初始化操作、就绪、销毁。组成了一个完整的生命周期。</p></blockquote><h1 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h1><blockquote><p>普通的容器和<code>spring</code>的耦合很低，使用过程中不用知道<code>spring</code>的存在，将容器从<code>spring</code>替换成其他容器也可以正常运行。然而部分功能需要用到容器本身的功能和资源，于是<code>spring</code>提供了<code>spring aware</code>系列可以在初始化容器时通过接口的形式提供。</p></blockquote><ol><li>实例化</li><li>填充属性</li><li>调用<code>BeanNameAware</code>的<code>setBeanName</code>方法<br> 如果<code>Bean</code>实现此接口，调用<code>setBeanName</code>方法并传入<code>Bean</code>的<code>id</code></li><li>调用<code>BeanFactoryAware</code>的<code>setBeanFactory</code>方法<br> 如果<code>Bean</code>实现此接口,调用方法传入<code>Spring</code>工厂本身</li><li>调用<code>ApplicationContextAware</code>的<code>setApplicationContext</code>方法<br> 如果<code>Bean</code>实现此接口,调用方法传入<code>ApplicationContext</code>,即<code>spring</code>容器上下文</li><li>调用<code>BeanPostProcess</code>的<code>postProssBeforeInitialization</code>方法<br> 如果<code>Bean</code>实现此接口,调用方法传入<code>(Object bean,String beanName)</code><br> 这个方法是在初始化结束时调用，所以通常应用于内存或缓存技术</li></ol><hr><p>初始化结束</p><ol start="7"><li><p>如果<code>bean</code>在<code>Spring</code>配置文件中配置了<code>init-method</code>属性，会自动调用配置的初始化方法</p></li><li><p>调用<code>InitializingBean</code>的<code>afterPropertiesSet</code>方法</p></li><li><p>调用<code>BeanPostProcess</code>的<code>postProcessAfterInitialization</code>方法<br>如果<code>Bean</code>实现此接口,调用方法传入(Object bean,String beanName)<br> 初始化之后调用的方法</p></li><li><p><code>Bean</code>准备就绪</p></li></ol><hr><p>销毁</p><ol start="11"><li>调用<code>DispostbleBean</code>的<code>destory</code>方法<br>在清理阶段，实现此方法的<code>Bean</code>会调用<code>destory</code>方法销毁</li><li>调用指定的销毁方法<br>如果在配置文件指定<code>destory-method</code>方法，会自动销毁</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring中异步执行方法</title>
      <link href="/blog/2020/03/04/Spring%E4%B8%AD%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/"/>
      <url>/blog/2020/03/04/Spring%E4%B8%AD%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：258,阅读全文大约需要1分钟</p><blockquote><p>java程序与第三方系统交互的时候使用同步容易造成响应迟缓，解决方法除了多线程之外还可以使用Spring内置的<code>@Async</code>来解决这个问题</p></blockquote><h1 id="开启注解"><a href="#开启注解" class="headerlink" title="开启注解"></a>开启注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//springBoot启动类上开启</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123; <span class="string">"com.xwj.controller"</span>, <span class="string">"com.xwj.service"</span> &#125;)</span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步调用</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="无返回值调用"><a href="#无返回值调用" class="headerlink" title="无返回值调用"></a>无返回值调用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span>  <span class="comment">//标注使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncMethodWithVoidReturnType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"获取:"</span>+ Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="有返回值"><a href="#有返回值" class="headerlink" title="有返回值"></a>有返回值</h1><p>异步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Future接口类型的get方法可以在没有执行之前阻塞，直到获取到值</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">asyncMethodWithReturnType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);<span class="comment">//模拟执行耗时</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsynResult&lt;String&gt;(<span class="string">"hello"</span>);<span class="comment">//返回类型是AsynResult;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>&#123;</span><br><span class="line">    Future&lt;String&gt; future = asyncMethodWithReturnType();<span class="comment">//调用</span></span><br><span class="line">    future.get();<span class="comment">//获取结果，如果工作没结束阻塞线程。</span></span><br><span class="line">    future.cancel(<span class="keyword">boolean</span> mayInterruptIfRunning);<span class="comment">//停止任务，通过传入值判断是否可以停止。如果可以(在运行)返回true,不可以(运行结束,或无法停止)返回false。</span></span><br><span class="line">    future.isDone();<span class="comment">//判断方法是否完成</span></span><br><span class="line">    future.isCancel();<span class="comment">//是否可以被取消</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> InterruptedException,ExecutionException</span>&#123;</span><br><span class="line">  Callable ca1 = <span class="keyword">new</span> Callable()&#123;<span class="comment">//线程1</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xxx"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用FutureTask包裹</span></span><br><span class="line">    FutureTask&lt;String&gt; ft1 = <span class="keyword">new</span> FutureTask&lt;String&gt;(ca1);</span><br><span class="line">    <span class="keyword">new</span> Thread(ft1).start();<span class="comment">//运行</span></span><br><span class="line">    System.out.println(ft1.get());<span class="comment">//获取值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Attach机制</title>
      <link href="/blog/2020/03/04/Attach%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2020/03/04/Attach%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：307,阅读全文大约需要1分钟</p><blockquote><p><code>Java Attach</code>是一种让<code>java</code>进程之间进行通信的机制。比如<code>jvm</code>运行时获取信息的<code>jstack</code>工具就是应用<code>Attach</code>的。</p></blockquote><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ol><li><code>获取信息</code>: 通过Attach机制可以获取jvm的内存dump、线程dump、类统计信息、获取vm flag、获取系统属性等。</li><li><code>动态控制程序</code>: 为jvm进程动态加载agent，动态设置vm flag（运行时的flag）</li></ol><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><ol><li>使用<code>com.sun.tools.attach</code>下的相关类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException </span>&#123;</span><br><span class="line">        VirtualMachine attach = VirtualMachine.attach(<span class="string">"1234"</span>);<span class="comment">//需要连接jvm进程的pid</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        InputStream in = ((HotSpotVirtualMachine) attach).remoteDataDump((Object[]) args);</span><br><span class="line">        <span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            n = in.read(b);</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, n));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (n &gt; <span class="number">0</span>);</span><br><span class="line">        in.close();</span><br><span class="line">        attach.detach();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>相关jvm参数</li></ol><table><thead><tr><th>jvm参数</th><th>默认值</th><th>介绍</th></tr></thead><tbody><tr><td>DisableAttachMechanism</td><td>false</td><td>禁止Attach</td></tr><tr><td>StartAttachListener</td><td>false</td><td>程序启动时就开启Attach Listener线程，否则需要Signal Dispatcher线程唤醒</td></tr><tr><td>ReduceSignalUsage</td><td>false</td><td>减少信号量？</td></tr></tbody></table><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ol><li><p>每个jvm都有两个线程: <code>Signal Dispatcher</code>处理信号，<code>Attach Listener</code>用于jvm进程间通信。</p></li><li><p><code>Attach Listener</code>线程默认不开启，使用jvm参数可以启动时开启。否则会在Attach连接成功后开启。</p></li><li><p><code>Attach Listener</code>线程启动后，就会创建一个监听套接字，并创建了一个文件<code>/tmp/.java_pid</code></p></li><li><p>客户端向<code>java_pid</code>中写相关命令，<code>Attach Listener</code>线程会监听这个文件，有信息就解析，执行，返回。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>String字符编码</title>
      <link href="/blog/2020/03/04/String%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
      <url>/blog/2020/03/04/String%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：335,阅读全文大约需要1分钟</p><blockquote><p><code>java</code>程序中经常会有中文乱码的问题，通常都是字符编码的问题。这次系统性的了解一下这个问题</p></blockquote><h1 id="发生原因"><a href="#发生原因" class="headerlink" title="发生原因"></a>发生原因</h1><p> 字符编码的问题主要发生在编码和解码使用了不同的编码方式，体现在代码上就是</p><ol><li><p>使用相同的字符编码解码和编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String test = <span class="keyword">new</span> String(<span class="string">"abc123阿布才"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] testByte = test.getBytes(Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">        String testRes = <span class="keyword">new</span> String(testByte, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">        System.out.println(<span class="string">"testRes = "</span> + testRes);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testRes = abc123阿布才</span><br></pre></td></tr></table></figure></li><li><p>使用不同的字符编码解码和编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String test = <span class="keyword">new</span> String(<span class="string">"abc123阿布才"</span>);</span><br><span class="line">        <span class="comment">// 这里变成了gbk编码</span></span><br><span class="line">        <span class="keyword">byte</span>[] testByte = test.getBytes(Charset.forName(<span class="string">"gbk"</span>));</span><br><span class="line">        String testRes = <span class="keyword">new</span> String(testByte, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">        System.out.println(<span class="string">"testRes = "</span> + testRes);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testRes = abc123������</span><br></pre></td></tr></table></figure></li></ol><h1 id="默认编码"><a href="#默认编码" class="headerlink" title="默认编码"></a>默认编码</h1><p>程序内部交互一般不会出现字符编码的问题，因为编码和解码都会默认使用内部的默认编码。所以解析和编码是同一种编码类型。但是如果与其它程序交互，因为两个程序的默认编码不同则可能导致这种问题。</p><ol><li>获取<code>jvm</code>当前默认字符编码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(System.getProperty(file.encoding));</span><br></pre></td></tr></table></figure></li></ol><p>无参的<code>String.getBytes()</code>和<code>new String(byte[])</code>使用的都是默认编码</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HashMap扩容机制</title>
      <link href="/blog/2020/03/04/HashMap%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/"/>
      <url>/blog/2020/03/04/HashMap%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：269,阅读全文大约需要1分钟</p><blockquote><p><code>HashMap</code>初始大小为<code>16</code>，即内部容器容量为16。但是如果是自定义大小的<code>HashMap</code>，那么什么情况下会触发扩容？</p></blockquote><h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1><ol><li><p><code>loadFactor</code>：负载因子，默认<code>0.75f</code>。当内部元素大于<code>容器容量*负载因子</code>时触发扩容。</p></li><li><p><code>table</code>：实际存储数据的数组<code>transient Node&lt;K,V&gt;[] table;</code>初始化大小也就是<code>table</code>的大小。</p></li><li><p><code>tableSizeFor()</code>：这个方法保证传入的初始化值是2 的 N 次幂，比如传入1000，经过这个方法转换就成了1024。而实际存储大小为768（1024 * 0.75）</p></li></ol><h1 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h1><ol><li>传入的初始大小经过<code>tableSizeFor()</code>转换，保证值为2 的 N 次幂</li><li>初始化负载因子为<code>0.75f</code></li><li>生成内部存储数组<code>table</code>，大小为初始化传入的值，默认16</li><li>当内部元素超过扩容阈值（初始化大小*负载因子）时扩容，扩容大小为原理的一倍</li></ol><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>初始值 = （需要存储的元素 / 负载因子） + 1</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal线程变量拷贝</title>
      <link href="/blog/2020/03/04/ThreadLocal%E7%BA%BF%E7%A8%8B%E5%8F%98%E9%87%8F%E6%8B%B7%E8%B4%9D/"/>
      <url>/blog/2020/03/04/ThreadLocal%E7%BA%BF%E7%A8%8B%E5%8F%98%E9%87%8F%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>文章字数：209,阅读全文大约需要1分钟</p><blockquote><p>java.lang.ThreadLocal<T>为每个线程提供不同的变量拷贝(线程变量)</p></blockquote><h1 id="和其他变量的区别"><a href="#和其他变量的区别" class="headerlink" title="和其他变量的区别"></a>和其他变量的区别</h1><ol><li><p>全局变量：属于类，类保存在堆中。属于所有线程共有的区域。所以全局变量能够被所有的线程访问到</p></li><li><p>局部变量：属于方法，方法存在栈空间，是线程私有的。但是方法的局部变量只属于方法，外部无法访问。</p></li><li><p><code>ThreadLocal</code>：属于线程，线程全局使用。一个<code>ThreadLocal</code>存储一个值</p></li></ol><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;String&gt;;</span><br><span class="line"></span><br><span class="line">tl.set(<span class="string">"xxx"</span>);</span><br><span class="line">tl.get();</span><br><span class="line"><span class="comment">//在线程结束的时候最好手动清除一下，提高回收效率</span></span><br><span class="line">tl.remove();</span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>每个线程独立连接sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionManager</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; connectionHolder = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Connection <span class="title">initialValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            Connection conn = <span class="keyword">null</span>;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                conn = DriverManager.getConnection(  </span><br><span class="line">                        <span class="string">"jdbc:mysql://localhost:3306/test"</span>, <span class="string">"username"</span>,  </span><br><span class="line">                        <span class="string">"password"</span>);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> conn;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> connectionHolder.get();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setConnection</span><span class="params">(Connection conn)</span> </span>&#123;  </span><br><span class="line">        connectionHolder.set(conn);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot启动执行任务</title>
      <link href="/blog/2020/03/04/springBoot%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/"/>
      <url>/blog/2020/03/04/springBoot%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>文章字数：31,阅读全文大约需要1分钟</p><h1 id="启动任务代码"><a href="#启动任务代码" class="headerlink" title="启动任务代码"></a>启动任务代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(value = <span class="number">31</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dataProcessor</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">//原本这个方法上加的定时，现在改为循环</span></span><br><span class="line">            dataTiming();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot整合freemarker</title>
      <link href="/blog/2020/03/04/springBoot%E6%95%B4%E5%90%88freemarker/"/>
      <url>/blog/2020/03/04/springBoot%E6%95%B4%E5%90%88freemarker/</url>
      
        <content type="html"><![CDATA[<p>文章字数：286,阅读全文大约需要1分钟</p><blockquote><p>freemarker是一款模板引擎，适用于mvc框架</p></blockquote><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-freemarker&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring.freemarker.allow-request-override&#x3D;false</span><br><span class="line"># 关闭缓存</span><br><span class="line">spring.freemarker.cache&#x3D;false</span><br><span class="line">spring.freemarker.check-template-location&#x3D;true</span><br><span class="line">spring.freemarker.charset&#x3D;UTF-8</span><br><span class="line">spring.freemarker.content-type&#x3D;text&#x2F;html</span><br><span class="line">spring.freemarker.expose-request-attributes&#x3D;false</span><br><span class="line">spring.freemarker.expose-session-attributes&#x3D;false</span><br><span class="line">spring.freemarker.expose-spring-macro-helpers&#x3D;false</span><br><span class="line">#spring.freemarker.prefix&#x3D;</span><br><span class="line">#spring.freemarker.request-context-attribute&#x3D;</span><br><span class="line">#spring.freemarker.settings.*&#x3D;</span><br><span class="line">#文件后缀名</span><br><span class="line">#spring.freemarker.suffix&#x3D;.ftl</span><br><span class="line">#spring.freemarker.template-loader-path&#x3D;classpath:&#x2F;templates&#x2F; #comma-separated list</span><br><span class="line">#spring.freemarker.view-names&#x3D; # whitelist of view names that can be resolved</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li><p>基本使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Hello , $&#123;name&#125;&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p><em>Controller.java*</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">view</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"hello"</span>);</span><br><span class="line">    mv.addObject(<span class="string">"name"</span>,<span class="string">"xxx"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list studentList as student&gt;</span><br><span class="line">$&#123;student.id&#125;&#x2F;$&#123;studnet.name&#125;</span><br><span class="line">&lt;&#x2F;#list&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">下标</span><br></pre></td></tr></table></figure><p>&lt;#list studentList as student&gt;<br>  ${student_index}<br>&lt;/#list&gt;</p></li><li><p>判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if student_index % 2 &#x3D;&#x3D; 0&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;&#x2F;#if&gt;</span><br></pre></td></tr></table></figure></li><li><p>日期格式化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">日期：$&#123;date?date&#125;</span><br><span class="line">时间：$&#123;date?time&#125;</span><br><span class="line">日期时间：$&#123;date?datetime&#125;</span><br><span class="line">自定义格式：$&#123;date?string(&quot;yyyyMM&#x2F;dd HH:mm:ss&quot;)&#125;</span><br></pre></td></tr></table></figure></li><li><p>null处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&#123;name!&quot;默认...&quot;&#125;</span><br><span class="line">判断</span><br><span class="line">&lt;#if name??&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;&#x2F;#if&gt;</span><br></pre></td></tr></table></figure></li><li><p>包含其他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#include &quot;hello.ftl&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h1><p>就是定义一个代码片段，在其它地方可以复用<br>####不带参数</p><ol><li>定义<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#macro</span> <span class="attr">greet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"+2"</span>&gt;</span>Hello Joe!<span class="tag">&lt;/<span class="name">font</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">#macro</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>复用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">@greet</span>&gt;</span><span class="tag">&lt;/<span class="name">@greet</span>&gt;</span>  </span><br><span class="line">或者  </span><br><span class="line"><span class="tag">&lt;<span class="name">@greet</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="带参使用"><a href="#带参使用" class="headerlink" title="带参使用"></a>带参使用</h4></li></ol><ul><li>定义<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#macro</span> <span class="attr">header</span> <span class="attr">title</span>=<span class="string">"默认文字"</span> <span class="attr">keywords</span>=<span class="string">"默认文字"</span> <span class="attr">description</span>=<span class="string">"默认文字"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"$&#123;keywords&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"$&#123;description&#125;"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">#macro</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入上面的定义文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/<span class="attr">include</span>/<span class="attr">public.ftl</span>"&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">@header</span> <span class="attr">title</span>=<span class="string">"公司简介"</span> <span class="attr">keywords</span>=<span class="string">"公司简介2"</span> <span class="attr">description</span>=<span class="string">"公司简介3"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ol><li>重复生成固定数量的元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义一个1到28的数组 --&gt;</span><br><span class="line"> &lt;#assign months&#x3D;1..28&#x2F;&gt;</span><br><span class="line"> &lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;!-- 遍历数组 --&gt;</span><br><span class="line">       &lt;#list months as month&gt;</span><br><span class="line">              &lt;option value&#x3D;&quot;$&#123;month&#125;&quot;&gt;$&#123;month&#125;&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;&#x2F;#list&gt;</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br><span class="line">&lt;!-- 其它生成方式 --&gt;</span><br><span class="line">&lt;#assign months&#x3D;[1,2,3,4,5,6,7,8,9,0]&#x2F;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot启动时执行</title>
      <link href="/blog/2020/03/04/springBoot%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C/"/>
      <url>/blog/2020/03/04/springBoot%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：84,阅读全文大约需要1分钟</p><blockquote><p>开发的时候需要项目启动后执行一些初始化功能，soringBoot中可以添加一个model并实现CommandLineRunner接口，实现功能的代码放在实现的run方法中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springboot.sample.runner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//作为bean加入spring</span></span><br><span class="line"><span class="meta">@Order</span>(value=<span class="number">2</span>)<span class="comment">//多个启动任务的执行顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStartupRunner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;服务启动执行 2222 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot+websocket的订阅和发送</title>
      <link href="/blog/2020/03/04/springBoot+websocket%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%91%E9%80%81/"/>
      <url>/blog/2020/03/04/springBoot+websocket%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：245,阅读全文大约需要1分钟</p><blockquote><p>springWebSocket还有一种形式，除了事件绑定的形式还有基于观察者模式（发布-订阅）的绑定<code>topic</code>形式</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>springBoot的websocket的starter包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;    </span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    </span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title">AbstractWebSocketMessageBrokerConfigurer</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="comment">//添加服务端点,接收服务连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;   </span><br><span class="line">        <span class="comment">// 添加一个 /socket 的端点</span></span><br><span class="line">        registry.addEndpoint(<span class="string">"/socket"</span>).withSockJS();<span class="comment">//开启SockJS支持</span></span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="comment">// 定义消息代理（连接请求的规范）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// 客户端订阅地址前缀（服务端发送）</span></span><br><span class="line">        registry.enableSimpleBroker(<span class="string">"/topic"</span>);  </span><br><span class="line">        <span class="comment">// 客户端发布地址前缀（服务端接收）    </span></span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">"/app"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>端点连接还可以配置允许跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">registry.addEndpoint(<span class="string">"/socket"</span>).addInterceptors(<span class="keyword">new</span> HandshakeInterceptor()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span></span>&#123;</span><br><span class="line">response.getHeaders().add(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception)</span> </span>&#123;</span><br><span class="line">&#125;&#125;).setAllowedOrigins(<span class="string">"*"</span>).withSockJS();</span><br></pre></td></tr></table></figure><h1 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SimpMessagingTemplate simpMessagingTemplate;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/change-notice"</span>)  <span class="comment">// 接收客户端推送信息的地址，配置了头，所以前端发送应该是"/app/change-notice"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greeting</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.simpMessagingTemplate.convertAndSend(<span class="string">"/topic/notice"</span>, value);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以简写成这种形式，@SendTo代表返回值推送到那个topic</span></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/change-notice"</span>)</span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"/topic/notice"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greeting</span><span class="params">(String value)</span> </span>&#123;    </span><br><span class="line">         <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>准备</p><ul><li><code>socketjs.js</code>:如果浏览器不支持<code>webSocket</code>，改库可以模拟对<code>webSocket</code>的支持</li><li><code>stomp.js</code>:将<code>webSocket</code>代理代码简易化的框架</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> socket = <span class="keyword">new</span> SocketJS(<span class="string">'/socket'</span>);</span><br><span class="line">    stompClient = Stomp.over(socket); </span><br><span class="line">    stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">frame</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">     &#125;);  </span><br><span class="line"><span class="comment">//断开连接</span></span><br><span class="line">stompClient.disconnect();   </span><br><span class="line"><span class="comment">//发送信息</span></span><br><span class="line">stompClient.send(<span class="string">"/app/change-notice"</span>, &#123;&#125;, value);   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//订阅信息</span></span><br><span class="line">stompClient.subscribe(<span class="string">'/topic/notice'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;            </span><br><span class="line">      $(<span class="string">'.message span.content'</span>).html(data.body);        </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot+webSocket</title>
      <link href="/blog/2020/03/04/springBoot+webSocket/"/>
      <url>/blog/2020/03/04/springBoot+webSocket/</url>
      
        <content type="html"><![CDATA[<p>文章字数：506,阅读全文大约需要2分钟</p><blockquote><p>springBoot2.x提供了简便的websocket实现方式。但是如果需要大并发，还是需要使用netty</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-websocket&lt;&#x2F;artifactId&gt;  </span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启WebSocket支持</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.log.Log;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.log.LogFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket/&#123;sid&#125;"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Log log=LogFactory.get(WebSocketServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;WebSocketServer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收sid</span></span><br><span class="line">    <span class="keyword">private</span> String sid=<span class="string">""</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法*/</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session,@PathParam(<span class="string">"sid"</span>)</span> String sid) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);     <span class="comment">//加入set中</span></span><br><span class="line">        addOnlineCount();           <span class="comment">//在线数加1</span></span><br><span class="line">        log.info(<span class="string">"有新窗口开始监听:"</span>+sid+<span class="string">",当前在线人数为"</span> + getOnlineCount());</span><br><span class="line">        <span class="keyword">this</span>.sid=sid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">         sendMessage(<span class="string">"连接成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"websocket IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);  <span class="comment">//从set中删除</span></span><br><span class="line">        subOnlineCount();           <span class="comment">//在线数减1</span></span><br><span class="line">        log.info(<span class="string">"有一连接关闭！当前在线人数为"</span> + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息*/</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"收到来自窗口"</span>+sid+<span class="string">"的信息:"</span>+message);</span><br><span class="line">        <span class="comment">//群发消息</span></span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"发生错误"</span>);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现服务器主动推送</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发自定义消息</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String message,@PathParam(<span class="string">"sid"</span>)</span> String sid) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    log.info(<span class="string">"推送消息到窗口"</span>+sid+<span class="string">"，推送内容:"</span>+message);</span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这里可以设定只推送给这个sid的，为null则全部推送</span></span><br><span class="line">            <span class="keyword">if</span>(sid==<span class="keyword">null</span>) &#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.sid.equals(sid))&#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket;  </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(WebSocket) == <span class="string">"undefined"</span>) &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"您的浏览器不支持WebSocket"</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"您的浏览器支持WebSocket"</span>);  </span><br><span class="line">        <span class="comment">//实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接  </span></span><br><span class="line">            <span class="comment">//等同于socket = new WebSocket("ws://localhost:8083/checkcentersys/websocket/20");  </span></span><br><span class="line">            socket = <span class="keyword">new</span> WebSocket(<span class="string">"$&#123;basePath&#125;websocket/$&#123;cid&#125;"</span>.replace(<span class="string">"http"</span>,<span class="string">"ws"</span>));  </span><br><span class="line">            <span class="comment">//打开事件  </span></span><br><span class="line">            socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"Socket 已打开"</span>);  </span><br><span class="line">                <span class="comment">//socket.send("这是来自客户端的消息" + location.href + new Date());  </span></span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="comment">//获得消息事件  </span></span><br><span class="line">            socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;  </span><br><span class="line">                <span class="built_in">console</span>.log(msg.data);  </span><br><span class="line">                <span class="comment">//发现消息进入    开始处理前端触发逻辑</span></span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="comment">//关闭事件  </span></span><br><span class="line">            socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"Socket已关闭"</span>);  </span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="comment">//发生了错误事件  </span></span><br><span class="line">            socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                alert(<span class="string">"Socket发生了错误"</span>);  </span><br><span class="line">                <span class="comment">//此时可以尝试刷新页面</span></span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//离开页面时，关闭socket</span></span><br><span class="line">            <span class="comment">//jquery1.8中已经被废弃，3.0中已经移除</span></span><br><span class="line">            <span class="comment">// $(window).unload(function()&#123;  </span></span><br><span class="line">            <span class="comment">//     socket.close();  </span></span><br><span class="line">            <span class="comment">//&#125;);  </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p><a href="https://blog.csdn.net/moshowgame/article/details/80275084" target="_blank" rel="noopener">原文链接</a></p><hr><p><a href="https://www.jianshu.com/p/60799f1356c5" target="_blank" rel="noopener">其它</a></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot-Aop</title>
      <link href="/blog/2020/03/04/springBoot-Aop/"/>
      <url>/blog/2020/03/04/springBoot-Aop/</url>
      
        <content type="html"><![CDATA[<p>文章字数：521,阅读全文大约需要2分钟</p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.cenobitor.aop.annotation.Action;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.cenobitor.aop.annotation.Action)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">annotationPoinCut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"annotationPoinCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        Action action = method.getAnnotation(Action<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.cenobitor.aop.service.DemoMethodService.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Aspect 定义切面：切面由切点和增强（引介）组成(可以包含多个切点和多个增强)，它既包括了横切逻辑的定义，也包括了连接点的定义，SpringAOP就是负责实施切面的框架，它将切面所定义的横切逻辑织入到切面所指定的链接点中。</span><br><span class="line">@Pointcut 定义切点：切点是一组连接点的集合。AOP通过“切点”定位特定的连接点。通过数据库查询的概念来理解切点和连接点的关系再适合不过了：连接点相当于数据库中的记录，而切点相当于查询条件。</span><br><span class="line">@Before ：在目标方法被调用之前做增强处理,@Before只需要指定切入点表达式即可。</span><br><span class="line">@AfterReturning ： 在目标方法正常完成后做增强,@AfterReturning除了指定切入点表达式后，还可以指定一个返回值形参名returning,代表目标方法的返回值。</span><br><span class="line">@Afterthrowing： 主要用来处理程序中未处理的异常,@AfterThrowing除了指定切入点表达式后，还可以指定一个throwing的返回值形参名,可以通过该形参名来访问目标方法中所抛出的异常对象。</span><br><span class="line">@After： 在目标方法完成之后做增强，无论目标方法时候成功完成。@After可以指定一个切入点表达式。</span><br><span class="line">@Around： 环绕通知,在目标方法完成前后做增强处理,环绕通知是最重要的通知类型,像事务,日志等都是环绕通知,注意编程中核心是一个ProceedingJoinPoint。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>TimeUnit类</title>
      <link href="/blog/2020/03/04/TimeUnit%E7%B1%BB/"/>
      <url>/blog/2020/03/04/TimeUnit%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：290,阅读全文大约需要1分钟</p><blockquote><p>这是<code>java</code>并发包<code>java.util.concurrent</code>下的一个用于定义时间粒度、时间转换、线程休眠的工具类。</p></blockquote><h1 id="枚举量"><a href="#枚举量" class="headerlink" title="枚举量"></a>枚举量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SECONDS：秒</span><br><span class="line">MINUTES：分</span><br><span class="line">HOURS：时</span><br><span class="line">DAYS：日</span><br><span class="line">NANOSECONDS：纳秒，等于<span class="number">1</span>*<span class="number">10</span>^-<span class="number">9</span> s</span><br><span class="line">MICROSECONDS：微妙 <span class="number">1</span>*<span class="number">10</span>^-<span class="number">6</span> s</span><br><span class="line">MILLISECONDS：毫秒 <span class="number">1</span>*<span class="number">10</span>^-<span class="number">3</span> s</span><br></pre></td></tr></table></figure><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><ol><li><p><code>toHours(long duration)</code>:<br>粒度之间都有类似的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一天几个小时</span></span><br><span class="line">Long dayToHour = TimeUnit.DAYS.toHours(<span class="number">1</span>);<span class="comment">//24</span></span><br></pre></td></tr></table></figure></li><li><p><code>convert(long sourceDuration, TimeUnit sourceUnit)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 48小时转换成天</span></span><br><span class="line">TimeUnit.DAYS.convert(<span class="number">48</span>, TimeUnit.HOURS);<span class="comment">//2</span></span><br></pre></td></tr></table></figure></li><li><p><code>sleep(long timeout)</code><br>可读性更好的线程休眠操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//休眠两分钟</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>timedJoin(Thread thread, long timeout)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定线程休眠指定毫秒数</span></span><br><span class="line">TimeUnit.SECONDS.timedJoin(Thread.currentThread(), <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>timedWait(Object obj, long timeout)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//休眠指定对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.timedWait(<span class="keyword">this</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springBoot配置文件</title>
      <link href="/blog/2020/03/04/springBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2020/03/04/springBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：326,阅读全文大约需要1分钟</p><blockquote><p>application.properties是保存spring配置的地方。springBoot提供了很多模块，只需要在pom中引入模块化的<code>starter POMs</code>（spring-boot-starter-*,ru dara-jpa这些spring整合的模块）。除了这些模块的应用外，还能有其他特殊的使用场景。</p></blockquote><h1 id="自定义属性及加载"><a href="#自定义属性及加载" class="headerlink" title="自定义属性及加载"></a>自定义属性及加载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;key&#x3D;value 类型</span><br><span class="line">xxx.demo.test&#x3D;test</span><br></pre></td></tr></table></figure><p>在变量上加上注解，自动加载值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;属性名</span><br><span class="line">@Value(&quot;$&#123;xxx.demo.test&#125;&quot;)</span><br><span class="line">private String testValue</span><br></pre></td></tr></table></figure><h1 id="参数间引用"><a href="#参数间引用" class="headerlink" title="参数间引用"></a>参数间引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxx.demo.test&#x3D;test</span><br><span class="line">xxx.demo.info&#x3D;this is a $&#123;xxx.demo.test&#125;</span><br></pre></td></tr></table></figure><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 随机字符串</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.value&#125;</span><br><span class="line"># 随机int</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.int&#125;</span><br><span class="line"># 随机long</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.long&#125;</span><br><span class="line"># 10以内随机数</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.int(10)&#125;</span><br><span class="line"># 10-20间随机数</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.init(10,20)&#125;</span><br></pre></td></tr></table></figure><h1 id="屏蔽命令行修改属性值"><a href="#屏蔽命令行修改属性值" class="headerlink" title="屏蔽命令行修改属性值"></a>屏蔽命令行修改属性值</h1><blockquote><p><code>java -jar xxx.jar --server.port=888</code>等价于在配置文件中设置xxx.jar，<code>--</code>是对于配置属性赋值的标识。</p></blockquote><ul><li>屏蔽修改属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication.setAddCommandLineProperties(false)</span><br></pre></td></tr></table></figure><h1 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h1><blockquote><p>就是生产、测试、开发环境都用各自的配置文件</p></blockquote></li><li>application-dev.properties：开发环境</li><li>application-test.properties：测试环境</li><li>application-prod.properties：生产环境<br>在主配置文件<code>application.properties</code>中<code>spring.profiles.active</code>配置机体需要那一份配置。（rest,dev,prod）<br>也可以命令行选则<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active&#x3D;test</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JNA</title>
      <link href="/blog/2020/03/04/JNA/"/>
      <url>/blog/2020/03/04/JNA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：247,阅读全文大约需要1分钟</p><blockquote><p>java native interface JNA(Java Native Access)框架是一个开源的Java框架，是SUN公司主导开发的，建立在经典的JNI的基础之上的一个框架</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Library;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Native;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Platform;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.win32.StdCallLibrary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNADllCall</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DLL动态库调用方法 </span></span><br><span class="line"><span class="comment">     * stdCall模式，调用完内存清除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StdCallDll</span> <span class="keyword">extends</span> <span class="title">StdCallLibrary</span> </span>&#123;</span><br><span class="line">        <span class="comment">// DLL文件默认路径为项目根目录，若DLL文件存放在项目外，请使用绝对路径</span></span><br><span class="line">        StdCallDll INSTANCE = (StdCallDll) Native.loadLibrary(<span class="string">"dllName"</span>,StdCallDll<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">// 加载动态库文件</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明将要调用的DLL中的方法（可以是多个方法）</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(String format, Object... args)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DLL动态库调用方法2</span></span><br><span class="line"><span class="comment">     * cdecl模式，调用完内存信息保留，数据由调用者清除 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CLibrary</span> <span class="keyword">extends</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 做个判断，是windos下就加载msvcrt.dll ,否则是 c.so</span></span><br><span class="line">        CLibrary INSTANCE = (CLibrary) Native.loadLibrary((Platform.isWindows() ? <span class="string">"msvcrt"</span> : <span class="string">"c"</span>),</span><br><span class="line">                CLibrary<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(String format, Object... args)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StdCallDll.INSTANCE.printf(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">        CLibrary.INSTANCE.printf(<span class="string">"Hello, World\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JNI</title>
      <link href="/blog/2020/03/04/JNI/"/>
      <url>/blog/2020/03/04/JNI/</url>
      
        <content type="html"><![CDATA[<p>文章字数：256,阅读全文大约需要1分钟</p><blockquote><p>jni(java native interface)允许java和本地方法交互，但是会丧失平台的可移植性。</p></blockquote><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>编写<code>java native</code>方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">displayHelloWorld</span><span class="params">()</span></span>;<span class="comment">//所有native关键词修饰的都是对本地的声明</span></span><br><span class="line">     <span class="keyword">static</span> &#123;</span><br><span class="line">         System.loadLibrary(<span class="string">"hello"</span>);<span class="comment">//载入本地库</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          <span class="comment">//调用</span></span><br><span class="line">         <span class="keyword">new</span> HelloWorld().displayHelloWorld();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>使用<code>javac</code>编译java类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure></li><li>使用<code>javah</code>生成头文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah HelloWord</span><br></pre></td></tr></table></figure></li><li>本地方法实现<br>编写和<code>javah</code>生成的头文件声明方法相同的方法。<br><code>HelloWorldImpl.cpp</code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"jni.h"</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"HelloWorld.h"</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_HelloWorld_displayHelloWorld(JNIEnv*env,jobject obj)</span><br><span class="line">&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>生成dll,重命名为hello.dll移动到java目录下。<br>调用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">       System.loadLibrary(<span class="string">"hello"</span>);<span class="comment">//载入本地库</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>YGC和FGC</title>
      <link href="/blog/2020/03/04/YGC%E5%92%8CFGC/"/>
      <url>/blog/2020/03/04/YGC%E5%92%8CFGC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：155,阅读全文大约需要1分钟</p><ol><li><code>YGC</code>:对新生代堆进行<code>gc</code>，即<code>young GC</code>。频率较高，<code>edn</code>空间不足时会执行，此时会回收大部分对象。性能消耗较小</li><li><code>FGC</code>:全堆范围的<code>gc</code>默认堆空间达到80%时触发<code>fgc</code>。触发频率较低，7-10天可能才会触发一次。<code>old</code>空间、<code>perm</code>空间不足，调用<code>System.gc()</code>，<code>ygc</code>的悲观策略、dump live的内存信息时(jmap –dump:live)都会触发</li></ol><p>悲观策略<br>当jvm计算<code>ygc</code>之后需要晋升的空间大于剩余空间时就会直接执行一次<code>fgc</code>，因为反正晋升之后也需要执行一次。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型jmm</title>
      <link href="/blog/2020/03/04/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8Bjmm/"/>
      <url>/blog/2020/03/04/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8Bjmm/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1085,阅读全文大约需要4分钟</p><blockquote><p>java内存模型(java Memory Model)是一种符合内存模型规范，屏蔽硬件及操作系统的差异，保证java程序在不同平台下的内存访问效果一致性的机制及规范。</p></blockquote><p>本文整理自-<a href="https://www.jianshu.com/p/76959115d486" target="_blank" rel="noopener">深入理解JVM-内存模型（jmm）和GC</a>的上半部分</p><hr><h1 id="一、电脑内存模型"><a href="#一、电脑内存模型" class="headerlink" title="一、电脑内存模型"></a>一、电脑内存模型</h1><ol><li>背景</li></ol><blockquote><p>随着cpu的发展，内存的读写速度远远赶不上cpu。因此，cpu的厂商在每颗cpu上加上了高速缓存，作为cpu和内存间的缓冲区域。</p></blockquote><p>2.带来的问题</p><blockquote><p>每个cpu各自的一套缓存(一级缓存、二级缓存、三级缓存),如何保证多处理器运算到同一个内存区域时的数据一致性？</p></blockquote><ol start="3"><li>解决方法</li></ol><blockquote><p>为了解决这个问题，各个处理器需要遵循缓存一致性协议与主存交互</p></blockquote><p>在cpu层面，<strong>内存屏障(Memory Barrier)</strong>提供了支持(硬件层支持)：</p><ol><li>内存屏障的类型</li></ol><blockquote><p>硬件层的内存屏障分为:<code>Load Barrier</code>(读屏障)和<code>Store Barrier</code>(写屏障)</p></blockquote><ol start="2"><li>内存屏障作用</li></ol><blockquote><p>1.cpu执行指令可能是；无序的，内存屏障可以组织屏障两侧进行指令重排。<br>2.强制把写缓冲区/高速缓存中的数据失效，从而强制从主存中获取。</p></blockquote><ol start="3"><li>java中的生成jvm内存屏障</li></ol><blockquote><p>使用关键词volatitle修饰变量</p></blockquote><p>相当于变量读写加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatitleValue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">set</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>volatile变量特性</li></ol><blockquote><p>1.可见性，该变量的读一定可以看到读之前最后的写<br>2.原子性，对于该变量的读写具有原子性。</p></blockquote><h1 id="java内存区域"><a href="#java内存区域" class="headerlink" title="java内存区域"></a>java内存区域</h1><blockquote><p>jvm主要有 sun的<code>HotSpot/JRockit</code>和IBM的<code>IBMJVM</code>,其中HotSpot为主流，在此探讨HotSpot虚拟机。</p></blockquote><ol><li>Java内存模型（Java Memory Model ,JMM）</li></ol><blockquote><p>如开题所说，jmm是jvm的一种规范。使语言不能直接访问硬件内存，作为中转以解决各硬件和操作系统的差异问题。</p></blockquote><h3 id="虚拟机五大数据区域"><a href="#虚拟机五大数据区域" class="headerlink" title="虚拟机五大数据区域"></a>虚拟机五大数据区域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法区、堆是线程共享的</span><br><span class="line">栈、本地方法栈、计数器是线程私有的</span><br></pre></td></tr></table></figure><ol><li>计数器</li></ol><blockquote><p>线程执行java方法时指向字节码，方便cpu线程切换时切换回正确位置</p></blockquote><p>注：内存中唯一没有OutOfMemoryError的区域</p><p>2 虚拟机栈</p><blockquote><p>由栈帧组成，每个方法执行的时候都会创建栈帧存储变量表，操作栈，动态链接，方法出入口等。</p></blockquote><p>注：方法调用入栈，调用完出栈。局部变量表大小在方法运行前就完全确定了</p><ol start="3"><li>本地方法栈</li></ol><blockquote><p>虚拟机栈调用的是java方法(字节码文件),本地方法栈则是调动native方法(c、c++)的实现方法</p></blockquote><hr><p><strong>以下为线程共有的</strong></p><ol start="4"><li>堆</li></ol><blockquote><p>一般来说对象实例及数组都是在堆上被分配内存。堆作为最大的内存区域也是GC(内存回收机制)主要管理的区域。根据规范，堆可以存在与物理上不连续的内存空间，可设定固定大小也可扩展。(-Xmx和-Xms)。</p></blockquote><p>注：没有内存可分配会报OOM(OutOfMemory)</p><ol start="5"><li>方法区</li></ol><blockquote><p>存储已被虚拟机加载的类信息、常量、静态变量、静态方法、静态代码块。</p></blockquote><hr><p><strong>再回顾一下</strong><br>线程私有的:</p><table><thead><tr><th>区域名</th><th>作用</th></tr></thead><tbody><tr><td>计数器</td><td>cpu线程切换后找到正确位置</td></tr><tr><td>jvm栈</td><td>引用java方法</td></tr><tr><td>native栈</td><td>引用本地c/c++方法及功能</td></tr></tbody></table><p>线程共享的:</p><table><thead><tr><th>区域名</th><th>作用</th></tr></thead><tbody><tr><td>堆</td><td>对象实例、数组</td></tr><tr><td>方法区</td><td>类的静态信息</td></tr></tbody></table><ol start="3"><li>对象在内存中的结构<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.对象头&#x2F;&#x2F;</span><br><span class="line">2.数据实体&#x2F;&#x2F;对象信息</span><br><span class="line">3.对齐填充&#x2F;&#x2F;占位</span><br></pre></td></tr></table></figure></li></ol><p><strong>对象头(markword)</strong>说明：</p><blockquote><ol><li>64操作系统下16字节(开启指针压缩12)</li><li>synchronized的锁信息就存储在这里</li><li>根据锁位偏移有四种锁状态<code>无锁态</code>、<code>偏向锁</code>、<code>轻量级锁</code>、<code>重量级锁</code></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springMVC文件下载</title>
      <link href="/blog/2020/03/04/springMVC%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/blog/2020/03/04/springMVC%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>文章字数：78,阅读全文大约需要1分钟</p><blockquote><p>摘抄自<a href="https://blog.csdn.net/a447332241/article/details/78998239" target="_blank" rel="noopener">原文</a></p></blockquote><h1 id="传统io输出"><a href="#传统io输出" class="headerlink" title="传统io输出"></a>传统io输出</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">      <span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">download</span><span class="params">( String fileName ,String filePath, HttpServletRequest request, HttpServletResponse response)</span></span>&#123; </span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">java.io.BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">java.io.BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">String downLoadPath = filePath;  <span class="comment">//注意不同系统的分隔符</span></span><br><span class="line"><span class="comment">//String downLoadPath =filePath.replaceAll("/", "\\\\\\\\");   //replace replaceAll区别 *****  </span></span><br><span class="line">System.out.println(downLoadPath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">long</span> fileLength = <span class="keyword">new</span> File(downLoadPath).length();</span><br><span class="line">response.setContentType(<span class="string">"application/x-msdownload;"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment; filename="</span> + <span class="keyword">new</span> String(fileName.getBytes(<span class="string">"utf-8"</span>), <span class="string">"ISO8859-1"</span>));</span><br><span class="line">response.setHeader(<span class="string">"Content-Length"</span>, String.valueOf(fileLength));</span><br><span class="line">bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(downLoadPath));</span><br><span class="line">bos = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream());</span><br><span class="line"><span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line"><span class="keyword">int</span> bytesRead;</span><br><span class="line"><span class="keyword">while</span> (-<span class="number">1</span> != (bytesRead = bis.read(buff, <span class="number">0</span>, buff.length))) &#123;</span><br><span class="line">bos.write(buff, <span class="number">0</span>, bytesRead);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (bis != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bis.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bos != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="springmvc提供的ResponseEntit"><a href="#springmvc提供的ResponseEntit" class="headerlink" title="springmvc提供的ResponseEntit"></a>springmvc提供的ResponseEntit</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)  </span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; export(String fileName,String filePath) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line"></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();    </span><br><span class="line">    File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">    </span><br><span class="line">    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);    </span><br><span class="line">    headers.setContentDispositionFormData(<span class="string">"attachment"</span>, fileName);    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(FileUtils.readFileToByteArray(file), headers, HttpStatus.CREATED);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springSession数据结构</title>
      <link href="/blog/2020/03/04/springSession%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/blog/2020/03/04/springSession%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>文章字数：732,阅读全文大约需要2分钟</p><h1 id="三种redis中保存session的key"><a href="#三种redis中保存session的key" class="headerlink" title="三种redis中保存session的key"></a>三种redis中保存session的key</h1><ol><li><code>spring:session:sessions:sessionId</code></li><li><code>spring:session:expirations:时间戳</code></li><li><code>spring:session:sessions:expires:sessionId</code></li></ol><p><code>spring:session:</code>是三个键公用的前缀</p><h1 id="sessions"><a href="#sessions" class="headerlink" title="sessions"></a>sessions</h1><p> <code>spring:session:sessions:sessionId</code>的数据类型是<code>hash</code>类型,其中保存着<code>session</code>相关信息和<code>session</code>的数据。默认<code>TTL</code>是35分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;lastAccessedTime&quot;: 1523933008926,&#x2F;*2018&#x2F;4&#x2F;17 10:43:28*&#x2F;    #最后访问时间</span><br><span class="line">creationTime&quot;: 1523933008926, &#x2F;*2018&#x2F;4&#x2F;17 10:43:28*&#x2F;    #创建时间</span><br><span class="line">maxInactiveInterval&quot;: 1800,      #失效时长</span><br><span class="line">sessionAttr:xxx:&quot;666&quot;    #session的值 sessionAttr:名字:“值”</span><br></pre></td></tr></table></figure><h1 id="expirations"><a href="#expirations" class="headerlink" title="expirations:"></a>expirations:</h1><ol><li><code>redis</code>的过期处理优先级很低，如果有很多过期的键就会出现键已经过期但是未删除</li><li>确保<code>redis</code>的键过期的方式有两个：访问过期的键、手动删除</li><li>基于以上两点，<code>spring</code>会定时手动清除过期的键。<br><code>spring:session:expirations:时间戳</code>中保存的数据为<code>set</code>类型，其中保存着时间戳所在的一分钟之内过期的session，有数据访问就移除，添加到下一个时间段的<code>set</code>中。使用专门的键保存过期需要确保删除的session可以避免全局查找，然后一个个访问失效时间等信息。<br>用户快速操作可能会带来并发问题，在两个时间段都进行了请求。session的过期时间应该向后推两次，但是可能第一次向后推还没完成第二次就完成了(两次操作处于时间段节点)这样就造成session过期时间存在于两个时间段中。<br>此时如果直接删除会造成时间差，比预计删除早了一分钟。所以不能使用删除，使用<code>hasKey</code>命令访问过期的<code>key</code>,让<code>redis</code>自动删除。</li></ol><h1 id="sessions-expires"><a href="#sessions-expires" class="headerlink" title="sessions:expires"></a>sessions:expires</h1><p><code>spring:session:sessions:expires:sessionId</code>的值为空，<code>sessions</code>中保存着<code>session</code>的具体值,<code>sessions:expires</code>则是代表<code>session</code>的有效时间。<br><code>spring</code>需要在知道<code>session</code>过期后拿到过期<code>session</code>的详细信息并进行操作。然而<code>redis</code>的键空间通知<code>keyspace notifications</code>只会说明那个键过期了，无法访问过期的键。于是设置了<code>sessions:expires</code>代表<code>session</code>过期时间，这个键过期了代表<code>session</code>过期。存储信息的<code>sessions</code>键则多存活5分钟，以便过期后访问信息。<br><code>spring</code>中监听过期事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置</span><br><span class="line">org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction</span><br><span class="line"># 过期事件</span><br><span class="line">SessionExpiredEvent</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springSession</title>
      <link href="/blog/2020/03/04/springSession/"/>
      <url>/blog/2020/03/04/springSession/</url>
      
        <content type="html"><![CDATA[<p>文章字数：241,阅读全文大约需要1分钟</p><h1 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h1><p>http是无状态协议，为了能够维持状态，采用了<code>session</code>和<code>cookie</code>的机制。<code>session</code>保存在服务器端，用户访问时会带上<code>sessionId</code>以判断是那个session的信息。</p><h1 id="springSession"><a href="#springSession" class="headerlink" title="springSession"></a>springSession</h1><ol><li><code>springSession</code>使用第三方存储实现集群<code>session</code>管理(redis,mongodb,jdbc),使用<code>AOP</code>技术，几乎可以做到透明替换原生<code>session</code>。</li><li>方便拓展<code>Cookie</code>和自定义<code>session</code>相关的<code>Listener</code> <code>Filter</code></li><li>方便和<code>spring Security</code>集成</li></ol><h1 id="sprinBoot集成使用Redis的SpringSession"><a href="#sprinBoot集成使用Redis的SpringSession" class="headerlink" title="sprinBoot集成使用Redis的SpringSession"></a>sprinBoot集成使用Redis的SpringSession</h1><p>依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.session&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-session-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span> <span class="comment">//扫描到这个即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置连接</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h1><ol><li><code>springSessionRepositoryFilter</code>拦截<code>HttpSession</code>的拦截器</li><li><code>AbstractSecurityWebApplicationInitializer</code>和<code>AbstractHttpSessionApplicationInitializer</code>初始化器，拥有很高优先级</li></ol><h1 id="根据用户名查找用户所属的session"><a href="#根据用户名查找用户所属的session" class="headerlink" title="根据用户名查找用户所属的session"></a>根据用户名查找用户所属的session</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//索引name （springSecurity似乎集成了这一步，直接索引了用户名）</span></span><br><span class="line">request.getSession().setAttribute(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME,username);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据索引名和索引值查找sessionId（结果是个map，索引名固定索引值就是用户名）</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">FindByIndexNameSessionRepository&lt;? extends ExpiringSession&gt;</span><br><span class="line"> sessionRepository;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">findByUserName</span><span class="params">(String userName)</span></span>&#123;</span><br><span class="line">    Map&lt;String, ? extends ExpiringSession&gt; usersSession = sessionRepository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME,username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring事务传播</title>
      <link href="/blog/2020/03/04/spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD/"/>
      <url>/blog/2020/03/04/spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<p>文章字数：478,阅读全文大约需要1分钟</p><blockquote><p>事务传播指的是一个事务被另一个事务调用时事务的进行方式</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   methodB();</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七种级别"><a href="#七种级别" class="headerlink" title="七种级别"></a>七种级别</h1><table><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>当前方法必须在事务中运行。如果存在事务，在此事务中运行，否则启动新事务</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>当前方法不需要事务上下文，但如果有就走当前事务中运行</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>方法必须在事务中运行，不存在当前事务，抛异常</td></tr><tr><td>PROPAGATION_REQUIRED_NEW</td><td>当前方法必须运行在它自己的事务中，一个新的事物将被启动。如果存在当前事务，在改方法执行期间，当前事务会被挂起。如果使用<code>JTATransactionManager</code>的话，则需要访问<code>TransationManager</code></td></tr><tr><td>PROPAGATION_NEVER</td><td>表示当前方法不应该云心在事务上下文中。如果当前正有一个事物在运行，则抛异常</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，方法嵌套在事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与<code>PROPAGATION_REQUIRED</code>一样</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring单例和多例区别</title>
      <link href="/blog/2020/03/04/spring%E5%8D%95%E4%BE%8B%E5%92%8C%E5%A4%9A%E4%BE%8B%E5%8C%BA%E5%88%AB/"/>
      <url>/blog/2020/03/04/spring%E5%8D%95%E4%BE%8B%E5%92%8C%E5%A4%9A%E4%BE%8B%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：90,阅读全文大约需要1分钟</p><blockquote><p><code>spring</code>默认单例创建<code>bean</code>，也可以设置多例创建</p></blockquote><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ol><li><p>单例只创建一个，多例使用几次创建几次</p></li><li><p>创建时间，单例在IOC运行时创建，多例使用创建。单例设置懒加载也可以在使用时创建。</p></li></ol><h1 id="多例和懒加载"><a href="#多例和懒加载" class="headerlink" title="多例和懒加载"></a>多例和懒加载</h1><p>多例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Persion(<span class="string">"张三"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Persion(<span class="string">"张三"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPoolExecutor自定义线程池</title>
      <link href="/blog/2020/03/04/ThreadPoolExecutor%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/blog/2020/03/04/ThreadPoolExecutor%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：308,阅读全文大约需要1分钟</p><blockquote><p>自定义线程池，设置数据</p></blockquote><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)</span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, RejectedExecutionHandler handler)</span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure><p>构造方法参数</p><table><thead><tr><th>名称</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>corePoolSize</td><td>int</td><td>核心线程池大小</td></tr><tr><td>maximumPoolSize</td><td>int</td><td>最大线程池大小</td></tr><tr><td>keepAliveTime</td><td>long</td><td>最大线程池空闲时间</td></tr><tr><td>unit</td><td>TimeUnit</td><td>时间单位</td></tr><tr><td>workQueue</td><td>BlockingQueue<Runnable></td><td>线程等待队列，如ArrayBlockingQueue，有界队列，构造函数需要传入队列最大值。</td></tr><tr><td>threadFactory</td><td>ThreadFactory</td><td>线程创建工厂</td></tr><tr><td>handler</td><td>RejectedExecutionHandler</td><td>拒绝策略</td></tr></tbody></table><h1 id="预定义线程池"><a href="#预定义线程池" class="headerlink" title="预定义线程池"></a>预定义线程池</h1><ol><li><code>FixedThreadPool</code>: </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>核心线程数和最大线程数相同，所以是固定大小。</li><li><code>keepAliveTime</code>对核心线程无效</li><li><code>LinkedBlockingQueue</code>是无界阻塞队列，最大值是<code>Integer.MAX_VALUE</code>。如果提交速度大于处理速度，会造成队列阻塞，又因为队列无界，所以可能会内存溢出。</li></ul><ol start="2"><li><code>CachedThreadPool</code>:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>核心线程<code>0</code>，最大线程<code>Integer.MAX_VALUE</code>。无核心线程，最大线程几乎无限。</li><li><code>keepAliveTime = 60</code>，即<code>60s</code>后空闲线程自动结束</li><li><code>workQueue</code>是<code>SynchronousQueue</code>，无缓冲队列。入队和出队必须同时进行。</li></ul><h1 id="自定义线程池案例"><a href="#自定义线程池案例" class="headerlink" title="自定义线程池案例"></a>自定义线程池案例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> corePoolSize = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> maximumPoolSize = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">long</span> keepAliveTime = <span class="number">10</span>;</span><br><span class="line">        TimeUnit unit = TimeUnit.SECONDS;</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        ThreadFactory threadFactory = <span class="keyword">new</span> NameTreadFactory();</span><br><span class="line">        RejectedExecutionHandler handler = <span class="keyword">new</span> MyIgnorePolicy();</span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit,</span><br><span class="line">                workQueue, threadFactory, handler);</span><br><span class="line">        executor.prestartAllCoreThreads(); <span class="comment">// 预启动所有核心线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            MyTask task = <span class="keyword">new</span> MyTask(String.valueOf(i));</span><br><span class="line">            executor.execute(task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.in.read(); <span class="comment">//阻塞主线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mThreadNum = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(r, <span class="string">"my-thread-"</span> + mThreadNum.getAndIncrement());</span><br><span class="line">            System.out.println(t.getName() + <span class="string">" has been created"</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIgnorePolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            doLog(r, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLog</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 可做日志记录等</span></span><br><span class="line">            System.err.println( r.toString() + <span class="string">" rejected"</span>);</span><br><span class="line"><span class="comment">//          System.out.println("completedTaskCount: " + e.getCompletedTaskCount());</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.toString() + <span class="string">" is running!"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>); <span class="comment">//让任务执行慢点</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MyTask [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring根据配置文件获取bean</title>
      <link href="/blog/2020/03/04/spring%E6%A0%B9%E6%8D%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96bean/"/>
      <url>/blog/2020/03/04/spring%E6%A0%B9%E6%8D%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96bean/</url>
      
        <content type="html"><![CDATA[<p>文章字数：49,阅读全文大约需要1分钟</p><blockquote><p><code>@Configuration</code>注解的类就是配置文件，<code>@Bean</code>注解的方法就会注入名为方法名的实例</p></blockquote><h1 id="获取方法之一"><a href="#获取方法之一" class="headerlink" title="获取方法之一"></a>获取方法之一</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取配置文件</span></span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 获取 bean文件</span></span><br><span class="line">        Person bean = context.getBean(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(bean);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring注解Value设置默认值</title>
      <link href="/blog/2020/03/04/spring%E6%B3%A8%E8%A7%A3Value%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC/"/>
      <url>/blog/2020/03/04/spring%E6%B3%A8%E8%A7%A3Value%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：27,阅读全文大约需要1分钟</p><ul><li>字符串<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:my default value&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String stringWithDefaultValue;</span><br><span class="line"><span class="comment">//空值</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String stringWithBlankDefaultValue;</span><br></pre></td></tr></table></figure></li><li>基本数据类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:true&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> booleanWithDefaultValue;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:42&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> intWithDefaultValue;</span><br></pre></td></tr></table></figure></li><li>数组默认值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:one,two,three&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String[] stringArrayWithDefaults;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:1,2,3&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] intArrayWithDefaults;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c10k问题</title>
      <link href="/blog/2020/03/04/c10k%E9%97%AE%E9%A2%98/"/>
      <url>/blog/2020/03/04/c10k%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>文章字数：207,阅读全文大约需要1分钟</p><h1 id="c10k本质"><a href="#c10k本质" class="headerlink" title="c10k本质"></a>c10k本质</h1><p><code>c10k</code>就是大并发下所产生的问题。传统的同步阻塞io导致大并发量下效率低下，甚至是系统崩溃。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>主要解决方式是io多路复用</p><ol><li><code>select</code>方式：使用<code>fd_set</code>结构体告诉内核同时监控那些文件句柄，逐个排查文件句柄是否就绪或超时。缺点（句柄数量有限，逐个检查效率低，每次都要初始化fd_set）</li><li><code>poll</code>该方式采用链表存储句柄，解决句柄上线问题。采用关注事件和发生的事件解决重复初始化问题。但是逐个检查的问题没解决</li><li><code>epoll</code>该方式基于内核(linux)发出就绪之后的通知，效率很高但是一来操作系统。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>spring缓存</title>
      <link href="/blog/2020/03/04/spring%E7%BC%93%E5%AD%98/"/>
      <url>/blog/2020/03/04/spring%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>文章字数：885,阅读全文大约需要3分钟</p><blockquote><p>spring提供了注解形式的缓存，可以在方法查询了一次之后保存结果。但是内部调用不会触发缓存(this.xx())。</p></blockquote><h1 id="基础注解"><a href="#基础注解" class="headerlink" title="基础注解"></a>基础注解</h1><ol><li><code>@Cacheable</code>被标记方法执行后返回结果会被缓存。</li><li><code>@CacheEvict</code>方法执行前或后执行移除springCache中某些元素。</li></ol><h1 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h1><p>标记方法支持缓存，执行一次后返回结果会被保存。拥有三个参数</p><ol><li><p><code>value</code>指定缓存在哪个Cache上，指定多个Cache时是一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(<span class="string">"cache1"</span>)<span class="comment">//Cache是发生在cache1上的</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">      returnnull;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//多个</span></span><br><span class="line"><span class="meta">@Cacheable</span>(&#123;<span class="string">"cache1"</span>, <span class="string">"cache2"</span>&#125;)<span class="comment">//Cache是发生在cache1和cache2上的</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">      returnnull;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>key</code>缓存的键，需要使用EL表达式。如果不指定，则缺省按照方法的所有参数进行组合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">key=<span class="string">"#id"</span><span class="comment">//#参数名 使用参数值作为key</span></span><br><span class="line">key=<span class="string">"#p0"</span><span class="comment">//#p参数的index 使用第一个参数值作为key</span></span><br><span class="line"><span class="comment">//使用spring提供的包含信息的root方法。root.可省略</span></span><br><span class="line">key=<span class="string">"root.methodName"</span><span class="comment">//当前方法名</span></span><br><span class="line">key=<span class="string">"root.method.name"</span><span class="comment">//当前方法</span></span><br><span class="line">key=<span class="string">"root.targetClass"</span><span class="comment">//当前被调用的对象</span></span><br><span class="line">key=<span class="string">"root.targetClass"</span><span class="comment">//对象Class</span></span><br><span class="line">key=<span class="string">"root.args[0]"</span><span class="comment">//当前方法组成的数值</span></span><br><span class="line">key=<span class="string">"root.caches[0].name"</span><span class="comment">//当前被调用的方法使用的Cache</span></span><br></pre></td></tr></table></figure><p>拼接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(key = <span class="string">"'com:test:'+#id"</span>)</span><br><span class="line"><span class="comment">//使用全局变量防止多次对key赋值？</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_NAME = <span class="string">"'com:test:'"</span>;</span><br><span class="line"><span class="meta">@Cacheable</span>(key = KEY_NAME +<span class="string">"+#id"</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>condition</code>指定发生条件<br>也是EL表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">condition=<span class="string">"#user.id%2==0"</span></span><br><span class="line">condition = <span class="string">"#key != null"</span></span><br></pre></td></tr></table></figure><h1 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h1><p>和<code>@Cacheable</code>相似，只不过<code>@CachePut</code>不会检查是否缓存中存在结果，而是直接执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@CachePut也可以标注在类上和方法上。使用@CachePut时我们可以指定的属性跟@Cacheable是一样的。</span></span><br><span class="line"> <span class="meta">@CachePut</span>(<span class="string">"users"</span>)<span class="comment">//每次都会执行方法，并将结果存入指定的缓存中</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"find user by user "</span> + user);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h1><p>用来清除缓存，加在需要清除操作的 方法/类 上。</p></li></ol><p>属性列表：<code>value</code>、<code>key</code>、<code>condition</code>、<code>allEntries</code>和<code>beforeInvocation</code><br>和<code>@Cacheable</code>相同意义的属性</p><ol><li><code>value</code>表示清除操作是发生在哪些Cache上的（对应Cache的名称）</li><li><code>key</code>key表示需要清除的是哪个key，如未指定则会使用默认策略生成的key</li><li><code>condition</code>condition表示清除操作发生的条件</li></ol><p><strong>其它属性</strong>：</p><ol><li><code>allEntries</code> allEntries是boolean类型，表示是否需要清除缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除users</span></span><br><span class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"users"</span>, allEntries=<span class="keyword">true</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"delete user by id: "</span> + id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><code>beforeInvocation</code>设置<br>清除默认是方法执行后，如果方法因异常没有成功返回则不会执行清除。设置这个能够在方法执行前清除。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"users"</span>, beforeInvocation=<span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"delete user by id: "</span> + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>@Ehcache</code>也有设置清除策略</li></ol><h1 id="Caching"><a href="#Caching" class="headerlink" title="@Caching"></a>@Caching</h1><p>@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Caching</span>(cacheable = <span class="meta">@Cacheable</span>(<span class="string">"users"</span>), evict = &#123; <span class="meta">@CacheEvict</span>(<span class="string">"cache2"</span>),</span><br><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"cache3"</span>, allEntries = <span class="keyword">true</span>) &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   returnnull;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义注解中使用"><a href="#自定义注解中使用" class="headerlink" title="自定义注解中使用"></a>自定义注解中使用</h1><p>Spring允许我们在配置可缓存的方法时使用自定义的注解，前提是自定义的注解上必须使用对应的注解进行标注。如我们有如下这么一个使用@Cacheable进行标注的自定义注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyCacheable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css-图片自动居中</title>
      <link href="/blog/2020/03/04/css-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E5%B1%85%E4%B8%AD/"/>
      <url>/blog/2020/03/04/css-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>文章字数：30,阅读全文大约需要1分钟</p><blockquote><p>一张的时候居中，多张自动排列开</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 100%;height: 200px;overflow: auto;text-align:center&quot;&gt;</span><br><span class="line">        &lt;div style&#x3D;&quot;display: inline-block&quot;&gt;</span><br><span class="line">            img1</span><br><span class="line">            img2</span><br><span class="line">            ...</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>上下垂直居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display:flex;justify-content: center;align-items: center</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>css-段落选中后字体样式修改</title>
      <link href="/blog/2020/03/04/css-%E6%AE%B5%E8%90%BD%E9%80%89%E4%B8%AD%E5%90%8E%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/"/>
      <url>/blog/2020/03/04/css-%E6%AE%B5%E8%90%BD%E9%80%89%E4%B8%AD%E5%90%8E%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>文章字数：13,阅读全文大约需要1分钟</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ff645d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::-moz-selection</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ff645d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::-webkit-selection</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ff645d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>tp5-session-cookie</title>
      <link href="/blog/2020/03/04/tp5-session-cookie/"/>
      <url>/blog/2020/03/04/tp5-session-cookie/</url>
      
        <content type="html"><![CDATA[<p>文章字数：291,阅读全文大约需要1分钟</p><h1 id="session-cookie"><a href="#session-cookie" class="headerlink" title="session cookie"></a>session cookie</h1><p>赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 赋值（当前作用域）</span><br><span class="line">Session::set(&#39;name&#39;,&#39;thinkphp&#39;);</span><br><span class="line">&#x2F;&#x2F; 赋值think作用域</span><br><span class="line">Session::set(&#39;name&#39;,&#39;thinkphp&#39;,&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 判断（当前作用域）是否赋值</span><br><span class="line">Session::has(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 判断think作用域下面是否赋值</span><br><span class="line">Session::has(&#39;name&#39;,&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 取值（当前作用域）</span><br><span class="line">Session::get(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 取值think作用域</span><br><span class="line">Session::get(&#39;name&#39;,&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除（当前作用域）</span><br><span class="line">Session::delete(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 删除think作用域下面的值</span><br><span class="line">Session::delete(&#39;name&#39;,&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>取值并删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 取值并删除</span><br><span class="line">Session::pull(&#39;name&#39;);</span><br></pre></td></tr></table></figure><p>清空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 清除session（当前作用域）</span><br><span class="line">Session::clear();</span><br><span class="line">&#x2F;&#x2F; 清除think作用域</span><br><span class="line">Session::clear(&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 指定当前作用域</span><br><span class="line">Session::prefix(&#39;think&#39;);</span><br></pre></td></tr></table></figure><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置Cookie 有效期为 3600秒</span><br><span class="line">Cookie::set(&#39;name&#39;,&#39;value&#39;,3600);</span><br><span class="line">&#x2F;&#x2F; 设置cookie 前缀为think_</span><br><span class="line">Cookie::set(&#39;name&#39;,&#39;value&#39;,[&#39;prefix&#39;&#x3D;&gt;&#39;think_&#39;,&#39;expire&#39;&#x3D;&gt;3600]);</span><br><span class="line">&#x2F;&#x2F; 支持数组</span><br><span class="line">Cookie::set(&#39;name&#39;,[1,2,3]);</span><br><span class="line">判断</span><br><span class="line">Cookie</span><br><span class="line"></span><br><span class="line">Cookie::has(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 判断指定前缀的cookie值是否存在</span><br><span class="line">Cookie::has(&#39;name&#39;,&#39;think_&#39;);</span><br><span class="line">获取</span><br><span class="line">Cookie::get(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 获取指定前缀的cookie值</span><br><span class="line">Cookie::get(&#39;name&#39;,&#39;think_&#39;);</span><br><span class="line">删除</span><br><span class="line">删除cookie</span><br><span class="line">Cookie::delete(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 删除指定前缀的cookie</span><br><span class="line">Cookie::delete(&#39;name&#39;,&#39;think_&#39;);</span><br><span class="line">清空</span><br><span class="line">&#x2F;&#x2F; 清空指定前缀的cookie</span><br><span class="line">Cookie::clear(&#39;think_&#39;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其它语言 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Jpa整合ElasticSearch</title>
      <link href="/blog/2020/03/04/Jpa%E6%95%B4%E5%90%88ElasticSearch/"/>
      <url>/blog/2020/03/04/Jpa%E6%95%B4%E5%90%88ElasticSearch/</url>
      
        <content type="html"><![CDATA[<p>文章字数：471,阅读全文大约需要1分钟</p><blockquote><p>SpringBoot中可以使用jpa整合ElasticSearch</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><code>jdk 1.8</code></li><li><code>ElasticSearch 2.4</code>需要和springBoot版本匹配</li><li><code>com.sun.jna</code></li></ul><h1 id="继承依赖"><a href="#继承依赖" class="headerlink" title="继承依赖"></a>继承依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-data-elasticsearch</span><br><span class="line">com.sun.jna</span><br><span class="line">org.springframework.boot:spring-boot-starter-web</span><br></pre></td></tr></table></figure><h1 id="配置实体"><a href="#配置实体" class="headerlink" title="配置实体"></a>配置实体</h1><blockquote><p>data-elasticsearch的依赖自带了ES的jar,如果不配置ES实例SpringBoot会自动生成一个。但是性能不如自己搭建的。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="string">localhost:9300</span></span><br></pre></td></tr></table></figure><h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  <span class="comment">//lombok</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"shop"</span>, type = <span class="string">"user"</span>, refreshInterval = <span class="string">"0s"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String realname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这三个注解是为了前台序列化java8 LocalDateTime使用的，需要引入jsr310的包才可以使用</span></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalDateTimeSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">JsonDeserialize</span>(<span class="title">using</span> </span>= LocalDateTimeDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">JsonFormat</span>(<span class="title">pattern</span> </span>= <span class="string">"yyyy-MM-dd HH:mm"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime birth;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Document</code>加在类上</li></ul><table><thead><tr><th align="center">类型</th><th align="center">属性名</th><th align="center">默认值</th><th>说明</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">indexName</td><td align="center">无</td><td>索引库的名称，建议以项目的名称命名</td></tr><tr><td align="center">String</td><td align="center">type</td><td align="center">“”</td><td>类型，建议以实体的名称命名</td></tr><tr><td align="center">short</td><td align="center">shards</td><td align="center">5</td><td>默认分区数</td></tr><tr><td align="center">short</td><td align="center">replica</td><td align="center">1</td><td>每个分区默认的备份数</td></tr><tr><td align="center">String</td><td align="center">refreshInterval</td><td align="center">“1s”</td><td>刷新间隔</td></tr><tr><td align="center">String</td><td align="center">indexStoreType</td><td align="center">“fs”</td><td>索引文件存储类型</td></tr></tbody></table><ul><li><code>@Field</code>属性上加的，相当于<code>@Column</code>，可以不写，默认全部添加到ES中。主键上是<code>@Id</code>。</li></ul><table><thead><tr><th align="center">类型</th><th align="center">属性名</th><th align="center">默认值</th><th>说明</th></tr></thead><tbody><tr><td align="center">FieldType</td><td align="center">type</td><td align="center">FieldType.Auto</td><td>自动检测属性的类型</td></tr><tr><td align="center">FieldIndex</td><td align="center">index</td><td align="center">FieldIndex.analyzed</td><td>默认情况下分词</td></tr><tr><td align="center">boolean</td><td align="center">store</td><td align="center">false</td><td>默认情况下不存储原文</td></tr><tr><td align="center">String</td><td align="center">searchAnalyzer</td><td align="center">“”</td><td>指定字段搜索时使用的分词器</td></tr><tr><td align="center">String</td><td align="center">indexAnalyzer</td><td align="center">“”</td><td>指定字段建立索引时指定的分词器</td></tr><tr><td align="center">String[]</td><td align="center">ignoreFields</td><td align="center">{}</td><td>如果某个字段需要被忽略</td></tr></tbody></table><h1 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">UserInfo</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MQTT服务质量qos</title>
      <link href="/blog/2020/03/04/MQTT%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8Fqos/"/>
      <url>/blog/2020/03/04/MQTT%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8Fqos/</url>
      
        <content type="html"><![CDATA[<p>文章字数：552,阅读全文大约需要2分钟</p><blockquote><p><code>QOS</code>即<code>Quality of Service</code>服务质量，有发布者的<code>QOS</code>和订阅者的<code>QOS</code></p></blockquote><h1 id="等级和作用"><a href="#等级和作用" class="headerlink" title="等级和作用"></a>等级和作用</h1><ol><li><code>level0</code>: 最多传输一次</li><li><code>level1</code>: 至少传输一次</li><li><code>level2</code>: 只有一次的传输</li></ol><h1 id="交互过程"><a href="#交互过程" class="headerlink" title="交互过程"></a>交互过程</h1><h2 id="qos0"><a href="#qos0" class="headerlink" title="qos0"></a>qos0</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生产者---》中间件---》消费者</span><br></pre></td></tr></table></figure><p>只会发送一次，不管有没有收到。适合不是很重要的数据，比如传感器温度。反正很快会有下一次的数据。</p><h2 id="qos1"><a href="#qos1" class="headerlink" title="qos1"></a>qos1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生产者《------》中间件《-------》消费者</span><br><span class="line">  发送      确认    发送      确认</span><br></pre></td></tr></table></figure><p>接受者需要发送确认信息，确认自己收到了。发送者如果没有收到确认信息就会再次发送。这个保证了发送的信息一定会到达，但是如果确认的信息没有被收到，可能导致重复发送。</p><h2 id="qos2"><a href="#qos2" class="headerlink" title="qos2"></a>qos2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">发送者发送信息+信息编号--》接受者接收，保存编号--》确认收到+信息编号</span><br><span class="line">--》发送者收到确认消息后发送请求删除编号--》接受者删除编号，并发请求删除编号</span><br><span class="line">--》接受者删除编号</span><br></pre></td></tr></table></figure><p>增加了信息编号的传递，可以有效防止重复信息，但是多了删除编号的步骤。<br>并且假如接受者的删除请求没有到达（即没收到删除请求就有新的message）还会多次发送删除请求。<br>信息发送的次数过多。</p>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>web-xml</title>
      <link href="/blog/2020/03/04/web-xml/"/>
      <url>/blog/2020/03/04/web-xml/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1129,阅读全文大约需要4分钟</p><blockquote><p>网上找到一个配置讲解</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Sample Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>This is a sample application<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–过滤器名，可以随便取，当web应用中有多个过滤器时不允许重名.–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SampleFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–具体的过滤器的类的完整的包名+类名。注意：不能写错了。否则容器不能正确的实例化过滤器–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>mypack.SampleFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 参数名 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>initParam1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 参数值 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> <span class="attr">Define</span> <span class="attr">the</span> <span class="attr">SampleFilter</span> <span class="attr">Mapping</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line">&lt;!–过滤器名，注意要和上面的&lt;filter-name&gt;里的名字一样。–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SampleFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定过滤器负责过滤的<span class="attr">URL</span>。这里指定了*<span class="attr">.jsp</span>表示在访问任何一个<span class="attr">jsp</span>页面时都会先使用<span class="attr">mypack.SampleFilter</span>过滤器进行过滤。如果写成<span class="attr">login.jsp.</span>则只有在访问<span class="attr">login.jsp</span>时才会调用该过滤器进行过滤。–&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> <span class="attr">Servlet</span>名字，可以随便取，有多个<span class="attr">Servlet</span>时不允许重名–&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SampleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–指定实现这个Servlet的类。完整的包名+类名–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>mypack.SampleServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line">&lt;!–定义Servlet的初始化参数(包括参数名和参数值)一个&lt;servlet&gt;元素里可以有多个&lt;init-param&gt;元素。在Servlet类中通过ServletConfig类的来访问这些参数。 </span><br><span class="line">–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 参数名 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>initParam1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 参数值 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–指定当前Web应用启动时装载Servlet的次序。当这个数</span>&gt;</span>=0时，容器会按数值从小到大依次加载。如果数值<span class="tag">&lt;<span class="name">0或没有指定，容器将载Web客户首次访问这个Servlet时加载。–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> <span class="attr">Define</span> <span class="attr">the</span> <span class="attr">SampleServlet</span> <span class="attr">Mapping</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">&lt;!–必须和&lt;servlet&gt;里的&lt;servlet-name&gt;内容一样–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SampleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–指定访问这个Servlet的URL。这里给出的是对于整个Web应用的相对URL路径。–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sample<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span> </span><br><span class="line">&lt;!–设 定HttpSession的生命周期。这里以分钟计算。下面的设定指明Session在最长不活动时间为10分钟。过了这个时间，Servlet容器将它 作为无效处理。注意这里和程序里指定的计数单位不同，程序里是以秒为单位。&lt;session-config&gt;只有&lt;session- timeout&gt;这个元素–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!—</span> 配置会话侦听器，<span class="attr">class</span>表示一个<span class="attr">HttpSessionListener</span>或 <span class="attr">HttpSessionActivationListener</span> 或 <span class="attr">HttpSessionAttributeListener</span>或 <span class="attr">HttpSessionBindingListener</span>的实现类。该节点允许多个 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.cn.SessionListenerImpl<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </span><br><span class="line">&lt;!– 在 用户访问Web应用时,如果仅给出Web应用的根访问URL，没有指定具体的文件名，容器会调用&lt;weblcome-file- list&gt; 元素里指定的文件清单。&lt;welcome-file-list&gt;里允许有多个&lt;welcome-file&gt;元 素，每个元素代表一个文件。容器会先找第一文文件件是否存在，如果存在这把这个文件返回个客户，不再进行其他文件的查找。如果不存在则找第二个文件，依次 类推。如果所有文件都不存在，则跑出404错误–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 设置<span class="attr">Web</span>应用引用的自定义标签库。下面的代码定义了一个/<span class="attr">mytaglib</span>标签库，它对应的<span class="attr">TLD</span>文件为/<span class="attr">WEB-INF</span>/<span class="attr">mytaglib.tld</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>/mytaglib<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/mytaglib.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 如果<span class="attr">Web</span>应用访问了由<span class="attr">Servlet</span>容器管理的某个<span class="attr">JNDI</span> <span class="attr">Resource</span>必须在这里声明对<span class="attr">JNDI</span> <span class="attr">Resource</span>的引用 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 对应用资源的说明 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>DB Connection<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定所引用资源的<span class="attr">JNDI</span>名字 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">res-ref-name</span>&gt;</span>jdbc/sampleDb<span class="tag">&lt;/<span class="name">res-ref-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定所引用资源的类名字 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">res-type</span>&gt;</span>javax.sql.DataSource<span class="tag">&lt;/<span class="name">res-type</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定管理所引用资源的<span class="attr">Manager</span>， 它有两个可选值：<span class="attr">Container</span>和<span class="attr">Application.Container</span>表示由容器来创建和管理<span class="attr">Resource</span>，<span class="attr">Application</span>表示由<span class="attr">Web</span>应用来管理和创建<span class="attr">Resource</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">res-auth</span>&gt;</span>Container<span class="tag">&lt;/<span class="name">res-auth</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 这个名字是必须的，由工具使用，别的地方不使用 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>my application<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定要受约束的资源，至少有一个。可以有多个<span class="attr">.</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">uri-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">uri-pattern</span>&gt;</span> </span><br><span class="line">&lt;!– 描 述了度可与URL模式指定的资源哪些方法是受约束的，如果没有&lt;http-method&gt;元素，表示任何角色的人都无法访问任何http的方 法  。这里放置了GET方法，表示只有GET方法是受约束的。其他任何角色的人可以访问POST和其他的方法。但不能访问GET方法。–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">http-method</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span> </span><br><span class="line">&lt;!– 如果没有&lt;auth-constraint&gt;表示所有角色都能访问GET方法，如果是&lt;auth-constraint/&gt;表示任何角色都不能访问GET方法 –&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 可选的。表示哪些角色能够在指定的资源上调用受约束的方法。这里表示只有拥有<span class="attr">Admin</span>和<span class="attr">Member</span>角色的人能够访问<span class="attr">GET</span>方法 </span></span><br><span class="line">&lt;security-role&gt;&gt;里的&lt;role-name&gt;值一样 –&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Admin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Member<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 将指定的角色映射到<span class="attr">web.xml</span>里 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">security-role</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>The role that is required to log into the my Application </span><br><span class="line"><span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">&lt;!– 以下的角色和tomcat-users.xml里的&lt;tomcat-users&gt;里的&lt;role rolename=""/&gt;里的rolename属性值对应 –&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Guest<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Admin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Member<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">security-role</span>&gt;</span> </span><br><span class="line">&lt;!– 如果要想进行认证，必须有&lt;login-config&gt;–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">login-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 认证方式。有<span class="attr">4</span>种：<span class="attr">BASIC:</span>基本。 <span class="attr">DIGEST:</span>摘要。<span class="attr">CLIENT-CERT:</span>客户证书(能提供最高强度的认证)。<span class="attr">FORM:</span>表单 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">auth-method</span>&gt;</span>FORM<span class="tag">&lt;/<span class="name">auth-method</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">realm-name</span>&gt;</span> </span><br><span class="line">Tomcat Servet Configuraton Form-Based Authentication Area </span><br><span class="line"><span class="tag">&lt;/<span class="name">realm-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form-login-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form-login-page</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">form-login-page</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form-error-page</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">form-error-page</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form-login-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">login-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-axios</title>
      <link href="/blog/2020/03/04/vue-axios/"/>
      <url>/blog/2020/03/04/vue-axios/</url>
      
        <content type="html"><![CDATA[<p>文章字数：147,阅读全文大约需要1分钟</p><blockquote><p>vue中使用axios进行一步http访问</p></blockquote><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>main.js中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import VueAxios from &#39;vue-axios&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios,axios);</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getMess()&#123;</span><br><span class="line">      this.axios.get(&#39;api&#x2F;getNewsList&#39;).then((response)&#x3D;&gt;&#123;</span><br><span class="line">        this.newsList&#x3D;response.data.data;</span><br><span class="line">      &#125;).catch((response)&#x3D;&gt;&#123;</span><br><span class="line">        console.log(response);</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">this.axios.get(&#39;&#x2F;user&#39;, &#123;&#x2F;&#x2F;url</span><br><span class="line">params: &#123;&#x2F;&#x2F;数据</span><br><span class="line">    id: 123</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">    console.log(response);&#x2F;&#x2F;成功结果</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">    console.log(error);&#x2F;&#x2F;失败信息</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>#POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">this.axios.post(&#39;&#x2F;user&#39;, &#123;</span><br><span class="line">    firstName: &#39;Fred&#39;,</span><br><span class="line">    lastName: &#39;Flintstone&#39;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="并发请求"><a href="#并发请求" class="headerlink" title="并发请求"></a>并发请求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">    return axios.get(&#39;&#x2F;user&#x2F;12345&#39;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">    return axios.get(&#39;&#x2F;user&#x2F;12345&#x2F;permissions&#39;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">this.axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">.then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    &#x2F;&#x2F;两个请求现已完成</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><blockquote><p>原本vue里this指向vue,但是axios里不是，所以会导致this内容报空。可以在method调用axios的函数开头加上<code>let that=this</code>,然后使用that代替this。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>adb常用命令</title>
      <link href="/blog/2020/03/04/adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2020/03/04/adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1115,阅读全文大约需要4分钟</p><blockquote><p><code>Android Debug Bridge</code>安卓调试桥，是一款<code>C/S</code>架构的命令行工具。</p></blockquote><h1 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h1><ol><li><code>Client</code>:运行在PC端，对<code>Android</code>应用进行安装、卸载、调试。</li><li><code>Service</code>:运行在PC端，管理客户端到设备的abd后台进程的连接</li><li><code>adb进程</code>:运行在<code>Android</code>设备<code>5037</code>端口</li></ol><h1 id="adb命令"><a href="#adb命令" class="headerlink" title="adb命令"></a>adb命令</h1><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb [-e | -d | -s &lt;设备序列号&gt;] &lt;子命令&gt;</span><br></pre></td></tr></table></figure><ol><li><p><code>adb devices</code>获取设备列表及设备状态</p></li><li><p><code>adb get-state</code>获取设备的状态，<code>device</code>正常连接、<code>offline</code>连接异常无响应、<code>unknown</code>没有连接设备</p></li><li><p><code>adb kill-server | abd start-server</code>:结束或者启动adb服务，状态异常是kill-server再start</p></li><li><p><code>adb logcat</code>:打印<code>Android</code>的系统日志</p></li><li><p><code>adb bugreport</code>:打印<code>dumpsys</code>、<code>dumpstate</code>、<code>logcat</code>的输出，用于错误分析</p></li><li><p><code>adb install</code>:安装应用，覆盖安装<code>-r</code></p></li><li><p><code>adb uninstall</code>:卸载应用，后面跟应用包名。<code>-k</code>选项保留数据和缓存目录</p></li><li><p><code>adb pull</code>:将<code>Android</code>设备上的文件或者文件夹复制到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull xxx&#x2F;a.txt d:\xxx.txt</span><br></pre></td></tr></table></figure></li><li><p><code>adb push</code>:推送本地文件到<code>Android</code>设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 最后的&#39;&#x2F;&#39;一定要有，否则报错</span><br><span class="line">adb push d:\push.txt sdcard&#x2F;test&#x2F;</span><br></pre></td></tr></table></figure></li><li><p><code>adb root , adb remount</code>:部分手机支持，获取root权限，系统文件为可读状态</p></li><li><p><code>adb reboot</code>:重启设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 重启，进入fastboot模式</span><br><span class="line">adb reboot-bootloader</span><br><span class="line"></span><br><span class="line"># 重启，进入recovery模式</span><br><span class="line">adb recovery</span><br></pre></td></tr></table></figure></li><li><p><code>adb foward</code>:将宿主机上的某个端口重定向到设备的某个端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 把主机1214端口的信息数据都转发到设备的8888端口，实现远程控制</span><br><span class="line">adb forward tcp:1214 tcp :8888</span><br></pre></td></tr></table></figure></li><li><p><code>adb connect</code>:远程链接Android设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. pc,设备处于同一网段</span><br><span class="line">2. 手机root，安装adbWireless,运行</span><br><span class="line">3.adb connect ip</span><br></pre></td></tr></table></figure></li><li><p><code>adb disconnect &lt;ip&gt;</code>断开连接<br>不断开连接别人的<code>adb</code>就登录不上去</p></li></ol><h1 id="adb-shell命令"><a href="#adb-shell命令" class="headerlink" title="adb shell命令"></a>adb shell命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 调用安卓设备上&#96;system&#x2F;bin&#96;目录下的脚本程序</span><br><span class="line">adb shell 命令</span><br></pre></td></tr></table></figure><ol><li><p><code>adb shell pm list package</code>:列出安装在设备上的应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 系统应用</span><br><span class="line">adb shell pm list package -s </span><br><span class="line"></span><br><span class="line"># 第三方应用</span><br><span class="line">adb shell pm list package -3</span><br><span class="line"></span><br><span class="line"># 应用包名及对应apk名及位置</span><br><span class="line">adb shell pm list package -f</span><br><span class="line"></span><br><span class="line"># 查看安装来源</span><br><span class="line"># 例：package:com.zhihu.android installer&#x3D;com.xiaomi.market</span><br><span class="line">adb shell pm list package -i</span><br><span class="line"></span><br><span class="line"># 查找关键字 -f  | -FILTER</span><br><span class="line">adb shell pm list package -f -3 -i 关键字</span><br></pre></td></tr></table></figure></li><li><p><code>adb shell pm path packageName</code>:列出包名对应的apl位置</p></li><li><p><code>pm list instrumentation</code>:列出含有单元测试case的应用，可加-f参数</p></li><li><p><code>pm dump package</code>:列出指定应用的<code>dump</code>信息</p></li><li><p><code>pm install</code>:安装应用</p></li><li><p><code>pm uninstall packageName</code>:卸载应用</p></li><li><p><code>pm clear</code>:清除应用数据</p></li><li><p><code>pm set-install-location</code>、<code>pm get-install-location</code>:设置/获取应用安装位置</p></li><li><p><code>am start</code>:启动一个Activity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 打开相机</span><br><span class="line">adb shell am start -n com.android.camera&#x2F;.Camera</span><br><span class="line"># 先停止再启动</span><br><span class="line">adb shell am start -S com.android.camera&#x2F;.Camera</span><br><span class="line"># 等待应用完成启动</span><br><span class="line">adb shell am start -W com.android.camera&#x2F;.Camera</span><br><span class="line"># 用默认浏览器打开网页</span><br><span class="line">adb shell am start -a android.intent.action.VIEW -d http:&#x2F;&#x2F;testerhome.com</span><br><span class="line"># 启动拨号器拨打10086</span><br><span class="line">adb shell am start -a android.intent.action.CALL -d tel:10086</span><br></pre></td></tr></table></figure></li><li><p><code>am instrument</code>:启动instrumentation </p></li><li><p><code>am monitor</code>: 监控crash与ANR</p></li><li><p><code>am force-stop</code>: 后跟包名，结束应用</p></li><li><p><code>am startservice</code>:启动一个服务</p></li><li><p><code>am broadcast</code>: 发送一个广播</p><h2 id="向设备发送按键事件"><a href="#向设备发送按键事件" class="headerlink" title="向设备发送按键事件"></a>向设备发送按键事件</h2></li><li><p><code>input text</code>:发送文本，非中文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text test123456</span><br></pre></td></tr></table></figure></li><li><p><code>input keyevent</code>:发送按键事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 按下home键</span><br><span class="line">adb shell input keyevent KEYCODE_HOME</span><br></pre></td></tr></table></figure></li><li><p><code>inout tap</code>:发送触摸事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 点击坐标为500 500的位置</span><br><span class="line">adb shell input tap 500 500</span><br></pre></td></tr></table></figure></li><li><p><code>input swipe</code>:滑动事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 从右边向左滑动</span><br><span class="line">adb shell input swipe 900 500 100 500</span><br><span class="line"># 模拟长按（小距离内较长时间滑动）</span><br><span class="line">adb shell input swipe 500 500 501 501 2000</span><br></pre></td></tr></table></figure><h2 id="screencap截图"><a href="#screencap截图" class="headerlink" title="screencap截图"></a>screencap截图</h2></li><li><p><code>screencap -p</code>: 截屏保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p &#x2F;sdcard&#x2F;screen.png</span><br></pre></td></tr></table></figure></li><li><p><code>screenrecord</code>:录制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 录制视频，ctrl + c 结束录制</span><br><span class="line">adb shell screenrecord sdcard&#x2F;record.mp4</span><br></pre></td></tr></table></figure><h2 id="获取当前界面的控件信息"><a href="#获取当前界面的控件信息" class="headerlink" title="获取当前界面的控件信息"></a>获取当前界面的控件信息</h2></li><li><p><code>adb shell uiautomator dump</code>:获取控件信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 不加 [file] 选项时，默认存放在 sdcard 下</span><br><span class="line">[xuxu:~]$ adb shell uiautomator dump   </span><br><span class="line">UI hierchary dumped to: &#x2F;storage&#x2F;emulated&#x2F;legacy&#x2F;window_dump.xml</span><br></pre></td></tr></table></figure><h2 id="输入法ime"><a href="#输入法ime" class="headerlink" title="输入法ime"></a>输入法ime</h2></li><li><p><code>adb shell ime list -s</code>:列出输入法</p></li><li><p><code>adb shell ime set com.baidu.input_mi/.ImeService</code>:选则输入法</p></li></ol><h2 id="分辨率wm"><a href="#分辨率wm" class="headerlink" title="分辨率wm"></a>分辨率wm</h2><ol start="24"><li><code>adb shell wm size</code>: 获取屏幕分辨率</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol start="25"><li><code>monkey</code>:随机发送输入事件，用于测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 保存信息到d盘 monkey.log</span><br><span class="line">adb shell monkey -p com.android.settings 5000 &gt; d:\monkey.log</span><br><span class="line"># 保存信息到手机的目录（加引号）</span><br><span class="line">adb shell &quot;monkey -p com.android.settings 5000 &gt; sdcard&#x2F;monkey.log&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ol start="26"><li><code>settings</code>:设置系统参数</li><li><code>dumpsys</code>:服务信息</li><li><code>log</code>:在logcat中打印指定信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -p：优先级，-t：tag，标签，后面加上 message</span><br><span class="line">adb shell log -p d -t xuxu &quot;test adb shell log&quot;</span><br></pre></td></tr></table></figure></li><li><code>getprop</code>:查看系统参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.sdk</span><br></pre></td></tr></table></figure></li></ol><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>还支持linux的命令</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ControllerAdvice增强器</title>
      <link href="/blog/2020/03/04/ControllerAdvice%E5%A2%9E%E5%BC%BA%E5%99%A8/"/>
      <url>/blog/2020/03/04/ControllerAdvice%E5%A2%9E%E5%BC%BA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：307,阅读全文大约需要1分钟</p><blockquote><p>注解<code>ControllerAdvice</code>提供了controller的全局处理功能</p></blockquote><ol><li><p><code>@ExceptionHandler</code>:全局异常捕获，捕获到指定异常后处理。通常用作获取异常后统一返回结构化的错误信息</p></li><li><p><code>@InitBinder</code>:指定参数名，获取的参数绑定变量前的自定义操作，不如给时间日期增加解析器，构建不同的变量名头部信息。</p></li><li><p><code>@ModelAttribute</code>:该方法返回的值可以在controller中接收。</p></li></ol><h1 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExceptionHandler &#123;</span><br><span class="line">    <span class="comment">// 指定需要捕获的异常的Class类型</span></span><br><span class="line">Class&lt;? extends Throwable&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span>(basePackages = <span class="string">"mvc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringControllerAdvice</span> </span>&#123;</span><br><span class="line"><span class="comment">//捕捉到异常后返回异常界面</span></span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">runtimeException</span>(<span class="title">RuntimeException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="InitBinder"><a href="#InitBinder" class="headerlink" title="@InitBinder"></a>@InitBinder</h1><blockquote><p>作用于通过@RequestParam，@RequestBody或者@ModelAttribute等注解绑定的参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InitBinder &#123;</span><br><span class="line">    <span class="comment">// 这里value参数用于指定需要绑定的参数名称，如果不指定，则会对所有的参数进行适配，</span></span><br><span class="line">    <span class="comment">// 只有是其指定的类型的参数才会被转换</span></span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>指定转换器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(basePackages = <span class="string">"mvc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringControllerAdvice</span> </span>&#123;</span><br><span class="line">  <span class="meta">@InitBinder</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">globalInitBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">    binder.addCustomFormatter(<span class="keyword">new</span> DateFormatter(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>不同的前缀返回给不同的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">controller:</span><br><span class="line"><span class="meta">@InitBinder</span>(“student”)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initUser</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">binder.setFieldDefaultPrefix(“student”)</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@InitBinder</span>(“teacher”)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initAdmin</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">binder.setFieldDefaultPrefix(“teacher”);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/xx"</span>)</span><br><span class="line">… save(Teacher teacher,Student student)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h1><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ModelAttribute &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 该属性与name属性的作用一致，用于指定目标参数的名称</span></span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"name"</span>)</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 与name属性一起使用，如果指定了binding为false，那么name属性指定名称的属性将不会被处理</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">binding</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span>(basePackages = <span class="string">"mvc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringControllerAdvice</span> </span>&#123;</span><br><span class="line">  <span class="meta">@ModelAttribute</span>(value = <span class="string">"message"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">globalModelAttribute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"valuexxxx"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/demo"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">detail</span><span class="params">(@ModelAttribute(<span class="string">"message"</span>)</span> String message) </span>&#123;</span><br><span class="line">    <span class="comment">//获取到了    </span></span><br><span class="line">    System.out.println(message);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内置Tomcat并使用servlet</title>
      <link href="/blog/2020/03/04/%E5%86%85%E7%BD%AETomcat%E5%B9%B6%E4%BD%BF%E7%94%A8servlet/"/>
      <url>/blog/2020/03/04/%E5%86%85%E7%BD%AETomcat%E5%B9%B6%E4%BD%BF%E7%94%A8servlet/</url>
      
        <content type="html"><![CDATA[<p>文章字数：155,阅读全文大约需要1分钟</p><ol><li><code>servlet</code>类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"hellowrld"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建内置的<code>tomcat</code>并使用<code>servlet</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建tomcat应用对象</span></span><br><span class="line">Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line"><span class="comment">// 设置端口</span></span><br><span class="line">tomcat.setPort(<span class="number">8080</span>);</span><br><span class="line"><span class="comment">// 是否自动部署</span></span><br><span class="line">tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 创建上下文</span></span><br><span class="line">StandardContext standardContext = <span class="keyword">new</span> StandardContext();</span><br><span class="line"><span class="comment">// 设置项目名</span></span><br><span class="line">standardContext.setPath(<span class="string">"/sb"</span>);</span><br><span class="line"><span class="comment">// 监听上下文</span></span><br><span class="line">standardContext.addLifecycleListener(<span class="keyword">new</span> FixContextListener());</span><br><span class="line"><span class="comment">// 向tomcat容器对象添加上下文配置     tomcat.getHost().addChild(standardContext);</span></span><br><span class="line"><span class="comment">// 创建Servlet</span></span><br><span class="line">tomcat.addServlet(<span class="string">"/sb"</span>, <span class="string">"helloword"</span>, <span class="keyword">new</span> HelloServlet());</span><br><span class="line"><span class="comment">// Servlet映射</span></span><br><span class="line">standardContext.addServletMappingDecoded(<span class="string">"/hello"</span>, <span class="string">"helloword"</span>);</span><br><span class="line"><span class="comment">//启动tomcat容器</span></span><br><span class="line">tomcat.start();</span><br><span class="line"><span class="comment">//等待</span></span><br><span class="line">tomcat.getServer().await();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>匿名内部类</title>
      <link href="/blog/2020/03/04/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/blog/2020/03/04/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：15,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Inter i = <span class="keyword">new</span> Inter()&#123;<span class="comment">//多态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">i.show();<span class="comment">//调用类方法</span></span><br><span class="line">i.show2();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot常用注解</title>
      <link href="/blog/2020/03/04/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/blog/2020/03/04/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>文章字数：835,阅读全文大约需要3分钟</p><h1 id="一、配置相关"><a href="#一、配置相关" class="headerlink" title="一、配置相关"></a>一、配置相关</h1><p>@springBootApplication<br>通常在主类上，包含:</p><ul><li><code>@Configuration</code>:表明是配置文件</li><li><code>@EnableAutoConfiguration</code>:根据依赖自动配置springBoot</li><li><code>@ComponentScan</code>:告诉Spring从哪里找bean(注解的包及下级包)</li></ul><p>@Profiles<br>隔离应用程序配置，让配置在特定环境生效。<br>标注于@Component 或者 @Configuration</p><h1 id="二、注入Bean"><a href="#二、注入Bean" class="headerlink" title="二、注入Bean"></a>二、注入Bean</h1><p>@Repository<br>标记数据库访问组件DAO。</p><p>@Service<br>标记业务层组件。</p><p>@RestController<br>标记控制层组件，包含：</p><ul><li><code>@Controller</code>:标记控制层组件</li><li><code>@ResponseBody</code>:根据前端<code>dataType</code>将返回的对象转换成相应格式<code>json</code> 、<code>xml</code></li></ul><p>@Component<br>泛指组件，不好归类时标记</p><p>@Bean<br><strong>在方法上使用</strong>，产生一个bean,交给spring</p><h1 id="三、使用Bean"><a href="#三、使用Bean" class="headerlink" title="三、使用Bean"></a>三、使用Bean</h1><p>@AutoWired<br>自动注入，可以作用于成员变量、方法、构造方法。（required=false）找不到bean也不报错</p><p>@Qualifier<br>当AutoWired有多个同类型bean时(“name”)指定</p><p>@Resource(name=”name”,type=”type”)：<br>没有括号内内容的话，默认byName。与@Autowired干类似的事。</p><h1 id="四、网络请求相关"><a href="#四、网络请求相关" class="headerlink" title="四、网络请求相关"></a>四、网络请求相关</h1><p>@RequestMapping<br>处理请求的地址映射，可在类与方法上。类上代表是方法上的父路径。<br>六个属性：</p><ul><li>params:指定request中必须有某参数</li><li>headers:request中必须有指定的header</li><li>value:指定请求实际地址</li><li>method:指定类型，GET、POST….</li><li>consumes:指定处理提交类型(Content-Type),application/json,test/html等</li></ul><p>@RequestParam<br><strong>方法的参数前</strong>,获取指定名称的参数并传入形参(键值对类型的参数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public User getUser(@RequestParam(value &#x3D; &quot;id&quot;, required &#x3D; false) Integer id)</span><br></pre></td></tr></table></figure><p><code>required=false</code>表示该值可不存在，可为空。也可以作用于<code>@Autowired</code>表示该bean不是必须的，可不存在，可为空。</p><p>@PathVariable<br>路径变量，获取RequestMapping中占位符的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;uid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestBody<br>可以接收json格式的数据(应该可省略，直接写实体类目前可以直接转换)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public DbBook findBookByName(@RequestBody DbBook book)</span><br></pre></td></tr></table></figure><p>接收字符串（不能组成一个实体类，所以不能用实体类接收的情况）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void deleteBookById(@RequestBody Map&lt;String, String&gt; map)</span><br></pre></td></tr></table></figure><p>@RequestBody接收不同的对象</p><ol><li>创建一个新的entity，将两个entity都进去。</li><li>用Map&lt;String, Object&gt;接受request body，自己反序列化到各个entity中。</li><li>实现自己的HandlerMethodArgumentResolver</li></ol><p>@ModelAttribute<br>和实体类绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String modelAttributeTest(@ModelAttribute User user)</span><br></pre></td></tr></table></figure><blockquote><p>注:multipart/form-data（二进制文件）@RequestBody不能处理这种格式的数据。<br>application/json、application/xml等格式的数据，必须使用@RequestBody来处理。</p></blockquote><h1 id="五、全局异常处理"><a href="#五、全局异常处理" class="headerlink" title="五、全局异常处理"></a>五、全局异常处理</h1><p>@ControllerAdvice<br>control增强器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller 增强器,作用于所有有效的control</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用到所有<span class="doctag">@RequestMapping</span>注解方法，在其执行之前初始化数据绑定器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> binder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把值绑定到Model中，使全局<span class="doctag">@RequestMapping</span>可以获取到该值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAttributes</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"author"</span>, <span class="string">"Magical Sam"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局异常捕捉处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span> <span class="title">errorHandler</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ExceptionHandler（Exception.class）：<br>标注在方法上，遇到这个异常就执行以下方法</p><h1 id="六、JPA"><a href="#六、JPA" class="headerlink" title="六、JPA"></a>六、JPA</h1><ul><li>建表时的附加语句，可以用来指定类型，默认值等</li></ul><ol><li>tinyint类型的默认值<code>@Column(name=&quot;state&quot;,columnDefinition=&quot;tinyint default 0&quot;)</code></li><li>varchar(128),非空<code>@Column(name = &quot;Email&quot;,columnDefinition=&quot;varchar(128) not null&quot;)</code></li></ol><p>当String类型不够用时可以指定属性在数据库中的类型为<code>text</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Column(name &#x3D; &quot;Remark&quot;,columnDefinition&#x3D;&quot;text&quot;)</span><br></pre></td></tr></table></figure><ul><li><p>uuid,见jpa主键生成策略</p></li><li><p>query执行sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> @Query(&quot;from User u where u.name&#x3D;:name&quot;)</span><br><span class="line">    User findUser(@Param(&quot;name&quot;) String name);</span><br><span class="line"></span><br><span class="line">@Query(&quot;select * from User u where u.name like :first and u.age&gt;:age&quot;)</span><br><span class="line">List&lt;User&gt; findByNameLikeAndAgeGreaterThan(@Param(&quot;first&quot;)String firstName,@Param(&quot;age&quot;)Integer age);</span><br></pre></td></tr></table></figure></li></ul><h1 id="七、值注入"><a href="#七、值注入" class="headerlink" title="七、值注入"></a>七、值注入</h1><ul><li><p><code>@Value(&quot;${key}&quot;)</code></p><blockquote><p>通过key注入配置文件中的value</p></blockquote></li><li><p><code>@Value(&quot;${myValue:#{null}}&quot;)</code>注入非必填的<br><code>@Value</code> 想要非必填 required false</p></li><li><p>set上加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;key&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyvalue</span><span class="params">(String keyvalue)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.keyvalue=keyvalue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    Message(<span class="meta">@Value</span>(<span class="string">"$&#123;app.text&#125;"</span>) String text)&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring定时任务</title>
      <link href="/blog/2020/03/04/Spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/blog/2020/03/04/Spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>文章字数：676,阅读全文大约需要2分钟</p><blockquote><p>通过类上设置注解<code>@EnableScheduling</code>可以开启spring自带的定时任务，<code>@Scheduled</code>设置定时时间。还可以通过<code>ThreadPoolTaskScheduler</code>的<code>schedule(Runable,cron)</code>动态添加</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingTest</span></span>&#123;</span><br><span class="line">     <span class="comment">//每30秒执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="comment">//没30秒输出一次</span></span><br><span class="line">           System.out.println (<span class="string">"定时输出："</span> + dateFormat ().format (<span class="keyword">new</span> Date ()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在固定时间执行(当时间匹配规则时输出)</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 */1 *  * * * "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentByCron</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println (<span class="string">"固定时间输出"</span> + dateFormat ().format (<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">private</span> SimpleDateFormat <span class="title">dateFormat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat (<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="固定时间匹配规则"><a href="#固定时间匹配规则" class="headerlink" title="固定时间匹配规则"></a>固定时间匹配规则</h1><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>0-59</td><td>, - * /</td></tr><tr><td>分</td><td>0-59</td><td>, - * /</td></tr><tr><td>小时</td><td>0-23</td><td>, - * /</td></tr><tr><td>日期</td><td>1-31</td><td>, - * ? / L W C</td></tr><tr><td>月份</td><td>1-12 或者 JAN-DEC</td><td>, - * /</td></tr><tr><td>星期</td><td>1-7 或者 SUN-SAT</td><td>, - * ? / L C #</td></tr><tr><td>年</td><td>空, 1970-2099</td><td>, - * /</td></tr></tbody></table><ul><li>每个元素都可以是一个值如<code>6</code>，一个区间<code>9-12</code> 一个间隔时间<code>8-18/4</code> <code>/4</code>代表间隔四个小时，一个列表<code>1,3,5</code></li><li>日期和星期互斥，即两个元素重合，必须其中一个设置<code>?</code>忽略</li><li><code>*</code>代表所有可能的值</li><li><code>/</code>指定数值的增量，如<code>0/10</code>(分钟单位中)代表0分钟开始，10分钟执行一次</li><li><code>?</code>仅在日期和星期中，代表不指定值</li><li><code>L</code>用于日期和星期中，代表倒数第几个</li><li><code>W</code>仅在日其中，代表平日（工作日）。<code>15W</code>代表离15号最近的一个工作日。</li><li><code>C</code>日期，<code>5C</code>五个单位后的第一天</li><li><code>#</code>每个月第几个星期几，例如在<code>4#2</code>表示某月的第二个星期三。 </li></ul><h1 id="转换异步线程"><a href="#转换异步线程" class="headerlink" title="转换异步线程"></a>转换异步线程</h1><blockquote><p>单线程执行时间超过定时间隔可能会出现任务丢失的情况，可以使用异步线程避免这个问题。</p></blockquote><ul><li>配置<code>Spring</code>的<code>@EnableAsync</code></li><li>执行方法上配置任务线程池<code>@Async</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每30秒执行一次</span></span><br><span class="line">   <span class="meta">@Async</span>(<span class="string">"taskExecutor"</span>)</span><br><span class="line">   <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span> * <span class="number">3</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xxx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="分布式情况下避免重复执行"><a href="#分布式情况下避免重复执行" class="headerlink" title="分布式情况下避免重复执行"></a>分布式情况下避免重复执行</h1><ol><li><code>lock = redisTemplate.opsForValue().setIfAbsent(KEY, LOCK);</code>采用<code>Redis</code>判断是否存在<code>key</code>,不存在则设置<code>key</code>,执行完成删除<code>key</code>的方式加锁(跨时区部署还是会重复执行)</li><li><code>shedlock</code>加锁<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.javacrumbs.shedlock&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shedlock-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.16.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.javacrumbs.shedlock&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shedlock-provider-jdbc-template&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.16.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>配置（jdbc）,还有redis,mongo,zookeeper等锁的实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShedlockConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LockProvider <span class="title">lockProvider</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplateLockProvider(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledLockConfiguration <span class="title">scheduledLockConfiguration</span><span class="params">(LockProvider lockProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ScheduledLockConfigurationBuilder</span><br><span class="line">                .withLockProvider(lockProvider)</span><br><span class="line">                .withPoolSize(<span class="number">10</span>)</span><br><span class="line">                .withDefaultLockAtMostFor(Duration.ofMinutes(<span class="number">10</span>))<span class="comment">//lock expire最大时间10分钟</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>shedlock表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> shedlock(</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">    lock_until <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>) <span class="literal">NULL</span>,</span><br><span class="line">    locked_at <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>) <span class="literal">NULL</span>,</span><br><span class="line">    locked_by  <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">name</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>加锁<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(fixedDelay = <span class="number">10</span>*<span class="number">1000</span> <span class="comment">/**ms**/</span>,initialDelay = <span class="number">10</span>*<span class="number">1000</span>)</span><br><span class="line">   <span class="meta">@SchedulerLock</span>(name = <span class="string">"demoLockTask"</span>, lockAtMostFor = <span class="number">5</span>*<span class="number">1000</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">       LOGGER.error(<span class="string">"checkTask executed"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="动态添加关闭定时任务"><a href="#动态添加关闭定时任务" class="headerlink" title="动态添加关闭定时任务"></a>动态添加关闭定时任务</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入定时调度线程池</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ThreadPoolTaskScheduler threadPoolTaskScheduler; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收线程调度返回的结果获取类</span></span><br><span class="line"><span class="keyword">private</span> ScheduledFuture&lt;?&gt; future;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 如果已经有任务了就取消原有任务</span></span><br><span class="line">    <span class="keyword">if</span> (future != <span class="keyword">null</span>) &#123;</span><br><span class="line">           future.cancel(<span class="keyword">true</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">// 每月第一天</span></span><br><span class="line">    String cron = <span class="string">"0 0 0 1 * ?"</span>;</span><br><span class="line">    future = threadPoolTaskScheduler.schedule(<span class="keyword">new</span> MyRunnable(), <span class="keyword">new</span> CronTrigger(cron));</span><br><span class="line">    <span class="comment">// Runnable也可以写成lambda</span></span><br><span class="line">    future = threadPoolTaskScheduler.schedule(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//do..</span></span><br><span class="line">        &#125;, <span class="keyword">new</span> CronTrigger(cron));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>基于1-8的Base64和文件的转换及1-7的Files类</title>
      <link href="/blog/2020/03/04/%E5%9F%BA%E4%BA%8E1-8%E7%9A%84Base64%E5%92%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%8F%8A1-7%E7%9A%84Files%E7%B1%BB/"/>
      <url>/blog/2020/03/04/%E5%9F%BA%E4%BA%8E1-8%E7%9A%84Base64%E5%92%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%8F%8A1-7%E7%9A%84Files%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：505,阅读全文大约需要2分钟</p><h1 id="文件转Base64"><a href="#文件转Base64" class="headerlink" title="文件转Base64"></a>文件转Base64</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">encryptToBase64</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (filePath == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">byte</span>[] b = Files.readAllBytes(Paths.get(filePath));</span><br><span class="line"><span class="keyword">return</span> Base64.getEncoder().encodeToString(b);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Files、Paths类是JDK7里加入的，读取文件不再需要调用IO包里的FileInputStream，简单便捷。字符串参数filePath是文件的路径。</p></blockquote><blockquote><p>首先是将文件读成二进制码，然后通过Base64.getEncoder().encodeToString()方法将二进制码转换为Base64值。</p></blockquote><h1 id="Base64转文件"><a href="#Base64转文件" class="headerlink" title="Base64转文件"></a>Base64转文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">decryptByBase64</span><span class="params">(String base64, String filePath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (base64 == <span class="keyword">null</span> &amp;&amp; filePath == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"生成文件失败，请给出相应的数据。"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Files.write(Paths.get(filePath), Base64.getDecoder().decode(base64),StandardOpenOption.CREATE);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"指定路径下生成文件成功！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Files.write()方法轻松将文件写入指定位置</p></blockquote><h1 id="Path类"><a href="#Path类" class="headerlink" title="Path类"></a>Path类</h1><blockquote><p>1.7之后引入了<code>java.nio.file</code>包取代原来基于<code>java.io.File</code>的文件IO操作<br>位置：</p></blockquote><ul><li><code>java.nio.file.Files</code></li><li><code>java.nio.file.Path</code></li></ul><ol><li><p>获取path</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Path path;</span><br><span class="line"><span class="comment">//1.绝对路径</span></span><br><span class="line">path = Paths.get(<span class="string">"c:\\test.txt"</span>);</span><br><span class="line"><span class="comment">//2.相对路径</span></span><br><span class="line">path = Paths.get(<span class="string">"/demo/test.txt"</span>);</span><br><span class="line"><span class="comment">//3.通过FileSystems</span></span><br><span class="line">path = FileSystems.getDefault().getPath(<span class="string">"c:\\test.txt"</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>File</code>和<code>Path</code>转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> file(<span class="string">"c:\\xxx.txt"</span>);</span><br><span class="line"><span class="comment">//文件转Path</span></span><br><span class="line">Path path = file.toPath();</span><br><span class="line"><span class="comment">//Path转File</span></span><br><span class="line">path.toFile();</span><br><span class="line"><span class="comment">//File转uri</span></span><br><span class="line">file.toURI();</span><br></pre></td></tr></table></figure></li><li><p><code>Path</code>信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"D:\\demo\text.txt"</span>);</span><br><span class="line">System.out.println(<span class="string">"文件名："</span> + path.getFileName());</span><br><span class="line">System.out.println(<span class="string">"名称元素的数量："</span> + path.getNameCount());</span><br><span class="line">System.out.println(<span class="string">"父路径："</span> + path.getParent());</span><br><span class="line">System.out.println(<span class="string">"根路径："</span> + path.getRoot());</span><br><span class="line">System.out.println(<span class="string">"是否是绝对路径："</span> + path.isAbsolute());</span><br><span class="line"><span class="comment">//startsWith()方法的参数既可以是字符串也可以是Path对象</span></span><br><span class="line">System.out.println(<span class="string">"是否是以为给定的路径D:开始："</span> + path.startsWith(<span class="string">"D:\\"</span>) );</span><br><span class="line">System.out.println(<span class="string">"该路径的字符串形式："</span> + path.toString());</span><br></pre></td></tr></table></figure></li></ol><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><ol><li><p>文件是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"D:\\demo.txt"</span>);</span><br><span class="line"><span class="keyword">boolean</span> pathExists = Files.exists(path,<span class="keyword">new</span> LinkOption[]&#123;</span><br><span class="line">    LinkOption.NOFOLLOW_LINKS</span><br><span class="line">&#125;);<span class="comment">//数组内的NOFOLLOW_LINKS代表不包含符合链接文件</span></span><br></pre></td></tr></table></figure></li><li><p>创建文件/文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Path target2 = Paths.get(<span class="string">"C:\\demo.txt"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Files.exists(target2))</span><br><span class="line">        Files.createFile(target2);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Files.createDirectory()</code>创建文件夹，上级目录不存在报错<br><code>Files.createDirectorys()</code>创建文件夹，上级目录不存在则创建上级目录</p></li><li><p>删除文件或目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"data/subdir/logging-moved.properties"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Files.delete(path);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复制文件到另一个位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Path sourcePath = Paths.get(<span class="string">"data/logging.properties"</span>);</span><br><span class="line">Path destinationPath = Paths.get(<span class="string">"data/logging-copy.properties"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Files.copy(sourcePath, destinationPath);</span><br><span class="line">&#125; <span class="keyword">catch</span>(FileAlreadyExistsException e) &#123;</span><br><span class="line">    <span class="comment">//文件已经存在</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以直接覆盖目标文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Files.copy(sourcePath, destinationPath,</span><br><span class="line">            StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></table></figure></li><li><p>获取文件属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"D:\\XMind\\bcl-java.txt"</span>);</span><br><span class="line">System.out.println(Files.getLastModifiedTime(path));</span><br><span class="line">System.out.println(Files.size(path));</span><br><span class="line">System.out.println(Files.isSymbolicLink(path));</span><br><span class="line">System.out.println(Files.isDirectory(path));</span><br><span class="line">System.out.println(Files.readAttributes(path, <span class="string">"*"</span>));</span><br></pre></td></tr></table></figure></li><li><p>遍历一个文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Path dir = Paths.get(<span class="string">"D:\\Java"</span>);</span><br><span class="line"><span class="keyword">try</span>(DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(dir))&#123;</span><br><span class="line">    <span class="keyword">for</span>(Path e : stream)&#123;</span><br><span class="line">        System.out.println(e.getFileName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历整个文件目录<br>walkFileTree接受一个path和FileVisitor，path是遍历的目录，FileVistor则是一个接口，每次遍历都会被调用，需要自己实现。<br>SimpleFileVisitor是默认实现类，将接口所有方法都做了空实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//地址</span></span><br><span class="line">Path startingDir = Paths.get(<span class="string">"D:\\demo"</span>);</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">Files.walkFileTree(startingDir, <span class="keyword">new</span> FindJavaVisitor());</span><br></pre></td></tr></table></figure><p><code>FindJavaVisitor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindJavaVisitor</span> <span class="keyword">extends</span> <span class="title">SimpleFileVisitor</span>&lt;<span class="title">Path</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span></span>&#123;</span><br><span class="line">            <span class="comment">//do...</span></span><br><span class="line">            <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> javaIO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>反射效率低的原因</title>
      <link href="/blog/2020/03/04/%E5%8F%8D%E5%B0%84%E6%95%88%E7%8E%87%E4%BD%8E%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/blog/2020/03/04/%E5%8F%8D%E5%B0%84%E6%95%88%E7%8E%87%E4%BD%8E%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：709,阅读全文大约需要2分钟</p><blockquote><p>整理自<a href="https://www.jianshu.com/p/bd6fb77a7883" target="_blank" rel="noopener">原文</a></p></blockquote><h1 id="反射效率低的原因"><a href="#反射效率低的原因" class="headerlink" title="反射效率低的原因"></a>反射效率低的原因</h1><ol><li><p><code>Method#invoke</code>方法会对参数做封装和解封操作<br><code>invoke</code>方法参数是<code>Object[]</code>类型，如果方法的参数是简单类型，那么需要先包装成<code>Object</code>类型。例如<code>long</code>需要装换成<code>Long</code>。此时产生了多余的<code>Long</code>类型的<code>Objec</code>。生成动态字节码，并加载到<code>jvm</code>的方法<code>MethodAccessorGenerator#emitInvoke</code>会将参数恢复到之前的类型，同时做参数校验。<br>反射调用的时候可能会将参数进行多余的封装和解封，产生不必要的内存浪费。调用次数过多甚至会导致<code>GC</code>（感觉有点夸张）</p></li><li><p>需要检测方法可见性<br>反射每次调用都必须检查方法的可见性（Method.invoke）</p></li><li><p>需要校验参数<br>反射必须检查每个实际参数和形式参数的类型匹配（在NativeMethodAccessorImpl.invoke0 里或者生成的 Java 版 MethodAccessor.invoke 里）</p></li><li><p>方法难以内联<br><code>Method.invoke()</code>自身难以被内联到方法调用。</p></li><li><p>JIT无法优化<br>反射涉及到动态加载的类型，无法优化。</p></li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>文章没给，但是自己能想到几个</p><ol><li>方法参数使用包装类型（减少了包装和拆包的步骤）</li><li>将反射获取的<code>Method</code>等对象缓存下来，这样在下次调用的时候可以减少生成的开销。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>获取方式的方法</li></ol><ul><li><p>getMethod / getDeclaredMethod<br>调用反射时现需要创建<code>Class</code>对象(Class.forName)，然后获取<code>Method</code>对象（getMethod / getDeclaredMethod），最后才是<code>invoke</code>调用。<br>相同：<code>getMethod</code>和<code>getDeclaredMethod</code>的内部结构都是<strong>检查方法权限</strong>、<strong>获取方法</strong>、<strong>返回方法的拷贝</strong>。<br>不同：<code>getMethod</code>检查和获取的方法可以是自身的也可以是父类的，<code>getDeclaredMethod</code>获取的方法只能是自身的。</p></li><li><p>checkMemberAccess<br>第一步，检查方法权限。<code>getMethod</code>的传入值之一是<code>Member.PUBLIC</code>，<code>getDeclaredMethod</code>是<code>Member.DECLARED</code>。一个检查父类和自身，另一个只有自身方法。</p></li><li><p>getMethod0<br><code>getMethod</code>方法检查完方法权限后调用<code>getMethod0</code>获取方法</p></li><li><p>getMechodsRecursive<br>递归查找父类方法</p></li><li><p>privateGetDeclaredMethods<br>获取自身方法</p></li><li><p>Method#copy</p></li></ul><ol start="2"><li>调用方式的方法</li></ol><ul><li>checkAccess</li><li>acquireMethodAccessor</li><li>MethodAccessor#invoke</li></ul><ol start="3"><li>方式效率低的原因</li></ol><ul><li>Method#invoke 方法会对参数做封装和解封操作</li><li>需要检查方法的可见性</li><li>需要校验参数</li><li>反射方法难以内联</li><li>JIT无法优化</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>互斥锁</title>
      <link href="/blog/2020/03/04/%E4%BA%92%E6%96%A5%E9%94%81/"/>
      <url>/blog/2020/03/04/%E4%BA%92%E6%96%A5%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：443,阅读全文大约需要1分钟</p><blockquote><p>互斥锁是最普遍的多线程锁，并发编程除了考虑运行结果的正确之外，还需要线程无死锁（线程永久停滞），无饥饿（部分线程永远拿不到执行权限）</p></blockquote><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li><code>互斥</code>: 保证互斥行的专有名词是<strong>临界区</strong>，临界区内的代码在某个时刻只能被一个线程执行。即被锁保护的代码区域。</li><li><code>无死锁</code>: 不会永久停滞</li><li><code>无饥饿</code>: 不会部分永久停滞</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 一个锁的基本形态</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;<span class="comment">//锁定</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;<span class="comment">//解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>使用方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在try之前就需要获取锁，避免发生异常时未获取到锁就执行解锁。</span></span><br><span class="line">mutex.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> ...临界区</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    mutex.unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>减少互斥锁粒度: 锁粒度越小，程序执行是需要串行执行的工作就会越少。就可以更充分利用多处理器并行处理的优势。</p></li><li><p>进来不用锁: 减少串行执行工作量。</p></li></ol><h1 id="互斥锁示例"><a href="#互斥锁示例" class="headerlink" title="互斥锁示例"></a>互斥锁示例</h1><p>《多处理器编程的艺术》中Peterson算法，保证两个线程使用锁时互斥，无死锁，无饥饿。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Peterson</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>];</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> victim;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="keyword">int</span> i = ThreadID.get();</span><br><span class="line">           <span class="keyword">int</span> j = <span class="number">1</span> - i; <span class="comment">//因为只有两个，所以1-i就是另一个线程的id</span></span><br><span class="line">           flag[i]= <span class="keyword">true</span>;  <span class="comment">// 标记当前线程需要获取锁 </span></span><br><span class="line">           victim = i;  <span class="comment">// 并发时后改变这个值的线程自旋（保证早获取的执行，防止饥饿）</span></span><br><span class="line">           <span class="keyword">while</span>(flag[j] &amp;&amp; victim == i)&#123;&#125;  <span class="comment">// 当另一个锁需要执行，自己又获取的晚，那么等待另一个执行完。</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="keyword">int</span> i = ThreadID.get();</span><br><span class="line">           flag[i] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>对象操作流ObjectOutputStream</title>
      <link href="/blog/2020/03/04/%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E6%B5%81ObjectOutputStream/"/>
      <url>/blog/2020/03/04/%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E6%B5%81ObjectOutputStream/</url>
      
        <content type="html"><![CDATA[<p>文章字数：143,阅读全文大约需要1分钟</p><blockquote><p>能够将对象写入到文件，并从文件中读取的操作（序列化，反序列化）</p></blockquote><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li><p>需要被序列化的类必须实现<code>Serializable</code>接口，最好声明字段<code>private static final long serialVersionUID = 1L;</code>表示序列化对象的版本，防止多个序列化版本时冲突。</p></li><li><p>被序列化的类加上<code>get</code> <code>set</code>方法</p></li><li><p>序列化反序列化</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>);</span><br><span class="line"><span class="comment">// 写入</span></span><br><span class="line">ObjectOutputStream os=<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">os.writeObject(s1);</span><br><span class="line">os.writeObject(s2);</span><br><span class="line">os.close();</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line">ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">Student s1=(Student) ois.readObject();</span><br><span class="line">Student s2=(Student) ois.readObject();</span><br><span class="line">ois.close();</span><br></pre></td></tr></table></figure><ol start="4"><li>多个类读取比较麻烦，可以保持在集合里再序列化到文件中。</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客搭建</title>
      <link href="/blog/2020/03/04/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/blog/2020/03/04/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1259,阅读全文大约需要5分钟</p><blockquote><p>hexo是一款基于github的博客系统，使用markdown编写文章内容。在此记录一次博客搭建主要工作。</p></blockquote><h1 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1.安装环境"></a>1.安装环境</h1><p>##1.1 git<br><code>git --version</code>查看git版本<br>##1.2 node<br><code>node -v</code>查看node版本</p><h1 id="2-初步安装Hexo"><a href="#2-初步安装Hexo" class="headerlink" title="2.初步安装Hexo"></a>2.初步安装Hexo</h1><ul><li>安装Hexo脚手架<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>初始化站点<br>新建一个文件加，并使用命令行进入。执行以下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>一个本地博客系统就构建好了</li><li>2.3站点目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml &#x2F;&#x2F;博客配置，名称、关键词、作者、语言、主体等内容设置。</span><br><span class="line">├── package.json&#x2F;&#x2F;应用信息，插件等内容。</span><br><span class="line">├── scaffolds&#x2F;&#x2F;脚手架，有三个模板：文章(posts)、博客页(page)、草稿页(draft)。</span><br><span class="line">├── source&#x2F;&#x2F;博客存放处，之后通过命令可以新建tags(标签)、categories(分页)</span><br><span class="line">|   ├── _drafts&#x2F;&#x2F;草稿(初始)</span><br><span class="line">|   └── _posts&#x2F;&#x2F;文章(初始)</span><br><span class="line">└── themes&#x2F;&#x2F;主题存放处</span><br></pre></td></tr></table></figure></li><li>常用命令<br><code>hexo n &lt;filename&gt;</code>新建文章<br><code>hexo clean</code>清除缓存<br><code>hexo g</code>生成静态页面<br><code>hexo s</code>启动本地服务器，本地查看效果<br><code>hexo d</code>部署到网站上<h1 id="3-站点优化"><a href="#3-站点优化" class="headerlink" title="3.站点优化"></a>3.站点优化</h1><h2 id="3-1分类"><a href="#3-1分类" class="headerlink" title="3.1分类"></a>3.1分类</h2></li><li>新建分类页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></li><li>给页面添加类型<br>进入source-&gt;categories-&gt;index.md<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:文章分类</span><br><span class="line">date: 2019-04-22 12:25:30</span><br><span class="line">type: &quot;categories&quot;   #添加</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>模板添加分类<br>打开scarffolds-&gt;post.md<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>这样新建文章后就会有这个属性，填写分类就可以实现文章分类功能。<h2 id="3-2-标签"><a href="#3-2-标签" class="headerlink" title="3.2 标签"></a>3.2 标签</h2></li><li>新建标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li><li>给页面添加标签属性<br>打开 source-&gt;tags-&gt;index.md<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-04-23 00:13:22</span><br><span class="line">type: &quot;tags&quot; #新添加的内容</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="3-3使用分类和标签"><a href="#3-3使用分类和标签" class="headerlink" title="3.3使用分类和标签"></a>3.3使用分类和标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">layout: posts</span><br><span class="line">title: 我的第一篇博客</span><br><span class="line">date: 2019-04-23 00:17:41</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: [node.js, java]</span><br></pre></td></tr></table></figure><h1 id="4-部署到GitHub"><a href="#4-部署到GitHub" class="headerlink" title="4.部署到GitHub"></a>4.部署到GitHub</h1>github中：</li></ul><ol><li>创建<code>用户名.github.io</code>的仓库</li><li>setting里添加GitHub Pages选项</li><li>本地同步 打开 . -&gt;config.yml，添加部署路径<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:yourName&#x2F;yourName.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>注意：</li><li>冒号后有一个空格</li><li>需要先关联仓库，配置ssh</li></ol><p>使用命令<code>hexo g</code>  <code>hexo d</code> 完成生成并推送<br><code>yourName.github.io</code>就是博客网址</p><p>注：报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error deployer not found:github</span><br></pre></td></tr></table></figure><p>时，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>然后再试一次。</p><hr><h1 id="主题篇"><a href="#主题篇" class="headerlink" title="主题篇"></a>主题篇</h1><h1 id="1-安装NEXT"><a href="#1-安装NEXT" class="headerlink" title="1.安装NEXT"></a>1.安装NEXT</h1><blockquote><p>next是hexo的一款主题，也可以点击<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网</a>查看跟多（even主题也不错）</p></blockquote><p>安装主题只用将next的项目clone到根目录下themes/next里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>然后修改配置启用next主题<br>修改根目录下 <code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>在next的<code>_config.yml</code>中可以修改next的样式，共有四个。可以在<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">官网</a>看到案例</p><ul><li>Muse  (默认)</li><li>Mist</li><li>Pisces</li><li>Gemini<br>注释其他的，留下想要的样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h1 id="2-设置Menu-最上面的按钮"><a href="#2-设置Menu-最上面的按钮" class="headerlink" title="2.设置Menu(最上面的按钮)"></a>2.设置Menu(最上面的按钮)</h1><code>themes/next/_config.yml</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home #首页</span><br><span class="line">  about: &#x2F;about&#x2F; || user #关于我</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags  #标签</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th #分类</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive #归档</span><br></pre></td></tr></table></figure><h1 id="3-github挂饰"><a href="#3-github挂饰" class="headerlink" title="3.github挂饰"></a>3.github挂饰</h1><blockquote><p>点击fork me on github的按钮，在<a href="https://links.jianshu.com/go?to=http%3A%2F%2Ftholman.com%2Fgithub-corners%2F" target="_blank" rel="noopener">GitHub Corners</a>选择挂饰，复制代码添加到<code>themes/next/layout/_layout.swig</code>的<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下方。将代码里的<code>https//your-url</code> 换成自己的git主页。</p></blockquote></li></ul><h1 id="4-修改超链接css样式"><a href="#4-修改超链接css样式" class="headerlink" title="4.修改超链接css样式"></a>4.修改超链接css样式</h1><p><code>themes/next/source/css/_common/components/post/post.styl</code>末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3; &#x2F;&#x2F;原始链接颜色</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3; &#x2F;&#x2F;底部分割线颜色</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423; &#x2F;&#x2F;鼠标经过颜色</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423; &#x2F;&#x2F;底部分割线颜色</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-设置头像以及动画"><a href="#5-设置头像以及动画" class="headerlink" title="5.设置头像以及动画"></a>5.设置头像以及动画</h1><p>主题目录<code>_config.yml</code>中添加（找<code>Sidebar Avatar</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;添加头像地址</span><br><span class="line">avatar: [ http:&#x2F;&#x2F;....]</span><br></pre></td></tr></table></figure><p>头像圆角旋转<code>/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</code>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  &#x2F;* 头像圆形 *&#x2F;</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line">  &#x2F;* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*&#x2F;</span><br><span class="line"> </span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">img:hover &#123;</span><br><span class="line">  &#x2F;* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*&#x2F;</span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* Z 轴旋转动画 *&#x2F;</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-代码块样式"><a href="#6-代码块样式" class="headerlink" title="6.代码块样式"></a>6.代码块样式</h1><p><code>themes\next\source\css\_custom\custom.styl</code>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-社交网站图标"><a href="#7-社交网站图标" class="headerlink" title="7.社交网站图标"></a>7.社交网站图标</h1><p><code>next/_config.yml</code>的<code>Social</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[社交平台名]: [社交地址] || [图标名称]</span><br><span class="line">&#x2F;&#x2F;github 、heartbeat(心)、spinner(圈)...（图标）</span><br></pre></td></tr></table></figure><p>图标在<a href="https://links.jianshu.com/go?to=http%3A%2F%2Ffontawesome.io%2Ficons%2F" target="_blank" rel="noopener">Font Awesome Icon</a></p><h1 id="8-RSS"><a href="#8-RSS" class="headerlink" title="8.RSS"></a>8.RSS</h1><ol><li>根目录下<br><code>npm install --save hexo-generator-feed</code></li><li>全局<code>_config.yml</code>末尾添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure>打开Next的<code>_config.yml</code>中的<code>rss:</code><br>配置<code>rss: /atom.xml</code></li></ol><h1 id="9-搜索功能"><a href="#9-搜索功能" class="headerlink" title="9.搜索功能"></a>9.搜索功能</h1><ol><li>根目录下<code>npm install hexo-generator-search --save</code></li><li>根目录<code>_config.yml</code>中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Search </span><br><span class="line">search:</span><br><span class="line">  path: .&#x2F;public&#x2F;search.xml</span><br><span class="line">  field: post #搜索那个文件夹(page、all)</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000 #限制条数</span><br></pre></td></tr></table></figure><p>next<code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true #改为true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1 #字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。</span><br></pre></td></tr></table></figure><h1 id="首页隐藏部分（点击显示更多）"><a href="#首页隐藏部分（点击显示更多）" class="headerlink" title="首页隐藏部分（点击显示更多）"></a>首页隐藏部分（点击显示更多）</h1><p>next配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommand.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><h1 id="简易化搭建"><a href="#简易化搭建" class="headerlink" title="简易化搭建"></a>简易化搭建</h1><p><code>HEXO Portable</code>一分钟搭建博客</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg推流命令</title>
      <link href="/blog/2020/03/04/ffmpeg%E6%8E%A8%E6%B5%81%E5%91%BD%E4%BB%A4/"/>
      <url>/blog/2020/03/04/ffmpeg%E6%8E%A8%E6%B5%81%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：276,阅读全文大约需要1分钟</p><blockquote><p>记录几个ffmpeg的命令，其中有推hls流的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hls:</span><br><span class="line">点播：ffmpeg -re -i source.mp4 -codec:v libx264 -codec:a libfaac -map 0 -f hls -hls_list_size 6 -hls_wrap 10 -hls_time 10 playlist.m3u8</span><br><span class="line">      &#x2F;&#x2F;ffmpeg -re -f dshow -i video&#x3D;&quot;BisonCam, NB Pro&quot; -codec:v libx264 -codec:a libfaac -map 0 -f hls -hls_list_size 6 -hls_wrap 10 -hls_time 10 playlist.m3u8</span><br><span class="line">    ffmpeg -re -f dshow -video_size 1280x720 -rtbufsize 702000k -framerate 60 -i video&#x3D;&quot;BisonCam, NB Pro&quot; -codec:v libx264 -codec:a libfaac -map 0 -f hls -hls_list_size 6 -hls_wrap 10 -hls_time 10 playlist.m3u8</span><br><span class="line">  </span><br><span class="line">rmtp:</span><br><span class="line">桌面：ffmpeg -f avfoundation -i &quot;1&quot; -vcodec libx264 -preset ultrafast -acodec libfaac -f flv rtmp:&#x2F;&#x2F;localhost:1935&#x2F;rtmplive&#x2F;home </span><br><span class="line">桌面+麦克风：ffmpeg -f avfoundation -i &quot;1:0&quot; -vcodec libx264 -preset ultrafast -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp:&#x2F;&#x2F;localhost:1935&#x2F;rtmplive&#x2F;home </span><br><span class="line">桌面麦克风摄像头在下：ffmpeg -f avfoundation -framerate 30 -i &quot;1:0&quot; \-f avfoundation -framerate 30 -video_size 640x480 -i &quot;0&quot; \-c:v libx264 -preset ultrafast \-filter_complex &#39;overlay&#x3D;main_w-overlay_w-10:main_h-overlay_h-10&#39; -acodec libmp3lame -ar 44100 -ac 1  -f flv rtmp:&#x2F;&#x2F;localhost:1935&#x2F;rtmplive&#x2F;home </span><br><span class="line">摄像头：</span><br><span class="line">获取摄像头列表：ffmpeg -list_devices true -f dshow -i dummy  </span><br><span class="line">            ffmpeg -f dshow -i video&#x3D;&quot;BisonCam, NB Pro&quot; out.mp4</span><br><span class="line">录制摄像头：ffmpeg -f dshow -i video&#x3D;&quot;Integrated Camera&quot; out.mp4  </span><br><span class="line">查看摄像头详细信息：ffmpeg -f dshow -list_options true -i video&#x3D;&quot;BisonCam, NB Pro&quot;  </span><br><span class="line">指定分辨率1280x720帧数15：ffmpeg -f dshow -s 1280x720 -r 15 -vcodec mjpeg -i video&#x3D;&quot;Integrated Camera&quot; out.avi</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用消息队列</title>
      <link href="/blog/2020/03/04/%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/blog/2020/03/04/%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>文章字数：822,阅读全文大约需要3分钟</p><blockquote><p>高并发场景下，消息队列常用于流量削峰，解耦等作用。</p></blockquote><h1 id="基本标准"><a href="#基本标准" class="headerlink" title="基本标准"></a>基本标准</h1><ol><li>消息可靠，不丢失信息</li><li>支持集群</li><li>性能好，满足绝大部分要求。</li><li>开源，发现问题可以修改源码</li><li>社区活跃，用的人多大部分问题都能提前发现</li></ol><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><blockquote><p>使用<code>Erlang</code>编写，最早是为电信行业系统之间通讯设计。支持<code>AMQP</code></p></blockquote><p>特点：</p><ol><li><code>轻量级</code>：轻量，开箱即用。容易部署和使用。</li><li><code>Exchange</code>：生产者和队列之间加入了一个根据路由规则分发消息到不同的队列的功能。</li><li><code>客户端支持语言多</code>：支持很多种客户端语言</li></ol><p>不足</p><ol><li><code>消息堆积支持不好</code>：消息大量堆积性能急剧下降</li><li><code>性能不好</code>：每秒几万到十几万的数据量，比起其他几十万的（RabbitMQ）性能差一个数量级</li><li><code>Erlang</code>：使用<code>Erlang</code>语言，拓展性不好，二次开发成本高（相对于java）</li></ol><h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><blockquote><p>阿里巴巴2012年开源的，后来捐赠给<code>Apache</code>。使用<code>java</code>开发，在阿里内部被广泛使用。</p></blockquote><p>优点</p><ol><li><code>性能稳定，可靠</code>：性能稳定，可靠性高，功能齐全。</li><li><code>中文社区活跃，使用java开发</code>：社区活跃，使用java开发，拓展和二次开发比较容易。</li><li><code>延迟低</code>：业务响应延时做了优化，大多数情况下毫秒级响应。</li><li><code>性能好</code>：每秒能处理几十万条信息</li></ol><p>劣势</p><ol><li><code>与其它产品的集成和兼容性不足</code></li></ol><h1 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h1><blockquote><p>期初是分布式日志提交系统</p></blockquote><p>优点</p><ol><li><code>兼容性好</code>：大数据相关的开源软件都会优先支持<code>Kafka</code></li><li><code>性能高</code>：性能比RocketMQ还好一点，也是每秒几十万数据。足够多的客户端并发异步批量发送，在开启压缩情况下极限处理能力达到2000万条。</li></ol><p>不足</p><ol><li><code>异步批量</code>：异步批量的思想性能好，但是也带来延时较高的问题。</li></ol><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><table><thead><tr><th>\</th><th>kafka</th><th>RocketMQ</th><th>RabbitMQ</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>十万级</td><td>十万级</td><td>万级</td></tr><tr><td>开发语言</td><td>java &amp; Scala</td><td>java</td><td>Erlang</td></tr><tr><td>消息延迟</td><td>号码级</td><td>毫秒级</td><td>微秒级</td></tr><tr><td>消息丢失</td><td>参数配置后可以0丢失</td><td>参数配置后可以0丢失</td><td>极低概率丢失</td></tr><tr><td>消费模式</td><td>Pull</td><td>Pull+Push</td><td>Pull+Push</td></tr><tr><td>topic数量对吞吐量影响</td><td>topic几十几百时，吞吐量大幅下降</td><td>topic几百几千时,小幅度下降</td><td>\</td></tr><tr><td>可用性</td><td>非常高（分布式）</td><td>非常高（主从）</td><td>高（主从）</td></tr><tr><td>总结</td><td>吞吐量高，分布高可用，支持较少topic数量</td><td>支持大规模topic数量</td><td>不支持集群动态扩容</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hibernate三级缓存</title>
      <link href="/blog/2020/03/04/hibernate%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
      <url>/blog/2020/03/04/hibernate%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>文章字数：211,阅读全文大约需要1分钟</p><h1 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h1><p>session级别，同一个session生命周期通样的查询最多一次请求。<br>就是一个管理对象的Map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;原理</span><br><span class="line">1. 生成key&#x3D;&#x3D;类权限名#id值</span><br><span class="line">2. 从一级缓存找到key</span><br><span class="line">3. 没找到从数据库找，存入map</span><br><span class="line">session.clear();&#x2F;&#x2F;清空一级缓存</span><br><span class="line">session.evict(A);&#x2F;&#x2F;清空一个数据</span><br></pre></td></tr></table></figure><h1 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h1><p><code>sessionFactory</code>级别的缓存，使用第三方缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得二级缓存对象</span></span><br><span class="line">Cache cache=sessionFactory.getCache();</span><br><span class="line"><span class="comment">//剔除一个实例对象</span></span><br><span class="line">cache.evictEntity(<span class="class"><span class="keyword">class</span>,<span class="title">Long</span>)</span>;</span><br><span class="line"><span class="comment">//剔除一个类的所有实例</span></span><br><span class="line">cache.evictEntityRegion(<span class="class"><span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//剔除所有二级缓存中的实例</span></span><br><span class="line">cache.evictEntityRegions();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hibernate.cache.use_second_level_cache&#x3D;ture  &#x2F;&#x2F;使用二级缓存</span><br><span class="line">hibernate.cache.region.factory_class&#x3D;EhCacheRegionFactory的全限名  &#x2F;&#x2F;二级缓存是第三方,这儿选的是EhCache</span><br></pre></td></tr></table></figure><h1 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h1><p>查询缓存，query语句缓存。<br>但是存储使用List,有一个元素变了其他的都要变，所以一般只用于不变的List.</p>]]></content>
      
      
      <categories>
          
          <category> jpa </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>并发容器</title>
      <link href="/blog/2020/03/04/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/"/>
      <url>/blog/2020/03/04/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1263,阅读全文大约需要5分钟</p><blockquote><p><code>JUC</code>包下的14个并发容器，专门应付并发状态下线程安全的问题</p></blockquote><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ol><li><p><code>ConcurrentHashMap</code>并发版的<code>HashMap</code></p></li><li><p><code>CopyOnWriteArrayList</code>并发版的<code>ArrayList</code></p></li><li><p><code>CopyOnWriteArraySet</code>并发版的<code>Set</code></p></li><li><p><code>ConcurrentLinkedQueue</code>基于链表的并发队列（不阻塞）</p></li><li><p><code>ConcurrentLinkedDeque</code>基于双向列表的并发队列</p></li><li><p><code>ConcurrentSkipListMap</code>基于跳表的并发<code>Map</code><br>跳表：链表之上加了一层索引，就是一个新的链表，指向源数据的双数索引的位置。这一层的索引之上还可以增加索引，指向本层的双数位置。链表版的二分法。</p></li><li><p><code>ConcurrentSkipListSet</code>基于跳表的并发<code>Set</code></p></li><li><p><code>ArrayBlockingQueue</code>阻塞队列基于数组</p></li><li><p><code>LinkedBlockingQueue</code>阻塞队列基于链表</p></li><li><p><code>LinkedBlockingDeque</code>阻塞队列基于双链表</p></li><li><p><code>PriorityBlockingQueue</code>线程安全的优先队列</p></li><li><p><code>SynchronousQueue</code>读写成对的队列</p></li><li><p><code>LinkedTransferQueue</code>基于链表的数据交换队列</p></li><li><p><code>DelayQueue</code>延时队列</p></li></ol><h1 id="一、ConcurrentHashMap"><a href="#一、ConcurrentHashMap" class="headerlink" title="一、ConcurrentHashMap"></a>一、ConcurrentHashMap</h1><p>最常见的并发容器之一，常作用于并发场景下的缓存。底层还是哈希表，但是<code>java8</code>中有了优化。</p><ol><li><code>java7</code>采用分段锁，即数据被分成16个部分。每个部分一把锁，各部分之间不冲突。</li><li><code>java8</code>放弃了分段锁，采用<code>CAS</code>乐观锁。</li><li><code>java8</code>中增加了同哈希值组成的链表长度超过8之后会转换成红黑树</li></ol><h1 id="二、CopyOnWriteArrayList"><a href="#二、CopyOnWriteArrayList" class="headerlink" title="二、CopyOnWriteArrayList"></a>二、CopyOnWriteArrayList</h1><p>并发版的<code>ArrayList</code>, 底层结构还是数组。原理是增删改的操作会加锁，其中删改会创建新的数组并替换原来的。<br>适用于读多写少的情况，并且读没有加锁，所以可能读到脏数据。<br>读的效率高。</p><h1 id="三、CopyOnWriteArraySet"><a href="#三、CopyOnWriteArraySet" class="headerlink" title="三、CopyOnWriteArraySet"></a>三、CopyOnWriteArraySet</h1><p>并发版的<code>Set</code>, 内部使用<code>CopyOnWriteArrayList</code>实现的。每次<code>add</code>都会遍历内部数据，检查是否重复。不存在执行插入（加锁）<br>和<code>CopyOnWriteArrayList</code>注意点类似，多了一条数据量不能太大，否则遍历成本过高。</p><h1 id="四、ConcurrentLinkedQueue"><a href="#四、ConcurrentLinkedQueue" class="headerlink" title="四、ConcurrentLinkedQueue"></a>四、ConcurrentLinkedQueue</h1><p>基于链表实现的并发队列，不阻塞。使用乐观锁<code>CAS</code>保证现存的安全。内部是链表，理论上没有大小限制。</p><h1 id="五、ConcurrentLinkedDeque"><a href="#五、ConcurrentLinkedDeque" class="headerlink" title="五、ConcurrentLinkedDeque"></a>五、ConcurrentLinkedDeque</h1><p>基于双向链表的并发队列，可以分别对于首尾进行操作。可以先进先出也可以先进后出。</p><h1 id="六、ConcurrentSkipListMap"><a href="#六、ConcurrentSkipListMap" class="headerlink" title="六、ConcurrentSkipListMap"></a>六、ConcurrentSkipListMap</h1><p>基于跳表<code>SkipList</code>的并发<code>Map</code>, 跳表是用空间换时间的数据结构。<br>每一层都是上一层的一半数据，类似于二分查找的实现方式来增加搜索效率。</p><h1 id="七、ConcurrentSkipListSet"><a href="#七、ConcurrentSkipListSet" class="headerlink" title="七、ConcurrentSkipListSet"></a>七、ConcurrentSkipListSet</h1><p>基于跳表的并发<code>Set</code>, 使用<code>ConcurrentSkipListMap</code>实现的</p><h1 id="八、ArrayBlockingQueue"><a href="#八、ArrayBlockingQueue" class="headerlink" title="八、ArrayBlockingQueue"></a>八、ArrayBlockingQueue</h1><p>基于数组的阻塞队列，构造时需要指定大小。<br>添加元素时如果数组满了会阻塞，知道有位置可以放。（也可以设置返回或者超时等待）<br>通过锁<code>ReentrantLock</code>保证线程安全</p><h1 id="九、LinkedBlockingQueue"><a href="#九、LinkedBlockingQueue" class="headerlink" title="九、LinkedBlockingQueue"></a>九、LinkedBlockingQueue</h1><p>基于链表的阻塞队列，相比不阻塞<code>ConcurrentLinkedQueue</code>多了容量的现在。不设置默认<code>int</code>的最大值</p><h1 id="十、LinkedBlockingDeque"><a href="#十、LinkedBlockingDeque" class="headerlink" title="十、LinkedBlockingDeque"></a>十、LinkedBlockingDeque</h1><p>和<code>LinkedBlockingQueue</code>类似，底层是双链表</p><h1 id="十一、PriorityBlockingQueue"><a href="#十一、PriorityBlockingQueue" class="headerlink" title="十一、PriorityBlockingQueue"></a>十一、PriorityBlockingQueue</h1><p>线程安全的优先队列，构造的时候需要传入一个比较器。内部会根据元素的优先级排序。读取的时候会根据优先级从高到低读取。<br>优先级低的可能会因为一直有更高级的元素而无法被读取。</p><h1 id="十二、SynchronousQueue"><a href="#十二、SynchronousQueue" class="headerlink" title="十二、SynchronousQueue"></a>十二、SynchronousQueue</h1><p>数据同步交换队列，内部只能存一个元素。每次插入操作必须要取才能再次插入。<br>任何一个对<code>SynchronousQueue</code>写需要等到一个对<code>SynchronousQueue</code>的读操作，反之亦然</p><h1 id="十三、LinkedTransferQueue"><a href="#十三、LinkedTransferQueue" class="headerlink" title="十三、LinkedTransferQueue"></a>十三、LinkedTransferQueue</h1><p>基于链表的交换队列，比<code>SynchronousQueue</code>更强大。<br>实现了<code>TransferQueue</code>接口，通过<code>transfer</code>方法放入元素时如果有线程在阻塞去元素，就会把元素直接给等待队列。如果没有人等待，则放到队列尾部，并阻塞直到有人读取。</p><h1 id="十四、DelayQueue"><a href="#十四、DelayQueue" class="headerlink" title="十四、DelayQueue"></a>十四、DelayQueue</h1><p>可以使放入的元素在指定延时之后才被消费者取出，元素需要实现<code>Delayed</code>接口</p>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Calender获取上个月日期</title>
      <link href="/blog/2020/03/04/Calender%E8%8E%B7%E5%8F%96%E4%B8%8A%E4%B8%AA%E6%9C%88%E6%97%A5%E6%9C%9F/"/>
      <url>/blog/2020/03/04/Calender%E8%8E%B7%E5%8F%96%E4%B8%8A%E4%B8%AA%E6%9C%88%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：110,阅读全文大约需要1分钟</p><blockquote><p>日历类<code>Calender</code>获取给定时间上个月的日期，总共有两种方法获取</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="comment">// 获取默认日历</span></span><br><span class="line">        Calendar c1 = Calendar.getInstance();</span><br><span class="line">        Date lastMonth = c1.getTime();</span><br><span class="line">        System.out.println(<span class="string">"原时间："</span> + format.format(lastMonth));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法1 add 直接在原时间上加减</span></span><br><span class="line">        c1.add(Calendar.MONTH, -<span class="number">1</span>);</span><br><span class="line">        lastMonth = c1.getTime();</span><br><span class="line">        System.out.println(<span class="string">"add之后时间："</span> + format.format(lastMonth));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重置时间为当前</span></span><br><span class="line">        c1.setTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法2 set 设置新时间, 负数会在高位上相应调整</span></span><br><span class="line">        c1.set(Calendar.MONTH, c1.get(Calendar.MONTH)-<span class="number">1</span>);</span><br><span class="line">        lastMonth = c1.getTime();</span><br><span class="line">        System.out.println(<span class="string">"set之后时间："</span> + format.format(lastMonth));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MQTT-Broker选型</title>
      <link href="/blog/2020/03/04/MQTT-Broker%E9%80%89%E5%9E%8B/"/>
      <url>/blog/2020/03/04/MQTT-Broker%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：563,阅读全文大约需要2分钟</p><blockquote><p><code>MQTT</code>是一个互联网协议，基于这个协议有很多的实现。</p></blockquote><h1 id="一、MQTT-Broker的需求"><a href="#一、MQTT-Broker的需求" class="headerlink" title="一、MQTT Broker的需求"></a>一、MQTT Broker的需求</h1><h2 id="1-1-基本需求"><a href="#1-1-基本需求" class="headerlink" title="1.1 基本需求"></a>1.1 基本需求</h2><ol><li>支持<code>mqtt3.1</code> / <code>mqtt3.1.1</code>可选<code>mqtt5.0</code>协议</li></ol><ul><li><code>3.1</code>和<code>3.1.1</code>是常见的协议版本，几乎生产的<code>IOT</code>设备都支持，<code>5.0</code>普及可能还要一段时间。</li></ul><ol start="2"><li>支持<code>QOS0</code>、<code>QOS1</code>可选<code>QOS2</code></li></ol><ul><li>各大厂商至少都支持了<code>QOS1</code>，能够保证信息的必到达。</li></ul><ol start="3"><li><p>支持<strong>遗嘱信息</strong>：即设备异常断开后通知后端服务或者其他设备处理</p></li><li><p>支持<strong>持久化</strong>：比如<code>QOS1</code>的消息，设备因为网络原因接收不到或者异常断线，需要把未发送的信息保存在<code>session</code>中。</p></li><li><p>支持多种连接方式</p></li></ol><ul><li><code>MQTT over TCP</code>: 最基本的连接方式</li><li><code>MQTT over Webscoket</code>: 基于<code>Websocket</code>连接的<code>MQTT</code></li><li><code>MQTT over TCP/SSL</code>: 基础连接之上做了加密，一般采用<code>TLS</code>加密</li><li><code>MQTT over Websocket/SSL</code>: 基于<code>Websocket</code>的加密连接，一般<code>SSL</code>采用<code>TLS</code></li></ul><ol start="6"><li>集群</li></ol><ul><li>需要海量的连接需要支持集群，集群的<code>session</code>持久化和集群通信都是难点。</li><li>集群信息共享，可以保证某个节点宕机时功能还能正常使用，但是未发送的信息可能会丢失。</li></ul><ol start="7"><li>自定义权限验证</li></ol><ul><li>连接阶段是否允许连接</li><li>发送阶段判断是否允许发送</li><li>订阅阶段是否允许订阅</li><li>大部分开源<code>Broker</code>只支持<code>userName</code>和<code>Password</code>的验证。<code>ClientId</code>和<code>Ip</code>不一定支持</li></ul><h2 id="1-2-可选需求"><a href="#1-2-可选需求" class="headerlink" title="1.2 可选需求"></a>1.2 可选需求</h2><ol><li>保留信息</li></ol><ul><li>保留信息就是主题会依照<code>QOS</code>级别保留最后一条消息，当有新的订阅时会发送这条消息</li><li>主要应对订阅之后不知道第一条信息何时会发送的情况。如获取设备状态，设备如果不发送信息新加进来的管理端就无法获得状态信息，不知道如何显示。如果这个时候有一条保留信息，就能够知道当前设备状态。</li><li>开销较大，每次订阅主题都需要检查有没有保留消息。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>控制台引入js文件</title>
      <link href="/blog/2020/03/04/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%BC%95%E5%85%A5js%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2020/03/04/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%BC%95%E5%85%A5js%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：19,阅读全文大约需要1分钟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建元素，设置地址</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.src = <span class="string">"https://xxxxx.js"</span>;</span><br><span class="line"><span class="comment">// 添加到head标签中</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BeanFactory和ApplicationContext</title>
      <link href="/blog/2020/03/04/BeanFactory%E5%92%8CApplicationContext/"/>
      <url>/blog/2020/03/04/BeanFactory%E5%92%8CApplicationContext/</url>
      
        <content type="html"><![CDATA[<p>文章字数：424,阅读全文大约需要1分钟</p><blockquote><p><code>Spring</code>最基本的功能就是容器，容器的核心功能是<code>IOC</code>控制反转。将类的创建、装配、销毁交由容器管理。<code>BeanFacotry</code>和<code>ApplicationContext</code>两个接口是<code>Spring</code>最核心的接口，其中<code>ApplicationContext</code>是<code>BeanFactory</code>的子接口。二者都可以作为容器使用。</p></blockquote><h1 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h1><ol><li><p><code>ApplicationContext</code>是<code>BeanFactory</code>的拓展接口。</p></li><li><p><code>BeanFactory</code>一般称为<code>IOC</code>容器，而<code>ApplicationContext</code>称为应用上下文。</p></li><li><p><code>BeanFactory</code>提供了最基本的容器管理功能，<code>ApplicationContext</code>提供更多服务，如解析配置文本信息等。一般使用<code>ApplicationContext</code>。</p></li></ol><h1 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h1><p>主要功能是装配，创建，管理Bean。<br><code>Spring ICO</code>容器的实现本质上是<code>BeanFactory</code>，但是真正可以单独使用的容器还是<code>DefaultListableBeanFactory</code>(实现类)</p><ol><li><p><code>BeanFactory</code>是容器的根接口，主要方法是<code>getBean(String beanName)</code></p></li><li><p>直接子接口</p></li></ol><ul><li><code>HierarchicalBeanFactory</code>:提供父容器的访问功能</li><li><code>ListableBeanFactory</code>:提供批量获取<code>Bean</code>的方法</li><li><code>AutowireCapableBeanFactory</code>:增加对已存在的实例的管理</li></ul><ol start="3"><li><p><code>ConfigurableBeanFactory</code><br>主要单例bean的注册，生成实例，以及统计单例bean</p></li><li><p><code>ConfigurableListableBeanFactory</code><br>继承了上述的所有接口，增加了其他功能：比如类加载器,类型转化,属性编辑器,BeanPostProcessor,作用域,bean定义,处理bean依赖关系, bean如何销毁…</p></li><li><p>实现类<code>DefaultListableBeanFactory</code><br>实现了ConfigurableListableBeanFactory，实现上述BeanFactory所有功能。它还可以注册BeanDefinition</p></li></ol><h1 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h1><blockquote><p>应用上下文，继承了<code>BeanFactory</code>接口拥有更多的功能。启动时就可以加载所有的<code>Bean</code>,也可以延迟加载。</p></blockquote><ol><li>国际化（MessageSource）</li><li>资源访问（ResourceLoader）</li><li>载入多个上下文</li><li>消息发送响应机制（ApplicationEventPublisher）</li><li>aop</li></ol><p>web端使用<code>ApplicationContext</code>多一点</p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jasypt加密SpringBoot配置文件</title>
      <link href="/blog/2020/03/04/jasypt%E5%8A%A0%E5%AF%86SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/blog/2020/03/04/jasypt%E5%8A%A0%E5%AF%86SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：285,阅读全文大约需要1分钟</p><blockquote><p><code>application.properties</code>中经常会放账户密码数据库连接地址等敏感信息，可能会造成信息的泄露。使用<code>jasypt</code>可以加密解密配置文件。</p></blockquote><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ulisesbocchio&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jasypt-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>通过密钥生成密文</li></ol><ul><li>下载<code>jasypt-1.9.2.jar</code>生成</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI password&#x3D;G0CvDz7oJn6 algorithm&#x3D;PBEWithMD5AndDES input&#x3D;root</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">----ENVIRONMENT-----------------</span><br><span class="line">Runtime: Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 25.171-b11</span><br><span class="line"></span><br><span class="line">----ARGUMENTS-------------------</span><br><span class="line">input: root</span><br><span class="line">algorithm: PBEWithMD5AndDES</span><br><span class="line">password: G0CvDz7oJn6</span><br><span class="line"></span><br><span class="line">----OUTPUT----------------------</span><br><span class="line">Gvkoz+sbFWiRe3ECtizV1A&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><ul><li>代码生成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jasypt.util.text.BasicTextEncryptor;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testTest t = <span class="keyword">new</span> testTest();</span><br><span class="line">        t.getPass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BasicTextEncryptor stringEncryptor = <span class="keyword">new</span> BasicTextEncryptor();</span><br><span class="line">        <span class="comment">//设置密钥</span></span><br><span class="line">        stringEncryptor.setPassword(<span class="string">"tfa46e505nh4565e5o8adjg4a8e01by"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密数据</span></span><br><span class="line">        String url = stringEncryptor.encrypt(<span class="string">"url"</span>);</span><br><span class="line">        String name = stringEncryptor.encrypt(<span class="string">"username"</span>);</span><br><span class="line">        String password = stringEncryptor.encrypt(<span class="string">"pwd"</span>);</span><br><span class="line">        <span class="comment">//结果</span></span><br><span class="line">        System.out.println(<span class="string">"-----------------url------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ENC("</span>+url+<span class="string">")"</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------------name------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ENC("</span>+name+<span class="string">")"</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------------pwd------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ENC("</span>+password+<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动密文解密</span></span><br><span class="line">        password = password.replace(<span class="string">"ENC("</span>,<span class="string">""</span>);</span><br><span class="line">        password = password.replace(<span class="string">")"</span>,<span class="string">""</span>);</span><br><span class="line">        String decrypted = stringEncryptor.decrypt(password);</span><br><span class="line">        System.out.println(<span class="string">"-----------------decrypt------------------"</span>);</span><br><span class="line">        System.out.println(decrypted);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动生成密钥</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------------uuid------------------"</span>);</span><br><span class="line">        System.out.println(uuid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 加密所需的salt(盐),和生成密文时使用的要一样</span><br><span class="line">jasypt.encryptor.password&#x3D;tfa46e505nh4565e5o8adjg4a8e01by</span><br><span class="line"># 加密后的密文，使用ENC(...)包裹</span><br><span class="line">spring.datasource.username&#x3D;ENC(6eaMh&#x2F;RX5oXUVca9ignvtg&#x3D;&#x3D;)</span><br><span class="line">spring.datasource.password&#x3D;ENC(6eaMh&#x2F;RX5oXUVca9ignvtg&#x3D;&#x3D;)</span><br></pre></td></tr></table></figure><ol start="3"><li>开启加密</li></ol><p>项目里没有使用@SpringBootApplication或者@EnableAutoConfiguration，可以手动在Configuration类上添加注解@EnableEncryptableProperties，来在整个环境的属性启用属性加密。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文字换行</title>
      <link href="/blog/2020/03/04/%E6%96%87%E5%AD%97%E6%8D%A2%E8%A1%8C/"/>
      <url>/blog/2020/03/04/%E6%96%87%E5%AD%97%E6%8D%A2%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：47,阅读全文大约需要1分钟<br>强制不换行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123; white-space:nowrap; &#125;</span><br></pre></td></tr></table></figure><p>自动换行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123; word-wrap:break-word; &#125;</span><br></pre></td></tr></table></figure><p>强制英文单词断行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123; word-break:break-all; &#125;</span><br></pre></td></tr></table></figure><p>注意：设置强制将英文单词断行，需要将行内元素设置为块级元素。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>断言assert</title>
      <link href="/blog/2020/03/04/%E6%96%AD%E8%A8%80assert/"/>
      <url>/blog/2020/03/04/%E6%96%AD%E8%A8%80assert/</url>
      
        <content type="html"><![CDATA[<p>文章字数：60,阅读全文大约需要1分钟</p><blockquote><p>很多框架的源码里都有使用到assert，这里学习一下</p></blockquote><h1 id="开启断言"><a href="#开启断言" class="headerlink" title="开启断言"></a>开启断言</h1><p>默认关闭</p><ul><li>jvm加上参数<code>-ea</code>或者<code>-enableassertions</code></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>如果判断语句为false,则会报错，并提示指定信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> a &gt; <span class="number">0</span> : <span class="string">"error message"</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Netty-PipLine</title>
      <link href="/blog/2020/03/04/Netty-PipLine/"/>
      <url>/blog/2020/03/04/Netty-PipLine/</url>
      
        <content type="html"><![CDATA[<p>文章字数：229,阅读全文大约需要1分钟</p><blockquote><p>pipLine是Netty数据链式处理的处理流，每一个节点都能处理数据并返回传入值类型的对象，再给下一个节点。一般来说会使用一些工具类对于数据现行处理，然后再进入自身的数据处理中。</p></blockquote><h1 id="字符串类型粘包和拆包"><a href="#字符串类型粘包和拆包" class="headerlink" title="字符串类型粘包和拆包"></a>字符串类型粘包和拆包</h1><p>使用LineBasedFrameDecoder和StringDecoder处理之后的msg</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> LineBasedFrameDecoder(<span class="number">1024</span>));</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>请求中的字符串会被<code>\n</code>或者<code>\r</code>分割成一个个部分，分别被<code>channelRead</code>执行。一次连接中多次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收客户端消息，自动触发</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String mess = (String) msg;</span><br><span class="line">    System.out.println(<span class="string">"服务端收到 = "</span> + mess);</span><br><span class="line">    <span class="comment">//回复消息</span></span><br><span class="line">    String respMess = message+<span class="string">"\n"</span>;</span><br><span class="line">    ByteBuf respByteBuf = Unpooled.copiedBuffer(respMess.getBytes());</span><br><span class="line">    ctx.write(respByteBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="http解析"><a href="#http解析" class="headerlink" title="http解析"></a>http解析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request解码</span></span><br><span class="line"> arg0.pipeline().addLast(<span class="keyword">new</span> HttpRequestDecoder());</span><br><span class="line"><span class="comment">//request解码</span></span><br><span class="line"> arg0.pipeline().addLast(<span class="keyword">new</span> HttpRequestDecoder());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaIO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java-asm前置知识</title>
      <link href="/blog/2020/03/04/java-asm%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
      <url>/blog/2020/03/04/java-asm%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：731,阅读全文大约需要2分钟</p><h1 id="一、jdk自带的javap工具"><a href="#一、jdk自带的javap工具" class="headerlink" title="一、jdk自带的javap工具"></a>一、jdk自带的<code>javap</code>工具</h1><blockquote><p>avap是JDK提供的一个命令行工具,javap能对给定的class文件提供的字节代码进行反编译。相对于<code>jd</code>, <code>javap</code>能够查看java编译器为我们生成的字节码，有利于程序调优。</p></blockquote><p><strong>使用方式：</strong>（命令行状态下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javap &lt;选项&gt; &lt;类名&gt;</span><br><span class="line">   常用: javap -c -v 类名</span><br></pre></td></tr></table></figure><p><strong>部分常用命令</strong>（1.8）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-l  打印行和本地变量表</span><br><span class="line"> -public 只显示公共类和成员变量</span><br><span class="line"> -protected  只显示公共的、受保护的类和变量</span><br><span class="line"> -private  显示所有的类和成员变量</span><br><span class="line"> -p  显示所有的类和成员变量</span><br><span class="line"> -Joption   给jvm指定参数,例如:</span><br><span class="line"> javap -J-version</span><br><span class="line"> javap -J-Djava.security.manager -J-Djava.security.policy&#x3D;MyPolicy </span><br><span class="line"> -s 打印内部类型签名(用于泛型)</span><br><span class="line"> -sysinfo 打印被处理类的系统信息(路径,大小,日志,md5哈希)</span><br><span class="line"> -constants 显示static final常量</span><br><span class="line"> -c 输出分解后的代码。例如，类中每一个方法内，包含java字节码的指令</span><br><span class="line"> -verbose  输出栈大小，变量（locals）和方法参数的个数</span><br><span class="line"> -classpath path 指定查询类的路径.如果设置该值,则会覆盖默认值和CLASSPATH环境变量。</span><br><span class="line"> -bootclasspath path 指定启动类的路径,默认值是jre&#x2F;lib&#x2F;rt.jar 和 其他少数的jar.</span><br><span class="line"> -extdir dirs  覆盖 java.ext.dirs路径</span><br></pre></td></tr></table></figure><h1 id="Fernflower-jar"><a href="#Fernflower-jar" class="headerlink" title="Fernflower.jar"></a><code>Fernflower.jar</code></h1><blockquote><p>批量反编译java字节码，idea使用的就是这种方法。、<br><strong>使用</strong></p></blockquote><ul><li>首先把工程的所有class 压缩成zip</li><li>执行命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 二、java -jar fernflower.jar  &lt;目标&gt;.jar &lt;文件夹名&gt;&#x2F;</span><br><span class="line">java -jar fernflower.jar classes.zip demo&#x2F;</span><br></pre></td></tr></table></figure></li></ul><h1 id="三、java-lang-instrument-Instrumentation"><a href="#三、java-lang-instrument-Instrumentation" class="headerlink" title="三、java.lang.instrument.Instrumentation"></a>三、java.lang.instrument.Instrumentation</h1><blockquote><p>java Instrumentation指的是可以用独立于应用程序之外的代理（agent）程序来监测和协助运行在JVM上的应用程序。这种监测和协助包括但不限于获取JVM运行时状态，替换和修改类定义等。<br>能够使加载的类与物理保存的.class文件不同，热部署的实现支持之一。常用于累的监控。<br>就是使用代理类，类加载前会执行代理类的指定方法处理字节码。</p></blockquote><h1 id="四、三种工具和asm的关系"><a href="#四、三种工具和asm的关系" class="headerlink" title="四、三种工具和asm的关系"></a>四、三种工具和asm的关系</h1><ul><li>asm是用来解析，保存，修改，创建二进制class文件的工具</li><li><code>javap</code>和<code>Fernflower.jar</code>是反编译java class文件的工具，只是各有特点。</li><li><code>Instrumentation</code>可以代理类，在加载前使用asm修改类。(JavaAgent java探针、代理)的实现<blockquote><p><code>Instrumentation</code>可以编写代码使用javaagent代理执行其它java文件，在代码里使用上面的asm库动态修改代码。也可以直接将所有字节保存，并加载其它class文件。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java-JIT</title>
      <link href="/blog/2020/03/04/java-JIT/"/>
      <url>/blog/2020/03/04/java-JIT/</url>
      
        <content type="html"><![CDATA[<p>文章字数：558,阅读全文大约需要2分钟</p><blockquote><p>JIT(Just in time compilation)及时编译，能够让java程序执行速度提升</p></blockquote><h1 id="优化手段"><a href="#优化手段" class="headerlink" title="优化手段"></a>优化手段</h1><ol><li><code>cpu编译优化</code>:针对特定的处理器型号指令集编译热点代码，提升性能</li><li><code>减少查表次数</code>:调用<code>Object.equals()</code>方法，在运行时发现一直是在调用<code>String</code>的<code>equals()</code>编译后直接调用<code>String.equals()</code></li><li><code>逃逸分析</code>:变量默认分配在主存上，但是方法中变量未逃出使用的生命周期则可以考虑在栈上分配内存。如果是对象则可以标量替换（对象替换成相应字段的变量）</li><li><code>寄存器分配</code>:部分变量可以分配在寄存器中，相对主存，读取性能提升。</li><li><code>热点代码机器码缓存</code>:缓存热点代码的机器码，但是缓存空间有固定大小,到达上限就不能缓存了</li><li><code>方法内联</code>:热点方法的内部调用的方法会被复制到调用方法里，减少调用开销。</li></ol><h1 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h1><ol><li>条件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;次数限制</span><br><span class="line">client编译器时到达1500此执行会标记热点方法，执行内联</span><br><span class="line">server编译器时到达10000此执行会标记热点方法，执行内联</span><br><span class="line">值可以由 -XX:CompileThreshold 设置</span><br><span class="line">&#x2F;&#x2F;大小限制</span><br><span class="line">如果方法是经常执行的，默认情况下，方法大小小于325字节的都会进行内联（可以通过** -XX:MaxFreqInlineSize&#x3D;N**来设置这个大小）</span><br><span class="line">如果方法不是经常执行的，默认情况下，方法大小小于35字节才会进行内联（可以通过** -XX:MaxInlineSize&#x3D;N **来设置这个大小）</span><br></pre></td></tr></table></figure><ol start="2"><li>建议</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.更小的方法体，JVM总是偏好更小的方法。</span><br><span class="line">2.尽量使用final、private、static修饰符</span><br><span class="line">3.使用+PrintInlining参数校验效果</span><br></pre></td></tr></table></figure><h1 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h1><p>变量在HotSpot VM中逃逸分析的类别分为</p><ol><li><code>NoEscape</code>:未逃逸，可以进行标量替换（用局部变量替换对象字段）</li><li><code>ArgEscape</code>:作为参数被传入其它方法中，此情况下如果被调用的方法和调用方法产生方法内联，也可以进行标量替换。</li><li><code>GlobalEscape</code>:无法标量替换</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java-IO</title>
      <link href="/blog/2020/03/04/java-IO/"/>
      <url>/blog/2020/03/04/java-IO/</url>
      
        <content type="html"><![CDATA[<p>文章字数：842,阅读全文大约需要3分钟</p><h1 id="IO分类"><a href="#IO分类" class="headerlink" title="IO分类"></a>IO分类</h1><p>从操作对象上可分为</p><ol><li>文件流(file)：<code>FileInputStream</code> <code>FileOutputStream</code> <code>FileReader</code> <code>FileWriter</code></li><li>字节数组(byte[])：<code>ByteArrayInputStream</code> <code>ByteArrayOutputStream</code></li><li>字符数组(char[])：<code>CharArrayReader</code> <code>CharArrayWriter</code></li><li>管道操作：<code>PipedInputStream</code> <code>PipedOutputStream</code> <code>PipedReader</code> <code>PipedWriter</code></li><li>基本数据类型：<code>DataInputStream</code> <code>DataOutputStream</code></li><li>缓冲操作：<code>BufferedInputStream</code> <code>BufferedOutputStream</code> <code>BufferedReader</code> <code>BufferedWriter</code></li><li>打印：<code>PrintStream</code> <code>PrintWriter</code></li><li>对象序列化反序列化：<code>ObjectInputStream</code> <code>ObjectOutputStream</code></li><li>转换：<code>InputStreamReader</code> <code>OutputStreWriter</code></li></ol><p>从传输方式上可以分为</p><ul><li>字节流 <code>InputStream</code> <code>OutputStream</code></li><li>字符流 <code>Reader</code> <code>Writer</code><br>字节流采用的是单个字节传输，可以用于处理二进制。字符则是根据编码由数个字节组成的，人可以阅读文字、符号。字符流用来处理文本文件。</li></ul><h1 id="抽象类InputStream"><a href="#抽象类InputStream" class="headerlink" title="抽象类InputStream"></a>抽象类InputStream</h1><table><thead><tr><th>方法</th><th>方法介绍</th></tr></thead><tbody><tr><td>int read()</td><td>读取数据,返回一个字节。返回-1是读到文件末尾，正数强转就是相应的数据。</td></tr><tr><td>int read(byte b[])</td><td>将读取到的数据放入<code>byte</code>数组b中,调用下一个方法实现的</td></tr><tr><td>int read(byte b[],int off,int len)</td><td>从off位置读取len字节长度放到byte数组中。返回-1是读取结束，正数则是读取字符数。</td></tr><tr><td>long skip(long n)</td><td>跳过指定个数的字节不读取</td></tr><tr><td>int available()</td><td>返回可读的字节数量</td></tr><tr><td>void close()</td><td>关闭流，释放资源</td></tr><tr><td>synchronized void mark(int readlimit)</td><td>标记读取位置，下次还可以从这里读取。通过markSupported()查看是否支持。</td></tr><tr><td>synchronized void reset()</td><td>重置读取位置为上次标记的位置</td></tr><tr><td>boolean markSupported()</td><td>判断当前流是否支持标记流。</td></tr></tbody></table><h1 id="抽象类OutputStream"><a href="#抽象类OutputStream" class="headerlink" title="抽象类OutputStream"></a>抽象类OutputStream</h1><table><thead><tr><th>方法</th><th>方法介绍</th></tr></thead><tbody><tr><td>void write(int b)</td><td>写入一个字节，对应上面read的int。int的32个位中低8位才会写入，其它舍弃。</td></tr><tr><td>void write(byte b[])</td><td>调用下面的方法，把数组中所有数据写入</td></tr><tr><td>void write(byte b[],int off,int len)</td><td>将byte数组从off位置开始，写入len长度。(读多少写多少的话就是read的返回值)</td></tr><tr><td>void flush()</td><td>强制刷新，将缓冲区数据写入。有缓冲在close前执行一下</td></tr><tr><td>public void close()</td><td>关闭输出流，流关闭后不能再输出数据了</td></tr></tbody></table><h1 id="抽象类Reader"><a href="#抽象类Reader" class="headerlink" title="抽象类Reader"></a>抽象类Reader</h1><table><thead><tr><th>方法</th><th>方法介绍</th></tr></thead><tbody><tr><td>int read(java.nio.CharBuffer target)</td><td>读取字节到字符缓存中</td></tr><tr><td>int read()</td><td>读取单个字符</td></tr><tr><td>int read(char cbuf[])</td><td>读取字符到指定的char数组中</td></tr><tr><td>int read(char cbuff[],int off,int len)</td><td>从off位置读取len长度的字符到char数组中</td></tr><tr><td>long skip(long n)</td><td>跳过指定长度的字符数量</td></tr><tr><td>boolean ready()</td><td>判断当前流是否可读</td></tr><tr><td>boolean markSupported()</td><td>判断当前流是否支持标记流</td></tr><tr><td>void mark(int readAheadLimit)</td><td>标记读取位置，下次可以返回这里从新开始读取。需要判断是否支持</td></tr><tr><td>void reset()</td><td>重置读取位置为上次mark标记的位置</td></tr><tr><td>void close()</td><td>关闭流释放相关资源</td></tr></tbody></table><h1 id="抽象类Writer"><a href="#抽象类Writer" class="headerlink" title="抽象类Writer"></a>抽象类Writer</h1><table><thead><tr><th>方法</th><th>方法介绍</th></tr></thead><tbody><tr><td>void write(int c)</td><td>写人一个字符</td></tr><tr><td>void write(char cbuf[])</td><td>写入一个字符数组</td></tr><tr><td>void write(char cbuf[],int off,int len)</td><td>从字符数组的off位置写入len数量的字符</td></tr><tr><td>void write(String str)</td><td>写入一个字符串</td></tr><tr><td>void write(String str,int off,int len)</td><td>从字符串的off位置写入len数量的字符</td></tr><tr><td>Writer append(CharSequence csq)</td><td>追加吸入一个字符序列</td></tr><tr><td>Writer append(CharSequence csq,int start,int end)</td><td>追加写入一个16位的字符</td></tr><tr><td>void flush()</td><td>强制刷新，将缓冲区中数据写入</td></tr><tr><td>void close()</td><td>关闭输出流，流关闭后不能再输出数据</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> javaIO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javaDUMP</title>
      <link href="/blog/2020/03/04/javaDUMP/"/>
      <url>/blog/2020/03/04/javaDUMP/</url>
      
        <content type="html"><![CDATA[<p>文章字数：217,阅读全文大约需要1分钟</p><blockquote><p><code>dump</code>是将虚拟机运行时的快照，将运行时信息保存到文件。分为线程<code>dump</code>纯文本、堆<code>dump</code>包含线程<code>dump</code>和堆对象，二进制。</p></blockquote><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><code>jdk</code>的<code>bin</code>目录下，包含<code>java</code>命令及常用工具</p><ol><li><code>jps</code>: 查看本机的<code>java</code>中进程信息</li><li><code>jstack</code>: 打印线程的栈信息，制作线程<code>dump</code></li><li><code>jmap</code>: 打印内存映射，制作堆<code>dump</code></li><li><code>jstat</code>: 性能监控工具</li><li><code>jhat</code>: 内存分析工具</li><li><code>jconsole</code>: 简易的可视化控制台</li><li><code>jvisualvm</code>: 功能强大的控制台</li></ol><h1 id="制作java-dump"><a href="#制作java-dump" class="headerlink" title="制作java dump"></a>制作java dump</h1><ol><li>虚拟机发送内存不足错误时，自动生成堆<code>dump</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure><ol start="2"><li><p>图形化工具制作<code>dump</code><br>使用<code>jdk</code>自带的工具<code>Java VisualVM</code></p></li><li><p>命令行制作</p></li></ol><ul><li><code>jstack</code>: 打印线程的栈信息，制作线程<code>dump</code></li><li><code>jmap</code>: 打印内存映射，制作堆<code>dump</code></li></ul><h1 id="查看进程pid"><a href="#查看进程pid" class="headerlink" title="查看进程pid"></a>查看进程pid</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CAS</title>
      <link href="/blog/2020/03/04/CAS/"/>
      <url>/blog/2020/03/04/CAS/</url>
      
        <content type="html"><![CDATA[<p>文章字数：291,阅读全文大约需要1分钟</p><blockquote><p>CAS（Compare-and-Swap），比较并替换。java并发包中很多类都采用了CAS技术，当获取到的内存地址和期待的内存地址相等时才将值修改，否则将或获取到的新地址变成期望地址，并循环进行下一次判断，直到成功赋值。保证代码的原子性。</p></blockquote><h1 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger race = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    race.getAndIncrement();<span class="comment">//原子操作，race++</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CAS缺点"><a href="#CAS缺点" class="headerlink" title="CAS缺点"></a>CAS缺点</h1><ul><li>循环时间开销可能会很大</li><li>只能保证一个共享变量进行原子操作</li><li>ABA问题：一个变量在读取时是A,准备赋值时检测也是A。但是可能是从A变成B,又从B变成了A,发生过变化。<br>带有标记的引用类<code>AtomicStampedReference</code>可以通过控制变量的版本来保证CAS的正确</li></ul><h1 id="AtomicStampedReference"><a href="#AtomicStampedReference" class="headerlink" title="AtomicStampedReference"></a>AtomicStampedReference</h1><ol><li>循环1-1000<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; integer = <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> timeStamp = integer.getStamp();</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"timeStamp = "</span> + timeStamp);</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;           </span><br><span class="line">                       <span class="keyword">if</span>(integer.compareAndSet(integer.getReference(),integer.getReference()+<span class="number">1</span>,timeStamp,timeStamp+<span class="number">1</span>))&#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>integer.getStamp();</code>获取版本号</li><li><code>compareAndSet(预期对象，修改后，预期版本，修改后版本)</code>返回成功或失败，失败应该手动进入循环直到完成替换。</li></ul>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>注解AutoWrite匹配规则</title>
      <link href="/blog/2020/03/04/%E6%B3%A8%E8%A7%A3AutoWrite%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/"/>
      <url>/blog/2020/03/04/%E6%B3%A8%E8%A7%A3AutoWrite%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：37,阅读全文大约需要1分钟</p><ol><li>当只有一个实现类时直接匹配(优先类型)</li><li>多个实现类匹配name</li><li>name也匹配多个则报错</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>注解Import</title>
      <link href="/blog/2020/03/04/%E6%B3%A8%E8%A7%A3Import/"/>
      <url>/blog/2020/03/04/%E6%B3%A8%E8%A7%A3Import/</url>
      
        <content type="html"><![CDATA[<p>文章字数：54,阅读全文大约需要1分钟</p><blockquote><p>将普通类导入到<code>IOC</code>容器中的注解</p></blockquote><p>导入<code>Bean</code>的方法有</p><ol><li><code>@Bean</code>注解</li><li><code>@Controller</code> <code>@Service</code> <code>@Repository</code> <code>@Component</code>等注解类，使用<code>@ComponentScan</code>扫描包</li><li><code>@Import</code>方法注入（4.2之前只能导入配置类）</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java乐观锁悲观锁</title>
      <link href="/blog/2020/03/04/java%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81/"/>
      <url>/blog/2020/03/04/java%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：99,阅读全文大约需要1分钟</p><blockquote><p><strong>乐观锁</strong>默认读之后不会有修改，于是不上锁。但是更新的时候会判断期间有没有修改数据。<strong>悲观锁</strong>总是设想最坏的情况，读之后都会有人修改数据，于是拿数据的时候就会上锁。</p></blockquote><h1 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h1><ol><li><code>synchronized</code>cpu级别的锁机制</li><li>sql<code>lock tables</code></li></ol><h1 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h1><ol><li><code>CAS</code>(Compare and Swap 比较并交换)</li><li><code>jpa</code>的<code>@Version</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java事件驱动框架</title>
      <link href="/blog/2020/03/04/java%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6/"/>
      <url>/blog/2020/03/04/java%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：95,阅读全文大约需要1分钟</p><ol><li><p><code>Vert.x</code>是一款依托于<code>Netty</code>的事件驱动的框架，相对于传统的服务器架构，更加轻量级，高性能。</p></li><li><p><code>springWebFlux</code>是随着<code>Spring 5</code>推出的响应式web框架。基于<code>HTTP/Reactive Streams</code>，运行环境需要支持异步运行的环境，如<code>Netty</code>、<code>Undertow</code>。开发模式上支持<code>Spring WebMVC</code>风格的注解<code>@Controller</code> <code>RequestMapping</code>和java8的<code>lambda</code>风格函数。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>注解Configuration和注解bean</title>
      <link href="/blog/2020/03/04/%E6%B3%A8%E8%A7%A3Configuration%E5%92%8C%E6%B3%A8%E8%A7%A3bean/"/>
      <url>/blog/2020/03/04/%E6%B3%A8%E8%A7%A3Configuration%E5%92%8C%E6%B3%A8%E8%A7%A3bean/</url>
      
        <content type="html"><![CDATA[<p>文章字数：310,阅读全文大约需要1分钟</p><blockquote><p><code>@Configuration</code>和<code>@Bean</code>是Spring中常用的用于配置的Bean的两个注解(将<code>@Bean</code>注解的方法返回的类注入spring)</p></blockquote><h1 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h1><ul><li><p>定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;用于注解方法和注解的定义</span><br><span class="line">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br></pre></td></tr></table></figure></li><li><p>适用范围<br><code>@Bean</code>可作用于组件<code>@Component</code>，该注解及其扩展注解均可使用：<br><code>@Component</code>定义类为组件，并且注入Spring中<br><code>@Repository</code>定义DAO层<br><code>@Service</code>Service服务层类<br><code>@Controller</code>控制层类<br><code>@Configuration</code>标记这是一个配置Bean的类，通常和<code>@bean</code>一起使用。可以使用类中的其它@Bean注入的bean，其它不行。</p></li><li><p>作用</p><blockquote><p>用@Bean注解的方法：会实例化、配置并初始化返回一个新的对象，这个对象会由spring IoC 容器管理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于 (beam默认使用注解方法名作为bean的id)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;myService&quot; class&#x3D;&quot;com.acme.services.MyServiceImpl&quot;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>给bean起名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;指定名称</span><br><span class="line">@Bean(name &#x3D; &quot;myFoo&quot;)</span><br><span class="line">&#x2F;&#x2F;指定多个名字</span><br><span class="line">@Bean(name &#x3D; &#123; &quot;dataSource&quot;, &quot;subsystemA-dataSource&quot;, &quot;subsystemB-dataSource&quot; &#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h1><blockquote><p><code>@Configuration</code>和<code>@Component</code>区别在于<code>@Configuration</code>可以在注入类内依赖的Bean,即上一个方法注入的bean可以被下一个方法获取使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleConfiguration</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//直接调用上面的方法，在@Configuration中是使用上个方法注入的Bean而不是执行方法返回的新对象。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>热部署和热加载</title>
      <link href="/blog/2020/03/04/%E7%83%AD%E9%83%A8%E7%BD%B2%E5%92%8C%E7%83%AD%E5%8A%A0%E8%BD%BD/"/>
      <url>/blog/2020/03/04/%E7%83%AD%E9%83%A8%E7%BD%B2%E5%92%8C%E7%83%AD%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>文章字数：129,阅读全文大约需要1分钟</p><blockquote><p>一直分不清热部署和热加载，感觉上是一样的。其实不一样</p></blockquote><h1 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h1><ul><li>直接修改Java虚拟机中的字节码文件</li><li>内存不会释放</li><li>不安全，无法监控。</li><li>俗称开发者模式，一般是开发时候使用</li></ul><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><ul><li>重新打包war包</li><li>释放原有内存</li><li>不需要重新tomcat，不影响服务器中其它项目</li></ul><h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><ul><li>都能在改变代码后更新改变</li><li>静态文件都能够重新加载</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis-List和MQ的区别</title>
      <link href="/blog/2020/03/04/Redis-List%E5%92%8CMQ%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/blog/2020/03/04/Redis-List%E5%92%8CMQ%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：205,阅读全文大约需要1分钟</p><blockquote><p>redis和消息队列的区别在于消息队列拥有更完善的功能，redis是可以加入一些功能实现消息队列的</p></blockquote><h1 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h1><p>容错机制需要保证出错后信息还会被重新插入队列，在<code>redis</code>中需要手动<code>try</code> <code>catch</code>处理。在其他消息队列中都有提供容错机制，比如消息取出变为挂起状态，一定时间内没有删除就会重新插入队列。</p><h1 id="消息延迟"><a href="#消息延迟" class="headerlink" title="消息延迟"></a>消息延迟</h1><p>消息队列中有延迟的概念，取出后判断是否在延迟时间内，如果在则重新插入队列，达到延迟效果。</p><h1 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h1><p><code>redis</code>的推送方式注重快速而不保证推送成功<br>部分<code>MQ</code>可以做到虽然有延迟，但是保证推送成功。</p>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java压缩解压缩</title>
      <link href="/blog/2020/03/04/java%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
      <url>/blog/2020/03/04/java%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<p>文章字数：266,阅读全文大约需要1分钟</p><blockquote><p>封装了两个小功能，传入文件输出流，压缩一个/多个文件到压缩文件。传入压缩文件地址和解压缩的文件夹，解压（文件夹会被覆盖）</p></blockquote><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zipTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     *            读取的文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     *            输出的压缩文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     *            压缩进去的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zipFile</span><span class="params">(FileInputStream inputStream, ZipOutputStream outputStream, String fileName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 新建一个压缩条目（相对路径）</span></span><br><span class="line">        outputStream.putNextEntry(<span class="keyword">new</span> ZipEntry(fileName));</span><br><span class="line">        <span class="comment">// 写入这个条目</span></span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream, <span class="number">512</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">            <span class="keyword">while</span> ((index = bufferedInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buffer, <span class="number">0</span>, index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭条目，并等待下个条目</span></span><br><span class="line">        outputStream.closeEntry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件父级目录</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createParentPath</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        File parentFile = file.getParentFile();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != parentFile &amp;&amp; !parentFile.exists()) &#123;</span><br><span class="line">            parentFile.mkdirs(); <span class="comment">// 创建文件夹</span></span><br><span class="line">            createParentPath(parentFile); <span class="comment">// 递归创建父级目录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压缩</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fromZip</span></span><br><span class="line"><span class="comment">     *            目标压缩文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toPath</span></span><br><span class="line"><span class="comment">     *            解压地址（存在则覆盖此目录）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompressionFile</span><span class="params">(String fromZip, String toPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File baseFile = <span class="keyword">new</span> File(toPath);</span><br><span class="line">        <span class="keyword">if</span> (baseFile.exists()) &#123;</span><br><span class="line">            baseFile.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        File zipFile = <span class="keyword">new</span> File(fromZip);</span><br><span class="line">        ZipInputStream inputStream = <span class="keyword">new</span> ZipInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(zipFile), <span class="number">255</span>));</span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">255</span>];</span><br><span class="line">        <span class="keyword">while</span> ((entry = inputStream.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String filePath = baseFile.toPath().toString() + <span class="string">"\\"</span> + entry.getName();</span><br><span class="line">            createParentPath(<span class="keyword">new</span> File(filePath));</span><br><span class="line">            Files.createFile(Paths.get(filePath));</span><br><span class="line">            FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(Paths.get(filePath).toFile());</span><br><span class="line">            <span class="keyword">while</span> ((length = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 压缩测试</span></span><br><span class="line">            <span class="comment">// 压缩包名字</span></span><br><span class="line">            String zipPathStr =</span><br><span class="line">                <span class="string">"F:\\cache\\test.zip"</span>;</span><br><span class="line">            <span class="keyword">try</span> (ZipOutputStream zipOutputStream = <span class="keyword">new</span> ZipOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(zipPathStr)))) &#123;</span><br><span class="line">                <span class="comment">// 模拟压缩三份文件进去</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    String filePathStr =</span><br><span class="line">                        <span class="string">"F:\\cache\\test.xls"</span>;</span><br><span class="line">                    File file = <span class="keyword">new</span> File(filePathStr);</span><br><span class="line">                    <span class="keyword">try</span> (FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file)) &#123;</span><br><span class="line">                        <span class="comment">// all/1test.xls all为指定的目录</span></span><br><span class="line">                        zipFile(fileInputStream, zipOutputStream, <span class="string">"all/"</span> + i + file.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解压测试</span></span><br><span class="line">            decompressionFile(</span><br><span class="line">                <span class="string">"F:\\cache\\test.zip"</span>,</span><br><span class="line">                <span class="string">"F:\\cache\\test"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>head标签内元素使用</title>
      <link href="/blog/2020/03/04/head%E6%A0%87%E7%AD%BE%E5%86%85%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/03/04/head%E6%A0%87%E7%AD%BE%E5%86%85%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：391,阅读全文大约需要1分钟</p><blockquote><p>head标签里的元素一般为不显示，或者有特殊用途的。</p></blockquote><h1 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h1><p>一般用来控制移动端访问效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1,minimum-scale&#x3D;1,maximum-scale&#x3D;1,user-scalable&#x3D;no&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><ul><li>width : 控制viewport的大小，可以指定一个值，如600， 或者特殊的值，如device-width为设备的宽度（单位为缩放为100%的CSS的像素）</li><li>height : 和width相对应，指定高度</li><li>initial-scale : 初始缩放比例，页面第一次加载时的缩放比例</li><li>maximum-scale : 允许用户缩放到的最大比例，范围从0到10.0</li><li>minimum-scale : 允许用户缩放到的最小比例，范围从0到10.0</li><li>user-scalable : 用户是否可以手动缩放，值可以是：①yes、 true允许用户缩放；②no、false不允许用户缩放</li></ul><h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta  name&#x3D;&quot;Generator&quot;  content&#x3D;&quot;&quot;&gt;     </span><br><span class="line"> &lt;!--向搜索引擎说明你的网页的关键词--&gt;</span><br><span class="line">&lt;meta  name&#x3D;&quot;Keywords&quot;    content&#x3D;&quot;&quot;&gt; </span><br><span class="line">&lt;!-- 告诉搜索引擎你的站点的主要内容--&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;Description&quot;  content&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;!-- 网站logo图片--&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;icon&quot; type&#x3D;&quot;image&#x2F;ico&quot; href&#x3D;&quot;&#x2F;favicon.ico&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>input输入框图片转base64</title>
      <link href="/blog/2020/03/04/input%E8%BE%93%E5%85%A5%E6%A1%86%E5%9B%BE%E7%89%87%E8%BD%ACbase64/"/>
      <url>/blog/2020/03/04/input%E8%BE%93%E5%85%A5%E6%A1%86%E5%9B%BE%E7%89%87%E8%BD%ACbase64/</url>
      
        <content type="html"><![CDATA[<p>文章字数：287,阅读全文大约需要1分钟</p><blockquote><p>封装了几个方法，主要是传入input对象，将对象选中的文件转程base64形式。可以用于图片上传，图片选中后马上显示等功能</p></blockquote><p><strong>1.读取input对象图片，并调用2执行压缩</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input对象内的图片转Base64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>inputOb input对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>outputFun 转换后执行的函数，有一个base64的形参</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inputImgToBase64</span>(<span class="params">inputOb,outputFun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file=inputOb.files[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="regexp">/image\/\w+/</span>.test(file.type))<span class="comment">//判断获取的是否为图片文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        alert(<span class="string">"请确保文件为图像文件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> reader=<span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.onload=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        <span class="comment">//文件类型</span></span><br><span class="line">        image.imgType = file.type;</span><br><span class="line">        <span class="comment">//保存后缀</span></span><br><span class="line">        <span class="keyword">var</span> fileNameList = file.name.split(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">var</span> fileType = fileNameList[fileNameList.length<span class="number">-1</span>];</span><br><span class="line">        $(<span class="string">'#photoType'</span>).attr(<span class="string">'value'</span>,fileType);</span><br><span class="line"></span><br><span class="line">        image.src = e.target.result;</span><br><span class="line">        image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> expectWidth = <span class="number">480</span>;</span><br><span class="line">            <span class="keyword">var</span> expectHeight = <span class="number">640</span>;</span><br><span class="line">            <span class="keyword">var</span> base64 = compress(<span class="keyword">this</span>,expectWidth,expectHeight,<span class="number">1</span>);</span><br><span class="line">            outputFun(base64);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.图片转base64</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片转base64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>img img对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">width</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>ratio 比例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">base64Img</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compress</span>(<span class="params">img, width, height, ratio</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas, ctx, img64;</span><br><span class="line">    canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">    canvas.width = width;</span><br><span class="line">    canvas.height = height;</span><br><span class="line">    ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    img64 = canvas.toDataURL(img.imgType, ratio);</span><br><span class="line">    <span class="keyword">return</span> img64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用方式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input对象，函数</span></span><br><span class="line">inputImgToBase64($(<span class="string">'#inputPhoto'</span>)[<span class="number">0</span>],<span class="function"><span class="keyword">function</span> (<span class="params">base64</span>) </span>&#123;<span class="comment">//base64为转换后图像的base64编码</span></span><br><span class="line">            $(<span class="string">'#output'</span>)[<span class="number">0</span>].src=base64</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java反射</title>
      <link href="/blog/2020/03/04/java%E5%8F%8D%E5%B0%84/"/>
      <url>/blog/2020/03/04/java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>文章字数：143,阅读全文大约需要1分钟</p><blockquote><p>反射是在软件运行时可以获取类信息的一种java机制</p></blockquote><h1 id="获取类信息的方式"><a href="#获取类信息的方式" class="headerlink" title="获取类信息的方式"></a>获取类信息的方式</h1><p>有两种：</p><ol><li><code>RTTI</code>，编译器在编译时打开和检查.class文件</li><li>反射，运行时打开和检查.class文件</li></ol><h1 id="反射获取信息的代码"><a href="#反射获取信息的代码" class="headerlink" title="反射获取信息的代码"></a>反射获取信息的代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class clazz = Main<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Object object = clazz.newInstance();</span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        Method method = clazz.getDeclaredMethod(<span class="string">"sayHello"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        method.invoke(object,<span class="string">"324"</span>,<span class="string">"345"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>method.setAccessible(true)</code>在反射对象中设置 accessible 标志允许具有足够特权的复杂应用程序（比如 Java Object Serialization 或其他持久性机制）以某种通常禁止使用的方式来操作对象。私有方法不用开启。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网页转换成阿拉伯语风格</title>
      <link href="/blog/2020/03/04/%E7%BD%91%E9%A1%B5%E8%BD%AC%E6%8D%A2%E6%88%90%E9%98%BF%E6%8B%89%E4%BC%AF%E8%AF%AD%E9%A3%8E%E6%A0%BC/"/>
      <url>/blog/2020/03/04/%E7%BD%91%E9%A1%B5%E8%BD%AC%E6%8D%A2%E6%88%90%E9%98%BF%E6%8B%89%E4%BC%AF%E8%AF%AD%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：15,阅读全文大约需要1分钟</p><blockquote><p>阿拉伯语风格就是文字从右到左</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">direction</span>: rtl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程封闭背后设计思想</title>
      <link href="/blog/2020/03/04/%E7%BA%BF%E7%A8%8B%E5%B0%81%E9%97%AD%E8%83%8C%E5%90%8E%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
      <url>/blog/2020/03/04/%E7%BA%BF%E7%A8%8B%E5%B0%81%E9%97%AD%E8%83%8C%E5%90%8E%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>文章字数：875,阅读全文大约需要3分钟</p><blockquote><p>整理自<a href="[https://blog.csdn.net/ITer_ZC/article/details/39546405](https://blog.csdn.net/ITer_ZC/article/details/39546405)">聊聊高并发（二）结合实例说说线程封闭和背后的设计思想</a></p></blockquote><h1 id="高并发问题简述"><a href="#高并发问题简述" class="headerlink" title="高并发问题简述"></a>高并发问题简述</h1><ol><li><code>定义</code>: 来自《java并发变成实战》的定义。线程安全指的是多个线程访问某个类时，这个类始终能表现正确行为。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我的理解是线程安全问题就是多个线程同时操作一个数据，</span><br><span class="line">导致每个线程在读取并操作期间数据可能会被其它线程篡改，</span><br><span class="line">即不能表现正确行为。</span><br><span class="line">而栈空间（方法栈）的数据是线程私有的，所以只有类有这个问题。</span><br></pre></td></tr></table></figure><ol start="2"><li><code>思路</code>: 线程安全问题，就是对象状态问题。如果对象无状态(不变性，操作前后一样。)，或者避免多个线程共享，那就是线程安全的。只有对象不可避免要被多个线程操作时才会有多线程问题。所以业务代码尽量做到无状态。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">思考流程</span><br><span class="line">1. 能否做成无状态的不变对象</span><br><span class="line">2. 能否线程封闭，不让其他线程操作</span><br><span class="line">3. 实在需要多线程操作，那么采用什么同步技术</span><br></pre></td></tr></table></figure><h1 id="线程封闭技术"><a href="#线程封闭技术" class="headerlink" title="线程封闭技术"></a>线程封闭技术</h1><ol><li><code>栈封闭</code>: 多使用局部变量，局部变量属于方法，方法属于栈，栈属于本线程。</li><li><code>ThreadLocal</code>: 限制其他线程访问的全局变量。本质是一个Map，每个线程只能操作自己作为key下的值。</li><li><code>程序控制线程封闭</code>: 思想，把处理对象状态的代码放到一个线程中。例子：<code>Netty</code>，<code>EventLoop</code>被设计成一个线程池（工作线程+任务队列）。请求被插入任务队列，工作线程再一个个取。这样保证了请求有序处理。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">1. 把用户状态相关代码放到一个队列中，由一个线程处理。</span><br><span class="line">2. 考虑是否隔离用户之间状态，及一个用户一个任务队列还是多个用户使用一个。</span><br></pre></td></tr></table></figure><p>一般设计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 有界任务队列和不限个数的工作线程，任务队列有界保证不会内存被一直加入的请求撑爆。不限个数的工作线程保证任务队列的请求都能被相应，而不至于以为工作线程的速度慢而产生积压。</span><br><span class="line">2. 线程请求尽量快，尽量不超过100ms</span><br><span class="line">3. 单线程处理时间由于任务大而耗时可以拆解成小任务多次执行</span><br><span class="line">4. 小任务还是慢则可以使用线程，异步处理，然后使用线程定时查看状态或者回调函数的形式。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java多线程基础部分</title>
      <link href="/blog/2020/03/04/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
      <url>/blog/2020/03/04/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1407,阅读全文大约需要5分钟</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>进程:进程拥有独立的代码和数据空间，是资源分配的最小单位。一个进程可以包含一个或多个线程。</li><li>线程:同一类的线程共享代码和数据空间，每个线程都拥有独立的运行栈和程序计数器。线程是cpu调度的最小单位。</li><li>进程/线程 的五个状态:<strong>创建</strong>、<strong>就绪</strong>、<strong>运行</strong>、<strong>阻塞</strong>、<strong>终止</strong></li><li>多进程代表操作系统可运行多程序，线程代表程序里运行多个顺序流</li></ul><h1 id="创建java线程"><a href="#创建java线程" class="headerlink" title="创建java线程"></a>创建java线程</h1><p>java创建线程有三种方法</p><ul><li>基础Thread类</li><li>实现Runable接口</li><li>实现Callable接口，配合Future、线程池</li></ul><p>继承<code>Thread</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threadLearn</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadLearn learn = <span class="keyword">new</span> ThreadLearn ();</span><br><span class="line">        learn.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>java.lang.Runnable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadLearn</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadLearn learn = <span class="keyword">new</span> ThreadLearn ();</span><br><span class="line">        learn.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>start()</code>方法使线程变成可运行状态<code>Runnable</code>,操作系统决定何时调用运行。</li><li><code>start()</code>方法重复调用会抛出<code>java.lang.IllegalThreadStateException</code>异常</li><li><code>run()</code>方法是多线程程序的一个约定，所有的多线程代码都要写在里面。</li></ol><p><strong><code>Thread</code>和<code>Runnable</code>比较</strong></p><ol><li><code>Thread</code>本质上是实现了<code>Runnable</code>接口。</li><li><code>Thread</code>类实现了<code>Runnable</code>并在其之上进行了拓展。</li></ol><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p><img src="https://upload-images.jianshu.io/upload_images/17243965-bbb604a692d140fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线程状态转换"></p><table><thead><tr><th>线程状态</th><th>状态分类</th><th>描述</th></tr></thead><tbody><tr><td>新建状态<code>New</code></td><td>-</td><td>新创建了一个线程对象</td></tr><tr><td>就绪状态<code>Runnable</code></td><td>-</td><td>其它线程调用了该线程的<code>start()</code>方法，线程变为可运行</td></tr><tr><td>运行状态<code>Running</code></td><td>-</td><td>就绪状态的线程被系统调用。</td></tr><tr><td>阻塞状态<code>Blocked</code></td><td>-</td><td>分为三种情况</td></tr><tr><td>阻塞状态</td><td>等待阻塞</td><td>运行的线程执行<code>wait()</code>方法</td></tr><tr><td>阻塞状态</td><td>同步阻塞</td><td>获取同步锁时锁被其它线程占用，jvm会把该线程放入锁池之中</td></tr><tr><td>阻塞状态</td><td>其它阻塞</td><td>线程运行<code>sleep()</code>或<code>join()</code>的线程结束或发出I/O请求。<code>sleep</code>不会释放锁</td></tr><tr><td>死亡状态</td><td>-</td><td>线程执行完毕或异常退出</td></tr></tbody></table><h1 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h1><ol><li><strong>线程优先级</strong></li></ol><ul><li>Thread的<code>setPriortity()</code>和<code>getPriortity()</code>管理优先级</li><li>优先级取值1~10整数，推荐使用常量，这三个级别的<strong>可移植性</strong>好。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static int MAX_PRIORITY&#x3D;10;</span><br><span class="line">static int NORM_PRIORITY&#x3D;5;&#x2F;&#x2F;默认</span><br><span class="line">static int MIN_PRIORITY&#x3D;1;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p><strong>线程睡眠</strong><br><code>Thread.sleep(long millis)</code>:设定线程阻塞时间，阻塞结束后进入就绪状态。</p></li><li><p><strong>线程等待</strong><br><code>Object</code>类中的<code>wait()</code>方法，导致当前线程等待，直到其它线程调用此对象的<code>notify()</code>方法或者<code>notifyAll()</code>唤醒，等价于<code>wait(0)</code></p></li><li><p><strong>线程让步</strong><br><code>Thread.yield()</code>暂停当前正在执行的线程对象，把执行的机会让给优先级相同或更高的线程。</p></li><li><p><strong>线程加入</strong><br><code>join()</code>当前线程进入阻塞态，调用其它线程，该线程运行完毕后当前线程再进入就绪态。</p></li><li><p><strong>线程唤醒</strong><br><code>Object</code>类的<code>notify()</code>方法，唤醒对象监听器上一个线程，如果有多个线程在此对象上等待，则唤醒随机一个。<code>notifyAll()</code>唤醒所有该对象上等待的线程。<br><code>wait()</code>和<code>sleep()</code>都可以通过<code>interrupt()</code>方法 打断线程的暂停状态 ，从而使线程立刻抛出<code>InterruptedException</code>。</p></li></ol><blockquote><p><code>sleep</code>方法不会释放锁，<code>wait</code>会<br> <code>wait</code>，<code>notify</code>和<code>notifyAll</code>只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用 </p></blockquote><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><ul><li><code>sleep()</code>: 强迫一个线程睡眠Ｎ毫秒。 </li><li><code>isAlive()</code>: 判断一个线程是否存活。 </li><li><code>join()</code>: 等待线程终止。 </li><li><code>activeCount()</code>: 程序中活跃的线程数。 </li><li><code>enumerate()</code>: 枚举程序中的线程。 </li><li><code>currentThread()</code>: 得到当前线程。 </li><li><code>isDaemon()</code>: 一个线程是否为守护线程。 </li><li><code>setDaemon()</code>: 设置一个线程为守护线程。(用户线程和守护线程的区别在于没有用户线程后守护线程终止) </li><li><code>setName()</code>: 为线程设置一个名称。 </li><li><code>wait()</code>: 强迫一个线程等待。 </li><li><code>notify()</code>: 通知一个线程继续运行。 </li><li><code>setPriority()</code>: 设置一个线程的优先级。</li></ul><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><blockquote><p><code>synchronized</code><strong>[ˈsɪŋkrənaɪzd]</strong>是系统级的锁，一旦锁死除了线程自行释放没有其它方法。juc的lock锁是编码级别的，可以代码解锁。juc(<code>java.util.concurrent</code>)下次讨论</p></blockquote><ul><li><code>synchronized</code>在对象里:标记于方法或是代码块都是对对象加锁。只要对象中出发了锁，整个对象都无法进入。</li><li><code>synchronized</code>标记于静态方法，则是对于类加锁，和对象锁不冲突</li></ul><h1 id="线程数据传递"><a href="#线程数据传递" class="headerlink" title="线程数据传递"></a>线程数据传递</h1><blockquote><p>同步情况下使用参数传入，return返回的形式，多线程下运行和结束是不可预料的，所以无法和同步一样传参。</p></blockquote><ol><li><p><strong>使用构造方法传参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程使用构造函数就收这个参数</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> MyThread1(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>set方法</strong><br>线程里先设置set方法接受参数（不用多说了吧）<br>然后start()之前设置参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyThread2 myThread = <span class="keyword">new</span> MyThread2();   </span><br><span class="line">myThread.setName(<span class="string">"hello world"</span>);   </span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(myThread);   </span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure></li><li><p>回调函数</p><blockquote><p>将对象传入线程，线程在某一时间调用对象的函数。主线程通过传入的对象获取线程操作后的值。(还有静态类)</p></blockquote></li><li><p>声明lambda函数的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICallback</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callback</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线程调用接口返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doStm</span><span class="params">(<span class="keyword">final</span> ICallback callback)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// 初始化一个线程  </span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 这里是业务逻辑处理  </span></span><br><span class="line">                System.out.println(<span class="string">"子线任务执行:"</span>+Thread.currentThread().getId());</span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 为了能看出效果 ，让当前线程阻塞5秒  </span></span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 处理完业务逻辑，  </span></span><br><span class="line">                Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">                params.put(<span class="string">"a1"</span>, <span class="string">"这是我返回的参数字符串..."</span>);</span><br><span class="line">                callback.callback(params);</span><br><span class="line">            &#125;;  </span><br><span class="line">        &#125;;  </span><br><span class="line">  </span><br><span class="line">        es.execute(t);</span><br><span class="line">        <span class="comment">//一定要调用这个方法，不然executorService.isTerminated()永远不为true</span></span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doStm((params)-&gt;&#123;</span><br><span class="line">           System.out.println(<span class="string">"单个线程也已经处理完毕了，返回参数a1="</span> + params.get(<span class="string">"a1"</span>));</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义类加载器</title>
      <link href="/blog/2020/03/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/blog/2020/03/04/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：107,阅读全文大约需要1分钟<br>1.自定义类加载器， 实现<code>findClass</code>方法。<code>loadClass</code>在找不到类时会调用此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                String filePath = <span class="string">"/Users/zhanjun/Desktop/"</span> + name.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</span><br><span class="line">                <span class="comment">//指定读取磁盘上的某个文件夹下的.class文件：</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">                fis.read(bytes);</span><br><span class="line">                <span class="comment">//调用defineClass方法，将字节数组转换成Class对象</span></span><br><span class="line">                Class&lt;?&gt; clazz = <span class="keyword">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">                fis.close();</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz0 = <span class="keyword">new</span> MyClassLoader().loadClass(<span class="string">"com.sankuai.discover.memory.OOM"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>获取当前时间</title>
      <link href="/blog/2020/03/04/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
      <url>/blog/2020/03/04/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：197,阅读全文大约需要1分钟</p><blockquote><p>java获取当前时间可以使用 System.currentTimeMillis()获取当前毫秒数，也可以直接new Date()获取当前日期类，date.getTime()获取毫秒数</p></blockquote><h1 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h1><p>Date的无参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>本质上也是调用System.currentTimeMillis()，所以如果需要获取当前毫秒数，<code>System.currentTimeMillis()</code>比起<code>new Date().getTime()</code>少了引用及转换，效率更高。</p><h1 id="精确度"><a href="#精确度" class="headerlink" title="精确度"></a>精确度</h1><p><code>System.currentTimeMillis()</code>依赖系统底层实现，精确度无法保证。毫秒级别的时间，测量从1970年1月1日0到现在的毫秒数。<br><code>System.nanoTime</code>也是依赖系统底层实现，但是精度为纳秒。此方法依赖cpu自身的计时器，所以不同机器返回的时间不同，只能用作计算某一时间内的时间差。</p><p>纳秒转换成毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.nanoTime()/<span class="number">1000000L</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java启动命令参数</title>
      <link href="/blog/2020/03/04/java%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/"/>
      <url>/blog/2020/03/04/java%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：927,阅读全文大约需要3分钟</p><blockquote><p>java程序通过<code>java -option</code>启动，其中java程序为jdk安装目录下<code>bin</code>文件夹中的<code>java</code>可执行程序，<code>-option</code>为虚拟机参数。</p></blockquote><p><code>java</code>运行参数分为三大类</p><ol><li>基本参数: <code>-</code>所有虚拟机都需要具备的功能，并且向后兼容</li><li>非标准参数: <code>-X</code>默认jvm都实现这些功能但是不保证所有的jvm都能满足，且不保证向后兼容</li><li>非Stable参数: <code>-XX</code>不稳定参数，各个jvm实现会不相同，未来随时会取消。慎重使用</li></ol><h1 id="标准参数"><a href="#标准参数" class="headerlink" title="标准参数"></a>标准参数</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-client</td><td>设置虚拟机使用client模式启动，运行速度快，但是性能和内存管理效率不如server。</td></tr><tr><td>-server</td><td>设置虚拟机使用server模式启动，64位下默认启动，忽略-client</td></tr><tr><td>-classpath或-cp</td><td>告知虚拟机搜索的目录、jar文件、zip文档名，用<code>;</code>隔开。注1</td></tr><tr><td>-D<propertyName>=value</td><td>在虚拟机系统属性中设置属性名/值的键值对，可在运行时<code>System.getProperty(&quot;propertyName&quot;)</code>获取值，有空格需要使用双引号-Dname=”space string”</td></tr><tr><td>-verbose/-verbose:class</td><td>输出虚拟机装入的类的信息，显示格式注2</td></tr><tr><td>-verbose:gc</td><td>虚拟机内存回收时在输出设备显示信息，格式注3</td></tr><tr><td>-verbose:jni</td><td>虚拟机调用native方法时输出信息，格式注4</td></tr><tr><td>-version</td><td>显示可运行虚拟机版本信息然后退出</td></tr><tr><td>-showversion</td><td>显示产品版本并继续</td></tr><tr><td>-ea</td><td>开启断言，同下</td></tr><tr><td>-enableassertions[:<packagename>…</td><td>:<classname>]</td></tr><tr><td>-da/disableassertions</td><td>关闭断言，其它同上</td></tr><tr><td>-esa/enablesystemassertions</td><td>设置虚拟机显示系统类的断言</td></tr><tr><td>-dsa/disablesystemassertions</td><td>关闭系统类的断言</td></tr><tr><td>-agentlib:<libname>[=<options>]</td><td>虚拟机装载本地代理库，参数未name=xx=1,yy=2这样的格式。windows下找libname.dll，unix下找libname.so文件。搜索路径不同系统不一样。注5</td></tr><tr><td>-agentpath:<pathname>[=<options>]</td><td>设置虚拟机本地库路径，其它和上面一样</td></tr><tr><td>-javaagent:<pathname>[=<options>]</td><td>设置启动时装入java语言的设备代理，注6</td></tr></tbody></table><p>注：</p><ol><li><p><code>-classpath</code>:虚拟机在运行一个类时，需要将其装入内存虚拟机搜索的顺序为<code>Bootstrap classes</code>-<code>Extension classes</code>-<code>User classes</code>。其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. &#96;Bootstrap classes&#96;是虚拟机自带的 &#96;jar&#96;或者&#96;zip&#96;文件，虚拟机搜索这些包的文件，使用&#96;System.getProperty(&quot;sun.boot.class.path&quot;)&#96;可以得到虚拟机所搜的包名。</span><br><span class="line">2. &#96;Extension classes&#96;是位于&#96;jre&#96; &#96;lib&#96; &#96;ext&#96;下的jar文件，使用&#96;System.getProperty(&quot;java.ext.dirs&quot;)&#96;可获得&#96;Extension&#96;搜索路径</span><br><span class="line">3. &#96;User classes&#96;搜索的顺序为当前目录，环境变量CLASSPATH、-classpath</span><br><span class="line">使用&#96;-classpath&#96;后虚拟机不再使用环境变量&#96;CLASSPATH&#96;作为搜索路径。</span><br></pre></td></tr></table></figure></li><li><p><code>-verbose:class</code>:展示类信息为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Loaded java.io.FilePermission$1 from shared objects file]</span><br><span class="line">当虚拟机报告类找不到或类冲突时可用此参数来诊断来查看虚拟机从装入类的情况</span><br></pre></td></tr></table></figure></li><li><p><code>-verbose:gc</code>:显示gc格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Full GC 268K-&gt;168K(1984K), 0.0187390 secs]</span><br><span class="line">该参数用来监视虚拟机内存回收的情况。</span><br></pre></td></tr></table></figure></li><li><p><code>-verbose:jni</code>:显示jvm调用<code>native</code>方法时输出信息格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Dynamic-linking native method HelloNative.sum ... JNI]</span><br><span class="line">该参数用来监视虚拟机调用本地方法的情况，在发生jni错误时可为诊断提供便利。</span><br></pre></td></tr></table></figure></li><li><p><code>-agentlib:&lt;libname&gt;[=&lt;options&gt;]</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如可使用-agentlib:hprof来获取虚拟机的运行情况，包括CPU、内存、线程等的运行数据，并可输出到指定文件中，可用-agentlib:hprof&#x3D;help来得到使用帮助列表。在jre&quot;bin目录下可发现hprof.dll文件。</span><br></pre></td></tr></table></figure></li><li><p><code>-javaagent:&lt;jarpath&gt;[=&lt;options&gt;]</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虚拟机启动时装入java语言设备代理。Jarpath文件中的mainfest 文件必须有Agent-Class属性。代理类要实现public static void premain(String agentArgs, Instrumentation inst)方法。当虚拟机初始化时，将按代理类的说明顺序调用premain方法。</span><br></pre></td></tr></table></figure></li></ol><h1 id="拓展参数"><a href="#拓展参数" class="headerlink" title="拓展参数"></a>拓展参数</h1><p><a href="https://www.cnblogs.com/jtlgb/p/8466138.html" target="_blank" rel="noopener">https://www.cnblogs.com/jtlgb/p/8466138.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java文件删除</title>
      <link href="/blog/2020/03/04/java%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4/"/>
      <url>/blog/2020/03/04/java%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：20,阅读全文大约需要1分钟</p><blockquote><p>封装了一个删除文件的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteFile</span><span class="params">(String fileName)</span> </span>&#123;<span class="comment">//传入绝对路径</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">    <span class="keyword">if</span> (file.exists() &amp;&amp; file.isFile() || file.exists() &amp;&amp; file.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>过滤器</title>
      <link href="/blog/2020/03/04/%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/blog/2020/03/04/%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：191,阅读全文大约需要1分钟</p><blockquote><p>注解创建过滤器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xc.common.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: FilterDemo01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:filter的三种典型应用： &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *                             1、可以在filter中根据条件决定是否调用chain.doFilter(request, response)方法， 即是否让目标资源执行&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *                             2、在让目标资源执行之前，可以对request\response作预处理，再让目标资源执行 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *                             3、在目标资源执行之后，可以捕获目标资源的执行结果，从而实现一些特殊的功能 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"FilterDemo01"</span>, urlPatterns = &#123; <span class="string">"/*"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo01</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----FilterDemo01过滤器初始化----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对request和response进行一些预处理</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"FilterDemo01执行前！！！"</span>);</span><br><span class="line">        chain.doFilter(request, response); <span class="comment">// 让目标资源执行，放行</span></span><br><span class="line">        System.out.println(<span class="string">"FilterDemo01执行后！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----过滤器销毁----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>自旋锁</title>
      <link href="/blog/2020/03/04/%E8%87%AA%E6%97%8B%E9%94%81/"/>
      <url>/blog/2020/03/04/%E8%87%AA%E6%97%8B%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：650,阅读全文大约需要2分钟</p><blockquote><p>自旋锁指的是线程在为获取到许可的情况下循环获取许可状态</p></blockquote><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol><li>TAS（Test And Set Lock）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TASLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始值为false；</span></span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean mutex=<span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回之前的值，并设置为true fixme 如果之前未true则进入自旋状态</span></span><br><span class="line">        <span class="comment">//fixme mutex之前状态时FALSE时才返回，表示获取到锁</span></span><br><span class="line">        <span class="comment">//原子变量的改动对所有线程都可见</span></span><br><span class="line">        <span class="keyword">while</span>(mutex.getAndSet(<span class="keyword">true</span>))&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mutex.set(<span class="keyword">false</span>);<span class="comment">//fixme ?释放锁？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TASLockMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TASLock cost=<span class="keyword">new</span> TASLock ();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//自旋获取许可</span></span><br><span class="line">        cost.lock();</span><br><span class="line">        <span class="comment">//释放许可</span></span><br><span class="line">        cost.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            Thread t=<span class="keyword">new</span> Thread(()-&gt; func());</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不停的设置值会造成不停通知其他芯片值更改，产生缓存一致性风暴</p></blockquote><ol start="2"><li>TTASLock（Test Test And Set Lock）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test.lock;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试-测试-设置自旋锁，使用AtomicBoolean原子变量保存状态</span></span><br><span class="line"><span class="comment"> * 分为两步来获取锁</span></span><br><span class="line"><span class="comment"> * 1. 先采用读变量自旋的方式尝试获取锁</span></span><br><span class="line"><span class="comment"> * 2. 当有可能获取锁时，再使用getAndSet原子操作来尝试获取锁</span></span><br><span class="line"><span class="comment"> * 优点是第一步使用读变量的方式来获取锁，在处理器内部高速缓存操作，不会产生缓存一致性流量</span></span><br><span class="line"><span class="comment"> * 缺点是当锁争用激烈的时候，第一步一直获取不到锁，getAndSet底层使用CAS来实现，一直在修改共享变量的值，会引发缓存一致性流量风暴</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTASLock</span> <span class="keyword">implements</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> AtomicBoolean mutex = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">// 第一步使用读操作，尝试获取锁，当mutex为false时退出循环，表示可以获取锁</span></span><br><span class="line"><span class="keyword">while</span>(mutex.get())&#123;&#125;</span><br><span class="line"><span class="comment">// 第二部使用getAndSet方法来尝试获取锁</span></span><br><span class="line"><span class="keyword">if</span>(!mutex.getAndSet(<span class="keyword">true</span>))&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mutex.set(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"TTASLock"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>先查看是否可用再设置，少了cas次数。但是在高征用的情况下会导致多次操作才能获取到锁，增加cas次数</p></blockquote><ol start="3"><li>回退算法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test.lock;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回退算法，降低锁争用的几率</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Backoff</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> minDelay, maxDelay;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Random random;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Backoff</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.minDelay = min;</span><br><span class="line"><span class="keyword">this</span>.maxDelay = max;</span><br><span class="line">limit = minDelay;</span><br><span class="line">random = <span class="keyword">new</span> Random();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回退，线程等待一段时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backoff</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line"><span class="keyword">int</span> delay = random.nextInt(limit);</span><br><span class="line">limit = Math.min(maxDelay, <span class="number">2</span> * limit);</span><br><span class="line">Thread.sleep(delay);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.test.lock;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回退自旋锁，在测试-测试-设置自旋锁的基础上增加了线程回退，降低锁的争用</span></span><br><span class="line"><span class="comment"> * 优点是在锁高争用的情况下减少了锁的争用，提高了执行的性能</span></span><br><span class="line"><span class="comment"> * 缺点是回退的时间难以控制，需要不断测试才能找到合适的值，而且依赖底层硬件的性能，扩展性差</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackoffLock</span> <span class="keyword">implements</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_DELAY, MAX_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackoffLock</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">        MIN_DELAY = min;</span><br><span class="line">        MAX_DELAY = max;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean mutex = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 增加回退对象</span></span><br><span class="line">        Backoff backoff = <span class="keyword">new</span> Backoff(MIN_DELAY, MAX_DELAY);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 第一步使用读操作，尝试获取锁，当mutex为false时退出循环，表示可以获取锁</span></span><br><span class="line">            <span class="keyword">while</span>(mutex.get())&#123;&#125;</span><br><span class="line">            <span class="comment">// 第二部使用getAndSet方法来尝试获取锁</span></span><br><span class="line">            <span class="keyword">if</span>(!mutex.getAndSet(<span class="keyword">true</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//回退</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    backoff.backoff();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mutex.set(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TTASLock"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取失败后线程休眠一段时间，减少冲突概率。缺点是休眠时间不好设置，需要根据硬件条件调整参数。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java的引用类型以及值传递</title>
      <link href="/blog/2020/03/04/java%E7%9A%84%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%80%BC%E4%BC%A0%E9%80%92/"/>
      <url>/blog/2020/03/04/java%E7%9A%84%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%80%BC%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>文章字数：446,阅读全文大约需要1分钟</p><h1 id="值传递引用传递"><a href="#值传递引用传递" class="headerlink" title="值传递引用传递"></a>值传递引用传递</h1><ul><li><strong>函数内传递是值传递</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String test=<span class="string">"test1"</span>;</span><br><span class="line">       Ob that=<span class="keyword">new</span> Ob();</span><br><span class="line">       that.changeTest(test);</span><br><span class="line">       System.out.println(<span class="string">"test = "</span> + test);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeTest</span><span class="params">(String test)</span></span>&#123;</span><br><span class="line">        test=<span class="string">"test2"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：函数内的改变对外部变量无影响</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test &#x3D; test1</span><br></pre></td></tr></table></figure><p>函数内实参是值传递，即不会对原有对象造成影响<br>但是，如果传递的是一个对象（本质上是对象的引用地址）就会改变对象，因为即使是值传递，但是传递的地址指向是同一个对象。</p><ul><li><code>=</code><strong>符号是引用传递</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            te a =<span class="keyword">new</span> te();</span><br><span class="line">            te b = a;</span><br><span class="line">            <span class="comment">//仅修改内容</span></span><br><span class="line">            a.setName(<span class="string">"aaa"</span>);</span><br><span class="line">            b.setName(<span class="string">"bbb"</span>);</span><br><span class="line">            <span class="comment">//发现a也修改了</span></span><br><span class="line">            System.out.println(<span class="string">"a.getName() = "</span> + a.getName());</span><br><span class="line">            <span class="comment">// == 符号是判断对象地址是否相同，结果是相同</span></span><br><span class="line">            System.out.print(<span class="string">"a==b? "</span>);</span><br><span class="line">            System.out.println(a==b);</span><br><span class="line">            <span class="comment">//输出一下对象的地址，发现果然一样</span></span><br><span class="line">            System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">            System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">te</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.getName() &#x3D; bbb</span><br><span class="line">a&#x3D;&#x3D;b? true</span><br><span class="line">a &#x3D; te@3f91beef</span><br><span class="line">b &#x3D; te@3f91beef</span><br></pre></td></tr></table></figure><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><blockquote><p>这让我想起了之前看到的一个知识点，<code>==</code>和<code>Object.equals()</code>的区别。</p></blockquote><ul><li><code>==</code>判断的是地址是否相同</li><li><code>Object.equals()</code>是用来判断对象是否相同的方法，内部默认调用的是<code>==</code>来判断。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ob a = <span class="keyword">new</span> Ob ();</span><br><span class="line">        Ob b = <span class="keyword">new</span> Ob ();</span><br><span class="line">        System.out.println(<span class="string">"a.equals(b) = "</span> + a.equals(b));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.equals(b) &#x3D; false</span><br></pre></td></tr></table></figure><p>如果没有重写<code>equals()</code>，即使使用同一个类的构造方法也显示不同。<br>重写<code>equals()</code>代码的同时也要重写<code>hashCode()</code>方法，因为要保证<code>equals</code>相等，<code>hashCode</code>一定相等。避免重写<code>equlas()</code>后达到一定条件对象相等，但是<code>hashCode()</code>没变。</p><blockquote><p><code>hashCode()</code>:hash-&gt;简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。hashMap也是将key转换成hash存储，如果hashCode相同，则会在同一个节点用链表存储。通过hashCode找到位置，equals获取两个之一。</p></blockquote><p>附 String类重写<code>equals()</code>和<code>hashCode()</code>的源码(1.8)</p><ul><li><code>equals()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; anObject) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        if (anObject instanceof String) &#123;</span><br><span class="line">            String anotherString &#x3D; (String)anObject;</span><br><span class="line">            int n &#x3D; value.length;</span><br><span class="line">            if (n &#x3D;&#x3D; anotherString.value.length) &#123;</span><br><span class="line">                char v1[] &#x3D; value;</span><br><span class="line">                char v2[] &#x3D; anotherString.value;</span><br><span class="line">                int i &#x3D; 0;</span><br><span class="line">                while (n-- !&#x3D; 0) &#123;</span><br><span class="line">                    if (v1[i] !&#x3D; v2[i])</span><br><span class="line">                        return false;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>hashCode()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int hashCode() &#123;</span><br><span class="line">        int h &#x3D; hash;</span><br><span class="line">        if (h &#x3D;&#x3D; 0 &amp;&amp; value.length &gt; 0) &#123;</span><br><span class="line">            char val[] &#x3D; value;</span><br><span class="line"></span><br><span class="line">            for (int i &#x3D; 0; i &lt; value.length; i++) &#123;</span><br><span class="line">                h &#x3D; 31 * h + val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            hash &#x3D; h;</span><br><span class="line">        &#125;</span><br><span class="line">        return h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java异或实现数据加密</title>
      <link href="/blog/2020/03/04/java%E5%BC%82%E6%88%96%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/"/>
      <url>/blog/2020/03/04/java%E5%BC%82%E6%88%96%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：302,阅读全文大约需要1分钟</p><blockquote><p>异或(xor)两次之后的数据是相同的，根据这个原理可以加密数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密解密工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XORUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密、解密byte数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据（密文/明文）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回解密/加密后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length == <span class="number">0</span> || key == <span class="keyword">null</span> || key.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[data.length];</span><br><span class="line">        <span class="comment">// 使用密钥字节数组循环加密或解密</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 数据与密钥异或, 再与循环变量的低8位异或（增加复杂度）</span></span><br><span class="line">            result[i] = (<span class="keyword">byte</span>) (data[i] ^ key[i % key.length] ^ (i &amp; <span class="number">0xFF</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密、解密文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inFile 输入文件（密文/明文）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outFile 结果输出文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encryptFile</span><span class="params">(File inFile, File outFile, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件输入流</span></span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(inFile);</span><br><span class="line">            <span class="comment">// 结果输出流, 异或运算时, 字节是一个一个读取和写入, 这里必须使用缓冲流包装,</span></span><br><span class="line">            <span class="comment">// 等缓冲到一定数量的字节（10240字节）后再写入磁盘（否则写磁盘次数太多, 速度会非常慢）</span></span><br><span class="line">            out = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(outFile), <span class="number">10240</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> b = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每次循环读取文件的一个字节, 使用密钥字节数组循环加密或解密</span></span><br><span class="line">            <span class="keyword">while</span> ((b = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 数据与密钥异或, 再与循环变量的低8位异或（增加复杂度）</span></span><br><span class="line">                b = (b ^ key[(<span class="keyword">int</span>) (i % key.length)] ^ (<span class="keyword">int</span>) (i &amp; <span class="number">0xFF</span>));</span><br><span class="line">                <span class="comment">// 写入一个加密/解密后的字节</span></span><br><span class="line">                out.write(b);</span><br><span class="line">                <span class="comment">// 循环变量递增</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close(in);</span><br><span class="line">            close(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        XORUtils.encryptFile(<span class="keyword">new</span> File(<span class="string">"demo.jpg"</span>), <span class="keyword">new</span> File(<span class="string">"demo.jpg_cipher"</span>), key.getBytes());       </span><br><span class="line">        XORUtils.encryptFile(<span class="keyword">new</span> File(<span class="string">"demo.jpg_cipher"</span>), <span class="keyword">new</span> File(<span class="string">"demo.jpg_plain"</span>), key.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java实现开机自启（快捷方式）</title>
      <link href="/blog/2020/03/04/java%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%EF%BC%88%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%EF%BC%89/"/>
      <url>/blog/2020/03/04/java%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%EF%BC%88%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：203,阅读全文大约需要1分钟</p><blockquote><p>主要思路是将快捷方式放入windows的开机自启目录中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入快捷方式 是否自启动，快捷方式的名称，注意后缀是lnk</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setAutoStart</span><span class="params">(<span class="keyword">boolean</span> yesAutoStart, String lnk)</span> </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(lnk);</span><br><span class="line">String p = f.getAbsolutePath();</span><br><span class="line">String startFolder = <span class="string">""</span>;</span><br><span class="line">String osName = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">String str = System.getProperty(<span class="string">"user.home"</span>);</span><br><span class="line"><span class="keyword">if</span> (osName.equals(<span class="string">"Windows 7"</span>) || osName.equals(<span class="string">"Windows 8"</span>) || osName.equals(<span class="string">"Windows 10"</span>)</span><br><span class="line">|| osName.equals(<span class="string">"Windows Server 2012 R2"</span>) || osName.equals(<span class="string">"Windows Server 2014 R2"</span>)</span><br><span class="line">|| osName.equals(<span class="string">"Windows Server 2016"</span>)) &#123;</span><br><span class="line">startFolder = System.getProperty(<span class="string">"user.home"</span>)</span><br><span class="line">+ <span class="string">"\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (osName.endsWith(<span class="string">"Windows XP"</span>)) &#123;</span><br><span class="line">startFolder = System.getProperty(<span class="string">"user.home"</span>) + <span class="string">"\\「开始」菜单\\程序\\启动"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (setRunBySys(yesAutoStart, p, startFolder, lnk)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置是否随系统启动</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setRunBySys</span><span class="params">(<span class="keyword">boolean</span> b, String path, String path2, String lnk)</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(path2 + <span class="string">"\\"</span> + lnk);</span><br><span class="line">Runtime run = Runtime.getRuntime();</span><br><span class="line">File f = <span class="keyword">new</span> File(lnk);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 复制</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line"><span class="comment">// 写入</span></span><br><span class="line"><span class="comment">// 判断是否隐藏，注意用系统copy布置为何隐藏文件不生效</span></span><br><span class="line"><span class="keyword">if</span> (f.isHidden()) &#123;</span><br><span class="line"><span class="comment">// 取消隐藏</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Runtime.getRuntime().exec(<span class="string">"attrib -H \""</span> + path + <span class="string">"\""</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">run.exec(<span class="string">"cmd /c copy "</span> + formatPath(path) + <span class="string">" "</span> + formatPath(path2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 延迟0.5秒防止复制需要时间</span></span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line"><span class="keyword">if</span> (file.isHidden()) &#123;</span><br><span class="line"><span class="comment">// 取消隐藏</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Runtime.getRuntime().exec(<span class="string">"attrib -H \""</span> + file.getAbsolutePath() + <span class="string">"\""</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">run.exec(<span class="string">"cmd /c del "</span> + formatPath(file.getAbsolutePath()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 解决路径中空格问题</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">formatPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> path.replaceAll(<span class="string">" "</span>, <span class="string">"\" \""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>零拷贝原理</title>
      <link href="/blog/2020/03/04/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8E%9F%E7%90%86/"/>
      <url>/blog/2020/03/04/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：554,阅读全文大约需要2分钟</p><blockquote><p>归纳自<a href="https://www.jianshu.com/p/2581342317ce" target="_blank" rel="noopener">原文</a>。</p></blockquote><p>从文件读取信息并发送到其它服务器的过程中普通文件读取和零拷贝的区别</p><h1 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h1><ol><li><code>File.read(file, buf, len)</code>读取文件内容到缓冲区<code>buf</code>里</li><li><code>Socket.send(socket, buf, len)</code>发送数据</li></ol><p>看上去数据只经过两次复制： 文件-&gt;buf-&gt;socket的缓冲区<br>其实底层步骤是</p><ol><li>调用<code>read()</code>方法，<code>DMA(direct memory access 直接内存存取)</code>会现将数据存储到<strong>内核空间</strong>的读取缓冲区。</li><li><code>read()</code>方法调用返回时，因为应用程序需要操作此数据(即赋值给<code>buf</code>)，因此触发了一次上下文切换（内核态-&gt;用户态）。数据被拷贝到了<strong>用户地址空间</strong>。（<code>cpu</code>需要参与操作）</li><li>调用<code>send()</code>方法，此时又触发了一次上下文切换（用户态-&gt;内核态）。<code>buf</code>里的数据被拷贝到与目标套接字相关的<strong>内核空间</strong>缓冲区，此操作需要<code>cpu</code>参与</li><li><code>send()</code>方法调用返回前会进行最后一次拷贝，由<code>DMA(direct memory access 直接内存存取)</code>将数据从缓冲区传到协议引擎进行发送。</li></ol><p>也就是总共进行了四次拷贝操作<br>dma-&gt;cpu-&gt;cpu-&gt;dma</p><h1 id="零拷贝方式"><a href="#零拷贝方式" class="headerlink" title="零拷贝方式"></a>零拷贝方式</h1><p>传统方式中<code>cpu</code>的两次操作其实是多余的。我们只是发送数据，不需要对于数据进行操作。所以无需进入用户态，直接在内核态进行数据转移即可。</p><p><code>FileChannel</code>类的<code>transferTo()</code>可以实现将在两个内核缓冲区中搭建一个传递通道，可以将传统方式的两次<code>cpu</code>操作转换成一次<code>cpu</code>操作，即<code>transferTo()</code>。</p><p>从操作系统角度来看，数据只在内核空间内传递就已经算是零拷贝。<br>内核需要复制的原因是因为通用硬件<code>DMA</code>访问需要连续的内存空间（因此需要缓冲区）。 但是，如果硬件支持<code>scatter-and-gather</code>，这是可以避免的。<br>即内部会自动将内核的数据之间发送给套接字引擎。即内核区域只存在一份数据。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java短路与位运算</title>
      <link href="/blog/2020/03/04/java%E7%9F%AD%E8%B7%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/blog/2020/03/04/java%E7%9F%AD%E8%B7%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>文章字数：110,阅读全文大约需要1分钟</p><blockquote><p>运算分为逻辑运算与位运算</p></blockquote><h1 id="逻辑运算与位运算"><a href="#逻辑运算与位运算" class="headerlink" title="逻辑运算与位运算"></a>逻辑运算与位运算</h1><ul><li><code>＆＆</code>逻辑和<code>｜｜</code>逻辑或<strong><em>逻辑运算符</em></strong></li><li><code>＆</code>　按位和<code>｜</code>按位或<strong><em>位运算符</em></strong></li></ul><h1 id="逻辑运算与短路"><a href="#逻辑运算与短路" class="headerlink" title="逻辑运算与短路"></a>逻辑运算与短路</h1><ul><li><code>＆＆</code>逻辑与:也叫做短路与,当前项为假，它就不往后判断了，直接认为表达式为假</li><li><code>｜｜</code>逻辑或:也叫做短路或,当前项为真，它也不往后判断了，直接认为表达式为真</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Elastic分布式全文搜索引擎</title>
      <link href="/blog/2020/03/04/Elastic%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
      <url>/blog/2020/03/04/Elastic%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1512,阅读全文大约需要6分钟</p><blockquote><p><code>ElasticSearch</code>是一款使用java开发基于<code>Lucene</code>的开箱即用的全文搜索引擎。使用<code>REST API</code>操作接口。整理自<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">阮一峰的教程</a></p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li><p><code>Java8</code>环境</p></li><li><p>安装<code>ElasticSearch-5.5.1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 下载压缩包到当前目录</span><br><span class="line">$ wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;elasticsearch&#x2F;elasticsearch-5.5.1.zip</span><br><span class="line"># 解压缩</span><br><span class="line">$ unzip elasticsearch-5.5.1.zip</span><br><span class="line"># 进入目录</span><br><span class="line">$ cd elasticsearch-5.5.1&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>中文分词插件<code>ik</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 使用elastic插件工具下载安装插件</span><br><span class="line"> .&#x2F;bin&#x2F;elasticsearch-plugin install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v5.5.1&#x2F;elasticsearch-analysis-ik-5.5.1.zip</span><br><span class="line"># 重启Elastic即可安装</span><br></pre></td></tr></table></figure></li></ul><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><ul><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>解决<code>max virtual memory areas vm.maxmapcount [65530] is too low</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sysctl -w vm.max_map_count&#x3D;262144</span><br></pre></td></tr></table></figure></li><li><p>查看信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 默认9200端口运行</span><br><span class="line">$ curl localhost:9200</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;atntrTf&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;tf9250XhQ6ee4h7YI11anA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;5.5.1&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;19c13d0&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2017-07-18T20:44:24.823Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.6.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>允许非本机访问<br>修改<code>config/elasticsearch.yml</code>去除<code>network.host</code>注释，修改值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 任何人都能访问（不推荐）</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"># 指定ip</span><br><span class="line">network.host: 192.168.1.1</span><br></pre></td></tr></table></figure></li></ul><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li><code>cluster</code>集群，多个<code>Elastic</code>实例组成一个集群<code>cluster</code>。实例可以运行在多个/同一个服务器上。</li><li><code>Node</code>节点，一个<code>Elastic</code>实例就是一个节点。一组节点构成一个集群。</li><li><code>Index</code>索引，查找数据的顶层单位。<code>Elastic</code>会索引所有字段，经过处理后写入一个反向索引<code>Inverted Index</code>。<code>Index</code>可以理解成单个数据库。<br><code>Index</code><strong>名字必须是小写</strong></li><li><code>Document</code>文档，<code>Index</code>里的单条记录成为<code>Document</code>文档。许多文档构成了<code>Index</code>。文档是json类型表示，可以理解为一个json对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;:&quot;Elastic分布式全文搜索引擎&quot;,</span><br><span class="line">    &quot;keyword&quot;:&quot;java,search&quot;,</span><br><span class="line">    &quot;body&quot;:&quot;这是内容&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><em>同一个文档<code>(Doucment)</code>最好结构<code>(scheme)</code>相同*</em></li><li><code>Type</code>分组、类型，<code>Document</code>可以进行分组。根据虚拟逻辑进行分组，比如<strong>技术博问</strong>和<strong>散文博文</strong>，用来过滤<code>Documeent</code>。<blockquote><p>根据规划，Elastic6 版本之循序Index中包好一个Type, 7版本将移除type。</p></blockquote></li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul><li><p>新建<code>Index</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 发送PUT请求创建Index</span><br><span class="line">curl -X PUT &#39;localhost:9200&#x2F;weather&#39;</span><br></pre></td></tr></table></figure><p>服务器返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># acknowledged表示操作成功</span><br><span class="line">&#123;</span><br><span class="line">   &quot;acknowledged&quot;:true,</span><br><span class="line">   &quot;shards_acknowledged&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除<code>Index</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 发送DELETE请求删除</span><br><span class="line">curl -X DELETE &#39;localhost:9200&#x2F;weather&#39;</span><br></pre></td></tr></table></figure></li><li><p>设置<code>Index</code>详细内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 创建叫accounts的Index</span><br><span class="line">curl -X PUT &#39;localhost:9200&#x2F;accounts&#39; -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;:&#123;</span><br><span class="line">        &#x2F;&#x2F; 有一个type叫person</span><br><span class="line">        &quot;TypePerson&quot;:&#123;</span><br><span class="line">            &quot;properties&quot;:&#123;</span><br><span class="line">                &#x2F;&#x2F;字段1 User</span><br><span class="line">                &quot;user&quot;:&#123;</span><br><span class="line">                    &quot;type&quot;:&quot;text&quot;,&#x2F;&#x2F;文本类型</span><br><span class="line">                    &quot;analyzer&quot;:&quot;ik_max_word&quot;,&#x2F;&#x2F;字段分词器使用ik提供的文本最大数量分词。</span><br><span class="line">                    &quot;search_analyzer&quot;:&quot;ik_max_word&quot;&#x2F;&#x2F;搜索分词器</span><br><span class="line">                &#125;，</span><br><span class="line">                &#x2F;&#x2F;字段2 Title</span><br><span class="line">                &quot;title&quot;:&#123;</span><br><span class="line">                    ...同上</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p>新增记录(指定id)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 向accounts的person分组插入(PUT)</span><br><span class="line"># 1为此记录的id,任意字符。</span><br><span class="line">$ curl -X PUT &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;1&#39; -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;:&quot;accounts&quot;,</span><br><span class="line">  &quot;_type&quot;:&quot;person&quot;,</span><br><span class="line">  &quot;_id&quot;:&quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;:1,</span><br><span class="line">  &quot;result&quot;:&quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;:&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;,</span><br><span class="line">  &quot;created&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增记录(不指定id)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 使用POST,服务器随机生成字符串形式的id</span><br><span class="line">$ curl -X POST &#39;localhost:9200&#x2F;accounts&#x2F;person&#39; -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;李四&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;系统管理&quot;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>如果没有创建Index直接插入会自动生成指定的Index。</p></blockquote></li><li><p>查看记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用GET &#96;Index&#x2F;Type&#x2F;Id&#96;查看，pretty表示以易读格式返回。</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;1?pretty&#x3D;true&#39;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;accounts&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;person&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;found&quot; : true,&#x2F;&#x2F;没找到 false</span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line">    &quot;user&quot; : &quot;张三&quot;,</span><br><span class="line">    &quot;title&quot; : &quot;工程师&quot;,</span><br><span class="line">    &quot;desc&quot; : &quot;数据库管理&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># delete id</span><br><span class="line">curl -X DELETE &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;1&#39;</span><br></pre></td></tr></table></figure></li><li><p>更新记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 重新发送一次就可以了</span><br><span class="line">curl -X PUT &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;1&#39; -d </span><br><span class="line">&#39;...&#39;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;_version&quot; : 2,&#x2F;&#x2F;版本+1</span><br><span class="line">&quot;result&quot; : &quot;updated&quot;,&#x2F;&#x2F;结果从创建变成修改</span><br><span class="line">&quot;created&quot; : false&#x2F;&#x2F;created 变成 false</span><br></pre></td></tr></table></figure></li><li><p>查询所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># GET请求直接访问</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;:2,</span><br><span class="line">  &quot;timed_out&quot;:false,</span><br><span class="line">  &quot;_shards&quot;:&#123;&quot;total&quot;:5,&quot;successful&quot;:5,&quot;failed&quot;:0&#125;,</span><br><span class="line">  &quot;hits&quot;:&#123;</span><br><span class="line">    &quot;total&quot;:2,</span><br><span class="line">    &quot;max_score&quot;:1.0,</span><br><span class="line">    &quot;hits&quot;:[</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;:&quot;accounts&quot;,</span><br><span class="line">        &quot;_type&quot;:&quot;person&quot;,</span><br><span class="line">        &quot;_id&quot;:&quot;AV3qGfrC6jMbsbXb6k1p&quot;,</span><br><span class="line">        &quot;_score&quot;:1.0,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;user&quot;: &quot;李四&quot;,</span><br><span class="line">          &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">          &quot;desc&quot;: &quot;系统管理&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;:&quot;accounts&quot;,</span><br><span class="line">        &quot;_type&quot;:&quot;person&quot;,</span><br><span class="line">        &quot;_id&quot;:&quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;:1.0,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;user&quot; : &quot;张三&quot;,</span><br><span class="line">          &quot;title&quot; : &quot;工程师&quot;,</span><br><span class="line">          &quot;desc&quot; : &quot;数据库管理，软件开发&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>took</code>操作耗时(毫秒)、<code>timed_out</code>是否超时、<code>hits</code>命中的记录<br><code>hits</code>字段含义</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total：返回记录数，本例是2条。</span><br><span class="line">max_score：最高的匹配程度，本例是1.0。</span><br><span class="line">hits：返回的记录组成的数组。</span><br><span class="line">hits下_score表示匹配的程序，按照这个字段排序的</span><br></pre></td></tr></table></figure></li><li><p>全文搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询desc字段中包含软件这个词的</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件&quot; &#125;&#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p>指定全文搜索结果条数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># size 1 指定返回一条结果</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;管理&quot; &#125;&#125;,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p>位移/跳过指定数量的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;管理&quot; &#125;&#125;,</span><br><span class="line">  &quot;from&quot;: 1,&#x2F;&#x2F;跳过1条</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p>条件或、条件且<br>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 软件或是系统</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件 系统&quot; &#125;&#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><p>且</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># desc 拥有软件关键词同时也要拥有系统关键词</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;软件&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;系统&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><h1 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h1></li><li><p><code>linux</code>通用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#  nohup表示不依赖终端，可以在同一个终端继续其他事情</span><br><span class="line"># &amp;不依赖于用户</span><br><span class="line">nohup bin&#x2F;elasticsearch &amp;</span><br><span class="line"># 查看日志</span><br><span class="line">tail -fn 200 nohup.out</span><br><span class="line"># 重定向输出信息 &gt;&#x2F;dev&#x2F;null-&gt;将所有正确输出都保存到null文件中(抛弃) 2&gt;&amp;1 -&gt;2即错误信息，重定向到1(正确信息中)</span><br><span class="line">nohup bin&#x2F;elasticsearch &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li><li><p><code>Elastic</code>参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -d 代表后台运行</span><br><span class="line">bin&#x2F;elasticsearch -d</span><br></pre></td></tr></table></figure></li><li><p>关闭后台程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查找进程</span><br><span class="line">ps -ef|grep elastic</span><br><span class="line"># 杀死进程</span><br><span class="line">kill 41496</span><br></pre></td></tr></table></figure></li></ul><h1 id="模糊查询-分页"><a href="#模糊查询-分页" class="headerlink" title="模糊查询+分页"></a>模糊查询+分页</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Page&lt;User&gt; <span class="title">findByUsernameContainingOrderByCreateTimeDesc</span><span class="params">(String username,Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pageable page = PageRequest.of(<span class="number">0</span> , <span class="number">2</span>);</span><br><span class="line">Page&lt;User&gt; list = userRepository.findByUsernameContainingOrderByCreateTimeDesc(<span class="string">"丽"</span>,page);</span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><ol><li><code>Elastic</code>数据存储在磁盘中，查询的时候会自动提取到<code>Filesystem Cache</code>中。增加<code>Filesystem Cache</code>(内存)的容量，以及预知会有大量访问的数据自己提前定时查询，使其写入内存。热数据冷数据分离，热数据不会被冷数据挤下去。</li><li>join/nested/parent-child 这些操作尽量不要做</li><li>分页默认的性能很低，越往深层越慢。使用 Scroll API，滚动刷新(不能跳页)</li><li>配合其他数据库使用，es查询会查询所有数据，但是大部分可能没用。可以将需要检索的字段和id存入ES,再用id在mysql/HBase中取出其他的。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Netty简单使用</title>
      <link href="/blog/2020/03/04/Netty%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/03/04/Netty%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：654,阅读全文大约需要2分钟</p><blockquote><p>一个基于socket的Netty客户端和服务端相互通讯</p></blockquote><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>服务类，用于创建Netty服务绑定端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Netty服务器类，用于接收请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 13:50 2019/8/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动服务 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port 启动时绑定的端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Reactor线程组，一个用来处理连接，一个用来处理网络读写</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//启动NIO服务端的辅助启动类</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">//绑定线程组</span></span><br><span class="line">            serverBootstrap.group(bossGroup,workGroup)</span><br><span class="line">                    <span class="comment">//指定通道类型（服务端是NioServerSocketChannel）</span></span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    //设置通道的处理器</span></span><br><span class="line"><span class="class">                    .<span class="title">option</span>(<span class="title">ChannelOption</span>.<span class="title">SO_BACKLOG</span>,1024)</span></span><br><span class="line"><span class="class">                    //子通道</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChildChannelHandler</span>())</span>;</span><br><span class="line">            <span class="comment">//绑定并监听端口</span></span><br><span class="line">            ChannelFuture future = serverBootstrap.bind(port).sync();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"，启动成功，等待请求中"</span>);</span><br><span class="line">            <span class="comment">//future.channel()获取程序的channel,等待结束(closeFuthre),阻塞(sync)</span></span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//退出，释放资源</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//ChannelPipeline是一个链式的处理请求的流程</span></span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理请求的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 14:31 2019/8/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收客户端消息，自动触发</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换msg成Netty的ByteBuf对象，类似ByteBuffer（缓冲区）</span></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        <span class="comment">//创建缓冲区内信息大小的byte类型数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] reg = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        <span class="comment">//读取缓冲区的信息并转换成字符串</span></span><br><span class="line">        buf.readBytes(reg);</span><br><span class="line">        String mess = <span class="keyword">new</span> String(reg,<span class="string">"UTF-8"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mess = "</span> + mess);</span><br><span class="line">        <span class="comment">//回复消息</span></span><br><span class="line">        String respMess = <span class="string">"收到"</span>;</span><br><span class="line">        ByteBuf respByteBuf = Unpooled.copiedBuffer(respMess.getBytes());</span><br><span class="line">        ctx.write(respByteBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *当Channel上的一个读操作完成时被调用( channelRead是进行拆包和粘包之后的请求，channelReadComplete则是具体的每一次发送请求)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//读完后刷新缓冲区，发送</span></span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常发生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//发送异常关闭context,释放相关资源</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>建立连接请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**客户端，发起连接请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 15:19 2019/8/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接目标服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String host,<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="comment">//NIO线程组</span></span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            bootstrap.group(group).channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">option</span>(<span class="title">ChannelOption</span>.<span class="title">TCP_NODELAY</span>,<span class="title">true</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">handler</span>(<span class="title">new</span> <span class="title">ChileHandler</span>())</span>;</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host,port).sync();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">",发起连接请求"</span>);</span><br><span class="line">            <span class="comment">//等待客户端链路关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChileHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            socketChannel.pipeline().addLast(<span class="keyword">new</span> NettyClientHanlder());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体处理事件的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**处理请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 16:32 2019/8/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHanlder</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接成功之后执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sendMess = <span class="string">"我是客户端："</span>+Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">byte</span>[] sendMesByte = sendMess.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">        ByteBuf sendByteBuf = Unpooled.buffer(sendMesByte.length);</span><br><span class="line">        sendByteBuf.writeBytes(sendMesByte);</span><br><span class="line">        ctx.writeAndFlush(sendByteBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收返回的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf)msg;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req);</span><br><span class="line">        String mess = <span class="keyword">new</span> String(req,<span class="string">"UTF-8"</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"接收到返回的消息："</span>+mess);</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.greatcolin.client.NettyClient;</span><br><span class="line"><span class="keyword">import</span> io.greatcolin.server.NettyServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//开启服务，服务会阻塞，所以使用一个线程开启</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                NettyServer server = <span class="keyword">new</span> NettyServer();</span><br><span class="line">                server.bind(<span class="number">7777</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        NettyClient client = <span class="keyword">new</span> NettyClient();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            App.sleep();</span><br><span class="line">            client.connect(<span class="string">"127.0.0.1"</span>,<span class="number">7777</span>);</span><br><span class="line">            System.out.println(<span class="string">"------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//休眠3秒</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span>，启动成功，等待请求中</span><br><span class="line">main,发起连接请求</span><br><span class="line">mess = 我是客户端：nioEventLoopGroup-<span class="number">4</span>-<span class="number">1</span></span><br><span class="line">nioEventLoopGroup-<span class="number">4</span>-<span class="number">1</span>接收到返回的消息：收到</span><br><span class="line">------</span><br><span class="line">main,发起连接请求</span><br><span class="line">mess = 我是客户端：nioEventLoopGroup-<span class="number">5</span>-<span class="number">1</span></span><br><span class="line">nioEventLoopGroup-<span class="number">5</span>-<span class="number">1</span>接收到返回的消息：收到</span><br><span class="line">------</span><br><span class="line">main,发起连接请求</span><br><span class="line">mess = 我是客户端：nioEventLoopGroup-<span class="number">6</span>-<span class="number">1</span></span><br><span class="line">nioEventLoopGroup-<span class="number">6</span>-<span class="number">1</span>接收到返回的消息：收到</span><br><span class="line">------</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaIO </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java终结器</title>
      <link href="/blog/2020/03/04/java%E7%BB%88%E7%BB%93%E5%99%A8/"/>
      <url>/blog/2020/03/04/java%E7%BB%88%E7%BB%93%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：90,阅读全文大约需要1分钟</p><blockquote><p>java.lang.Object里有一个finalize()方法，是空的。一旦重写这个方法对象的声明周期就会产生变化。</p></blockquote><ol><li><p><code>java.lang.ref.Finalizer.ReferenceQueue</code>:实现<code>finalize()</code>方法的对象都会被加入到<code>ReferenceQueue</code>队列中，因为对象一直被引用，所以无法被GC</p></li><li><p><code>finalize()</code>:调用对象的终结器方法即可将对象从队列中删除</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java监听键盘事件</title>
      <link href="/blog/2020/03/04/java%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
      <url>/blog/2020/03/04/java%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：51,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 14:51 2019/9/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">KeyListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> pressTime=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> releasedTime=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> keyEnable=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        demo ket = <span class="keyword">new</span> demo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.setTitle(<span class="string">"KeyEventTest"</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        addKeyListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keyEnable ==<span class="keyword">true</span>) &#123;</span><br><span class="line">            pressTime = System.currentTimeMillis();</span><br><span class="line">            keyEnable=<span class="keyword">false</span>;</span><br><span class="line">            System.out.println(<span class="string">"按下"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">        releasedTime=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> afterTime=releasedTime-pressTime;</span><br><span class="line">        System.out.println(<span class="string">"总时间"</span>+afterTime+<span class="string">"毫秒"</span>);</span><br><span class="line">        keyEnable=<span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot内置的Servlet容器</title>
      <link href="/blog/2020/03/04/SpringBoot%E5%86%85%E7%BD%AE%E7%9A%84Servlet%E5%AE%B9%E5%99%A8/"/>
      <url>/blog/2020/03/04/SpringBoot%E5%86%85%E7%BD%AE%E7%9A%84Servlet%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：780,阅读全文大约需要3分钟</p><blockquote><p><code>SpringBoot</code>内置了<code>Servlet</code>容器，所以可以直接运行。而传统的<code>javaWeb</code>程序需要嵌入到<code>Tomcat</code>之类的<code>Servlet</code>容器中才能运行。方便之余却带了问题，我们不能像传统的<code>javaWeb</code>程序那样操作<code>web.xml</code>。所以<code>Spring</code>提供了自定义容器内容的途径。</p></blockquote><h1 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h1><h2 id="自动配置类EmbeddedServletContainerAutoConfiguration"><a href="#自动配置类EmbeddedServletContainerAutoConfiguration" class="headerlink" title="自动配置类EmbeddedServletContainerAutoConfiguration"></a>自动配置类EmbeddedServletContainerAutoConfiguration</h2><p>首先看<code>springBoot</code>如何自动配置的。<br>在<code>spring-boot-autoconfigure-xxx.jar</code>的<code>web</code>模块中可以找到</p><p><code>EmbeddedServletContainerAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import</span>(BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个类中主要作用是配置三个容器工厂的<code>bean</code><br>都是<code>EmbeddedServletContainerFactory</code>接口的</p><ol><li><code>TomcatEmbeddedServletContainerFactory</code></li><li><code>JettyEmbeddedServletContainerFactory</code></li><li><code>UndertowEmbeddedServletContainerFactory</code></li></ol><p>通过注解设置有<code>servlet</code>依赖和类对应的<code>servlet</code>容器依赖时，没有其它<code>EmbeddedServletContainerFactory</code>接口时创建。(重点1)</p><h2 id="容器工厂接口EmbeddedServletContainerFactory"><a href="#容器工厂接口EmbeddedServletContainerFactory" class="headerlink" title="容器工厂接口EmbeddedServletContainerFactory"></a>容器工厂接口EmbeddedServletContainerFactory</h2><p><code>EmbeddedServletContainerFactory</code>接口内部只有获取嵌入式<code>servlet</code>容器的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ServletContextInitializer... initializers)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容器接口EmbeddedServletContainer"><a href="#容器接口EmbeddedServletContainer" class="headerlink" title="容器接口EmbeddedServletContainer"></a>容器接口EmbeddedServletContainer</h2><p><code>EmbeddedServletContainerFactory</code>获取的容器就是<code>EmbeddedServletContainer</code>返回的类型。</p><p>也对应三个实现类</p><ol><li><code>TomcatEmbeddedServletContainer</code></li><li><code>JettyEmbeddedServletContainer</code></li><li><code>UndertowEmbeddedServletContainer</code></li></ol><p>以<code>Tomcat</code>容器工厂<code>TomcatEmbeddedServletContainerFactory</code>类为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Tomcat</span></span><br><span class="line">    Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//配置Tomcat的基本环节</span></span><br><span class="line">    File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span>  <span class="keyword">this</span>.baseDirectory</span><br><span class="line">            : createTempDir(<span class="string">"tomcat"</span>));</span><br><span class="line">    tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">    <span class="comment">// 绑定端口的连接</span></span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">    tomcat.getService().addConnector(connector);</span><br><span class="line">    customizeConnector(connector);</span><br><span class="line">    tomcat.setConnector(connector);</span><br><span class="line">    <span class="comment">// 是否设置Tomcat自动部署</span></span><br><span class="line">    tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">    configureEngine(tomcat.getEngine());</span><br><span class="line">    <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">        tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">    &#125;</span><br><span class="line">    prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//包装tomcat对象，返回一个嵌入式Tomcat容器，内部会启动该tomcat容器</span></span><br><span class="line">    <span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后调用的方法，主要就是创建<code>Tomcat</code>容器，启动容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> TomcatEmbeddedServletContainer <span class="title">getTomcatEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Tomcat tomcat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainer(tomcat, getPort() &gt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义容器参数"><a href="#自定义容器参数" class="headerlink" title="自定义容器参数"></a>自定义容器参数</h1><h2 id="EmbeddedServletContainerCustomizer定制器"><a href="#EmbeddedServletContainerCustomizer定制器" class="headerlink" title="EmbeddedServletContainerCustomizer定制器"></a>EmbeddedServletContainerCustomizer定制器</h2><p>自定义属性可以通过<code>ServerProperties</code>和<code>EmbeddedServletContainerCustomizer</code>定制器实现，<code>ServerProperties</code>是<code>EmbeddedServletContainerCustomizer</code>的子类，所以其实都是<code>EmbeddedServletContainerCustomizer</code>在起作用。</p><h2 id="BeanPostProcessorsRegistrar给容器导入组件的类"><a href="#BeanPostProcessorsRegistrar给容器导入组件的类" class="headerlink" title="BeanPostProcessorsRegistrar给容器导入组件的类"></a>BeanPostProcessorsRegistrar给容器导入组件的类</h2><p>在最顶级的自动配置类<code>EmbeddedServletContainerAutoConfiguration</code>上有个注解<code>@Import(BeanPostProcessorsRegistrar.class)</code><br>导入了<code>BeanPostProcessorsRegistrar</code>这个类成<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorsRegistrar</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">            <span class="keyword">this</span>.beanFactory = (ConfigurableListableBeanFactory) beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 重点方法，导入了配置器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注册了一个EmbeddedServletContainerCustomizerBeanPostProcessor后置处理器的Bean</span></span><br><span class="line">        registerSyntheticBeanIfMissing(registry,</span><br><span class="line">                                       <span class="string">"embeddedServletContainerCustomizerBeanPostProcessor"</span>,</span><br><span class="line">                                       EmbeddedServletContainerCustomizerBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        registerSyntheticBeanIfMissing(registry,</span><br><span class="line">                                       <span class="string">"errorPageRegistrarBeanPostProcessor"</span>,</span><br><span class="line">                                       ErrorPageRegistrarBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerSyntheticBeanIfMissing</span><span class="params">(BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                String name, Class beanClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(</span><br><span class="line">            <span class="keyword">this</span>.beanFactory.getBeanNamesForType(beanClass, <span class="keyword">true</span>, <span class="keyword">false</span>))) &#123;</span><br><span class="line">            RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(beanClass);</span><br><span class="line">            beanDefinition.setSynthetic(<span class="keyword">true</span>);</span><br><span class="line">            registry.registerBeanDefinition(name, beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>后置处理器：在<code>bean</code>初始化前(创建完成，还未属性赋值)，会执行初始化工作。</p></li><li><p><code>registerBeanDefinitions</code>这个方法导入了<code>EmbeddedServletContainerCustomizerBeanPostProcessor</code>的<code>Bean</code></p></li><li><p>这个<code>Bean</code>会从<code>ICO</code>容器中拿到所有<code>EmbeddedServletContainerCustomizer</code>类，也就是上面说的定制器。可以引入这个定制器来操作容器参数内容</p></li></ol><h1 id="通过容器工厂自定义参数"><a href="#通过容器工厂自定义参数" class="headerlink" title="通过容器工厂自定义参数"></a>通过容器工厂自定义参数</h1><h2 id="EmbeddedServletContainerFactory容器工厂"><a href="#EmbeddedServletContainerFactory容器工厂" class="headerlink" title="EmbeddedServletContainerFactory容器工厂"></a>EmbeddedServletContainerFactory容器工厂</h2><p>也就是上面的重点1，<code>spring</code>会根据依赖和有没有其他的工厂来判断是否要注入。我们可以自定义工厂，并加入<code>Bean</code>。</p><p>例：</p><ol><li>禁用post和get之外的方法<br>配置类中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        TomcatEmbeddedServletContainerFactory tomcat = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory() &#123;<span class="comment">// 1  </span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;  </span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();  </span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);  </span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();  </span><br><span class="line">                <span class="comment">// 对于所有的请求</span></span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);  </span><br><span class="line">                <span class="comment">// 都验证一下http方法（servlet自带的权限验证，因为没有定义用户，所有直接拦截）</span></span><br><span class="line">                collection.addMethod(<span class="string">"HEAD"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"PUT"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"DELETE"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"OPTIONS"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"TRACE"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"COPY"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"SEARCH"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"PROPFIND"</span>);  </span><br><span class="line">                securityConstraint.addCollection(collection);  </span><br><span class="line">                context.addConstraint(securityConstraint);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="comment">//如果需要禁用TRACE请求，需添加以下代码：</span></span><br><span class="line">        tomcat.addConnectorCustomizers(connector -&gt; &#123;</span><br><span class="line">            connector.setAllowTrace(<span class="keyword">true</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> tomcat;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>同等于传统的<code>web.xml</code>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;security-constraint&gt;  </span><br><span class="line">            &lt;web-resource-collection&gt;  </span><br><span class="line">                &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;  </span><br><span class="line">                &lt;http-method&gt;HEAD&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;PUT&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;DELETE&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;OPTIONS&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;TRACE&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;COPY&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;SEARCH&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;PROPFIND&lt;&#x2F;http-method&gt;  </span><br><span class="line">            &lt;&#x2F;web-resource-collection&gt;  </span><br><span class="line">            &lt;auth-constraint&gt;  </span><br><span class="line">            &lt;&#x2F;auth-constraint&gt;  </span><br><span class="line">&lt;&#x2F;security-constraint&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>转发端口（http转到https）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建容器工厂</span></span><br><span class="line">        TomcatEmbeddedServletContainerFactory tomcat = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory() &#123;</span><br><span class="line">            <span class="comment">// 重写方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 新建一个安全设置</span></span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                <span class="comment">// 对与所有的请求</span></span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                <span class="comment">// 拦截验证这些方法的权限（即禁用）</span></span><br><span class="line">                collection.addMethod(<span class="string">"HEAD"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"PUT"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"DELETE"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"TRACE"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"COPY"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"SEARCH"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"PROPFIND"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"BOGUS"</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 添加连接（除了默认的https连接，这里又监听了http的）</span></span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connector <span class="title">httpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(httpPort);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 转发到https端口</span></span><br><span class="line">        connector.setRedirectPort(httpsPort);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java8</title>
      <link href="/blog/2020/03/04/java8/"/>
      <url>/blog/2020/03/04/java8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1141,阅读全文大约需要4分钟</p><blockquote><p>2014年3月发布，主要增加了lambda表达式，stream，新Date类</p></blockquote><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><ol><li><p>含义：将函数作为参数传入方法，方法内可以在适当的时候执行此函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Lambda函数对应一个@FunctionalInterface注解的接口，本质是实现此接口的方法。接口只能有一个对外方法。</span><br></pre></td></tr></table></figure></li><li><p>Lambda表达式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.forEach((k,v)-&gt;&#123;</span><br><span class="line">  System.out.println(k);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>简写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.forEach((k,v)-&gt;System.out.println(k));</span><br></pre></td></tr></table></figure><h1 id="StreamAPI"><a href="#StreamAPI" class="headerlink" title="StreamAPI"></a>StreamAPI</h1><blockquote><p>list.stream()将数据转换成流的形式，然后就可以对于流进行链式操作，其中操作分为中间操作和结束操作，结束操作只能有一个。</p></blockquote><ol><li>流有原始流（IntStream…）boxed流(Stream<Interger>)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream.boxed();<span class="comment">//转换</span></span><br><span class="line">Stream.mapToInt()...<span class="comment">//转换</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>原始流没有数据收集的方法（.collect(Collectors.toList())）可以转换成boxed流然后收集</p></li><li><p>除了通过数据生成流，也可以随机生成</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">100</span>).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th align="left">中间操作</th><th>结束操作</th></tr></thead><tbody><tr><td>1</td><td align="left">filter</td><td>foreach</td></tr><tr><td>2</td><td align="left">map、mapToInt、mapToDouble、mapToLong</td><td>collect</td></tr><tr><td>3</td><td align="left">flatMap、flatMapToInt、flatMapToLong、flatMapToDouble</td><td>anyMatch</td></tr><tr><td>4</td><td align="left">distinct</td><td>allMatch</td></tr><tr><td>5</td><td align="left">sorted</td><td>noneMatch</td></tr><tr><td>6</td><td align="left">skip</td><td>reduce</td></tr><tr><td>7</td><td align="left">peek</td><td>min</td></tr><tr><td>8</td><td align="left">limit</td><td>max</td></tr><tr><td>9</td><td align="left">of</td><td>count</td></tr><tr><td>10</td><td align="left">iterate</td><td>toArray</td></tr><tr><td>11</td><td align="left">generate</td><td>forEachOrdered</td></tr><tr><td>12</td><td align="left">empty</td><td>findFirst</td></tr><tr><td>13</td><td align="left">concat</td><td>findAny</td></tr></tbody></table><h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><ol><li><code>filter</code>过滤</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回true的方向，否则拦截</span></span><br><span class="line">list.stream().filter(e-&gt;e.equals(<span class="string">"1"</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>map</code>转换集合<br>同类有：<code>mapToInt</code>、<code>mapToDouble</code>、<code>mapToLong</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int类型的id转换成string，即方法接收值之后可以返回其它类型的值并传递下去</span></span><br><span class="line">idList.stream().map(Student::getName).collect(Collectors.toList())</span><br><span class="line">.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>mapToInt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream intStream = list.stream().mapToInt(Student::getAge);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>flatMap</code>将流中的元素也转换成流，加入到流中<br>同类有：<code>flatMapToInt</code>、<code>flatMapToLong</code>、<code>flatMapToDouble</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list2.add(<span class="string">"aaa bbb ccc"</span>);</span><br><span class="line">    list2.add(<span class="string">"ddd eee fff"</span>);</span><br><span class="line">    list2.add(<span class="string">"ggg hhh iii"</span>);</span><br><span class="line">    list2 = list2.stream().map(s -&gt; s.split(<span class="string">" "</span>)).flatMap(Arrays::stream).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ol start="4"><li><code>distinct</code>去重</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"2"</span>);</span><br><span class="line">list.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="5"><li><code>sorted</code>排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//asc排序</span></span><br><span class="line">   list.stream().sorted(Comparator.comparingInt(Student::getAge)).forEach(System.out::println);</span><br><span class="line">   System.out.println(<span class="string">"------------------------------------------------------------------"</span>);</span><br><span class="line">   <span class="comment">//desc排序</span></span><br><span class="line">   list.stream().sorted(Comparator.comparingInt(Student::getAge).reversed()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="6"><li><code>skip</code>跳过前n个</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().skip(<span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="7"><li><code>peek</code>生成副本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和forEach类似,只是不影响源数据，并且是中间操作</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"123"</span>);</span><br><span class="line">        list.add(<span class="string">"456"</span>);</span><br><span class="line">        List l = list.stream().peek(v-&gt; &#123;</span><br><span class="line">            v =  v + <span class="string">"zzz"</span>;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        l.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="8"><li><code>limit</code>截取前n个</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().limit(<span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="9"><li><p><code>of</code>生成流</p></li><li><p><code>iterate</code>生成流</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"f"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="comment">//从0开始，每次加1，生成list长度的流</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, i -&gt; i + <span class="number">1</span>).limit(list.size()).forEach(i -&gt; &#123;</span><br><span class="line">        System.out.println(String.valueOf(i) + list.get(i));</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ol start="11"><li><code>generate</code>生成指定流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.generate(()-&gt;<span class="string">"user"</span>).limit(<span class="number">20</span>);</span><br><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="12"><li><p><code>empty</code>生成空流</p></li><li><p><code>concat</code>连接两个流</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"f"</span>, <span class="string">"a"</span>);</span><br><span class="line">        Stream.concat(list.stream(),list.stream()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="结束操作"><a href="#结束操作" class="headerlink" title="结束操作"></a>结束操作</h2><ol><li><code>foreach</code> 遍历</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;直接将值作为函数的输入值可以使用 类::方法 的形式</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>collect</code>转换成集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过滤空元素</span></span><br><span class="line">list.filter(StringUtil::isNotBlank).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ol start="3"><li><code>anyMatch</code>是否有一个满足条件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isHave = list.stream().anyMatch(student -&gt; student.getAge() == <span class="number">16</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li><code>allMatch</code>是否全部满足</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isHave = list.stream().allMatch(student -&gt; student.getAge() == <span class="number">16</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li><code>noneMatch</code>都不符合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isHave = list.stream().noneMatch(student -&gt; student.getAge() == <span class="number">16</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li><code>reduce</code>每个元素的返回值传入下个元素中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 计算总和，count是每次返回的数，都会传入下一个元素里。</span></span><br><span class="line">        <span class="comment">// v是当前元素的值。0是count的初始值，没有初始化值返回的是Optional</span></span><br><span class="line">        <span class="keyword">int</span> total = list.stream().reduce(<span class="number">0</span>,(count,v)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> count+v;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ol start="7"><li><p><code>min</code>最小的</p></li><li><p><code>max</code>最大的</p></li><li><p><code>count</code>计数</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = list.stream().count();</span><br></pre></td></tr></table></figure><ol start="10"><li><code>toArray</code>转换成数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toArray(Integer[] :: <span class="keyword">new</span>)<span class="comment">//转换成Interger[]</span></span><br><span class="line">toArray(person[] ::  <span class="keyword">new</span>)<span class="comment">//对象数组</span></span><br></pre></td></tr></table></figure><ol start="11"><li><code>forEachOrdered</code>遍历，顺序一定和元素顺序一样</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和forEach一样，遍历流，不过这个执行顺序一定和流顺序一样</span></span><br><span class="line">list.forEachOrdered();</span><br></pre></td></tr></table></figure><ol start="12"><li><code>findFirst</code> 找到第一个元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Student&gt; student = list.stream().findFirst();</span><br></pre></td></tr></table></figure><ol start="13"><li><code>findAny</code> 找到其中一个元素 （使用 stream() 时找到的是第一个元素；使用 parallelStream() 并行时找到的是其中一个元素）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Student&gt; student = list.stream().findAny();</span><br></pre></td></tr></table></figure><h1 id="新增了时间类型"><a href="#新增了时间类型" class="headerlink" title="新增了时间类型"></a>新增了时间类型</h1><ol><li>获取当天时间(自带格式化)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在的本地时间是 : 2019-01-05</span></span><br><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"现在的本地时间是 : "</span> + today);</span><br></pre></td></tr></table></figure><ol start="2"><li>直接获取当前</li></ol><ul><li><p>年月日</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line"><span class="keyword">int</span> year = today.getYear();</span><br><span class="line"><span class="keyword">int</span> month = today.getMonthValue();</span><br><span class="line"><span class="keyword">int</span> day = today.getDayOfMonth();</span><br><span class="line">System.out.printf(<span class="string">"年: %d 月 : %d 日 : %d "</span>, year, month, day);</span><br></pre></td></tr></table></figure></li><li><p>时间</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.now();</span><br><span class="line">System.out.println(<span class="string">"当前时间是 : "</span> + time);</span><br></pre></td></tr></table></figure><ol start="3"><li>构造指定日期</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate dateOfBirth = LocalDate.of(<span class="number">2018</span>, <span class="number">04</span>, <span class="number">01</span>);</span><br><span class="line">System.out.println(<span class="string">"你的生日是 : "</span> + dateOfBirth);</span><br></pre></td></tr></table></figure><ol start="4"><li>日期比较</li></ol><ul><li><p>比较年月日都是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date1 = LocalDate.of(<span class="number">2018</span>, <span class="number">04</span>, <span class="number">01</span>);</span><br><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"date1和今天是同一天吗？："</span>+ date1.equals(today));</span><br></pre></td></tr></table></figure></li><li><p>忽略年</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate dateOfBirth = LocalDate.of(<span class="number">2018</span>, <span class="number">04</span>, <span class="number">01</span>);</span><br><span class="line">MonthDay birthday = MonthDay.of(dateOfBirth.getMonth(), dateOfBirth.getDayOfMonth());</span><br><span class="line">MonthDay currentMonthDay = MonthDay.from(today);</span><br><span class="line">System.out.println(<span class="string">"今天是4月1日吗？"</span> + currentMonthDay.equals(birthday));</span><br></pre></td></tr></table></figure><ul><li>大小比较</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate tomorrow = LocalDate.of(<span class="number">2018</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"2018-04-02是未来的时间吗？"</span> + tommorow.isAfter(today));</span><br><span class="line">LocalDate yesterday = today.minus(<span class="number">1</span>, DAYS);</span><br><span class="line">System.out.println(<span class="string">"2018-03-31是过去的时间吗？"</span> + yesterday.isBefore(today));</span><br></pre></td></tr></table></figure><ol start="5"><li>日期增加/减少</li></ol><ul><li>加小时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.now();</span><br><span class="line">LocalTime newTime = time.plusHours(<span class="number">2</span>); <span class="comment">// 加2个小时</span></span><br><span class="line">System.out.println(<span class="string">"两个小时后是 : "</span> + newTime);</span><br></pre></td></tr></table></figure><ul><li>加一周</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate nextWeek = today.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</span><br><span class="line">System.out.println(<span class="string">"一星期后 : "</span> + nextWeek);</span><br></pre></td></tr></table></figure><ul><li>加一年</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">today.minus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br></pre></td></tr></table></figure><ol start="6"><li>获取时区</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZoneId zId = ZoneId.of(<span class="string">"GMT+8"</span>);</span><br><span class="line">LocalDateTime localtDateAndTime = LocalDateTime.now();</span><br><span class="line">ZonedDateTime bj = ZonedDateTime.of(localtDateAndTime, zId );</span><br></pre></td></tr></table></figure><ol start="7"><li>是否是闰年</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">"今年2019是闰年？"</span> + today.isLeapYear());</span><br></pre></td></tr></table></figure><ol start="8"><li>两个日期直接有多少天和月</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate day = LocalDate.of(<span class="number">2018</span>, Month.APRIL, <span class="number">1</span>);</span><br><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">Period period = Period.between(day , today);</span><br><span class="line">System.out.println(<span class="string">"2018年4月1日距离今天过去了多少个月: "</span> + period.getMonths());</span><br></pre></td></tr></table></figure><ol start="9"><li>时区偏移量的日期时间</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime datetime = LocalDateTime.of(<span class="number">2018</span>, Month.JANUARY, <span class="number">14</span>, <span class="number">19</span>, <span class="number">30</span>);</span><br><span class="line">ZoneOffset offset = ZoneOffset.of(<span class="string">"+05:30"</span>);</span><br><span class="line"><span class="comment">// 给机器看的</span></span><br><span class="line">OffsetDateTime date = OffsetDateTime.of(datetime, offset);</span><br><span class="line">System.out.println(<span class="string">"带时区的日期和时间 : "</span> + date);</span><br><span class="line"><span class="comment">// 这个是格式化之后给人看的</span></span><br><span class="line">ZoneDateTime date = ZoneDateTime.of(datetime, offset);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java验证码生成工具</title>
      <link href="/blog/2020/03/04/java%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
      <url>/blog/2020/03/04/java%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：490,阅读全文大约需要1分钟</p><h1 id="VerifyCodeUtil-代码"><a href="#VerifyCodeUtil-代码" class="headerlink" title="VerifyCodeUtil 代码"></a>VerifyCodeUtil 代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.RenderingHints;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerifyCodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERIFY_CODES = <span class="string">"23456789ABCDEFGHJKLMNPQRSTUVWXYZ"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用系统默认字符源生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize    验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateVerifyCode</span><span class="params">(<span class="keyword">int</span> verifySize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> generateVerifyCode(verifySize, VERIFY_CODES);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定源生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize    验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sources   验证码字符源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateVerifyCode</span><span class="params">(<span class="keyword">int</span> verifySize, String sources)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sources == <span class="keyword">null</span> || sources.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            sources = VERIFY_CODES;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> codesLen = sources.length();</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        StringBuilder verifyCode = <span class="keyword">new</span> StringBuilder(verifySize);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; verifySize; i++)&#123;</span><br><span class="line">            verifyCode.append(sources.charAt(rand.nextInt(codesLen-<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyCode.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机验证码文件,并返回验证码值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">outputVerifyImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, File outputFile, <span class="keyword">int</span> verifySize)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, outputFile, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出随机验证码图片流,并返回验证码值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">outputVerifyImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, OutputStream os, <span class="keyword">int</span> verifySize)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, os, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成指定验证码图像文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, File outputFile, String code)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(outputFile == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File dir = outputFile.getParentFile();</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            outputFile.createNewFile();</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(outputFile);</span><br><span class="line">            outputImage(w, h, fos, code);</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出指定验证码图片流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, OutputStream os, String code)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> verifySize = code.length();</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        Graphics2D g2 = image.createGraphics();</span><br><span class="line">        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line">        Color[] colors = <span class="keyword">new</span> Color[<span class="number">5</span>];</span><br><span class="line">        Color[] colorSpaces = <span class="keyword">new</span> Color[] &#123; Color.WHITE, Color.CYAN,</span><br><span class="line">                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,</span><br><span class="line">                Color.PINK, Color.YELLOW &#125;;</span><br><span class="line">        <span class="keyword">float</span>[] fractions = <span class="keyword">new</span> <span class="keyword">float</span>[colors.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; colors.length; i++)&#123;</span><br><span class="line">            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];</span><br><span class="line">            fractions[i] = rand.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(fractions);</span><br><span class="line"></span><br><span class="line">        g2.setColor(Color.GRAY);<span class="comment">// 设置边框色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"></span><br><span class="line">        Color c = getRandColor(<span class="number">200</span>, <span class="number">250</span>);</span><br><span class="line">        g2.setColor(c);<span class="comment">// 设置背景色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">2</span>, w, h-<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制干扰线</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        g2.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));<span class="comment">// 设置线条的颜色</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = random.nextInt(w - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> y = random.nextInt(h - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> xl = random.nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">            g2.drawLine(x, y, x + xl + <span class="number">40</span>, y + yl + <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加噪点</span></span><br><span class="line">        <span class="keyword">float</span> yawpRate = <span class="number">0.05f</span>;<span class="comment">// 噪声率</span></span><br><span class="line">        <span class="keyword">int</span> area = (<span class="keyword">int</span>) (yawpRate * w * h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; area; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = random.nextInt(w);</span><br><span class="line">            <span class="keyword">int</span> y = random.nextInt(h);</span><br><span class="line">            <span class="keyword">int</span> rgb = getRandomIntColor();</span><br><span class="line">            image.setRGB(x, y, rgb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        shear(g2, w, h, c);<span class="comment">// 使图片扭曲</span></span><br><span class="line"></span><br><span class="line">        g2.setColor(getRandColor(<span class="number">100</span>, <span class="number">160</span>));</span><br><span class="line">        <span class="keyword">int</span> fontSize = h-<span class="number">4</span>;</span><br><span class="line">        Font font = <span class="keyword">new</span> Font(<span class="string">"Algerian"</span>, Font.ITALIC, fontSize);</span><br><span class="line">        g2.setFont(font);</span><br><span class="line">        <span class="keyword">char</span>[] chars = code.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; verifySize; i++)&#123;</span><br><span class="line">            AffineTransform affine = <span class="keyword">new</span> AffineTransform();</span><br><span class="line">            affine.setToRotation(Math.PI / <span class="number">4</span> * rand.nextDouble() * (rand.nextBoolean() ? <span class="number">1</span> : -<span class="number">1</span>), (w / verifySize) * i + fontSize/<span class="number">2</span>, h/<span class="number">2</span>);</span><br><span class="line">            g2.setTransform(affine);</span><br><span class="line">            g2.drawChars(chars, i, <span class="number">1</span>, ((w-<span class="number">10</span>) / verifySize) * i + <span class="number">5</span>, h/<span class="number">2</span> + fontSize/<span class="number">2</span> - <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g2.dispose();</span><br><span class="line">        ImageIO.write(image, <span class="string">"jpg"</span>, os);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Color <span class="title">getRandColor</span><span class="params">(<span class="keyword">int</span> fc, <span class="keyword">int</span> bc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fc &gt; <span class="number">255</span>)</span><br><span class="line">            fc = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (bc &gt; <span class="number">255</span>)</span><br><span class="line">            bc = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color(r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRandomIntColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] rgb = getRandomRgb();</span><br><span class="line">        <span class="keyword">int</span> color = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c : rgb) &#123;</span><br><span class="line">            color = color &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            color = color | c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getRandomRgb() &#123;</span><br><span class="line">        <span class="keyword">int</span>[] rgb = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            rgb[i] = random.nextInt(<span class="number">255</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rgb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shear</span><span class="params">(Graphics g, <span class="keyword">int</span> w1, <span class="keyword">int</span> h1, Color color)</span> </span>&#123;</span><br><span class="line">        shearX(g, w1, h1, color);</span><br><span class="line">        shearY(g, w1, h1, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shearX</span><span class="params">(Graphics g, <span class="keyword">int</span> w1, <span class="keyword">int</span> h1, Color color)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> period = random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> borderGap = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> frames = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> phase = random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h1; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = (<span class="keyword">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="keyword">double</span>) i / (<span class="keyword">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862</span>D * (<span class="keyword">double</span>) phase)</span><br><span class="line">                    / (<span class="keyword">double</span>) frames);</span><br><span class="line">            g.copyArea(<span class="number">0</span>, i, w1, <span class="number">1</span>, (<span class="keyword">int</span>) d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine((<span class="keyword">int</span>) d, i, <span class="number">0</span>, i);</span><br><span class="line">                g.drawLine((<span class="keyword">int</span>) d + w1, i, w1, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shearY</span><span class="params">(Graphics g, <span class="keyword">int</span> w1, <span class="keyword">int</span> h1, Color color)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> period = random.nextInt(<span class="number">40</span>) + <span class="number">10</span>; <span class="comment">// 50;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> borderGap = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> frames = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> phase = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w1; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = (<span class="keyword">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="keyword">double</span>) i / (<span class="keyword">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862</span>D * (<span class="keyword">double</span>) phase)</span><br><span class="line">                    / (<span class="keyword">double</span>) frames);</span><br><span class="line">            g.copyArea(i, <span class="number">0</span>, <span class="number">1</span>, h1, <span class="number">0</span>, (<span class="keyword">int</span>) d);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine(i, (<span class="keyword">int</span>) d, i, <span class="number">0</span>);</span><br><span class="line">                g.drawLine(i, (<span class="keyword">int</span>) d + h1, i, h1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"No-cache"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</span><br><span class="line">response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line"><span class="comment">//生成随机字符串</span></span><br><span class="line">String verifyCode = VerifyCodeUtil.generateVerifyCode(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//将字符串写入输出流 130宽 40高</span></span><br><span class="line">VerifyCodeUtil.outputImage(<span class="number">130</span>, <span class="number">40</span>, response.getOutputStream(), verifyCode);</span><br><span class="line"><span class="comment">//存入Session</span></span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line"> session.removeAttribute(<span class="string">"Code"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jna实现后台监听</title>
      <link href="/blog/2020/03/04/jna%E5%AE%9E%E7%8E%B0%E5%90%8E%E5%8F%B0%E7%9B%91%E5%90%AC/"/>
      <url>/blog/2020/03/04/jna%E5%AE%9E%E7%8E%B0%E5%90%8E%E5%8F%B0%E7%9B%91%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：244,阅读全文大约需要1分钟</p><h1 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Structure;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.Kernel32;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.HHOOK;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.MSG;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.HMODULE;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.LRESULT;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.WPARAM;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.HOOKPROC;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MouseHook</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WM_MOUSEMOVE = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> HHOOK hhk;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LowLevelMouseProc mouseHook;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> User32 lib = User32.INSTANCE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> [] on_off=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MouseHook</span><span class="params">(<span class="keyword">boolean</span> [] on_off)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.on_off = on_off;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LowLevelMouseProc</span> <span class="keyword">extends</span> <span class="title">HOOKPROC</span> </span>&#123;</span><br><span class="line"><span class="function">LRESULT <span class="title">callback</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, MOUSEHOOKSTRUCT lParam)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MOUSEHOOKSTRUCT</span> <span class="keyword">extends</span> <span class="title">Structure</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByReference</span> <span class="keyword">extends</span> <span class="title">MOUSEHOOKSTRUCT</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class"><span class="title">Structure</span>.<span class="title">ByReference</span> </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> User32.POINT pt;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> wHitTestCode;</span><br><span class="line"><span class="keyword">public</span> User32.ULONG_PTR dwExtraInfo;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HMODULE hMod = Kernel32.INSTANCE.GetModuleHandle(<span class="keyword">null</span>);</span><br><span class="line">mouseHook = <span class="keyword">new</span> LowLevelMouseProc() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> LRESULT <span class="title">callback</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam,</span></span></span><br><span class="line"><span class="function"><span class="params">MOUSEHOOKSTRUCT info)</span> </span>&#123;</span><br><span class="line">SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">SimpleDateFormat df2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String fileName=df1.format(<span class="keyword">new</span> Date());</span><br><span class="line">String time=df2.format(<span class="keyword">new</span> Date());</span><br><span class="line">BufferedWriter bw1=<span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw2=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw1=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_Mouse.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line">bw2=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_Common.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (on_off[<span class="number">0</span>] == <span class="keyword">false</span>) &#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (nCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam.intValue()) &#123;</span><br><span class="line"><span class="keyword">case</span> MouseHook.WM_MOUSEMOVE:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw1.write(time+<span class="string">"  ####  "</span>+<span class="string">"x="</span> + info.pt.x</span><br><span class="line">+ <span class="string">" y="</span> + info.pt.y+<span class="string">"\r\n"</span>);</span><br><span class="line">bw2.write(time+<span class="string">"  ####  "</span>+<span class="string">"x="</span> + info.pt.x</span><br><span class="line">+ <span class="string">" y="</span> + info.pt.y+<span class="string">"\r\n"</span>);</span><br><span class="line">bw1.flush();</span><br><span class="line">bw2.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lib</span><br><span class="line">.CallNextHookEx(hhk, nCode, wParam, info.getPointer());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">hhk = lib.SetWindowsHookEx(User32.WH_MOUSE_LL, mouseHook, hMod, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line">MSG msg = <span class="keyword">new</span> MSG();</span><br><span class="line"><span class="keyword">while</span> ((result = lib.GetMessage(msg, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"error in get message"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.err.println(<span class="string">"got message"</span>);</span><br><span class="line">lib.TranslateMessage(msg);</span><br><span class="line">lib.DispatchMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">lib.UnhookWindowsHookEx(hhk);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听键盘"><a href="#监听键盘" class="headerlink" title="监听键盘"></a>监听键盘</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.Kernel32;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.HHOOK;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.KBDLLHOOKSTRUCT;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.LowLevelKeyboardProc;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.MSG;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.HMODULE;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.LRESULT;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.WPARAM;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyboardHook</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> HHOOK hhk;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LowLevelKeyboardProc keyboardHook;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> User32 lib = User32.INSTANCE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> [] on_off=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KeyboardHook</span><span class="params">(<span class="keyword">boolean</span> [] on_off)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.on_off = on_off;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">HMODULE hMod = Kernel32.INSTANCE.GetModuleHandle(<span class="keyword">null</span>);</span><br><span class="line">keyboardHook = <span class="keyword">new</span> LowLevelKeyboardProc() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> LRESULT <span class="title">callback</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, KBDLLHOOKSTRUCT info)</span> </span>&#123;</span><br><span class="line">SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">SimpleDateFormat df2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String fileName=df1.format(<span class="keyword">new</span> Date());</span><br><span class="line">String time=df2.format(<span class="keyword">new</span> Date());</span><br><span class="line">BufferedWriter bw1=<span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw2=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw1=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_Keyboard.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line">bw2=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_Common.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (on_off[<span class="number">0</span>] == <span class="keyword">false</span>) &#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw1.write(time+<span class="string">"  ####  "</span>+info.vkCode+<span class="string">"\r\n"</span>);</span><br><span class="line">bw2.write(time+<span class="string">"  ####  "</span>+info.vkCode+<span class="string">"\r\n"</span>);</span><br><span class="line">bw1.flush();</span><br><span class="line">bw2.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lib.CallNextHookEx(hhk, nCode, wParam, info.getPointer());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">hhk = lib.SetWindowsHookEx(User32.WH_KEYBOARD_LL, keyboardHook, hMod, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line">MSG msg = <span class="keyword">new</span> MSG();</span><br><span class="line"><span class="keyword">while</span> ((result = lib.GetMessage(msg, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"error in get message"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.err.println(<span class="string">"got message"</span>);</span><br><span class="line">lib.TranslateMessage(msg);</span><br><span class="line">lib.DispatchMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">lib.UnhookWindowsHookEx(hhk);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听进程信息"><a href="#监听进程信息" class="headerlink" title="监听进程信息"></a>监听进程信息</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessInfo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> [] on_off=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProcessInfo</span><span class="params">(<span class="keyword">boolean</span> [] on_off)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.on_off = on_off;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BufferedReader input = <span class="keyword">null</span>;</span><br><span class="line">Process process = <span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw=<span class="keyword">null</span>;</span><br><span class="line">SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">SimpleDateFormat df2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String fileName=<span class="keyword">null</span>;</span><br><span class="line">String time=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(on_off[<span class="number">0</span>])&#123;</span><br><span class="line">fileName=df1.format(<span class="keyword">new</span> Date());</span><br><span class="line">time=df2.format(<span class="keyword">new</span> Date());</span><br><span class="line">bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_ProcessInfo.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line">Thread.sleep(<span class="number">60000</span>);</span><br><span class="line">process = Runtime.getRuntime().exec(<span class="string">"cmd.exe   /c   tasklist"</span>);</span><br><span class="line">input =<span class="keyword">new</span> BufferedReader(</span><br><span class="line"><span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">String line = <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">input.readLine();</span><br><span class="line">input.readLine();</span><br><span class="line">input.readLine();</span><br><span class="line"><span class="keyword">while</span> ((line = input.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">bw.write(time+<span class="string">"  ####  "</span>+line+<span class="string">"\r\n"</span>);</span><br><span class="line">bw.flush();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw.close();</span><br><span class="line">input.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开启以上工具类"><a href="#开启以上工具类" class="headerlink" title="开启以上工具类"></a>开启以上工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.AWTException;  </span><br><span class="line"><span class="keyword">import</span> java.awt.Image;  </span><br><span class="line"><span class="keyword">import</span> java.awt.MenuItem;  </span><br><span class="line"><span class="keyword">import</span> java.awt.PopupMenu;  </span><br><span class="line"><span class="keyword">import</span> java.awt.SystemTray;  </span><br><span class="line"><span class="keyword">import</span> java.awt.Toolkit;  </span><br><span class="line"><span class="keyword">import</span> java.awt.TrayIcon;  </span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;  </span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monitor</span>  </span>&#123;  </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Monitor</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line"><span class="keyword">boolean</span> [] on_off=&#123;<span class="keyword">true</span>&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> ProcessInfo(on_off)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> KeyboardHook(on_off)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> MouseHook(on_off)).start();</span><br><span class="line"><span class="keyword">final</span> TrayIcon trayIcon;  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (SystemTray.isSupported()) &#123;  </span><br><span class="line"> </span><br><span class="line">SystemTray tray = SystemTray.getSystemTray();  </span><br><span class="line">Image image = Toolkit.getDefaultToolkit().getImage(<span class="string">".//lib//monitor.png"</span>);  </span><br><span class="line"> </span><br><span class="line">ActionListener exitListener = <span class="keyword">new</span> ActionListener() &#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;  </span><br><span class="line">System.out.println(<span class="string">"Exiting..."</span>);  </span><br><span class="line">System.exit(<span class="number">0</span>);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;;  </span><br><span class="line"> </span><br><span class="line">PopupMenu popup = <span class="keyword">new</span> PopupMenu();  </span><br><span class="line">MenuItem defaultItem = <span class="keyword">new</span> MenuItem(<span class="string">"Exit"</span>);  </span><br><span class="line">defaultItem.addActionListener(exitListener);  </span><br><span class="line">popup.add(defaultItem);  </span><br><span class="line"> </span><br><span class="line">trayIcon = <span class="keyword">new</span> TrayIcon(image, <span class="string">"monitor"</span>, popup);  </span><br><span class="line"> </span><br><span class="line">ActionListener actionListener = <span class="keyword">new</span> ActionListener() &#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;  </span><br><span class="line">trayIcon.displayMessage(<span class="string">"Action Event"</span>,   </span><br><span class="line"><span class="string">"An Action Event Has Been Peformed!"</span>,  </span><br><span class="line">TrayIcon.MessageType.INFO);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"> </span><br><span class="line">trayIcon.setImageAutoSize(<span class="keyword">true</span>);  </span><br><span class="line">trayIcon.addActionListener(actionListener);  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">tray.add(trayIcon);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (AWTException e1) &#123;  </span><br><span class="line">e1.printStackTrace();  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;  </span><br><span class="line"><span class="keyword">new</span> Monitor();  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>logback使用</title>
      <link href="/blog/2020/03/04/logback%E4%BD%BF%E7%94%A8/"/>
      <url>/blog/2020/03/04/logback%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1196,阅读全文大约需要4分钟</p><blockquote><p>Logback是由log4j创始人设计的另一个开源日志。</p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>依赖<code>springBoot</code>自带logback的依赖</li><li>基础配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 控制台日志打印debug级别的日志(默认不打印)</span><br><span class="line"># 生产环境下配置 java -jar c:&#x2F;&#x2F;sss.jar --debug</span><br><span class="line">debug&#x3D;true</span><br><span class="line"># 设置具体包的日志级别</span><br><span class="line">logging.level.root&#x3D;INFO</span><br><span class="line">logging.level.org.springframwork.web&#x3D;DEBUG</span><br><span class="line">logging.level.org.hibernate&#x3D;ERROR</span><br><span class="line"># 指定输出文件</span><br><span class="line">logging.path&#x3D;F:\\demo</span><br><span class="line">logging.file&#x3D;demo.log</span><br><span class="line">logging.level.root&#x3D;info</span><br><span class="line"># 指定配置xml</span><br><span class="line">logging.config&#x3D;classpath:log&#x2F;logback-spring.xml</span><br></pre></td></tr></table></figure></li></ul><h1 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br><span class="line">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br><span class="line">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br><span class="line">&lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="line">&lt;configuration  scan&#x3D;&quot;true&quot; scanPeriod&#x3D;&quot;10 seconds&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;base.xml&quot; &#x2F;&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;contextName&gt;logback&lt;&#x2F;contextName&gt;</span><br><span class="line">    &lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;log.path&quot; value&#x3D;&quot;D:&#x2F;nmyslog&#x2F;nmys&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 彩色日志 --&gt;</span><br><span class="line">    &lt;!-- 彩色日志依赖的渲染类 --&gt;</span><br><span class="line">    &lt;conversionRule conversionWord&#x3D;&quot;clr&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.ColorConverter&quot; &#x2F;&gt;</span><br><span class="line">    &lt;conversionRule conversionWord&#x3D;&quot;wex&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot; &#x2F;&gt;</span><br><span class="line">    &lt;conversionRule conversionWord&#x3D;&quot;wEx&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 彩色日志格式 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;CONSOLE_LOG_PATTERN&quot; value&#x3D;&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--输出到控制台--&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;CONSOLE&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;info&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;Pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;&#x2F;Pattern&gt;</span><br><span class="line">            &lt;!-- 设置字符集 --&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--输出到文件--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;DEBUG_FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;&#x2F;log_debug.log&lt;&#x2F;file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt; &lt;!-- 设置字符集 --&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 日志归档 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;debug&#x2F;log-debug-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录debug级别的 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;debug&lt;&#x2F;level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;INFO_FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;&#x2F;log_info.log&lt;&#x2F;file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 每天日志归档路径以及格式 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;info&#x2F;log-info-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录info级别的 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;info&lt;&#x2F;level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;WARN_FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;&#x2F;log_warn.log&lt;&#x2F;file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt; &lt;!-- 此处设置字符集 --&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;warn&#x2F;log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录warn级别的 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;warn&lt;&#x2F;level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;ERROR_FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;&#x2F;log_error.log&lt;&#x2F;file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt; &lt;!-- 此处设置字符集 --&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;error&#x2F;log-error-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;ERROR&lt;&#x2F;level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、</span><br><span class="line">        以及指定&lt;appender&gt;。&lt;logger&gt;仅有一个name属性，</span><br><span class="line">        一个可选的level和一个可选的addtivity属性。</span><br><span class="line">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="line">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="line">              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。</span><br><span class="line">              如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="line">        addtivity:是否向上级logger传递打印信息。默认是true。</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!--&lt;logger name&#x3D;&quot;org.springframework.web&quot; level&#x3D;&quot;info&quot;&#x2F;&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;logger name&#x3D;&quot;org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor&quot; level&#x3D;&quot;INFO&quot;&#x2F;&gt;--&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span><br><span class="line">        第一种把&lt;root level&#x3D;&quot;info&quot;&gt;改成&lt;root level&#x3D;&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span><br><span class="line">        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span><br><span class="line">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="line">        不能设置为INHERITED或者同义词NULL。默认是DEBUG</span><br><span class="line">        可以包含零个或多个元素，标识这个appender将会添加到这个logger。</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开发环境:打印控制台--&gt;</span><br><span class="line">    &lt;springProfile name&#x3D;&quot;dev&quot;&gt;</span><br><span class="line">        &lt;logger name&#x3D;&quot;com.nmys.view&quot; level&#x3D;&quot;debug&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;springProfile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level&#x3D;&quot;info&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;CONSOLE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;DEBUG_FILE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;INFO_FILE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;WARN_FILE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;ERROR_FILE&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--生产环境:输出到文件--&gt;</span><br><span class="line">    &lt;!--&lt;springProfile name&#x3D;&quot;pro&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;root level&#x3D;&quot;info&quot;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;CONSOLE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;DEBUG_FILE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;INFO_FILE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;ERROR_FILE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;WARN_FILE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;&#x2F;root&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;&#x2F;springProfile&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(demo<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//当前类的class,方便定位</span></span><br><span class="line">logger.info(<span class="string">"xx"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>maven导出jar包</title>
      <link href="/blog/2020/03/04/maven%E5%AF%BC%E5%87%BAjar%E5%8C%85/"/>
      <url>/blog/2020/03/04/maven%E5%AF%BC%E5%87%BAjar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1205,阅读全文大约需要4分钟</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>常用插件有三种，对应三个配置</p><ol><li><code>maven-jar-plugin</code>: maven 默认打包插件，用来创建 project jar</li><li><code>maven-shade-plugin</code>: 打可执行包，executable(fat) jar</li><li><code>maven-assembly-plugin</code>: 支持自定义打包方式</li></ol><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><ol><li><p>打包前需要先<code>clean</code>一下，重新加载依赖</p></li><li><p><code>maven-jar-plugin</code>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!-- 对要打的jar包进行配置 --&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!-- Configuration of the archiver --&gt;</span><br><span class="line">        &lt;archive&gt;</span><br><span class="line">            &lt;!--生成的jar中，不要包含pom.xml和pom.properties这两个文件--&gt;</span><br><span class="line">            &lt;addMavenDescriptor&gt;false&lt;&#x2F;addMavenDescriptor&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- Manifest specific configuration --&gt;</span><br><span class="line">            &lt;manifest&gt;</span><br><span class="line">                &lt;!--是否要把第三方jar放到manifest的classpath中--&gt;</span><br><span class="line">                &lt;addClasspath&gt;true&lt;&#x2F;addClasspath&gt;</span><br><span class="line">                </span><br><span class="line">                &lt;!--生成的manifest中classpath的前缀，</span><br><span class="line">                因为要把第三方jar放到lib目录下，</span><br><span class="line">                所以classpath的前缀是lib&#x2F;--&gt;</span><br><span class="line">                &lt;classpathPrefix&gt;lib&#x2F;&lt;&#x2F;classpathPrefix&gt;</span><br><span class="line">            &lt;&#x2F;manifest&gt;</span><br><span class="line">        &lt;&#x2F;archive&gt;</span><br><span class="line">        &lt;!--过滤掉不希望包含在jar中的文件--&gt;</span><br><span class="line">        &lt;excludes&gt;</span><br><span class="line">            &lt;!-- 排除不需要的文件夹(路径是jar包内部的路径) --&gt;</span><br><span class="line">            &lt;exclude&gt;**&#x2F;assembly&#x2F;&lt;&#x2F;exclude&gt;</span><br><span class="line">        &lt;&#x2F;excludes&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>maven-assembly-plugin</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!-- 对项目的组装进行配置 --&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!-- 指定assembly插件的配置文件所在位置 --&gt;</span><br><span class="line">        &lt;descriptors&gt;</span><br><span class="line">            &lt;descriptor&gt;src&#x2F;main&#x2F;resources&#x2F;assembly&#x2F;package.xml&lt;&#x2F;descriptor&gt;</span><br><span class="line">        &lt;&#x2F;descriptors&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;make-assembly&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!-- 将组装绑定到maven生命周期的哪一阶段 --&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;!-- 指定assembly插件的打包方式--&gt;</span><br><span class="line">                &lt;goal&gt;single&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">        &lt;&#x2F;execution&gt;</span><br><span class="line">    &lt;&#x2F;executions&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure></li><li><p>双击<code>idea maven</code>菜单栏的<code>package</code>或者直接命令执行<code>mvn:package</code>生成两个包（可执行jar和项目压缩包）</p></li></ol><h1 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h1><p>包含两个文件：<br>pom.xml整体的配置<br>package.xml包含在pom.xml中，用于指定assembly装配时的配置</p><p><code>pom.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;!-- ####################### 基础设置 ###################### --&gt;</span><br><span class="line">    &lt;!--groupId:项目或者组织的唯一标志，并且配置时生成路径也是由此生成，如org.myproject.mojo生成的相对路径为：&#x2F;org&#x2F;myproject&#x2F;mojo--&gt;</span><br><span class="line">    &lt;groupId&gt;com.dong&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;!--项目的通用名称--&gt;</span><br><span class="line">    &lt;artifactId&gt;bigdata&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;!--打包机制，如pom,jar,maven-plugin,ejb,war,ear,rar,par--&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;!--项目的版本--&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- ####################### 项目信息 ###################### --&gt;</span><br><span class="line">    &lt;!--用户描述项目的名称，无关紧要的东西--&gt;</span><br><span class="line">    &lt;name&gt;bigdata&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;!--写明开发团队的网站，无关紧要--&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;http:&#x2F;&#x2F;www.dong.com&#x2F;.com&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- ####################### 环境设置 ###################### --&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- 项目执行脚本目录 --&gt;</span><br><span class="line">        &lt;project.script.execute.directory&gt;src&#x2F;main&#x2F;scripts&#x2F;execute&lt;&#x2F;project.script.execute.directory&gt;</span><br><span class="line">        &lt;!-- 项目说明文档目录 --&gt;</span><br><span class="line">        &lt;project.document.directory&gt;document&lt;&#x2F;project.document.directory&gt;</span><br><span class="line">        &lt;!-- 项目配置文件目录 --&gt;</span><br><span class="line">        &lt;project.config.directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;project.config.directory&gt;</span><br><span class="line">        &lt;!-- 项目编码 --&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 本地编译JDK版本 --&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;!-- 项目部署JDK版本 --&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">     配置Maven的仓库, 在此处配置的仓库会优先于setting.xml里配置的仓库,</span><br><span class="line">     建议哪个仓库快,哪个配置在前面, 然后如果Maven在前面配置的仓库找不到的话会去后面的仓库找，</span><br><span class="line">     如果后面的仓库都找不到，会去setting.xml中央仓库里找</span><br><span class="line">      --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;!-- 阿里云仓库,配置Maven仓库，速度快配置在最前面 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;aliyun&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">        &lt;!-- 国内备选仓库 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;repo2&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;repo2.maven.org&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Cloudera仓库,如果在阿里云仓库里找不到去Cloudera的仓库里找，主要是CDH版本Hadoop依赖的jar --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;cloudera&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;https:&#x2F;&#x2F;repository.cloudera.com&#x2F;artifactory&#x2F;cloudera-repos&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Scala仓库,如果前面两个都找不到来仓库找，如果此仓库也找不到，去中央仓库找 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;scala-tools.org&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;Scala-Tools Maven2 Repository&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;scala-tools.org&#x2F;repo-releases&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;&#x2F;repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.commons&#x2F;commons-lang3 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;dong&lt;&#x2F;finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!-- The configuration of maven-jar-plugin --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.4&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;!-- 对要打的jar包进行配置 --&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- Configuration of the archiver --&gt;</span><br><span class="line">                    &lt;archive&gt;</span><br><span class="line">                        &lt;!--生成的jar中，不要包含pom.xml和pom.properties这两个文件--&gt;</span><br><span class="line">                        &lt;addMavenDescriptor&gt;false&lt;&#x2F;addMavenDescriptor&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;!-- Manifest specific configuration --&gt;</span><br><span class="line">                        &lt;manifest&gt;</span><br><span class="line">                            &lt;!--是否要把第三方jar放到manifest的classpath中--&gt;</span><br><span class="line">                            &lt;addClasspath&gt;true&lt;&#x2F;addClasspath&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;!--</span><br><span class="line">                            生成的manifest中classpath的前缀，</span><br><span class="line">                            因为要把第三方jar放到lib目录下，</span><br><span class="line">                            所以classpath的前缀是lib&#x2F;</span><br><span class="line">                            --&gt;</span><br><span class="line">                            &lt;classpathPrefix&gt;lib&#x2F;&lt;&#x2F;classpathPrefix&gt;</span><br><span class="line">                        &lt;&#x2F;manifest&gt;</span><br><span class="line">                    &lt;&#x2F;archive&gt;</span><br><span class="line">                    &lt;!--过滤掉不希望包含在jar中的文件--&gt;</span><br><span class="line">                    &lt;excludes&gt;</span><br><span class="line">                        &lt;!-- 排除不需要的文件夹(路径是jar包内部的路径) --&gt;</span><br><span class="line">                        &lt;exclude&gt;**&#x2F;assembly&#x2F;&lt;&#x2F;exclude&gt;</span><br><span class="line">                    &lt;&#x2F;excludes&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- The configuration of maven-assembly-plugin --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.4&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;!-- 对项目的组装进行配置 --&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 指定assembly插件的配置文件所在位置 --&gt;</span><br><span class="line">                    &lt;descriptors&gt;</span><br><span class="line">                        &lt;descriptor&gt;src&#x2F;main&#x2F;resources&#x2F;assembly&#x2F;package.xml&lt;&#x2F;descriptor&gt;</span><br><span class="line">                    &lt;&#x2F;descriptors&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;make-assembly&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;!-- 将组装绑定到maven生命周期的哪一阶段 --&gt;</span><br><span class="line">                        &lt;!--&lt;phase&gt;package&lt;&#x2F;phase&gt;--&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;!-- 指定assembly插件的打包方式--&gt;</span><br><span class="line">                            &lt;goal&gt;single&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p><code>package.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;assembly&gt;</span><br><span class="line">    &lt;id&gt;full&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!-- 最终打包成一个用于发布的zip文件 --&gt;</span><br><span class="line">    &lt;formats&gt;</span><br><span class="line">        &lt;format&gt;zip&lt;&#x2F;format&gt;</span><br><span class="line">    &lt;&#x2F;formats&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 把依赖jar包打包进Zip压缩文件的lib目录下 --&gt;</span><br><span class="line">    &lt;dependencySets&gt;</span><br><span class="line">        &lt;dependencySet&gt;</span><br><span class="line">            &lt;!--不使用项目的artifact，第三方jar不要解压，打包进zip文件的lib目录--&gt;</span><br><span class="line">            &lt;useProjectArtifact&gt;false&lt;&#x2F;useProjectArtifact&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 第三方jar打包进Zip文件的lib目录下， --&gt;</span><br><span class="line">            &lt;!-- 注意此目录要与maven-jar-plugin中classpathPrefix指定的目录相同, --&gt;</span><br><span class="line">            &lt;!-- 不然这些依赖的jar包加载到ClassPath的时候会找不到--&gt;</span><br><span class="line">            &lt;outputDirectory&gt;lib&lt;&#x2F;outputDirectory&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 第三方jar不要解压--&gt;</span><br><span class="line">            &lt;!--&lt;unpack&gt;false&lt;&#x2F;unpack&gt;--&gt;</span><br><span class="line">        &lt;&#x2F;dependencySet&gt;</span><br><span class="line">    &lt;&#x2F;dependencySets&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 文件设置，你想把哪些文件包含进去，或者把某些文件排除掉，都是在这里配置--&gt;</span><br><span class="line">    &lt;fileSets&gt;</span><br><span class="line">        &lt;!-- 把项目自己编译出来的可执行jar，打包进zip文件的根目录 --&gt;</span><br><span class="line">        &lt;fileSet&gt;</span><br><span class="line">            &lt;directory&gt;$&#123;project.build.directory&#125;&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;outputDirectory&gt;&lt;&#x2F;outputDirectory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;*.jar&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">        &lt;&#x2F;fileSet&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">        把项目readme说明文档，打包进zip文件根目录下</span><br><span class="line">        (这里针对目录document&#x2F;readme.txt文件)</span><br><span class="line">        $&#123;projet.document.directory&#125;是pom.xml中自己配置的</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;fileSet&gt;</span><br><span class="line">            &lt;directoryl&gt;$&#123;projet.document.directory&#125;&lt;&#x2F;directoryl&gt;</span><br><span class="line">            &lt;outputDirectory&gt;&lt;&#x2F;outputDirectory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;readme.*&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">        &lt;&#x2F;fileSet&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">        把项目相关的说明文档(除了readme文档)，</span><br><span class="line">        打包进zip文件根目录下的document目录</span><br><span class="line">        (这里针对document&#x2F;exclode.txt文件)</span><br><span class="line">        $&#123;project.document.directory&#125;是在pom.xml中自己配置的</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;fileSet&gt;</span><br><span class="line">            &lt;directory&gt;$&#123;project.document.directory&#125;&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;outputDirectory&gt;document&lt;&#x2F;outputDirectory&gt;</span><br><span class="line">            &lt;excludes&gt;</span><br><span class="line">                &lt;exclude&gt;readme.*&lt;&#x2F;exclude&gt;</span><br><span class="line">            &lt;&#x2F;excludes&gt;</span><br><span class="line">        &lt;&#x2F;fileSet&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">        把项目的脚本文件目录(src&#x2F;main&#x2F;scripts )中的启动脚本文件，</span><br><span class="line">        打包进zip文件的根目录</span><br><span class="line">        (这里针对的是src&#x2F;scripts&#x2F;execute&#x2F;include-file.sh文件)</span><br><span class="line">        $&#123;project.script.execute.directory&#125;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;fileSet&gt;</span><br><span class="line">            &lt;directory&gt;$&#123;project.script.execute.directory&#125;&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;outputDirectory&gt;&lt;&#x2F;outputDirectory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;*&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">        &lt;&#x2F;fileSet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;fileSets&gt;</span><br><span class="line">&lt;&#x2F;assembly&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java日期</title>
      <link href="/blog/2020/03/04/java%E6%97%A5%E6%9C%9F/"/>
      <url>/blog/2020/03/04/java%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：445,阅读全文大约需要1分钟</p><blockquote><p>java8也新加入了功能更强大的日期，但是本次主要是记录常用的日期格式化，所以讨论的是<code>java.util.Date</code></p></blockquote><h1 id="获取日期"><a href="#获取日期" class="headerlink" title="获取日期"></a>获取日期</h1><ul><li><code>Date()</code>获取当前时间</li><li><code>Date(long millisec)</code>距离格林威治时间1970年1月1日millisec毫秒的时间</li><li><code>date.getTime()&gt;date2.getTime()</code>判断时间的前后<h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date now = <span class="keyword">new</span> Date( );</span><br><span class="line">SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat (<span class="string">"E yyyy.MM.dd 'at' hh:mm:ss a zzz"</span>);</span><br><span class="line">System.out.println(<span class="string">"Current Date: "</span> + ft.format(now));</span><br></pre></td></tr></table></figure></li></ul><h1 id="解析格式"><a href="#解析格式" class="headerlink" title="解析格式"></a>解析格式</h1><table><thead><tr><th>字母</th><th>日期</th><th>示例</th></tr></thead><tbody><tr><td>G</td><td>era标志</td><td>AD</td></tr><tr><td>y</td><td>年</td><td>1996 或 96</td></tr><tr><td>M</td><td>月</td><td>July Jul 07</td></tr><tr><td>w</td><td>年中的第几周</td><td>27</td></tr><tr><td>W</td><td>月份中的第几周</td><td>2</td></tr><tr><td>D</td><td>年中的第几天</td><td>189</td></tr><tr><td>d</td><td>月中的第几天</td><td>10</td></tr><tr><td>F</td><td>月中的第几星期</td><td>2</td></tr><tr><td>E</td><td>星期中的第几天</td><td>Tuesday Tue</td></tr><tr><td>a</td><td>Am/Pm 上下午</td><td>PM</td></tr><tr><td>H</td><td>今天的第几小时0-23</td><td>0</td></tr><tr><td>k</td><td>今天的第几小时1-24</td><td>24</td></tr><tr><td>K</td><td>上下午几点0-11</td><td>11</td></tr><tr><td>h</td><td>上下午几点1-12</td><td>12</td></tr><tr><td>m</td><td>小时中的分钟</td><td>30</td></tr><tr><td>s</td><td>分钟中的秒数</td><td>30</td></tr><tr><td>S</td><td>毫秒</td><td>978</td></tr><tr><td>z</td><td>时区</td><td>Pacific standard Time;PST;GMT-08:00</td></tr><tr><td>Z</td><td>时区</td><td>-0800</td></tr></tbody></table><h1 id="日期格式化成字符串"><a href="#日期格式化成字符串" class="headerlink" title="日期格式化成字符串"></a>日期格式化成字符串</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">       System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure><h1 id="字符串转日期"><a href="#字符串转日期" class="headerlink" title="字符串转日期"></a>字符串转日期</h1><p>把对应格式的字符串转解析成为日期，如果字符串不匹配规则（比指定的规则数据少）则报错。<br>并且需要捕获ParseException</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.text.ParseException: Unparseable date: &quot;2019-10-24&quot;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">"2016-10-24 21:59:06"</span>;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        System.out.println(sdf.parse(string));</span><br></pre></td></tr></table></figure><blockquote><p>总结，1.先创建SimpleDateFormat(“规则”);2.format转换，parse解析。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java自动化测试</title>
      <link href="/blog/2020/03/04/java%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/blog/2020/03/04/java%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：343,阅读全文大约需要1分钟</p><blockquote><p>java.awt.Robot 提供模拟点击，模拟用户输入等操作</p></blockquote><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.InputEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br></pre></td></tr></table></figure><h1 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h1><ol><li>按下按键</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * keycode:KeyEvent.VK_PAGE_UP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">pressSingleKeyByNumber</span><span class="params">(<span class="keyword">int</span> keycode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** 创建自动化测试对象  */</span></span><br><span class="line">        Robot robot = <span class="keyword">new</span> Robot();</span><br><span class="line">        <span class="comment">/**按下按键*/</span></span><br><span class="line">        robot.keyPress(keycode);</span><br><span class="line">        <span class="comment">/**松开按键*/</span></span><br><span class="line">        robot.keyRelease(keycode);</span><br><span class="line">        <span class="comment">/**可以稍作延时处理*/</span></span><br><span class="line">        robot.delay(<span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AWTException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>组合键<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先按下control再按下其它，松开其它再松开control</span></span><br><span class="line">        Robot robot = <span class="keyword">new</span> Robot();</span><br><span class="line">        robot.keyPress(KeyEvent.VK_CONTROL);</span><br><span class="line">        robot.keyPress(keycode);</span><br><span class="line">        robot.keyRelease(keycode);</span><br><span class="line">        robot.keyRelease(KeyEvent.VK_CONTROL);</span><br><span class="line">        robot.delay(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li></ol><h1 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h1><ol><li>点击</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户单击屏幕指定区域,默认单击屏幕最中央</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x：x坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y：y坐标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clickScreenByXY</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**创建工具包对象*/</span></span><br><span class="line">        Toolkit toolkit = Toolkit.getDefaultToolkit();</span><br><span class="line">        <span class="comment">/**创建自动化对象*/</span></span><br><span class="line">        Robot robot = <span class="keyword">new</span> Robot();</span><br><span class="line">        <span class="comment">/**利用工具包对象获取屏幕分辨率*/</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x = toolkit.getScreenSize().width / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = toolkit.getScreenSize().height / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 移动鼠标到指定位置</span></span><br><span class="line"><span class="comment">         * 然后按下鼠标左键，再松开，模拟单击操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        robot.mouseMove(x, y);</span><br><span class="line">        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.delay(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AWTException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>移动鼠标</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动将鼠标移动到指定的位置</span></span><br><span class="line"><span class="comment"> * 如果参数x与y为null,则默认将鼠标放在屏幕右侧中间隐藏</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x：x坐标 ,左上角 为0----设定值超过屏幕分辨率也没关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y：y坐标 ,左上角 为0----设定值超过屏幕分辨率也没关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">mouseMoveToXY</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**创建工具包对象*/</span></span><br><span class="line">        Toolkit toolkit = Toolkit.getDefaultToolkit();</span><br><span class="line">        <span class="comment">/**创建自动化对象*/</span></span><br><span class="line">        Robot robot = <span class="keyword">new</span> Robot();</span><br><span class="line">        <span class="comment">/**利用工具包对象获取屏幕分辨率*/</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x = toolkit.getScreenSize().width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = toolkit.getScreenSize().height / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 移动鼠标到指定位置</span></span><br><span class="line"><span class="comment">         *  robot.delay(100);延时100毫秒</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        robot.mouseMove(x, y);</span><br><span class="line">        robot.delay(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AWTException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用按键"><a href="#常用按键" class="headerlink" title="常用按键"></a>常用按键</h1><blockquote><p>按键都在 KeyEvent类中，和键盘对应</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java自定义注解</title>
      <link href="/blog/2020/03/04/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
      <url>/blog/2020/03/04/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>文章字数：635,阅读全文大约需要2分钟</p><h1 id="一、元注解-用于修饰注解"><a href="#一、元注解-用于修饰注解" class="headerlink" title="一、元注解(用于修饰注解)"></a>一、元注解(用于修饰注解)</h1><ol><li><p><code>@Retention</code>指定annotation指定标记注解的存储方式<br>值有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#96;RetentionPolicy.SOURCE&#96; 标记的注释仅保留在源级别中，并由编译器忽略。</span><br><span class="line">* &#96;RetentionPolicy.CLASS&#96; 标记的注释在编译时由编译器保留，但Java虚拟机&#96;JVM&#96;会忽略。</span><br><span class="line">* &#96;RetentionPolicy.RUNTIME&#96; 标记的注释由&#96;JVM&#96;保留，因此运行时环境可以使用它。</span><br></pre></td></tr></table></figure></li><li><p><code>@Documented</code>注释表明，无论何时使用指定的注释，都应使用Javadoc工具记录这些元素。(默认情况下，注释不包含在Javadoc)</p></li><li><p><code>@Target</code>注释标记另一个注释，以限制可以应用注释的Java元素类型。目标注释指定以下元素类型之一作为其值<br>可选值有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* &#96;ElementType.TYPE&#96; 可以应用于类的任何元素。</span><br><span class="line">* &#96;ElementType.FIELD&#96; 可以应用于字段或属性。</span><br><span class="line">* &#96;ElementType.METHOD&#96; 可以应用于方法级注释。</span><br><span class="line">* &#96;ElementType.PARAMETER&#96; 可以应用于方法的参数。</span><br><span class="line">* &#96;ElementType.CONSTRUCTOR&#96; 可以应用于构造函数。</span><br><span class="line">* &#96;ElementType.LOCAL_VARIABLE&#96; 可以应用于局部变量。</span><br><span class="line">* &#96;ElementType.ANNOTATION_TYPE&#96; 可以应用于注释类型。</span><br><span class="line">* &#96;ElementType.PACKAGE&#96; 可以应用于包声明。</span><br><span class="line">* &#96;ElementType.TYPE_PARAMETER&#96;</span><br><span class="line">* &#96;ElementType.TYPE_USE&#96;</span><br></pre></td></tr></table></figure></li><li><p><code>@Inherited</code>注释表明注释类型可以从超类继承。当用户查询注释类型并且该类没有此类型的注释时，将查询类的超类以获取注释类型（默认情况下不是这样）。此注释仅适用于类声明。</p></li><li><p><code>@Repeatable</code>Java SE 8中引入的，<code>@Repeatable</code>注释表明标记的注释可以多次应用于相同的声明或类型使用(即可以重复在同一个类、方法、属性等上使用)。</p></li></ol><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span> <span class="comment">//javaDoc记录</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//运行环境可用</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;) <span class="comment">//可用于任何元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnn &#123;<span class="comment">//自定义一个@Myann(value="")注解</span></span><br><span class="line">  <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过反射获取注解信息"><a href="#通过反射获取注解信息" class="headerlink" title="通过反射获取注解信息"></a>通过反射获取注解信息</h1><ul><li>判断是否应用的某个注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span></span></span><br></pre></td></tr></table></figure></li><li>获取指定类型的注解信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span></span></span><br></pre></td></tr></table></figure></li><li>获取所有注解的信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Annotation[] getAnnotations()</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块化</title>
      <link href="/blog/2020/03/04/ES6%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/blog/2020/03/04/ES6%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>文章字数：239,阅读全文大约需要1分钟</p><blockquote><p>ES6支持模块化编程，模块内变量，函数外部无法获取。必须模块内使用esport输出，外部使用import接收。输出有普通和默认两种，接收时普通需要{xxx,xx}接收，默认不用。</p></blockquote><ul><li><strong>简单输出</strong></li></ul><p><code>test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name=<span class="string">"zhangsan"</span>;</span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//输出导入的变量name</span></span><br></pre></td></tr></table></figure><ul><li><strong>多变量</strong></li></ul><p><code>test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="keyword">let</span> addr=<span class="string">"fz"</span>;</span><br><span class="line"><span class="keyword">let</span> myfun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name+<span class="string">"住在"</span>+addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    addr,</span><br><span class="line">    myfun</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;name,addr,myfun&#125; from &quot;.&#x2F;test.js&quot;;</span><br><span class="line">console.log(name);</span><br><span class="line">console.log(myfun());</span><br></pre></td></tr></table></figure><ul><li><strong>重命名</strong></li></ul><ol><li>模块内部<br><code>test.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName=<span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="keyword">let</span> myAddr=<span class="string">"fz"</span>;</span><br><span class="line"><span class="keyword">export</span>&#123;</span><br><span class="line">    myName <span class="keyword">as</span> name,</span><br><span class="line">    myAddr <span class="keyword">as</span> addr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>index.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name,addr&#125; <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name+<span class="string">"住在"</span>+addr)</span><br></pre></td></tr></table></figure></li><li>外部<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------------test1.js-----------------------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> myName=<span class="string">"我来自test1.js"</span>;</span><br><span class="line"><span class="comment">/*-----------------------test2.js-----------------------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> myName=<span class="string">"我来自test2.js"</span>;</span><br><span class="line"><span class="comment">/*-----------------------index.js-----------------------*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;myName <span class="keyword">as</span> name1&#125; <span class="keyword">from</span> <span class="string">"./test1.js"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;myName <span class="keyword">as</span> name2&#125; <span class="keyword">from</span> <span class="string">"./test2.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name1);<span class="comment">//我来自test1.js</span></span><br><span class="line"><span class="built_in">console</span>.log(name2);<span class="comment">//我来自test1.js</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>导入整个模块</strong></li></ul><p><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> poeple <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(people.name);</span><br><span class="line"><span class="built_in">console</span>.log(people.addr);</span><br></pre></td></tr></table></figure><ul><li><strong>默认导出</strong></li></ul><ol><li>导出默认方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*---------test.js-------------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"default function"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-------index.js---------*/</span></span><br><span class="line"><span class="keyword">import</span> xxxfun <span class="keyword">from</span> <span class="string">"./test.js"</span>;<span class="comment">//不需要&#123;&#125;,名字任意</span></span><br><span class="line"><span class="built_in">console</span>.log(xxxfun());</span><br></pre></td></tr></table></figure><ol start="2"><li>导出默认对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------test.js---------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;<span class="comment">//json对象</span></span><br><span class="line">    defaultFun()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"default fun"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    name : <span class="string">"xxx"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-----------index.js----------*/</span></span><br><span class="line"><span class="keyword">import</span> defaultOb <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(defaultOb.defaultFun());</span><br><span class="line"><span class="built_in">console</span>.log(defaultOb.name);</span><br></pre></td></tr></table></figure></li></ol></li><li>混合导出<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------------test.js-------------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"xx"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name=<span class="string">"zzz"</span>;</span><br><span class="line"><span class="comment">/*--------------index.js-----------*/</span></span><br><span class="line"><span class="keyword">import</span> defaultFun,&#123;name&#125; <span class="keyword">from</span> <span class="string">"./test.js"</span>;<span class="comment">//&#123;&#125;是导出，不加是默认导出。</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/blog/2020/03/04/JUC/"/>
      <url>/blog/2020/03/04/JUC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2043,阅读全文大约需要8分钟</p><blockquote><p>Java.Util.Concurrent是JDK1.5之后推出的java并发工具包。其中有很多多线程工具类，能有效减少竞争条件，减少死锁进程。</p></blockquote><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><blockquote><p>线程池是一组可复用的线程集合。由处理线程+任务队列组成。</p></blockquote><p>涉及对象信息</p><ol><li><code>Executor</code>: 线程池中<code>Runnable</code>任务执行者。</li><li><code>ExecutorService</code>: 管理线程池对象，能够把<code>Runnable</code>和<code>Callable</code>交到线程池中执行</li><li><code>Executors</code>: 此类的静态方法能够生成不同的线程池，并返回<code>ExecutorService</code>用于管理。</li></ol><p>常用程池类型</p><blockquote><p>可以使用ThreadPoolExecutor 的构造函数创建属性细节不同的线程池，一下为已经定义好的线程池</p></blockquote><ol><li><p><code>newFixedThreadPool</code>: 固定大小的线程池，共享的无界队列管理任务。关闭前发生异常导致线程终止，则会使用新线程代替。（如果需要）</p></li><li><p><code>newCachedThreadPool</code>: 无界线程池，当需要线程使用但是线程池内无线程，则会新建一个线程并加入线程池。60s未用的线程会被移除。</p></li><li><p><code>newSingleThreadExecutor</code>: 无界队列，单个执行线程。如果关闭前因为异常线程被迫结束，后续需要线程时会创建新的线程并替换不可用的。</p></li><li><p><code>ThreadPoolExecutor</code>: 这个类的构造方法可以生成自定义配置的线程池，可以设置<code>最大线程数</code>，<code>最小线程数</code>，<code>空闲线程keepAlive时间</code>。</p></li></ol><p>以上线程池生成后返回的都是<code>ExecutorService</code>对象</p><ol><li><p><code>ExecutorService.submit()</code>: 方法可以提交任务给线程池</p></li><li><p><code>ExecutorService.shutdown()</code>: 此方法可以结束线程池</p></li></ol><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="Semaphore计数信号量-许可集合"><a href="#Semaphore计数信号量-许可集合" class="headerlink" title="Semaphore计数信号量(许可集合)"></a>Semaphore计数信号量(许可集合)</h2><blockquote><p>可以初始化任意数量的许可。<code>acquire()</code>方法会拿走一个许可，如果没有许可了则阻塞。<code>release()</code>方法可以释放当前线程拿走的许可。限制同一时间可以同时执行的线程数量</p></blockquote><p>10个人抢2个位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySemaphore</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Semaphore position;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MySemaphore</span><span class="params">(<span class="keyword">int</span> i, Semaphore s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = i;</span><br><span class="line"><span class="keyword">this</span>.position = s;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//这个方法可以判断还有多少许可</span></span><br><span class="line"><span class="keyword">if</span> (position.availablePermits() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"顾客["</span> + <span class="keyword">this</span>.id + <span class="string">"]进入厕所，有空位"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"顾客["</span> + <span class="keyword">this</span>.id + <span class="string">"]进入厕所，没空位，排队"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取到空厕所了（没许可等待许可）</span></span><br><span class="line">position.acquire();</span><br><span class="line">System.out.println(<span class="string">"顾客["</span> + <span class="keyword">this</span>.id + <span class="string">"]获得坑位"</span>);</span><br><span class="line"><span class="comment">//使用中...</span></span><br><span class="line">Thread.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>));</span><br><span class="line">System.out.println(<span class="string">"顾客["</span> + <span class="keyword">this</span>.id + <span class="string">"]使用完毕"</span>);</span><br><span class="line"><span class="comment">//厕所使用完之后释放</span></span><br><span class="line">position.release();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">ExecutorService list = Executors.newCachedThreadPool();</span><br><span class="line">Semaphore position = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);<span class="comment">//只有两个厕所</span></span><br><span class="line"><span class="comment">//有十个人</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">list.submit(<span class="keyword">new</span> MySemaphore(i + <span class="number">1</span>, position));</span><br><span class="line">&#125;</span><br><span class="line">list.shutdown();</span><br><span class="line">position.acquireUninterruptibly(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"使用完毕，需要清扫了"</span>);</span><br><span class="line">position.release(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReentrantLock可重入互斥锁"><a href="#ReentrantLock可重入互斥锁" class="headerlink" title="ReentrantLock可重入互斥锁"></a>ReentrantLock可重入互斥锁</h2><blockquote><p>一个可重入的互斥锁定 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁定相同的一些基本行为和语义，但功能更强大。</p></blockquote><ol><li><p><code>ReentrantLock</code>将由最近成功获得锁定，并且还没有释放该锁定的线程所拥有。</p></li><li><p>当锁定没有被另一个线程所拥有时，调用 lock 的线程将成功获取该锁定并返回。</p></li><li><p>如果当前线程已经拥有该锁定，此方法将立即返回。可以使用 isHeldByCurrentThread() 和 getHoldCount() 方法来检查此情况是否发生。</p></li><li><p>此类的构造方法接受一个可选的公平参数。当设置为 true时，在多个线程的争用下，这些锁定倾向于将访问权授予等待时间最长的线程。否则此锁定将无法保证任何特定访问顺序。</p></li></ol><p>与采用默认设置（使用不公平锁定）相比，<code>使用公平锁定的程序在许多线程访问时表现为很低的总体吞吐量（即速度很慢，常常极其慢），但是在获得锁定和保证锁定分配的均衡性时差异较小。</code><br>不过要注意的是，公平锁定不能保证线程调度的公平性。因此，使用公平锁定的众多线程中的一员可能获得多倍的成功机会，这种情况发生在其他活动线程没有被处理并且目前并未持有锁定时。还要注意的是，未定时的 tryLock 方法并没有使用公平设置。因为即使其他线程正在等待，只要该锁定是可用的，此方法就可以获得成功。</p><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">lock.lock(); <span class="comment">// block until condition holds</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// ... method body</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch同步辅助类（计数）"><a href="#CountDownLatch同步辅助类（计数）" class="headerlink" title="CountDownLatch同步辅助类（计数）"></a>CountDownLatch同步辅助类（计数）</h2><blockquote><p>初始化锁，指定一个数量。<code>begin.await()</code>会阻塞线程，<code>begin.countDown();</code>每次计数<code>-1</code>，直到为0阻塞的线程才会释放</p></blockquote><h2 id="CyclicBarrier同步辅助类（公共屏障）"><a href="#CyclicBarrier同步辅助类（公共屏障）" class="headerlink" title="CyclicBarrier同步辅助类（公共屏障）"></a>CyclicBarrier同步辅助类（公共屏障）</h2><blockquote><p>锁初始化时指定几个<code>await()</code>之后<code>await()</code>方法才会释放当前线程</p></blockquote><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCyclicBarrier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 徒步需要的时间: 分别代表Shenzhen, Guangzhou, Shaoguan, Changsha, Wuhan的时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] timeWalk = &#123;<span class="number">5</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="comment">// 自驾游</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] timeSelf = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// 旅游大巴</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] timeBus = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(<span class="keyword">new</span> Date()) + <span class="string">": "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Tour</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] times;</span><br><span class="line">        <span class="keyword">private</span> CyclicBarrier barrier;</span><br><span class="line">        <span class="keyword">private</span> String tourName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Tour</span><span class="params">(CyclicBarrier barrier, String tourName, <span class="keyword">int</span>[] times)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.times = times;</span><br><span class="line">            <span class="keyword">this</span>.tourName = tourName;</span><br><span class="line">            <span class="keyword">this</span>.barrier = barrier;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(times[<span class="number">0</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Shenzhen"</span>);</span><br><span class="line">                <span class="comment">// 等三个线程执行完之后才会释放</span></span><br><span class="line">                barrier.await();</span><br><span class="line">                Thread.sleep(times[<span class="number">1</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Guangzhou"</span>);</span><br><span class="line">                barrier.await();</span><br><span class="line">                Thread.sleep(times[<span class="number">2</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Shaoguan"</span>);</span><br><span class="line">                barrier.await();</span><br><span class="line">                Thread.sleep(times[<span class="number">3</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Changsha"</span>);</span><br><span class="line">                barrier.await();</span><br><span class="line">                Thread.sleep(times[<span class="number">4</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Wuhan"</span>);</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 三个旅行团（三个await()之后才会释放）</span></span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>);</span><br><span class="line">        ExecutorService exec = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        exec.submit(<span class="keyword">new</span> Tour(barrier, <span class="string">"WalkTour"</span>, timeWalk));</span><br><span class="line">        exec.submit(<span class="keyword">new</span> Tour(barrier, <span class="string">"SelfTour"</span>, timeSelf));</span><br><span class="line">        <span class="comment">// 当我们把下面的这段代码注释后，会发现，程序阻塞了，无法继续运行下去。</span></span><br><span class="line">        exec.submit(<span class="keyword">new</span> Tour(barrier, <span class="string">"BusTour"</span>, timeBus));</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><h2 id="BlockingQueue强化的阻塞队列"><a href="#BlockingQueue强化的阻塞队列" class="headerlink" title="BlockingQueue强化的阻塞队列"></a>BlockingQueue强化的阻塞队列</h2><blockquote><p>支持两个附加操作的 Queue，这两个操作是：检索元素时等待队列变为非空，以及存储元素时等待空间变得可用。</p></blockquote><ol><li><p>支持两个附加操作的 Queue，这两个操作是：检索元素时等待队列变为非空，以及存储元素时等待空间变得可用。</p></li><li><p>BlockingQueue 不接受 null 元素。试图 <code>add</code>、<code>put</code> 或 <code>offer</code> 一个 null 元素时，某些实现会抛出 NullPointerException。null 被用作指示 poll 操作失败的警戒值。</p></li><li><p>BlockingQueue 可以是限定容量的。它在任意给定时间都可以有一个 remainingCapacity，超出此容量，便无法无阻塞地 put 额外的元素。</p></li><li><p>没有任何内部容量约束的 BlockingQueue 总是报告 Integer.MAX_VALUE 的剩余容量。</p></li></ol><p>5.BlockingQueue 实现主要用于生产者-使用者队列，但它另外还支持 Collection 接口。因此，举例来说，使用 remove(x) 从队列中移除任意一个元素是有可能的。(最好不要使用这些操作)</p><p>然而，这种操作通常不会有效执行，<code>只能有计划地偶尔使用</code>，比如在取消排队信息时。<br>BlockingQueue 实现是线程安全的。所有排队方法都可以使用内部锁定或其他形式的并发控制来自动达到它们的目的。<br>然而，大量的 Collection 操作（addAll、containsAll、retainAll 和 removeAll）没有必要自动执行，除非在实现中特别说明。<br>因此，举例来说，在只添加了 c 中的一些元素后，addAll(c) 有可能失败（抛出一个异常）。<br>BlockingQueue 实质上不 支持使用任何一种“close”或“shutdown”操作来指示不再添加任何项。<br>这种功能的需求和使用有依赖于实现的倾向。例如，一种常用的策略是：对于生产者，插入特殊的 end-of-stream 或 poison 对象，并根据使用者获取这些对象的时间来对它们进行解释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;    </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;   </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockingQueue</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;String&gt;(<span class="number">3</span>);  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBlockingQueue</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.index = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            queue.put(String.valueOf(<span class="keyword">this</span>.index));  </span><br><span class="line">            System.out.println(<span class="string">"&#123;"</span> + <span class="keyword">this</span>.index + <span class="string">"&#125; in queue!"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;  </span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">            service.submit(<span class="keyword">new</span> MyBlockingQueue(i));  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">                        Thread.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>));  </span><br><span class="line">                        <span class="keyword">if</span> (MyBlockingQueue.queue.isEmpty())  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        String str = MyBlockingQueue.queue.take();  </span><br><span class="line">                        System.out.println(str + <span class="string">" has take!"</span>);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        service.submit(thread);  </span><br><span class="line">        service.shutdown();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程返回结果"><a href="#线程返回结果" class="headerlink" title="线程返回结果"></a>线程返回结果</h1><h2 id="CompletionService包装线程池返回结果"><a href="#CompletionService包装线程池返回结果" class="headerlink" title="CompletionService包装线程池返回结果"></a>CompletionService包装线程池返回结果</h2><blockquote><p>相比于一个个去获取线程的结果<code>Future.get()</code>会造成线程阻塞，消耗时间。循环<code>CompletionService</code>就是一个保存已经完成的线程的结果<code>Future</code>的<code>BlockingQueue</code>,<code>take()</code>方法就会从中取出一个。</p></blockquote><p>循环<code>executorCompletionService.take().get()</code>就能得到结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletionService;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorCompletionService;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCompletionService</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCompletionService</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.id = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();  </span><br><span class="line">        CompletionService&lt;String&gt; completion = <span class="keyword">new</span> ExecutorCompletionService&lt;String&gt;(service);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">            completion.submit(<span class="keyword">new</span> MyCompletionService(i));  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">            System.out.println(completion.take().get());  </span><br><span class="line">        &#125;  </span><br><span class="line">        service.shutdown();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        Integer time = (<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>);  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            System.out.println(<span class="keyword">this</span>.id + <span class="string">" start"</span>);  </span><br><span class="line">            Thread.sleep(time);  </span><br><span class="line">            System.out.println(<span class="keyword">this</span>.id + <span class="string">" end"</span>);  </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id + <span class="string">":"</span> + time;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Future异步执行结果"><a href="#Future异步执行结果" class="headerlink" title="Future异步执行结果"></a>Future异步执行结果</h2><blockquote><p>执行线程后返回的<code>Future</code>代表线程返回的结果，用于检测异步线程是否结束，如果结束获取返回值，没结束可以阻塞线程直到有结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFutureTask</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ExecutionException </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ExecutionException  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">final</span> ExecutorService exe=Executors.newFixedThreadPool(<span class="number">3</span>);  </span><br><span class="line">        Callable&lt;String&gt; call=<span class="keyword">new</span> Callable&lt;String&gt;()&#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Thread is finished"</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        Future&lt;String&gt; task=exe.submit(call);  </span><br><span class="line">        String obj=task.get();  </span><br><span class="line">        System.out.println(obj+<span class="string">"进程结束"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"总进程结束"</span>);  </span><br><span class="line">        exe.shutdown();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String str;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadTest</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.str = str;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.setStr(<span class="string">"allen"</span>+str);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addString</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.str = <span class="string">"allen:"</span> + str;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> str;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.str = str;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定时器延时器"><a href="#定时器延时器" class="headerlink" title="定时器延时器"></a>定时器延时器</h1><blockquote><p>创建延时任务，取消任务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.concurrent.TimeUnit.SECONDS;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScheduledThread</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">final</span> ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class="number">2</span>);  </span><br><span class="line">        <span class="keyword">final</span> Runnable beeper = <span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                System.out.println(<span class="keyword">new</span> Date() + <span class="string">" beep "</span> + (++count));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 1秒钟后运行，并每隔2秒运行一次  </span></span><br><span class="line">        <span class="keyword">final</span> ScheduledFuture beeperHandle = scheduler.scheduleAtFixedRate(beeper, <span class="number">1</span>, <span class="number">2</span>, SECONDS);  </span><br><span class="line">        <span class="comment">// 2秒钟后运行，并每次在上次任务运行完后等待5秒后重新运行  </span></span><br><span class="line">        <span class="keyword">final</span> ScheduledFuture beeperHandle2 = scheduler.scheduleWithFixedDelay(beeper, <span class="number">2</span>, <span class="number">5</span>, SECONDS);  </span><br><span class="line">        <span class="comment">// 30秒后结束关闭任务，并且关闭Scheduler  </span></span><br><span class="line">        scheduler.schedule(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                beeperHandle.cancel(<span class="keyword">true</span>);  </span><br><span class="line">                beeperHandle2.cancel(<span class="keyword">true</span>);  </span><br><span class="line">                scheduler.shutdown();  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;, <span class="number">30</span>, SECONDS);   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一些js实用到码片段2</title>
      <link href="/blog/2020/03/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9Bjs%E5%AE%9E%E7%94%A8%E5%88%B0%E7%A0%81%E7%89%87%E6%AE%B52/"/>
      <url>/blog/2020/03/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9Bjs%E5%AE%9E%E7%94%A8%E5%88%B0%E7%A0%81%E7%89%87%E6%AE%B52/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2719,阅读全文大约需要10分钟</p><blockquote><p>来自<a href="https://www.toutiao.com/i6691917594342982157/" target="_blank" rel="noopener">今日头条</a></p></blockquote><ol start="51"><li>原生JavaScript获取页面可视高度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d = <span class="built_in">document</span>, a = d.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line"> ? d.body</span><br><span class="line"> : d.documentElement;</span><br><span class="line"> <span class="keyword">return</span> a.clientHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript跨浏览器添加事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvt</span>(<span class="params">oTarget, sEvtType, fnHandle</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(!oTarget) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"> <span class="keyword">if</span>(oTarget.addEventListener) &#123;</span><br><span class="line"> oTarget.addEventListener(sEvtType, fnHandle, <span class="literal">false</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(oTarget.attachEvent) &#123;</span><br><span class="line"> oTarget.attachEvent(<span class="string">"on"</span> + sEvtType, fnHandle);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> oTarget[<span class="string">"on"</span> + sEvtType] = fnHandle;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript跨浏览器删除事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delEvt</span>(<span class="params">oTarget, sEvtType, fnHandle</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(!oTarget) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"> <span class="keyword">if</span>(oTarget.addEventListener) &#123;</span><br><span class="line"> oTarget.addEventListener(sEvtType,fnHandle,<span class="literal">false</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(oTarget.attachEvent) &#123;</span><br><span class="line"> oTarget.attachEvent(<span class="string">"on"</span> + sEvtType,fnHandle);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> oTarget[<span class="string">"on"</span> + sEvtType] = fnHandle;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript去掉url前缀<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeUrlPrefix</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line"> a = a.replace(<span class="regexp">/：/g</span>,<span class="string">":"</span>).replace(<span class="regexp">/．/g</span>,<span class="string">"."</span>).replace(<span class="regexp">/／/g</span>,<span class="string">"/"</span>);</span><br><span class="line"> <span class="keyword">while</span>(trim(a).toLowerCase().indexOf(<span class="string">"http://"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"> a = trim(a.replace(<span class="regexp">/http:/</span><span class="comment">//i,""));</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript随机数时间戳<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a = <span class="built_in">Math</span>.random, b = <span class="built_in">parseInt</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()).toString()+b(<span class="number">10</span>*a())+b(<span class="number">10</span>*a())+b(<span class="number">10</span>*a());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript全角半角转换,iCase: 0全到半，1半到全，其他不转化<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chgCase</span>(<span class="params">sStr,iCase</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">typeof</span> sStr != <span class="string">"string"</span> || sStr.length &lt;= <span class="number">0</span> || !(iCase === <span class="number">0</span> || iCase == <span class="number">1</span>))&#123;</span><br><span class="line"> <span class="keyword">return</span> sStr;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> i,oRs=[],iCode;</span><br><span class="line"> <span class="keyword">if</span>(iCase)&#123;<span class="comment">/*半-&gt;全*/</span></span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sStr.length;i+=<span class="number">1</span>)&#123; </span><br><span class="line"> iCode = sStr.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span>(iCode == <span class="number">32</span>)&#123;</span><br><span class="line"> iCode = <span class="number">12288</span>; </span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(iCode &lt; <span class="number">127</span>)&#123;</span><br><span class="line"> iCode += <span class="number">65248</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> oRs.push(<span class="built_in">String</span>.fromCharCode(iCode)); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;<span class="comment">/*全-&gt;半*/</span></span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sStr.length;i+=<span class="number">1</span>)&#123; </span><br><span class="line"> iCode = sStr.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span>(iCode == <span class="number">12288</span>)&#123;</span><br><span class="line"> iCode = <span class="number">32</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(iCode &gt; <span class="number">65280</span> &amp;&amp; iCode &lt; <span class="number">65375</span>)&#123;</span><br><span class="line"> iCode -= <span class="number">65248</span>; </span><br><span class="line"> &#125;</span><br><span class="line"> oRs.push(<span class="built_in">String</span>.fromCharCode(iCode)); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> oRs.join(<span class="string">""</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript确认是否键盘有效输入值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkKey</span>(<span class="params">iKey</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(iKey == <span class="number">32</span> || iKey == <span class="number">229</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*空格和异常*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">47</span> &amp;&amp; iKey &lt; <span class="number">58</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*数字*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">64</span> &amp;&amp; iKey &lt; <span class="number">91</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*字母*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">95</span> &amp;&amp; iKey &lt; <span class="number">108</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*数字键盘1*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">108</span> &amp;&amp; iKey &lt; <span class="number">112</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*数字键盘2*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">185</span> &amp;&amp; iKey &lt; <span class="number">193</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*符号1*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">218</span> &amp;&amp; iKey &lt; <span class="number">223</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*符号2*/</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取网页被卷去的位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollXY</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">document</span>.body.scrollTop ? &#123;</span><br><span class="line"> x: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line"> y: <span class="built_in">document</span>.body.scrollTop</span><br><span class="line"> &#125;: &#123;</span><br><span class="line"> x: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line"> y: <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript另一种正则日期格式化函数+调用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">format</span>) </span>&#123; <span class="comment">// author: meizz</span></span><br><span class="line"> <span class="keyword">var</span> o = &#123;</span><br><span class="line"> <span class="string">"M+"</span> : <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">// month</span></span><br><span class="line"> <span class="string">"d+"</span> : <span class="keyword">this</span>.getDate(), <span class="comment">// day</span></span><br><span class="line"> <span class="string">"h+"</span> : <span class="keyword">this</span>.getHours(), <span class="comment">// hour</span></span><br><span class="line"> <span class="string">"m+"</span> : <span class="keyword">this</span>.getMinutes(), <span class="comment">// minute</span></span><br><span class="line"> <span class="string">"s+"</span> : <span class="keyword">this</span>.getSeconds(), <span class="comment">// second</span></span><br><span class="line"> <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">// quarter</span></span><br><span class="line"> <span class="string">"S"</span> : <span class="keyword">this</span>.getMilliseconds() <span class="comment">// millisecond</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(format)) &#123;</span><br><span class="line"> format=format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear()+<span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o)<span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span>+ k +<span class="string">")"</span>).test(format)) &#123;</span><br><span class="line"> format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, <span class="built_in">RegExp</span>.$<span class="number">1.</span>length==<span class="number">1</span> ? o[k] : (<span class="string">"00"</span>+ o[k]).substr((<span class="string">""</span>+ o[k]).length));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> format;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>));</span><br></pre></td></tr></table></figure></li><li>原生JavaScript时间个性化输出功能<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、&lt; 60s, 显示为“刚刚”</span></span><br><span class="line"><span class="comment">2、&gt;= 1min &amp;&amp; &lt; 60 min, 显示与当前时间差“XX分钟前”</span></span><br><span class="line"><span class="comment">3、&gt;= 60min &amp;&amp; &lt; 1day, 显示与当前时间差“今天 XX:XX”</span></span><br><span class="line"><span class="comment">4、&gt;= 1day &amp;&amp; &lt; 1year, 显示日期“XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment">5、&gt;= 1year, 显示具体日期“XXXX年XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeFormat</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time)</span><br><span class="line"> , curDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"> , year = date.getFullYear()</span><br><span class="line"> , month = date.getMonth() + <span class="number">1</span></span><br><span class="line"> , day = date.getDate()</span><br><span class="line"> , hour = date.getHours()</span><br><span class="line"> , minute = date.getMinutes()</span><br><span class="line"> , curYear = curDate.getFullYear()</span><br><span class="line"> , curHour = curDate.getHours()</span><br><span class="line"> , timeStr;</span><br><span class="line"> <span class="keyword">if</span>(year &lt; curYear)&#123;</span><br><span class="line"> timeStr = year +<span class="string">'年'</span>+ month +<span class="string">'月'</span>+ day +<span class="string">'日 '</span>+ hour +<span class="string">':'</span>+ minute;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> pastTime = curDate - date</span><br><span class="line"> , pastH = pastTime/<span class="number">3600000</span>;</span><br><span class="line"> <span class="keyword">if</span>(pastH &gt; curHour)&#123;</span><br><span class="line"> timeStr = month +<span class="string">'月'</span>+ day +<span class="string">'日 '</span>+ hour +<span class="string">':'</span>+ minute;</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pastH &gt;= <span class="number">1</span>)&#123;</span><br><span class="line"> timeStr = <span class="string">'今天 '</span> + hour +<span class="string">':'</span>+ minute +<span class="string">'分'</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> pastM = curDate.getMinutes() - minute;</span><br><span class="line"> <span class="keyword">if</span>(pastM &gt; <span class="number">1</span>)&#123;</span><br><span class="line"> timeStr = pastM +<span class="string">'分钟前'</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> timeStr = <span class="string">'刚刚'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> timeStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript解决offsetX兼容性问题<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 针对火狐不支持offsetX/Y</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffset</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> target = e.target, <span class="comment">// 当前触发的目标对象</span></span><br><span class="line"> eventCoord,</span><br><span class="line"> pageCoord,</span><br><span class="line"> offsetCoord;</span><br><span class="line"> <span class="comment">// 计算当前触发元素到文档的距离</span></span><br><span class="line"> pageCoord = getPageCoord(target);</span><br><span class="line"> <span class="comment">// 计算光标到文档的距离</span></span><br><span class="line"> eventCoord = &#123;</span><br><span class="line"> X : <span class="built_in">window</span>.pageXOffset + e.clientX,</span><br><span class="line"> Y : <span class="built_in">window</span>.pageYOffset + e.clientY</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// 相减获取光标到第一个定位的父元素的坐标</span></span><br><span class="line"> offsetCoord = &#123;</span><br><span class="line"> X : eventCoord.X - pageCoord.X,</span><br><span class="line"> Y : eventCoord.Y - pageCoord.Y</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">return</span> offsetCoord;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageCoord</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> coord = &#123; <span class="attr">X</span> : <span class="number">0</span>, <span class="attr">Y</span> : <span class="number">0</span> &#125;;</span><br><span class="line"> <span class="comment">// 计算从当前触发元素到根节点为止，</span></span><br><span class="line"> <span class="comment">// 各级 offsetParent 元素的 offsetLeft 或 offsetTop 值之和</span></span><br><span class="line"> <span class="keyword">while</span> (element)&#123;</span><br><span class="line"> coord.X += element.offsetLeft;</span><br><span class="line"> coord.Y += element.offsetTop;</span><br><span class="line"> element = element.offsetParent;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> coord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript常用的正则表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正整数</span></span><br><span class="line">/^[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$/;</span><br><span class="line"><span class="comment">//负整数</span></span><br><span class="line">/^-[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$/;</span><br><span class="line"><span class="comment">//正浮点数</span></span><br><span class="line">/^(([<span class="number">0</span><span class="number">-9</span>]+.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*))$/; </span><br><span class="line"><span class="comment">//负浮点数</span></span><br><span class="line">/^(-(([<span class="number">0</span><span class="number">-9</span>]+.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)))$/; </span><br><span class="line"><span class="comment">//浮点数</span></span><br><span class="line">/^(-?d+)(.d+)?$/;</span><br><span class="line"><span class="comment">//email地址</span></span><br><span class="line">/^[w-]+(.[w-]+)*@[w-]+(.[w-]+)+$/;</span><br><span class="line"><span class="comment">//url地址</span></span><br><span class="line">/^[a-zA-z]+:<span class="comment">//(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$/;</span></span><br><span class="line"><span class="comment">//年/月/日（年-月-日、年.月.日）</span></span><br><span class="line">/^(<span class="number">19</span>|<span class="number">20</span>)dd[- <span class="regexp">/.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/</span>;</span><br><span class="line"><span class="comment">//匹配中文字符</span></span><br><span class="line">/[\u4e00-\u9fa5]/;</span><br><span class="line"><span class="comment">//匹配帐号是否合法(字母开头，允许5-10字节，允许字母数字下划线)</span></span><br><span class="line">/^[a-zA-Z][a-zA-Z0<span class="number">-9</span>_]&#123;<span class="number">4</span>,<span class="number">9</span>&#125;$/;</span><br><span class="line"><span class="comment">//匹配空白行的正则表达式</span></span><br><span class="line">/</span><br><span class="line">s*</span><br><span class="line">/;</span><br><span class="line"><span class="comment">//匹配中国邮政编码</span></span><br><span class="line">/[<span class="number">1</span><span class="number">-9</span>]d&#123;<span class="number">5</span>&#125;(?!d)/;</span><br><span class="line"><span class="comment">//匹配身份证</span></span><br><span class="line">/d&#123;<span class="number">15</span>&#125;|d&#123;<span class="number">18</span>&#125;/;</span><br><span class="line"><span class="comment">//匹配国内电话号码</span></span><br><span class="line">/(d&#123;<span class="number">3</span>&#125;-|d&#123;<span class="number">4</span>&#125;-)?(d&#123;<span class="number">8</span>&#125;|d&#123;<span class="number">7</span>&#125;)?<span class="regexp">/;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/匹配IP地址</span></span><br><span class="line"><span class="regexp">/</span>((<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">01</span>]?dd?).)&#123;<span class="number">3</span>&#125;(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">01</span>]?dd?)/;</span><br><span class="line"><span class="comment">//匹配首尾空白字符的正则表达式</span></span><br><span class="line">/^s*|s*$/;</span><br><span class="line"><span class="comment">//匹配HTML标记的正则表达式</span></span><br><span class="line">&lt; (S*?)[^&gt;]*&gt;.*?|&lt; .*? <span class="regexp">/&gt;;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现返回顶部的通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTop</span>(<span class="params">btnId</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(btnId);</span><br><span class="line"> <span class="keyword">var</span> d = <span class="built_in">document</span>.documentElement;</span><br><span class="line"> <span class="keyword">var</span> b = <span class="built_in">document</span>.body;</span><br><span class="line"> <span class="built_in">window</span>.onscroll = <span class="keyword">set</span>;</span><br><span class="line"> btn.style.display = "none";</span><br><span class="line"> btn.onclick = function() &#123;</span><br><span class="line"> btn.style.display = <span class="string">"none"</span>;</span><br><span class="line"> <span class="built_in">window</span>.onscroll = <span class="literal">null</span>;</span><br><span class="line"> <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> d.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line"> b.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line"> <span class="keyword">if</span> ((d.scrollTop + b.scrollTop) == <span class="number">0</span>) clearInterval(btn.timer, <span class="built_in">window</span>.onscroll = <span class="keyword">set</span>);</span><br><span class="line"> &#125;,</span><br><span class="line"> 10);</span><br><span class="line"> &#125;;</span><br><span class="line"> function <span class="keyword">set</span>() &#123;</span><br><span class="line"> btn.style.display = (d.scrollTop + b.scrollTop &gt; <span class="number">100</span>) ? <span class="string">'block'</span>: <span class="string">"none"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">backTop(<span class="string">'goTop'</span>);</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获得URL中的GET参数值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法：如果地址是 test.htm?t1=1&amp;t2=2&amp;t3=3, 那么能取得：GET["t1"], GET["t2"], GET["t3"]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_get</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> querystr = <span class="built_in">window</span>.location.href.split(<span class="string">"?"</span>);</span><br><span class="line"> <span class="keyword">if</span>(querystr[<span class="number">1</span>]) &#123;</span><br><span class="line"> <span class="keyword">var</span> GETs = querystr[<span class="number">1</span>].split(<span class="string">"&amp;"</span>),</span><br><span class="line"> GET = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; GETs.length; i++)&#123;</span><br><span class="line"> tmp_arr = GETs[i].split(<span class="string">"="</span>);</span><br><span class="line"> key = tmp_arr[<span class="number">0</span>];</span><br><span class="line"> GET[key] = tmp_arr[<span class="number">1</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> querystr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现全选通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkall</span>(<span class="params">form, prefix, checkall</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> checkall = checkall ? checkall : <span class="string">'chkall'</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; form.elements.length; i++) &#123;</span><br><span class="line"> <span class="keyword">var</span> e = form.elements[i];</span><br><span class="line"> <span class="keyword">if</span>(e.type==<span class="string">"checkbox"</span>)&#123;</span><br><span class="line"> e.checked = form.elements[checkall].checked;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现全部取消选择通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uncheckAll</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; form.elements.length; i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> e = form.elements[i];</span><br><span class="line"> <span class="keyword">if</span> (e.name != <span class="string">'chkall'</span>)</span><br><span class="line"> e.checked = !e.checked;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现打开一个窗体通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openWindow</span>(<span class="params">url,windowName,width,height</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(screen.width / <span class="number">2.0</span>) - (width / <span class="number">2.0</span>); </span><br><span class="line"> <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(screen.height / <span class="number">2.0</span>) - (height / <span class="number">2.0</span>);</span><br><span class="line"> <span class="keyword">var</span> isMSIE= (navigator.appName == <span class="string">"Microsoft Internet Explorer"</span>);</span><br><span class="line"> <span class="keyword">if</span> (isMSIE) &#123;</span><br><span class="line"> <span class="keyword">var</span> p = <span class="string">"resizable=1,location=no,scrollbars=no,width="</span>;</span><br><span class="line"> p = p+width;</span><br><span class="line"> p = p+<span class="string">",height="</span>;</span><br><span class="line"> p = p+height;</span><br><span class="line"> p = p+<span class="string">",left="</span>;</span><br><span class="line"> p = p+x;</span><br><span class="line"> p = p+<span class="string">",top="</span>;</span><br><span class="line"> p = p+y;</span><br><span class="line"> retval = <span class="built_in">window</span>.open(url, windowName, p);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> win = <span class="built_in">window</span>.open(url, <span class="string">"ZyiisPopup"</span>, <span class="string">"top="</span> + y + <span class="string">",left="</span> + x + <span class="string">",scrollbars="</span> + scrollbars + <span class="string">",dialog=yes,modal=yes,width="</span> + width + <span class="string">",height="</span> + height + <span class="string">",resizable=no"</span> );</span><br><span class="line"> <span class="built_in">eval</span>(<span class="string">"try &#123; win.resizeTo(width, height); &#125; catch(e) &#123; &#125;"</span>);</span><br><span class="line"> win.focus();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否为客户端设备<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">client</span>(<span class="params">o</span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> b = navigator.userAgent.toLowerCase(); </span><br><span class="line"> <span class="keyword">var</span> t = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">if</span> (o == <span class="string">'isOP'</span>)&#123;</span><br><span class="line"> t = b.indexOf(<span class="string">'opera'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (o == <span class="string">'isIE'</span>)&#123;</span><br><span class="line"> t = b.indexOf(<span class="string">'msie'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (o == <span class="string">'isFF'</span>)&#123;</span><br><span class="line"> t = b.indexOf(<span class="string">'firefox'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取单选按钮的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_radio_value</span>(<span class="params">field</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(field &amp;&amp; field.length)&#123; </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; field.length; i++)&#123; </span><br><span class="line"> <span class="keyword">if</span>(field[i].checked)&#123; </span><br><span class="line"> <span class="keyword">return</span> field[i].value; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;<span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取复选框的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_checkbox_value</span>(<span class="params">field</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">if</span>(field &amp;&amp; field.length)&#123; </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; field.length; i++)&#123; </span><br><span class="line"> <span class="keyword">if</span>(field[i].checked &amp;&amp; !field[i].disabled)&#123;</span><br><span class="line"> <span class="keyword">return</span> field[i].value;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否为邮箱<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^w+((-w+)|(.w+))*@[A-Za-z0-9]+((.|-)[A-Za-z0-9]+)*.[A-Za-z0-9]+$/</span>; </span><br><span class="line"> <span class="keyword">if</span> (re.test(str) != <span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否有列表中的危险字符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidReg</span>(<span class="params">chars</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/&lt;|&gt;|[|]|&#123;|&#125;|『|』|※||||§|||||||□||㊣|﹋|⊕|⊙|〒|ㄅ|ㄆ|ㄇ|ㄈ|ㄉ|ㄊ|ㄋ|ㄌ|ㄍ|ㄎ|ㄏ|ㄐ|ㄑ|ㄒ|ㄓ|ㄔ|ㄕ|ㄖ|ㄗ|ㄘ|ㄙ|ㄚ|ㄛ|ㄜ|ㄝ|ㄞ|ㄟ|ㄢ|ㄣ|ㄤ|ㄥ|ㄦ|ㄧ|ㄨ|ㄩ|■|▄|▆|*|@|#|^|\/;</span></span><br><span class="line"><span class="regexp"> if (re.test( chars) == true) &#123;</span></span><br><span class="line"><span class="regexp"> return false;</span></span><br><span class="line"><span class="regexp"> &#125;else&#123;</span></span><br><span class="line"><span class="regexp"> return true;</span></span><br><span class="line"><span class="regexp"> &#125; </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否大于规定的长度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidLength</span>(<span class="params">chars, len</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (chars.length &lt; len) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是为网址不区分大小写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidURL</span>(<span class="params"> chars </span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^([hH][tT]&#123;2&#125;[pP]:/</span><span class="regexp">/|[hH][tT]&#123;2&#125;[pP][sS]:/</span><span class="regexp">/)(S+.S+)$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (!isNULL(chars)) &#123;</span><br><span class="line"> chars = jsTrim(chars);</span><br><span class="line"> <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否为小数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidDecimal</span>(<span class="params"> chars </span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^d*.?d&#123;1,2&#125;$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否为整数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">chars</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^d*$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否为浮点数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFloat</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>((str.charAt(i)&lt;<span class="string">"0"</span> || str.charAt(i)&gt;<span class="string">"9"</span>)&amp;&amp; str.charAt(i) != <span class="string">'.'</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符是否为A-Za-z英文字母<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLetters</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (str.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否邮政编码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidPost</span>(<span class="params"> chars </span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^d&#123;6&#125;$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符是否空NULL<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNULL</span>(<span class="params"> chars </span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (chars == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">if</span> (jsTrim(chars).length == <span class="number">0</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式提取页面代码中所有网址<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = <span class="built_in">document</span>.documentElement.outerHTML.match(<span class="regexp">/(url(|src=|href=)["']*([^"'()&lt;&gt;[] ]+)["')]*|(http:/</span><span class="regexp">/[w-.]+[^"'()&lt;&gt;[] ]+)/ig</span>).join(<span class="string">"</span></span><br><span class="line"><span class="string">"</span>).replace(<span class="regexp">/^(src=|href=|url()["']*|["'&gt;) ]*$/igm</span>,<span class="string">""</span>);</span><br><span class="line">alert(aa);</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式清除相同的数组(低效率)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.reverse().join(<span class="string">","</span>).match(<span class="regexp">/([^,]+)(?!.*)/ig</span>).reverse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式清除相同的数组(高效率)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> x = <span class="keyword">this</span>.split(<span class="regexp">/[</span></span><br><span class="line"><span class="regexp">]+/</span>);</span><br><span class="line"> <span class="keyword">var</span> y = <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(!<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^"</span>+x[i].replace(<span class="regexp">/([^w])/ig</span>,<span class="string">"\$1"</span>)+<span class="string">"$"</span>,<span class="string">"igm"</span>).test(y)) &#123;</span><br><span class="line"> y + = x[i]+<span class="string">"</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式按字母排序，对每行进行数组排序<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SetSort</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> text = K1.value.split(<span class="regexp">/[</span></span><br><span class="line"><span class="regexp">]/</span>).sort().join(<span class="string">"</span></span><br><span class="line"><span class="string">"</span>); <span class="comment">// 顺序</span></span><br><span class="line"> <span class="keyword">var</span> test = K1.value.split(<span class="regexp">/[</span></span><br><span class="line"><span class="regexp">]/</span>).sort().reverse().join(<span class="string">"</span></span><br><span class="line"><span class="string">"</span>); <span class="comment">// 反序</span></span><br><span class="line"> K1.value = (K1.value != text) ? text : test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript字符串反序<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsReverse</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> text.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式清除html代码中的脚本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear_script</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> K1.valu e= K1.value.replace(<span class="regexp">/&lt;script.*?&gt;[sS]*?&lt;/</span>script&gt;|s+on[a-zA-Z]&#123;<span class="number">3</span>,<span class="number">16</span>&#125;s?=s?<span class="string">"[sS]*?"</span>|s+on[a-zA-Z]&#123;<span class="number">3</span>,<span class="number">16</span>&#125;s?=s?<span class="string">'[sS]*?'</span>|s+on[a-zA-Z]&#123;<span class="number">3</span>,<span class="number">16</span>&#125;s?=[^ &gt;]+<span class="regexp">/ig,"");</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript动态执行JavaScript脚本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">javascript</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line"> <span class="built_in">eval</span>(K1.value);</span><br><span class="line"> &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"> alert(e.message);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript动态执行VBScript脚本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vbscript</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> script = <span class="built_in">document</span>.getElementById(<span class="string">"K1"</span>).value;</span><br><span class="line"> <span class="keyword">if</span>(script.trim()==<span class="string">""</span>) <span class="keyword">return</span>;</span><br><span class="line"> <span class="built_in">window</span>.execScript(<span class="string">'On Error Resume Next </span></span><br><span class="line"><span class="string">'</span>+script+<span class="string">'</span></span><br><span class="line"><span class="string"> If Err.Number&lt;&gt;0 Then </span></span><br><span class="line"><span class="string"> MsgBox "请输入正确的VBScript脚本!",48,"脚本错误!" </span></span><br><span class="line"><span class="string"> End If'</span>,<span class="string">"vbscript"</span>)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> alert(e.message);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现金额大写转换函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">var</span> dw2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>); <span class="comment">//大单位</span></span><br><span class="line"> <span class="keyword">var</span> dw1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>); <span class="comment">//小单位</span></span><br><span class="line"> <span class="keyword">var</span> dw = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>); <span class="comment">//整数部分用</span></span><br><span class="line"> <span class="comment">//以下是小写转换成大写显示在合计大写的文本框中 </span></span><br><span class="line"> <span class="comment">//分离整数与小数</span></span><br><span class="line"> <span class="keyword">var</span> source = splits(tranvalue);</span><br><span class="line"> <span class="keyword">var</span> num = source[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">var</span> dig = source[<span class="number">1</span>];</span><br><span class="line"> <span class="comment">//转换整数部分</span></span><br><span class="line"> <span class="keyword">var</span> k1 = <span class="number">0</span>; <span class="comment">//计小单位</span></span><br><span class="line"> <span class="keyword">var</span> k2 = <span class="number">0</span>; <span class="comment">//计大单位</span></span><br><span class="line"> <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"> <span class="keyword">var</span> len = source[<span class="number">0</span>].length; <span class="comment">//整数的长度</span></span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line"> <span class="keyword">var</span> n = source[<span class="number">0</span>].charAt(len - i); <span class="comment">//取得某个位数上的数字</span></span><br><span class="line"> <span class="keyword">var</span> bn = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"> bn = source[<span class="number">0</span>].charAt(len - i - <span class="number">1</span>); <span class="comment">//取得某个位数前一位上的数字</span></span><br><span class="line"> &#125;</span><br><span class="line"> sum = sum + <span class="built_in">Number</span>(n);</span><br><span class="line"> <span class="keyword">if</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line"> str = dw[<span class="built_in">Number</span>(n)].concat(str); <span class="comment">//取得该数字对应的大写数字，并插入到str字符串的前面</span></span><br><span class="line"> <span class="keyword">if</span> (n == <span class="string">'0'</span>) sum = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123; <span class="comment">//在数字范围内</span></span><br><span class="line"> <span class="keyword">if</span> (k1 != <span class="number">3</span>) &#123; <span class="comment">//加小单位</span></span><br><span class="line"> <span class="keyword">if</span> (bn != <span class="number">0</span>) &#123;</span><br><span class="line"> str = dw1[k1].concat(str);</span><br><span class="line"> &#125;</span><br><span class="line"> k1++;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; <span class="comment">//不加小单位，加大单位</span></span><br><span class="line"> k1 = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> temp = str.charAt(<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">if</span> (temp == <span class="string">"万"</span> || temp == <span class="string">"亿"</span>) <span class="comment">//若大单位前没有数字则舍去大单位</span></span><br><span class="line"> str = str.substr(<span class="number">1</span>, str.length - <span class="number">1</span>);</span><br><span class="line"> str = dw2[k2].concat(str);</span><br><span class="line"> sum = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (k1 == <span class="number">3</span>) <span class="comment">//小单位到千则大单位进一</span></span><br><span class="line"> &#123;</span><br><span class="line"> k2++;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//转换小数部分</span></span><br><span class="line"> <span class="keyword">var</span> strdig = <span class="string">""</span>;</span><br><span class="line"> <span class="keyword">if</span> (dig != <span class="string">""</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> n = dig.charAt(<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line"> strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"角"</span>; <span class="comment">//加数字</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> n = dig.charAt(<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line"> strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"分"</span>; <span class="comment">//加数字</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> str += <span class="string">"元"</span> + strdig;</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"0元"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拆分整数与小数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splits</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> value = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line"> temp = tranvalue.split(<span class="string">"."</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line"> value[i] = temp[i];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript常用的正则表达式大收集<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">匹配中文字符的正则表达式： [\u4e00-\u9fa5] </span><br><span class="line">匹配双字节字符（包括汉字在内）：[^\x00-\xff] </span><br><span class="line">匹配空行的正则表达式：</span><br><span class="line">[s| ]*</span><br><span class="line"> </span><br><span class="line">匹配 HTML 标记的正则表达式：&lt;(.*)&gt;.*&lt;<span class="regexp">/&gt;|&lt;(.*) /</span>&gt;</span><br><span class="line">匹配首尾空格的正则表达式：(^s*)|(s*$) </span><br><span class="line">匹配 IP 地址的正则表达式：/(d+).(d+).(d+).(d+)/g</span><br><span class="line">匹配 Email 地址的正则表达式：w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*</span><br><span class="line">匹配网址 URL 的正则表达式：http:<span class="comment">//(/[w-]+.)+[w-]+(/[w- ./?%&amp;=]*)?</span></span><br><span class="line">sql 语句：^(select|drop|<span class="keyword">delete</span>|create|update|insert).*$ </span><br><span class="line">非负整数：^d+$ </span><br><span class="line">正整数：^[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$ </span><br><span class="line">非正整数：^((-d+)|(<span class="number">0</span>+))$ </span><br><span class="line">负整数：^-[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$ </span><br><span class="line">整数：^-?d+$ </span><br><span class="line">非负浮点数：^d+(.d+)?$ </span><br><span class="line">正浮点数：^((<span class="number">0</span><span class="number">-9</span>)+.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*))$ </span><br><span class="line">非正浮点数：^((-d+.d+)?)|(<span class="number">0</span>+(<span class="number">.0</span>+)?))$ </span><br><span class="line">英文字符串：^[A-Za-z]+$ </span><br><span class="line">英文大写串：^[A-Z]+$ </span><br><span class="line">英文小写串：^[a-z]+$ </span><br><span class="line">英文字符数字串：^[A-Za-z0<span class="number">-9</span>]+$ </span><br><span class="line">英数字加下划线串：^w+$ </span><br><span class="line">E-mail地址：^[w-]+(.[w-]+)*@[w-]+(.[w-]+)+$ </span><br><span class="line">URL：^[a-zA-Z]+:<span class="comment">//(w+(-w+)*)(.(w+(-w+)*))*(?s*)?$ 或：^http://[A-Za-z0-9]+.[A-Za-z0-9]+[/=?%-&amp;_~`@[]':+!]*([^&lt;&gt;""])*$ </span></span><br><span class="line">邮政编码：^[<span class="number">1</span><span class="number">-9</span>]d&#123;<span class="number">5</span>&#125;$ </span><br><span class="line">电话号码：^(((d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;))|(d&#123;<span class="number">3</span>&#125;-))?((<span class="number">0</span>d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;)|<span class="number">0</span>d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;-)?[<span class="number">1</span><span class="number">-9</span>]d&#123;<span class="number">6</span>,<span class="number">7</span>&#125;(-d&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)?$ </span><br><span class="line">手机号码：^(((d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;))|(d&#123;<span class="number">3</span>&#125;-))?<span class="number">13</span>d&#123;<span class="number">9</span>&#125;$ </span><br><span class="line">双字节字符（包括汉字在内）：^\x00-\xff </span><br><span class="line">匹配首尾空格：(^s*)|(s*$)</span><br><span class="line">匹配 HTML 标记：&lt;(.*)&gt;.*&lt;<span class="regexp">/&gt;|&lt;(.*) /</span>&gt; </span><br><span class="line">匹配空行：</span><br><span class="line">[s| ]*</span><br><span class="line"> </span><br><span class="line">提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F) *= *(<span class="string">'|")?(w|\|/|.)+('</span>|<span class="string">"| *|&gt;)? </span></span><br><span class="line"><span class="string">提取信息中的邮件地址：w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)* </span></span><br><span class="line"><span class="string">提取信息中的图片链接：(s|S)(r|R)(c|C) *= *('|"</span>)?(w|\|<span class="regexp">/|.)+('|"| *|&gt;)? </span></span><br><span class="line"><span class="regexp">提取信息中的 IP 地址：(d+).(d+).(d+).(d+) </span></span><br><span class="line"><span class="regexp">提取信息中的中国手机号码：(86)*0*13d&#123;9&#125; </span></span><br><span class="line"><span class="regexp">提取信息中的中国固定电话号码：((d&#123;3,4&#125;)|d&#123;3,4&#125;-|s)?d&#123;8&#125; </span></span><br><span class="line"><span class="regexp">提取信息中的中国电话号码（包括移动和固定电话）：((d&#123;3,4&#125;)|d&#123;3,4&#125;-|s)?d&#123;7,14&#125; </span></span><br><span class="line"><span class="regexp">提取信息中的中国邮政编码：[1-9]&#123;1&#125;(d+)&#123;5&#125; </span></span><br><span class="line"><span class="regexp">提取信息中的浮点数（即小数）：(-?d*).?d+ </span></span><br><span class="line"><span class="regexp">提取信息中的任何数字 ：(-?d*)(.d+)? </span></span><br><span class="line"><span class="regexp">IP：(d+).(d+).(d+).(d+) </span></span><br><span class="line"><span class="regexp">电话区号：^0d&#123;2,3&#125;$</span></span><br><span class="line"><span class="regexp">腾讯 QQ 号：^[1-9]*[1-9][0-9]*$ </span></span><br><span class="line"><span class="regexp">帐号（字母开头，允许 5-16 字节，允许字母数字下划线）：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ </span></span><br><span class="line"><span class="regexp">中文、英文、数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现窗体改变事件resize的操作（兼容所有的浏览器）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> w = <span class="built_in">document</span>.documentElement ? <span class="built_in">document</span>.documentElement.clientWidth : <span class="built_in">document</span>.body.clientWidth</span><br><span class="line"> ,r = <span class="number">1255</span></span><br><span class="line"> ,b = Element.extend(<span class="built_in">document</span>.body)</span><br><span class="line"> ,classname = b.className;</span><br><span class="line"> <span class="keyword">if</span>(w &lt; r)&#123;</span><br><span class="line"> <span class="comment">// 当窗体的宽度小于1255的时候执行相应的操作</span></span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="comment">// 当窗体的宽度大于1255的时候执行相应的操作</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; fn(); &#125;);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</span><br><span class="line"> <span class="built_in">window</span>.attachEvent(<span class="string">'onresize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; fn(); &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> fn();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则清除空格分左右<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ltrim</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> s.replace( <span class="regexp">/^(s*|　*)/</span>, <span class="string">""</span>); &#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rtrim</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> s.replace( <span class="regexp">/(s*|　*)$/</span>, <span class="string">""</span>); &#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> ltrim(rtrim(s)); &#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断变量是否空值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断变量是否空值</span></span><br><span class="line"><span class="comment"> * undefined, null, '', false, 0, [], &#123;&#125; 均返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">switch</span> (<span class="keyword">typeof</span> v)&#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'undefined'</span> : <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'string'</span> : <span class="keyword">if</span>(trim(v).length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'boolean'</span> : <span class="keyword">if</span>(!v) <span class="keyword">return</span> <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'number'</span> : <span class="keyword">if</span>(<span class="number">0</span> === v) <span class="keyword">return</span> <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'object'</span> : </span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">null</span> === v) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">undefined</span> !== v.length &amp;&amp; v.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> v)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现base64解码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_decode</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> b64 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span><br><span class="line"> <span class="keyword">var</span> o1, o2, o3, h1, h2, h3, h4, bits, i = <span class="number">0</span>,ac = <span class="number">0</span>,dec = <span class="string">""</span>,tmp_arr = [];</span><br><span class="line"> <span class="keyword">if</span> (!data) &#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line"> data += <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">do</span> &#123; </span><br><span class="line"> h1 = b64.indexOf(data.charAt(i++));</span><br><span class="line"> h2 = b64.indexOf(data.charAt(i++));</span><br><span class="line"> h3 = b64.indexOf(data.charAt(i++));</span><br><span class="line"> h4 = b64.indexOf(data.charAt(i++));</span><br><span class="line"> bits = h1 &lt;&lt; <span class="number">18</span> | h2 &lt;&lt; <span class="number">12</span> | h3 &lt;&lt; <span class="number">6</span> | h4;</span><br><span class="line"> o1 = bits &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>;</span><br><span class="line"> o2 = bits &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>;</span><br><span class="line"> o3 = bits &amp; <span class="number">0xff</span>;</span><br><span class="line"> <span class="keyword">if</span> (h3 == <span class="number">64</span>) &#123;</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h4 == <span class="number">64</span>) &#123;</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2, o3);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; <span class="keyword">while</span> (i &lt; data.length);</span><br><span class="line"> dec = tmp_arr.join(<span class="string">''</span>);</span><br><span class="line"> dec = utf8_decode(dec);</span><br><span class="line"> <span class="keyword">return</span> dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>95, 原生JavaScript实现utf8解码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_decode</span>(<span class="params">str_data</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> tmp_arr = [],i = <span class="number">0</span>,ac = <span class="number">0</span>,c1 = <span class="number">0</span>,c2 = <span class="number">0</span>,c3 = <span class="number">0</span>;str_data += <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">while</span> (i &lt; str_data.length) &#123;</span><br><span class="line"> c1 = str_data.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span> (c1 &lt; <span class="number">128</span>) &#123;</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(c1);</span><br><span class="line"> i++;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c1 &gt; <span class="number">191</span> &amp;&amp; c1 &lt; <span class="number">224</span>) &#123; </span><br><span class="line"> c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));</span><br><span class="line"> i += <span class="number">2</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line"> c3 = str_data.charCodeAt(i + <span class="number">2</span>);</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>));</span><br><span class="line"> i += <span class="number">3</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> tmp_arr.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取窗体可见范围的宽与高<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> de = <span class="built_in">document</span>.documentElement;</span><br><span class="line"> <span class="keyword">var</span> db = <span class="built_in">document</span>.body;</span><br><span class="line"> <span class="keyword">var</span> viewW = de.clientWidth == <span class="number">0</span> ? db.clientWidth : de.clientWidth;</span><br><span class="line"> <span class="keyword">var</span> viewH = de.clientHeight == <span class="number">0</span> ? db.clientHeight : de.clientHeight;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Array</span>(viewW ,viewH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断IE版本号（既简洁、又向后兼容！）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _IE = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> v = <span class="number">3</span>, div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>), all = div.getElementsByTagName(<span class="string">'i'</span>);</span><br><span class="line"> <span class="keyword">while</span> (</span><br><span class="line"> div.innerHTML = <span class="string">'&lt;!--[if gt IE '</span> + (++v) + <span class="string">']&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;'</span>,</span><br><span class="line"> all[<span class="number">0</span>]</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">return</span> v &gt; <span class="number">4</span> ? v : <span class="literal">false</span> ;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取浏览器版本号<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">browserVersion</span>(<span class="params">types</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> other = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span> (i <span class="keyword">in</span> types) &#123;</span><br><span class="line"> <span class="keyword">var</span> v = types[i] ? types[i] : i;</span><br><span class="line"> <span class="keyword">if</span> (USERAGENT.indexOf(v) != <span class="number">-1</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(v + <span class="string">'(\/|\s|:)([\d\.]+)'</span>, <span class="string">'ig'</span>);</span><br><span class="line"> <span class="keyword">var</span> matches = re.exec(USERAGENT);</span><br><span class="line"> <span class="keyword">var</span> ver = matches != <span class="literal">null</span> ? matches[<span class="number">2</span>] : <span class="number">0</span>;</span><br><span class="line"> other = ver !== <span class="number">0</span> &amp;&amp; v != <span class="string">'mozilla'</span> ? <span class="number">0</span> : other;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> ver = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">eval</span>(<span class="string">'BROWSER.'</span> + i + <span class="string">'= ver'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> BROWSER.other = other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript半角转换为全角函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToDBC</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line"> code = str.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span>(code &gt;= <span class="number">33</span> &amp;&amp; code &lt;= <span class="number">126</span>)&#123;</span><br><span class="line"> result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">65248</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">32</span>)&#123;</span><br><span class="line"> result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">12288</span> - <span class="number">32</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> result += str.charAt(i);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript全角转换为半角函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToCDB</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line"> code = str.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span>(code &gt;= <span class="number">65281</span> &amp;&amp; code &lt;= <span class="number">65374</span>)&#123;</span><br><span class="line"> result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">65248</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">12288</span>)&#123;</span><br><span class="line"> result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">12288</span> + <span class="number">32</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> result += str.charAt(i);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记录一些js实用到码片段</title>
      <link href="/blog/2020/03/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9Bjs%E5%AE%9E%E7%94%A8%E5%88%B0%E7%A0%81%E7%89%87%E6%AE%B5/"/>
      <url>/blog/2020/03/04/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9Bjs%E5%AE%9E%E7%94%A8%E5%88%B0%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1196,阅读全文大约需要4分钟</p><blockquote><p>摘自<a href="https://www.toutiao.com/i6691917043509232139/" target="_blank" rel="noopener">今日头条</a>，一些以后可能会用到的代码片段。</p></blockquote><ol><li>原生JavaScript实现字符串长度截取<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cutstr</span>(<span class="params">str, len</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> temp;</span><br><span class="line"> <span class="keyword">var</span> icount = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> patrn = <span class="regexp">/[^\x00-\xff]/</span>; <span class="comment">// 匹配双字节字符(包括汉字在内)</span></span><br><span class="line"> <span class="keyword">var</span> strren = <span class="string">""</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span> (icount &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">   temp = str.substr(i, <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">if</span> (patrn.exec(temp) == <span class="literal">null</span>) &#123;</span><br><span class="line">   icount = icount + <span class="number">1</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   icount = icount + <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> strre + <span class="string">"..."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取域名主机<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHost</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> host = <span class="string">"null"</span>;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> url == <span class="literal">undefined</span> || url === <span class="literal">null</span>) &#123;</span><br><span class="line"> url = <span class="built_in">window</span>.location.href;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> regex = <span class="regexp">/^w+:/</span><span class="regexp">/([^/]*).*/</span>;</span><br><span class="line"> <span class="keyword">var</span> match = url.match(regex);</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> match != <span class="literal">undefined</span> &amp;&amp; match != <span class="literal">null</span>) &#123;</span><br><span class="line"> host = match[<span class="number">1</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript清除空格<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> reExtraSpace = <span class="regexp">/^s*(.*?)s+$/</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.replace(reExtraSpace, <span class="string">"$1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript替换全部<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">s1, s2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(s1, <span class="string">"gm"</span>), s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript转义html标签<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlEncode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> text.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp'</span>)</span><br><span class="line"> .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot'</span>)</span><br><span class="line"> .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt'</span>)</span><br><span class="line"> .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript还原html标签<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlDecode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> text.replace(<span class="string">'&amp;amp'</span>, /&amp;<span class="regexp">/g)</span></span><br><span class="line"><span class="regexp"> .replace('&amp;quot', /</span><span class="string">"/g)</span></span><br><span class="line"><span class="string"> .replace('&amp;lt', /&lt;/g)</span></span><br><span class="line"><span class="string"> .replace('&amp;gt', /&gt;/g);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">7. 原生JavaScript时间日期格式替换</span></span><br><span class="line"><span class="string">```javascript</span></span><br><span class="line"><span class="string">Date.prototype.Format = function(formatStr) &#123;</span></span><br><span class="line"><span class="string"> var str = formatStr;</span></span><br><span class="line"><span class="string"> var Week = ['日', '一', '二', '三', '四', '五', '六'];</span></span><br><span class="line"><span class="string"> str = str.replace(/yyyy|YYYY/, this.getFullYear());</span></span><br><span class="line"><span class="string"> str = str.replace(/yy|YY/, (this.getYear() % 100) &gt; 9 ? (this.getYear() % 100).toString() : '0' + (this.getYear() % 100));</span></span><br><span class="line"><span class="string"> str = str.replace(/MM/, (this.getMonth() + 1) &gt; 9 ? (this.getMonth() + 1).toString() : '0' + (this.getMonth() + 1));</span></span><br><span class="line"><span class="string"> str = str.replace(/M/g, (this.getMonth() + 1));</span></span><br><span class="line"><span class="string"> str = str.replace(/w|W/g, Week[this.getDay()]);</span></span><br><span class="line"><span class="string"> str = str.replace(/dd|DD/, this.getDate() &gt; 9 ? this.getDate().toString() : '0' + this.getDate());</span></span><br><span class="line"><span class="string"> str = str.replace(/d|D/g, this.getDate());</span></span><br><span class="line"><span class="string"> str = str.replace(/hh|HH/, this.getHours() &gt; 9 ? this.getHours().toString() : '0' + this.getHours());</span></span><br><span class="line"><span class="string"> str = str.replace(/h|H/g, this.getHours());</span></span><br><span class="line"><span class="string"> str = str.replace(/mm/, this.getMinutes() &gt; 9 ? this.getMinutes().toString() : '0' + this.getMinutes());</span></span><br><span class="line"><span class="string"> str = str.replace(/m/g, this.getMinutes());</span></span><br><span class="line"><span class="string"> str = str.replace(/ss|SS/, this.getSeconds() &gt; 9 ? this.getSeconds().toString() : '0' + this.getSeconds());</span></span><br><span class="line"><span class="string"> str = str.replace(/s|S/g, this.getSeconds());</span></span><br><span class="line"><span class="string"> return str</span></span><br><span class="line"><span class="string"> &#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否为数字类型<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDigit</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> patrn = <span class="regexp">/^[0-9]*$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (patrn.exec(value) == <span class="literal">null</span> || value == <span class="string">""</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript设置cookie值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, Hours</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"> <span class="keyword">var</span> offset = <span class="number">8</span>;</span><br><span class="line"> <span class="keyword">var</span> utc = d.getTime() + (d.getTimezoneOffset() * <span class="number">60000</span>);</span><br><span class="line"> <span class="keyword">var</span> nd = utc + (<span class="number">3600000</span> * offset);</span><br><span class="line"> <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>(nd);</span><br><span class="line"> exp.setTime(exp.getTime() + Hours * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"> <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + <span class="string">";path=/;expires="</span> + exp.toGMTString() + <span class="string">";domain=360doc.com;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取cookie值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>));</span><br><span class="line"> <span class="keyword">if</span> (arr != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript加入收藏夹<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddFavorite</span>(<span class="params">sURL, sTitle</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="built_in">window</span>.external.addFavorite(sURL, sTitle)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="built_in">window</span>.sidebar.addPanel(sTitle, sURL, <span class="string">""</span>)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> alert(<span class="string">"加入收藏失败，请使用Ctrl+D进行添加"</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript设为首页<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHomepage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</span><br><span class="line"> <span class="built_in">document</span>.body.style.behavior = <span class="string">'url(#default#homepage)'</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.setHomePage(<span class="string">'http://***'</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.sidebar) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">window</span>.netscape) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> netscape.security.PrivilegeManager.enablePrivilege(<span class="string">"UniversalXPConnect"</span>)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> alert(<span class="string">"该操作被浏览器拒绝，如果想启用该功能，请在地址栏内输入 about:config,然后将项 signed.applets.codebase_principal_support 值该为true"</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> prefs = Components.classes[<span class="string">'@mozilla.org/preferences-service;1'</span>].getService(Components.interfaces.nsIPrefBranch);</span><br><span class="line"> prefs.setCharPref(<span class="string">'browser.startup.homepage'</span>, <span class="string">'http://***'</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断IE6<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">var</span> isIE6 = ua.indexOf(<span class="string">"msie 6"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (isIE6) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="built_in">document</span>.execCommand(<span class="string">"BackgroundImageCache"</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript加载样式文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoadStyle</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="built_in">document</span>.createStyleSheet(url)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> <span class="keyword">var</span> cssLink = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line"> cssLink.rel = <span class="string">'stylesheet'</span>;</span><br><span class="line"> cssLink.type = <span class="string">'text/css'</span>;</span><br><span class="line"> cssLink.href = url;</span><br><span class="line"> <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line"> head.appendChild(cssLink)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript返回脚本内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evalscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(s.indexOf(<span class="string">'&lt;script'</span>) == <span class="number">-1</span>) <span class="keyword">return</span> s;</span><br><span class="line"> <span class="keyword">var</span> p = <span class="regexp">/&lt;script[^&gt;]*?&gt;([^\x00]*?)&lt;/</span>script&gt;<span class="regexp">/ig;</span></span><br><span class="line"><span class="regexp"> var arr = [];</span></span><br><span class="line"><span class="regexp"> while(arr = p.exec(s)) &#123;</span></span><br><span class="line"><span class="regexp"> var p1 = /</span><span class="xml"><span class="tag">&lt;<span class="name">script[^</span>&gt;</span>]*?src="([^&gt;]*?)"[^&gt;]*?(reload="1")?(?:charset="([w-]+?)")?&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="regexp">/i;</span></span><br><span class="line"><span class="regexp"> var arr1 = [];</span></span><br><span class="line"><span class="regexp"> arr1 = p1.exec(arr[0]);</span></span><br><span class="line"><span class="regexp"> if(arr1) &#123;</span></span><br><span class="line"><span class="regexp"> appendscript(arr1[1], '', arr1[2], arr1[3]);</span></span><br><span class="line"><span class="regexp"> &#125; else &#123;</span></span><br><span class="line"><span class="regexp"> p1 = /</span><span class="xml"><span class="tag">&lt;<span class="name">script(.*?)</span>&gt;</span>([^\x00]+?)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="regexp">/i;</span></span><br><span class="line"><span class="regexp"> arr1 = p1.exec(arr[0]);</span></span><br><span class="line"><span class="regexp"> appendscript('', arr1[2], arr1[1].indexOf('reload=') != -1);</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp"> return s;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript清除脚本内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> s.replace(<span class="regexp">/&lt;script.*?&gt;.*?&lt;/</span>script&gt;<span class="regexp">/ig, '');</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript动态加载脚本文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendscript</span>(<span class="params">src, text, reload, charset</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> id = hash(src + text);</span><br><span class="line"> <span class="keyword">if</span>(!reload &amp;&amp; in_array(id, evalscripts)) <span class="keyword">return</span>;</span><br><span class="line"> <span class="keyword">if</span>(reload &amp;&amp; $(id)) &#123;</span><br><span class="line"> $(id).parentNode.removeChild($(id));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> evalscripts.push(id);</span><br><span class="line"> <span class="keyword">var</span> scriptNode = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line"> scriptNode.type = <span class="string">"text/javascript"</span>;</span><br><span class="line"> scriptNode.id = id;</span><br><span class="line"> scriptNode.charset = charset ? charset : (BROWSER.firefox ? <span class="built_in">document</span>.characterSet : <span class="built_in">document</span>.charset);</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(src) &#123;</span><br><span class="line"> scriptNode.src = src;</span><br><span class="line"> scriptNode.onloadDone = <span class="literal">false</span>;</span><br><span class="line"> scriptNode.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line"> JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line"> &#125;;</span><br><span class="line"> scriptNode.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>((scriptNode.readyState == <span class="string">'loaded'</span> || scriptNode.readyState == <span class="string">'complete'</span>) &amp;&amp; !scriptNode.onloadDone) &#123;</span><br><span class="line"> scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line"> JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(text)&#123;</span><br><span class="line"> scriptNode.text = text;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(scriptNode);</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript返回按ID检索的元素对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> !id ? <span class="literal">null</span> : <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript返回浏览器版本内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">browserVersion</span>(<span class="params">types</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> other = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(i <span class="keyword">in</span> types) &#123;</span><br><span class="line"> <span class="keyword">var</span> v = types[i] ? types[i] : i;</span><br><span class="line"> <span class="keyword">if</span>(USERAGENT.indexOf(v) != <span class="number">-1</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(v + <span class="string">'(\/|\s)([\d\.]+)'</span>, <span class="string">'ig'</span>);</span><br><span class="line"> <span class="keyword">var</span> matches = re.exec(USERAGENT);</span><br><span class="line"> <span class="keyword">var</span> ver = matches != <span class="literal">null</span> ? matches[<span class="number">2</span>] : <span class="number">0</span>;</span><br><span class="line"> other = ver !== <span class="number">0</span> &amp;&amp; v != <span class="string">'mozilla'</span> ? <span class="number">0</span> : other;</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> ver = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">eval</span>(<span class="string">'BROWSER.'</span> + i + <span class="string">'= ver'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> BROWSER.other = other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript元素显示的通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> !id ? <span class="literal">null</span> : <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> obj = $(id);</span><br><span class="line"> <span class="keyword">if</span>(obj.style.visibility) &#123;</span><br><span class="line"> obj.style.visibility = obj.style.visibility == <span class="string">'visible'</span> ? <span class="string">'hidden'</span> : <span class="string">'visible'</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> obj.style.display = obj.style.display == <span class="string">''</span> ? <span class="string">'none'</span> : <span class="string">''</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript中有insertBefore方法,可惜却没有insertAfter方法?用如下函数实现<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newChild, refChild</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> parElem = refChild.parentNode; </span><br><span class="line"> <span class="keyword">if</span>(parElem.lastChild == refChild)&#123; </span><br><span class="line"> refChild.appendChild(newChild); </span><br><span class="line"> &#125;<span class="keyword">else</span>&#123; </span><br><span class="line"> parElem.insertBefore(newChild, refChild.nextSibling); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript中兼容浏览器绑定元素事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventSamp</span>(<span class="params">obj, evt, fn</span>)</span>&#123; </span><br><span class="line"> <span class="keyword">if</span> (obj.addEventListener) &#123; </span><br><span class="line"> obj.addEventListener(evt, fn, <span class="literal">false</span>); </span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123; </span><br><span class="line"> obj.attachEvent(<span class="string">'on'</span> + evt, fn); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript光标停在文字的后面，文本框获得焦点时调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">focusLast</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> e = event.srcElement; </span><br><span class="line"> <span class="keyword">var</span> r =e.createTextRange(); </span><br><span class="line"> r.moveStart(<span class="string">'character'</span>,e.value.length); </span><br><span class="line"> r.collapse(<span class="literal">true</span>); </span><br><span class="line"> r.select(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript检验URL链接是否有效<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlState</span>(<span class="params">URL</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"microsoft.xmlhttp"</span>); </span><br><span class="line"> xmlhttp.Open(<span class="string">"GET"</span>, URL, <span class="literal">false</span>); </span><br><span class="line"> <span class="keyword">try</span> &#123; </span><br><span class="line"> xmlhttp.Send(); </span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> </span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line"> <span class="keyword">var</span> result = xmlhttp.responseText; </span><br><span class="line"> <span class="keyword">if</span>(result) &#123; </span><br><span class="line"> <span class="keyword">if</span>(xmlhttp.Status==<span class="number">200</span>)&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"> &#125;<span class="keyword">else</span>&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript格式化CSS样式代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCss</span>(<span class="params">s</span>)</span>&#123; <span class="comment">//格式化代码</span></span><br><span class="line"> s = s.replace(<span class="regexp">/s*([&#123;&#125;:;,])s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/;s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line"> s = s.replace(<span class="regexp">/,[s.#d]*&#123;/g</span>, <span class="string">"&#123;"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/([^s])&#123;([^s])/g</span>, <span class="string">"$1 &#123;</span></span><br><span class="line"><span class="string">$2"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/([^s])&#125;([^</span></span><br><span class="line"><span class="regexp">]*)/g</span>, <span class="string">"$1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$2"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/([^s]);([^s&#125;])/g</span>, <span class="string">"$1;</span></span><br><span class="line"><span class="string">$2"</span>);</span><br><span class="line"> <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript压缩CSS样式代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yasuoCss</span> (<span class="params">s</span>) </span>&#123; <span class="comment">//压缩代码</span></span><br><span class="line"> s = s.replace(<span class="comment">//*(.|</span></span><br><span class="line">)*?*<span class="comment">//g, ""); //删除注释</span></span><br><span class="line"> s = s.replace(<span class="regexp">/s*([&#123;&#125;:;,])s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/,[s.#d]*&#123;/g</span>, <span class="string">"&#123;"</span>); <span class="comment">//容错处理</span></span><br><span class="line"> s = s.replace(<span class="regexp">/;s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line"> s = s.match(<span class="regexp">/^s*(S+(s+S+)*)s*$/</span>); <span class="comment">//去掉首尾空白</span></span><br><span class="line"> <span class="keyword">return</span> (s == <span class="literal">null</span>) ? <span class="string">""</span> : s[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取当前路径<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPageUrl = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.href === <span class="literal">undefined</span>) &#123;</span><br><span class="line"> currentPageUrl = <span class="built_in">document</span>.location.toString().toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"> currentPageUrl = <span class="keyword">this</span>.href.toString().toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript将IP地址转成整型<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_ip2int</span>(<span class="params">ip</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"> ip = ip.split(<span class="string">"."</span>);</span><br><span class="line"> num = <span class="built_in">Number</span>(ip[<span class="number">0</span>]) * <span class="number">256</span> * <span class="number">256</span> * <span class="number">256</span> + <span class="built_in">Number</span>(ip[<span class="number">1</span>]) * <span class="number">256</span> * <span class="number">256</span> + <span class="built_in">Number</span>(ip[<span class="number">2</span>]) * <span class="number">256</span> + <span class="built_in">Number</span>(ip[<span class="number">3</span>]);</span><br><span class="line"> num = num &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript整型解析为IP地址<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_int2iP</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> str;</span><br><span class="line"> <span class="keyword">var</span> tt = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"> tt[<span class="number">0</span>] = (num &gt;&gt;&gt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"> tt[<span class="number">1</span>] = ((num &lt;&lt; <span class="number">8</span>) &gt;&gt;&gt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"> tt[<span class="number">2</span>] = (num &lt;&lt; <span class="number">16</span>) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line"> tt[<span class="number">3</span>] = (num &lt;&lt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line"> str = <span class="built_in">String</span>(tt[<span class="number">0</span>]) + <span class="string">"."</span> + <span class="built_in">String</span>(tt[<span class="number">1</span>]) + <span class="string">"."</span> + <span class="built_in">String</span>(tt[<span class="number">2</span>]) + <span class="string">"."</span> + <span class="built_in">String</span>(tt[<span class="number">3</span>]);</span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现checkbox全选与全不选<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> selectall = <span class="built_in">document</span>.getElementById(<span class="string">"selectall"</span>);</span><br><span class="line"> <span class="keyword">var</span> allbox = <span class="built_in">document</span>.getElementsByName(<span class="string">"allbox"</span>);</span><br><span class="line"> <span class="keyword">if</span> (selectall.checked) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++) &#123;</span><br><span class="line"> allbox[i].checked = <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++) &#123;</span><br><span class="line"> allbox[i].checked = <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否移动设备<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>._isMobile === <span class="string">'boolean'</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> screenWidth = <span class="keyword">this</span>.getScreenWidth();</span><br><span class="line"> <span class="keyword">var</span> fixViewPortsExperiment = rendererModel.runningExperiments.FixViewport || rendererModel.runningExperiments.fixviewport;</span><br><span class="line"> <span class="keyword">var</span> fixViewPortsExperimentRunning = fixViewPortsExperiment &amp;&amp; (fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>);</span><br><span class="line"> <span class="keyword">if</span>(!fixViewPortsExperiment)&#123;</span><br><span class="line"> <span class="keyword">if</span>(!<span class="keyword">this</span>.isAppleMobileDevice())&#123;</span><br><span class="line"> screenWidth = screenWidth/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> isMobileScreenSize = screenWidth &lt; <span class="number">600</span>;</span><br><span class="line"> <span class="keyword">var</span> isMobileUserAgent = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">this</span>._isMobile = isMobileScreenSize &amp;&amp; <span class="keyword">this</span>.isTouchScreen();</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否移动设备访问<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobileUserAgent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (<span class="regexp">/iphone|ipod|android.*mobile|windows.*phone|blackberry.*mobile/i</span>.test(<span class="built_in">window</span>.navigator.userAgent.toLowerCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否苹果移动设备访问<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAppleMobileDevice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (<span class="regexp">/iphone|ipod|ipad|Macintosh/i</span>.test(navigator.userAgent.toLowerCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否安卓移动设备访问<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroidMobileDevice</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (<span class="regexp">/android/i</span>.test(navigator.userAgent.toLowerCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否Touch屏幕<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTouchScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> ((<span class="string">'ontouchstart'</span> <span class="keyword">in</span> <span class="built_in">window</span>) || <span class="built_in">window</span>.DocumentTouch &amp;&amp; <span class="built_in">document</span> <span class="keyword">instanceof</span> DocumentTouch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否在安卓上的谷歌浏览器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNewChromeOnAndroid</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice())&#123;</span><br><span class="line"> <span class="keyword">var</span> userAgent = navigator.userAgent.toLowerCase();</span><br><span class="line"> <span class="keyword">if</span>((<span class="regexp">/chrome/i</span>.test(userAgent)))&#123;</span><br><span class="line"> <span class="keyword">var</span> parts = userAgent.split(<span class="string">'chrome/'</span>);</span><br><span class="line"> <span class="keyword">var</span> fullVersionString = parts[<span class="number">1</span>].split(<span class="string">" "</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">var</span> versionString = fullVersionString.split(<span class="string">'.'</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">var</span> version = <span class="built_in">parseInt</span>(versionString);</span><br><span class="line"> <span class="keyword">if</span>(version &gt;= <span class="number">27</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否打开视窗<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isViewportOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> !!<span class="built_in">document</span>.getElementById(<span class="string">'wixMobileViewport'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取移动设备初始化大小<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInitZoom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(!<span class="keyword">this</span>._initZoom) &#123;</span><br><span class="line"> <span class="keyword">var</span> screenWidth = <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid()) &#123;</span><br><span class="line"> screenWidth = screenWidth / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">this</span>._initZoom = screenWidth /<span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>._initZoom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取移动设备最大化大小<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getZoom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> screenWidth = (<span class="built_in">Math</span>.abs(<span class="built_in">window</span>.orientation) === <span class="number">90</span>) ? <span class="built_in">Math</span>.max(screen.height, screen.width) : <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid())&#123;</span><br><span class="line"> screenWidth = screenWidth/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> FixViewPortsExperiment = rendererModel.runningExperiments.FixViewport || rendererModel.runningExperiments.fixviewport;</span><br><span class="line"> <span class="keyword">var</span> FixViewPortsExperimentRunning = FixViewPortsExperiment &amp;&amp; (FixViewPortsExperiment === <span class="string">"New"</span> || FixViewPortsExperiment === <span class="string">"new"</span>);</span><br><span class="line"> <span class="keyword">if</span>(FixViewPortsExperimentRunning)&#123;</span><br><span class="line"> <span class="keyword">return</span> screenWidth / <span class="built_in">window</span>.innerWidth;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> screenWidth / <span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取移动设备屏幕宽度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScreenWidth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> smallerSide = <span class="built_in">Math</span>.min(screen.width, screen.height);</span><br><span class="line"> <span class="keyword">var</span> fixViewPortsExperiment = rendererModel.runningExperiments.FixViewport || rendererModel.runningExperiments.fixviewport;</span><br><span class="line"> <span class="keyword">var</span> fixViewPortsExperimentRunning = fixViewPortsExperiment &amp;&amp; (fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>);</span><br><span class="line"> <span class="keyword">if</span>(fixViewPortsExperiment)&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid())&#123;</span><br><span class="line"> smallerSide = smallerSide/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> smallerSide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript完美判断是否为网址<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsURL</span>(<span class="params">strUrl</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> regular = <span class="regexp">/^(((https?|ftp):/</span><span class="regexp">/)?[-a-z0-9]+(.[-a-z0-9]+)*.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]d)|(1dd)|([1-9]d)|d))(/</span>[-a-z0<span class="number">-9</span>_:@&amp;?=+,.!<span class="regexp">/~%$]*)?)$/i</span></span><br><span class="line"> <span class="keyword">if</span> (regular.test(strUrl)) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript根据样式名称检索元素对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementsByClassName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> tags = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>) || <span class="built_in">document</span>.all;</span><br><span class="line"> <span class="keyword">var</span> els = [];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tags.length; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (tags[i].className) &#123;</span><br><span class="line"> <span class="keyword">var</span> cs = tags[i].className.split(<span class="string">' '</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; cs.length; j++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (name == cs[j]) &#123;</span><br><span class="line"> els.push(tags[i]);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> els;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否以某个字符串开头<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.startWith = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.indexOf(s) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否以某个字符串结束<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.endWith = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d = <span class="keyword">this</span>.length - s.length;</span><br><span class="line"> <span class="keyword">return</span> (d &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.lastIndexOf(s) == d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript返回IE浏览器的版本号<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIE</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line"> <span class="keyword">var</span> v = navigator.userAgent.match(<span class="regexp">/MSIE ([^;]+)/</span>)[<span class="number">1</span>];</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">parseFloat</span>(v.substring(<span class="number">0</span>, v.indexOf(<span class="string">"."</span>)));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面高度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> g = <span class="built_in">document</span>, a = g.body, f = g.documentElement, d = g.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line"> ? a</span><br><span class="line"> : g.documentElement;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollHeight, a.scrollHeight, d.clientHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面scrollLeft<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollLeft</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line"> <span class="keyword">return</span> a.documentElement.scrollLeft || a.body.scrollLeft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面可视宽度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewWidth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d = <span class="built_in">document</span>, a = d.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line"> ? d.body</span><br><span class="line"> : d.documentElement;</span><br><span class="line"> <span class="keyword">return</span> a.clientWidth; <span class="comment">// 可视宽度为clientWidth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面宽度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 考虑带滚动条的全部宽度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageWidth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> g = <span class="built_in">document</span>, a = g.body, f = g.documentElement, d = g.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line"> ? a</span><br><span class="line"> : g.documentElement;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollWidth, a.scrollWidth, d.clientWidth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面scrollTop<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollTop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line"> <span class="keyword">return</span> a.documentElement.scrollTop || a.body.scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jvm架构</title>
      <link href="/blog/2020/03/04/jvm%E6%9E%B6%E6%9E%84/"/>
      <url>/blog/2020/03/04/jvm%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>文章字数：810,阅读全文大约需要3分钟</p><blockquote><p>jvm分为三个主要的子系统：<br>(1)类加载系统 (2)运行时数据区 (3)执行引擎<br>数据加载进运行时数据区，执行引擎从数据区获取执行</p></blockquote><h1 id="一、类加载系统"><a href="#一、类加载系统" class="headerlink" title="一、类加载系统"></a>一、类加载系统</h1><blockquote><p>处理动态类加载功能，当<strong>运行时</strong>首次引用一个类时，它加载、链接、初始化该类文件</p></blockquote><h2 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h2><p>启动类加载器(BootStarp class Loader)、扩展类加载器(Extension class Loader)、应用程序类加载器(Application class Loader)三个组件完成此操作:</p><ul><li><strong>启动类加载器</strong>- 父 -从启动类路径中加载类(rt.jar,就是java基本类,javaDoc中的所有),拥有最高优先级</li><li><strong>扩展类加载器</strong>- 子 -负责加载<code>ext</code>目录的类(<code>jre\lib</code>)</li><li><strong>应用程序类加载器</strong>- 孙 -加载应用程序级别类路径。</li></ul><p><strong>加载机制:</strong></p><ul><li><strong>全盘负责</strong>:类加载器加载一个类时，默认该类依赖和引用的其它类也由该加载器负责.</li><li><strong>双亲委派</strong>: 先让父类加载试图加载的Class依次递归，父类加载不了才自己加载。</li><li><strong>缓存机制</strong>:所有加载过的类都会被缓存，程序使用类时加载器先从缓存中寻找。所以修改Class后必须重启JVM。</li></ul><p><strong>用户类加载器</strong>=&gt;<strong>应用程序类加载器</strong>=&gt;<strong>扩展类加载器</strong>=&gt;<strong>启动类加载器</strong></p><blockquote><p>双亲委派优点：1.防止重复加载 2.防止底层传入虚假的核心JavaAPI</p></blockquote><h2 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h2><ul><li><strong>校验</strong>-字节码校验器会校验生成的字节码是否正确，失败提示校验错误信息。</li><li><strong>准备</strong>-分配内存并初始化<strong>默认值</strong>给所有静态变量。</li><li><strong>解析</strong>-所有的符号内存引用被方法区(<code>Method Area</code>)的<strong>原始引</strong>用替代。</li></ul><h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h2><blockquote><p>这是类加载的最后阶段，静态变量赋值，静态代码块被执行。</p></blockquote><h1 id="二、运行时数据区"><a href="#二、运行时数据区" class="headerlink" title="二、运行时数据区"></a>二、运行时数据区</h1><p>之前的文章jmm(java内存模型)有讲到，不再赘述。</p><h1 id="三、执行引擎"><a href="#三、执行引擎" class="headerlink" title="三、执行引擎"></a>三、执行引擎</h1><p>将数据区内的字节码逐段执行。</p><h2 id="1-解释器"><a href="#1-解释器" class="headerlink" title="1.解释器"></a>1.解释器</h2><blockquote><p>能快速解析字节码，但是对于重复的方法会每次都重新解析</p></blockquote><h2 id="2-即时编译器JIT-Just-In-Time-Compiler"><a href="#2-即时编译器JIT-Just-In-Time-Compiler" class="headerlink" title="2.即时编译器JIT(Just In Time Compiler)"></a>2.即时编译器JIT(Just In Time Compiler)</h2><blockquote><p>为了解决解释器的缺点，当被判定为重复代码将使用JIT编译，并重复利用。</p></blockquote><p>其它：</p><ul><li>中间代码生成器-生成中加代码</li><li>代码优化器 -负责优化上面生成的代码</li><li>目标代码生成器-生成既期待吗或本机代码</li><li>探测器(Profiler)-负责寻找被多次调用的方法。</li></ul><h2 id="垃圾回收机制-GC"><a href="#垃圾回收机制-GC" class="headerlink" title="垃圾回收机制(GC)"></a>垃圾回收机制(GC)</h2><p>之后另起一章讲述</p><h2 id="JVM-参数"><a href="#JVM-参数" class="headerlink" title="JVM 参数"></a>JVM 参数</h2><ul><li>堆：<code>-Xms</code> <code>-Xmx</code>(一般设置一样的值，否则内存抖动)</li><li>线程：<code>-Xss</code> 线程堆栈调用深度</li><li>新生代初始大小：<code>–XX:NewSize–XX:MaxNewSize</code>指定新生代初始大小和最大大小。</li><li><code>-XX:NewRatio</code>   是年老代 新生代相对的比例</li><li><code>-XX:SurvivorRatio</code>配置的是在新生代里面<code>Eden</code>和一个<code>Servive</code>的比例</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
