<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js图片点击放大效果</title>
      <link href="/2022/03/20/js%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7%E6%95%88%E6%9E%9C/"/>
      <url>/2022/03/20/js%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB%E6%94%BE%E5%A4%A7%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：101,阅读全文大约需要1分钟</p><blockquote><p>类似qq空间图片点击放大（灯箱效果）</p></blockquote><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/lightbox/lightbox.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"js/lightbox/css/lightbox.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h1 id="单张图片"><a href="#单张图片" class="headerlink" title="单张图片"></a>单张图片</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-1.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"img1"</span> <span class="attr">data-title</span>=<span class="string">"图片一"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"xxx"</span> <span class="attr">title</span>=<span class="string">"缩略图"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="图片组（组内可以切换）"><a href="#图片组（组内可以切换）" class="headerlink" title="图片组（组内可以切换）"></a>图片组（组内可以切换）</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-1.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"group2"</span> <span class="attr">data-title</span>=<span class="string">"图片标题一"</span>&gt;</span>缩略图...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-2.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"group2"</span> <span class="attr">data-title</span>=<span class="string">"图片标题二"</span>&gt;</span>缩略图...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-3.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"group2"</span> <span class="attr">data-title</span>=<span class="string">"图片标题三"</span>&gt;</span>缩略图...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"img/image-4.jpg"</span> <span class="attr">data-lightbox</span>=<span class="string">"group2"</span> <span class="attr">data-title</span>=<span class="string">"图片标题四"</span>&gt;</span>缩略图...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS-1</title>
      <link href="/2022/03/20/AQS-1/"/>
      <url>/2022/03/20/AQS-1/</url>
      
        <content type="html"><![CDATA[<p>文章字数：734,阅读全文大约需要2分钟</p><blockquote><p><code>AbstractQueuedSynchronizer</code>它提供了一种实现阻塞锁和一系列依赖FIFO等待队列的同步器的框架。大部分同步工具内部都是使用<code>AQS</code>实现的。</p></blockquote><h1 id="一、LockSupport"><a href="#一、LockSupport" class="headerlink" title="一、LockSupport"></a>一、LockSupport</h1><blockquote><p><code>jdk</code>提供的线程阻塞、唤醒的工具。同步组件的基础</p></blockquote><ul><li><code>park</code>开头的方法是用于阻塞线程的</li><li><code>unpark(Thread thread)</code>方法是解除阻塞的</li></ul><h1 id="二、模板方法模式"><a href="#二、模板方法模式" class="headerlink" title="二、模板方法模式"></a>二、模板方法模式</h1><ul><li>父类使用抽象类，定义若干动作，并且按顺序调用。</li><li>子类实现具体动作</li><li><code>AQS</code>里使用了模板方法模式</li></ul><h1 id="三、AQS中的抽象模板"><a href="#三、AQS中的抽象模板" class="headerlink" title="三、AQS中的抽象模板"></a>三、AQS中的抽象模板</h1><h2 id="3-1独占式获取锁"><a href="#3-1独占式获取锁" class="headerlink" title="3.1独占式获取锁"></a>3.1独占式获取锁</h2><p>-<code>accquire</code></p><ul><li><code>acquireInterruptibly</code></li><li><code>tryAcquireNanos</code><h2 id="3-2共享式获取锁"><a href="#3-2共享式获取锁" class="headerlink" title="3.2共享式获取锁"></a>3.2共享式获取锁</h2></li><li><code>acquireShared</code></li><li><code>acquireSharedInterruptibly</code></li><li><code>tryAcquireShareNanos</code><h2 id="3-3独占式释放锁"><a href="#3-3独占式释放锁" class="headerlink" title="3.3独占式释放锁"></a>3.3独占式释放锁</h2></li><li><code>release</code></li></ul><h2 id="3-4共享式释放锁"><a href="#3-4共享式释放锁" class="headerlink" title="3.4共享式释放锁"></a>3.4共享式释放锁</h2><ul><li><code>releaseShared</code></li></ul><h2 id="3-5子类需要实现的过程方法"><a href="#3-5子类需要实现的过程方法" class="headerlink" title="3.5子类需要实现的过程方法"></a>3.5子类需要实现的过程方法</h2><ul><li><code>tryAcquire</code>独占获取，内部判断哪个线程拿到了锁，然后<code>setExclusiveOwnerThread(Thread.currentThread())</code>设置当前线程占有锁，<code>return true</code></li><li><code>tryRealease</code>独占释放</li><li><code>tryAcquireShare</code>共享获取</li><li><code>tryRealeaseShared</code>共享释放</li><li><code>isHeldExclusively</code>这个同步器释放处于独占模式（是否占用）</li></ul><h2 id="3-6同步状态"><a href="#3-6同步状态" class="headerlink" title="3.6同步状态"></a>3.6同步状态</h2><ul><li><code>state</code>：字段表示当前同步状态，使用<code>volatile</code>修饰。</li><li><code>getState</code>：获取</li><li><code>setState</code>：设置当前同步状态</li><li><code>compareAndSetState</code>：使用<code>CAS</code>设置状态</li></ul><h2 id="3-6Condition"><a href="#3-6Condition" class="headerlink" title="3.6Condition"></a>3.6Condition</h2><ul><li><code>AQS</code>提供了<code>ConditionObject</code>直接<code>new</code>返回就行了。</li><li>内部维护了一个等待队列，保存等待的线程</li></ul><h1 id="四、AQS公平非共享内部实现"><a href="#四、AQS公平非共享内部实现" class="headerlink" title="四、AQS公平非共享内部实现"></a>四、AQS公平非共享内部实现</h1><ul><li>内部使用一个先进先出的双向队列保存线程，保存了链表的头和尾</li><li><code>Node</code>类就是线程节点<br>节点类型<code>waitState</code></li></ul><ol><li><code>CANCELLED</code>线程等待超时或者被中断，需要从队列移走</li><li><code>SIGNAL</code>后续的节点等待状态，当前节点通知后面节点运行</li><li><code>CONDITION</code>等待</li><li><code>PEOPGATE</code>共享状态，表示状态往后面传播</li><li><code>0</code>初始状态</li></ol><ul><li>竞争锁失败的线程被打包成<code>Node</code>放入同步队列尾部(<code>CAS</code>设置)，如果上一个节点是头节点时会尝试获取锁，获取失败阻塞自己。成功会移除头节点，设置自身为头。<code>Realsese</code>方法会唤醒阻塞。</li><li><code>Condition</code>中包含一个等待队列</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> 锁 </tag>
            
            <tag> AQS </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AQS</title>
      <link href="/2022/03/20/AQS/"/>
      <url>/2022/03/20/AQS/</url>
      
        <content type="html"><![CDATA[<p>文章字数：459,阅读全文大约需要1分钟</p><blockquote><p><code>AbstractQueuedSynchronizer</code>维护了一个<code>State</code>值和一个<code>FIFO</code>等待队列的框架。可以用来实现阻塞锁和同步器，<code>ReentrantLock</code>等锁就是基于<code>AQS</code>实现的</p></blockquote><h1 id="State"><a href="#State" class="headerlink" title="State"></a>State</h1><p>共享资源变量，<code>int</code>类型。访问方式有</p><ol><li><code>getState()</code></li><li><code>setState(int newState)</code></li><li><code>compareAndSetState(int expect, int update)</code>: 依赖于<code>Unsafe</code>的<code>compareAndSwapInt()</code>方法</li></ol><p>三种方式都是原子操作。<br>AQS将大部分的同步逻辑均已经实现好，继承的自定义同步器只需要实现state的获取(acquire)和释放(release)的逻辑代码就可以，主要包括下面方法：</p><ol><li><code>tryAcquire(int)</code>：独占方式。尝试获取资源，成功则返回true，失败则返回false。</li><li><code>tryRelease(int)</code>：独占方式。尝试释放资源，成功则返回true，失败则返回false。</li><li><code>tryAcquireShared(int)</code>：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</li><li><code>tryReleaseShared(int)</code>：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。</li><li><code>isHeldExclusively()</code>：该线程是否正在独占资源。只有用到condition才需要去实现它。</li></ol><h1 id="CLH队列（FIFO）"><a href="#CLH队列（FIFO）" class="headerlink" title="CLH队列（FIFO）"></a>CLH队列（FIFO）</h1><p>使用内部类<code>Node</code>来实现，其中维护一个变量<code>waitStatus</code>代表当前节点代表状态</p><ol><li><code>acquire(int arg)</code>：独占模式获取资源</li><li><code>release(int arg)</code>：独占模式释放资源</li><li><code>acquireShared(int arg)</code>：共享模式获取</li><li><code>releaseShared(int arg)</code>：共享模式释放</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 锁 </tag>
            
            <tag> AQS </tag>
            
            <tag> JDK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>All-elements-are-null</title>
      <link href="/2022/03/20/All-elements-are-null/"/>
      <url>/2022/03/20/All-elements-are-null/</url>
      
        <content type="html"><![CDATA[<p>文章字数：40,阅读全文大约需要1分钟</p><blockquote><p>ArrayList 提示 All elements are null ，size显示为1，但是内容为空。</p></blockquote><p>ArrayList允许添加空值<code>null</code>，所以显示<code>All elements are null</code>但是<code>size</code>显示还是1。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ambiguous-handler-methods-mapped-for-HTTP-path</title>
      <link href="/2022/03/20/Ambiguous-handler-methods-mapped-for-HTTP-path/"/>
      <url>/2022/03/20/Ambiguous-handler-methods-mapped-for-HTTP-path/</url>
      
        <content type="html"><![CDATA[<p>文章字数：96,阅读全文大约需要1分钟</p><blockquote><p><code>SpringMVC</code>的错误</p></blockquote><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><ol><li>新加了一个<code>URL</code>映射，运行之后提示此错误</li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li>造成的原因是<code>URL</code>映射和之前的重复，导致请求到达时无法判断使用那个方法处理。错误提示中<code>{}</code>包裹的部分就是冲突的两个方法</li><li>修改映射路径即可解决</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Apache-Ignite简介</title>
      <link href="/2022/03/20/Apache-Ignite%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/03/20/Apache-Ignite%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：569,阅读全文大约需要2分钟</p><blockquote><p><code>Apache Ignite</code>是一款以内存为中心的分布式数据库、缓存和处理平台。可以在PB级数据中，以内存级的速度进行事务性、分析性以及流式负载的处理。使用springBoot开发，支持完整的sql(部分函数不支持)</p></blockquote><h1 id="和redis对比"><a href="#和redis对比" class="headerlink" title="和redis对比"></a>和redis对比</h1><ul><li><p>Ignite提供了完整的SQL、DDL和DML的支持，可以使用纯SQL而不用写代码与Ignite进行交互，这意味着只使用SQL就可以创建表和索引，以及插入、更新和查询数据。有这个完整的SQL支持，Ignite就可以作为一种分布式SQL数据库。</p></li><li><p>Ignite的内存数据网格组件是一个完整的事务型分布式键值存储，它可以在有几百台服务器的集群上进行水平扩展。在打开持久化时，Ignite可以存储比内存容量更大的数据，并且在整个集群重启之后仍然可用。</p></li><li><p>和Redis 等NoSQL数据库一样，Ignite支持高可用和水平扩展，但是，和Redis数据库不同，Ignite支持SQL和ACID。</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ApacheIgnite </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList原理</title>
      <link href="/2022/03/20/ArrayList%E5%8E%9F%E7%90%86/"/>
      <url>/2022/03/20/ArrayList%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：529,阅读全文大约需要2分钟</p><blockquote><p><code>ArrayList</code>内部使用数组保存元素，所以查找添加和查找的速度都很快。但是达到一定的数量需要扩容，而扩容是开销很大的操作。如果需要频繁插入和删除元素，可以使用<code>LinkedList</code>。</p></blockquote><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li><p>线程不安全，即可以同时被多个线程操作。可能会导致数据读和写操作直接数据被篡改。可以使用<code>Collections.synchronizedList(List l)</code>获取一个线程安全的<code>ArrayList</code>。或者使用<code>juc</code>的<code>CopyOnWriteArrayList</code>类</p></li><li><p>实现了<code>Serializable</code>可以序列化</p></li><li><p>初始化大小为10，当元素数量超出这个大小时会触发扩容。扩容大小为原来的1.5倍。</p></li><li><p>内部使用<code>private transient Object[] elementData</code>数组存储信息。</p></li></ol><h1 id="扩容过程"><a href="#扩容过程" class="headerlink" title="扩容过程"></a>扩容过程</h1><ol><li><p>初始化创建指定大小的数组，不写默认10</p></li><li><p>插入元素时检测长度是否超出当前数组最大值</p></li><li><p>超出新建一个数组，大小为原来的1.5倍</p></li><li><p>把原数组的信息迁移到新的数组上。<br>数组迁移内部使用了<code>Arrays.copyof()</code>,这个方法新建了一个数组并使用<code>System.arraycopy()</code>方法复制信息到新数组。<br><code>System.arraycopy()</code>是<code>native</code>方法，最后使用的是c的<code>memmove()</code>函数，所以效率很高</p></li></ol><h1 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h1><ol><li>能够确定存储信息数量时最好指定初始化大小，避免多次触发扩容操作。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays-asList不能add</title>
      <link href="/2022/03/20/Arrays-asList%E4%B8%8D%E8%83%BDadd/"/>
      <url>/2022/03/20/Arrays-asList%E4%B8%8D%E8%83%BDadd/</url>
      
        <content type="html"><![CDATA[<p>文章字数：82,阅读全文大约需要1分钟</p><blockquote><p>Arrays.asList将数组转换成列表，但是Arrays.asList返回的List是一个匿名内部类，而不是ArrayList。</p></blockquote><p>可以使用set代替add</p><h1 id="内部ArrayList的源码"><a href="#内部ArrayList的源码" class="headerlink" title="内部ArrayList的源码"></a>内部ArrayList的源码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">RandomAccess</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2764017481108945198L</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> E[] a;</span><br><span class="line"> </span><br><span class="line">        ArrayList(E[] array) &#123;</span><br><span class="line">            a = Objects.requireNonNull(array);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a.length;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">            <span class="keyword">return</span> a.clone();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">        <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;</span><br><span class="line">            <span class="keyword">int</span> size = size();</span><br><span class="line">            <span class="keyword">if</span> (a.length &lt; size)</span><br><span class="line">                <span class="keyword">return</span> Arrays.copyOf(<span class="keyword">this</span>.a, size,</span><br><span class="line">                                     (Class&lt;? extends T[]&gt;) a.getClass());</span><br><span class="line">            System.arraycopy(<span class="keyword">this</span>.a, <span class="number">0</span>, a, <span class="number">0</span>, size);</span><br><span class="line">            <span class="keyword">if</span> (a.length &gt; size)</span><br><span class="line">                a[size] = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a[index];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">            E oldValue = a[index];</span><br><span class="line">            a[index] = element;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            E[] a = <span class="keyword">this</span>.a;</span><br><span class="line">            <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                    <span class="keyword">if</span> (a[i] == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)</span><br><span class="line">                    <span class="keyword">if</span> (o.equals(a[i]))</span><br><span class="line">                        <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Spliterator&lt;E&gt; <span class="title">spliterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Spliterators.spliterator(a, Spliterator.ORDERED);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(action);</span><br><span class="line">            <span class="keyword">for</span> (E e : a) &#123;</span><br><span class="line">                action.accept(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">replaceAll</span><span class="params">(UnaryOperator&lt;E&gt; operator)</span> </span>&#123;</span><br><span class="line">            Objects.requireNonNull(operator);</span><br><span class="line">            E[] a = <span class="keyword">this</span>.a;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">                a[i] = operator.apply(a[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> E&gt; c)</span> </span>&#123;</span><br><span class="line">            Arrays.sort(a, c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanFactory和ApplicationContext</title>
      <link href="/2022/03/20/BeanFactory%E5%92%8CApplicationContext/"/>
      <url>/2022/03/20/BeanFactory%E5%92%8CApplicationContext/</url>
      
        <content type="html"><![CDATA[<p>文章字数：420,阅读全文大约需要1分钟</p><blockquote><p><code>Spring</code>最基本的功能就是容器，容器的核心功能是<code>IOC</code>控制反转。将类的创建、装配、销毁交由容器管理。<code>BeanFacotry</code>和<code>ApplicationContext</code>两个接口是<code>Spring</code>最核心的接口，其中<code>ApplicationContext</code>是<code>BeanFactory</code>的子接口。二者都可以作为容器使用。</p></blockquote><h1 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h1><ol><li><p><code>ApplicationContext</code>是<code>BeanFactory</code>的拓展接口。</p></li><li><p><code>BeanFactory</code>一般称为<code>IOC</code>容器，而<code>ApplicationContext</code>称为应用上下文。</p></li><li><p><code>BeanFactory</code>提供了最基本的容器管理功能，<code>ApplicationContext</code>提供更多服务，如解析配置文本信息等。一般使用<code>ApplicationContext</code>。</p></li></ol><h1 id="BeanFactory"><a href="#BeanFactory" class="headerlink" title="BeanFactory"></a>BeanFactory</h1><p>主要功能是装配，创建，管理Bean。<br><code>Spring ICO</code>容器的实现本质上是<code>BeanFactory</code>，但是真正可以单独使用的容器还是<code>DefaultListableBeanFactory</code>(实现类)</p><ol><li><p><code>BeanFactory</code>是容器的根接口，主要方法是<code>getBean(String beanName)</code></p></li><li><p>直接子接口</p></li></ol><ul><li><code>HierarchicalBeanFactory</code>:提供父容器的访问功能</li><li><code>ListableBeanFactory</code>:提供批量获取<code>Bean</code>的方法</li><li><code>AutowireCapableBeanFactory</code>:增加对已存在的实例的管理</li></ul><ol start="3"><li><p><code>ConfigurableBeanFactory</code><br>主要单例bean的注册，生成实例，以及统计单例bean</p></li><li><p><code>ConfigurableListableBeanFactory</code><br>继承了上述的所有接口，增加了其他功能：比如类加载器,类型转化,属性编辑器,BeanPostProcessor,作用域,bean定义,处理bean依赖关系, bean如何销毁…</p></li><li><p>实现类<code>DefaultListableBeanFactory</code><br>实现了ConfigurableListableBeanFactory，实现上述BeanFactory所有功能。它还可以注册BeanDefinition</p></li></ol><h1 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h1><blockquote><p>应用上下文，继承了<code>BeanFactory</code>接口拥有更多的功能。启动时就可以加载所有的<code>Bean</code>,也可以延迟加载。</p></blockquote><ol><li>国际化（MessageSource）</li><li>资源访问（ResourceLoader）</li><li>载入多个上下文</li><li>消息发送响应机制（ApplicationEventPublisher）</li><li>aop</li></ol><p>web端使用<code>ApplicationContext</code>多一点</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Attach机制</title>
      <link href="/2022/03/20/Attach%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/03/20/Attach%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：309,阅读全文大约需要1分钟</p><blockquote><p><code>Java Attach</code>是一种让<code>java</code>进程之间进行通信的机制。比如<code>jvm</code>运行时获取信息的<code>jstack</code>工具就是应用<code>Attach</code>的。</p></blockquote><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><ol><li><code>获取信息</code>: 通过Attach机制可以获取jvm的内存dump、线程dump、类统计信息、获取vm flag、获取系统属性等。</li><li><code>动态控制程序</code>: 为jvm进程动态加载agent，动态设置vm flag（运行时的flag）</li></ol><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><ol><li>使用<code>com.sun.tools.attach</code>下的相关类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, AttachNotSupportedException </span>&#123;</span><br><span class="line">        VirtualMachine attach = VirtualMachine.attach(<span class="string">"1234"</span>);<span class="comment">//需要连接jvm进程的pid</span></span><br><span class="line">        List&lt;VirtualMachineDescriptor&gt; list = VirtualMachine.list();</span><br><span class="line">        InputStream in = ((HotSpotVirtualMachine) attach).remoteDataDump((Object[]) args);</span><br><span class="line">        <span class="keyword">byte</span> b[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">256</span>];</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            n = in.read(b);</span><br><span class="line">            <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="keyword">new</span> String(b, <span class="number">0</span>, n));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (n &gt; <span class="number">0</span>);</span><br><span class="line">        in.close();</span><br><span class="line">        attach.detach();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>相关jvm参数</li></ol><table><thead><tr><th>jvm参数</th><th>默认值</th><th>介绍</th></tr></thead><tbody><tr><td>DisableAttachMechanism</td><td>false</td><td>禁止Attach</td></tr><tr><td>StartAttachListener</td><td>false</td><td>程序启动时就开启Attach Listener线程，否则需要Signal Dispatcher线程唤醒</td></tr><tr><td>ReduceSignalUsage</td><td>false</td><td>减少信号量？</td></tr></tbody></table><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><ol><li><p>每个jvm都有两个线程: <code>Signal Dispatcher</code>处理信号，<code>Attach Listener</code>用于jvm进程间通信。</p></li><li><p><code>Attach Listener</code>线程默认不开启，使用jvm参数可以启动时开启。否则会在Attach连接成功后开启。</p></li><li><p><code>Attach Listener</code>线程启动后，就会创建一个监听套接字，并创建了一个文件<code>/tmp/.java_pid</code></p></li><li><p>客户端向<code>java_pid</code>中写相关命令，<code>Attach Listener</code>线程会监听这个文件，有信息就解析，执行，返回。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Attach </tag>
            
            <tag> JVM </tag>
            
            <tag> 字节码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeanUtils-copyProperties()复制Boolean类型失败</title>
      <link href="/2022/03/20/BeanUtils-copyProperties()%E5%A4%8D%E5%88%B6Boolean%E7%B1%BB%E5%9E%8B%E5%A4%B1%E8%B4%A5/"/>
      <url>/2022/03/20/BeanUtils-copyProperties()%E5%A4%8D%E5%88%B6Boolean%E7%B1%BB%E5%9E%8B%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：83,阅读全文大约需要1分钟</p><blockquote><p>使用copyProperties()复制时Boolean类型的一直无法复制，最后看到了一些信息</p></blockquote><ol><li>在网上找到分析源码513行只支持boolean<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if (argCount &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                        if (name.startsWith(GET_PREFIX)) &#123;</span><br><span class="line">                            &#x2F;&#x2F; Simple getter</span><br><span class="line">                            pd &#x3D; new PropertyDescriptor(this.beanClass, name.substring(3), method, null);</span><br><span class="line">                        &#125; else if (resultType &#x3D;&#x3D; boolean.class &amp;&amp; name.startsWith(IS_PREFIX)) &#123;</span><br><span class="line">                            &#x2F;&#x2F; Boolean getter</span><br><span class="line">                            pd &#x3D; new PropertyDescriptor(this.beanClass, name.substring(2), method, null);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure>Boolea类型的getXxx()可以使用，如果方法是isXxx()就只有boolean可以<br>属性名不要用isXXX命名了</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAP原则</title>
      <link href="/2022/03/20/CAP%E5%8E%9F%E5%88%99/"/>
      <url>/2022/03/20/CAP%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：576,阅读全文大约需要2分钟</p><blockquote><p><code>CAP</code>原则是只一个分布式系统中，一致性<code>Consistency</code>、可用性<code>Availability</code>、分区容错性<code>Partition tolerance</code>，三个要素只能同时实现两点，不可能三者兼顾。</p></blockquote><h1 id="具体解释"><a href="#具体解释" class="headerlink" title="具体解释"></a>具体解释</h1><ol><li>一致性<code>c</code>: 在分布式系统中，所有的数据备份，在同一时刻是否相同的值。(节点一收到变更数据的请求之后马上通知其他节点，保证数据的统一。)</li><li>可用性<code>A</code>: 在集群中一部分节点故障后，集群整体是否还能相应客户端的读写请求。(只要有数据请求，就必须给回应。即使部分节点故障)</li><li>分区容错性<code>P</code>: 大多数分布式系统分布在多个子网中，每个子网就是一个区。区之间通信可能失败，应对这种情况的设计就是保证分区容错性。（<code>p</code>一般是无法避免的，所以剩下的<code>c</code>和<code>a</code>无法同时做到）</li></ol><h1 id="Consistency和Availability的矛盾"><a href="#Consistency和Availability的矛盾" class="headerlink" title="Consistency和Availability的矛盾"></a><code>Consistency</code>和<code>Availability</code>的矛盾</h1><p>因为通信失败的情况常有可能发生，所以分区容错性很重要。根据<code>CAP</code>原则，<code>Consistency</code>和<code>Availability</code>就只能选择其一了。<br>保证数据一致性则需要数据完全同步之后再开放读写，如果此时通信有问有，就无法保证可用性了，因为有部分节点必然被锁定。或者通信有问题，节点没有获取到最新的数据变更请求，从而达不到数据一致性。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 见识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Buffered包装的IO流效率</title>
      <link href="/2022/03/20/Buffered%E5%8C%85%E8%A3%85%E7%9A%84IO%E6%B5%81%E6%95%88%E7%8E%87/"/>
      <url>/2022/03/20/Buffered%E5%8C%85%E8%A3%85%E7%9A%84IO%E6%B5%81%E6%95%88%E7%8E%87/</url>
      
        <content type="html"><![CDATA[<p>文章字数：406,阅读全文大约需要1分钟</p><blockquote><p>带<code>Buffer</code>的<code>IO</code>流是为了效率而创造出来的，然而实际上不是所有的情况下效率都比普通io高。</p></blockquote><h1 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h1><ol><li><code>BufferedInputStream</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        getBufIfOpen(); <span class="comment">// Check for closed stream</span></span><br><span class="line">        <span class="keyword">if</span> ((off | len | (off + len) | (b.length - (off + len))) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> nread = read1(b, off + n, len - n);</span><br><span class="line">            <span class="keyword">if</span> (nread &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (n == <span class="number">0</span>) ? nread : n;</span><br><span class="line">            n += nread;</span><br><span class="line">            <span class="keyword">if</span> (n &gt;= len)</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line">            <span class="comment">// if not closed but no bytes available, return</span></span><br><span class="line">            InputStream input = in;</span><br><span class="line">            <span class="keyword">if</span> (input != <span class="keyword">null</span> &amp;&amp; input.available() &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">read1</span><span class="params">(<span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> avail = count - pos;</span><br><span class="line">        <span class="keyword">if</span> (avail &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">/* If the requested length is at least as large as the buffer, and</span></span><br><span class="line"><span class="comment">               if there is no mark/reset activity, do not bother to copy the</span></span><br><span class="line"><span class="comment">               bytes into the local buffer.  In this way buffered streams will</span></span><br><span class="line"><span class="comment">               cascade harmlessly. */</span></span><br><span class="line">            <span class="keyword">if</span> (len &gt;= getBufIfOpen().length &amp;&amp; markpos &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> getInIfOpen().read(b, off, len);</span><br><span class="line">            &#125;</span><br><span class="line">            fill();</span><br><span class="line">            avail = count - pos;</span><br><span class="line">            <span class="keyword">if</span> (avail &lt;= <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = (avail &lt; len) ? avail : len;</span><br><span class="line">        System.arraycopy(getBufIfOpen(), pos, b, off, cnt);</span><br><span class="line">        pos += cnt;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>BufferedInputStream</code>的<code>read</code>方法本质上也是调用<code>FilterInputStream</code>的<code>read</code>方法，<code>IO</code>的次数差不多，特殊情况下还会比<code>FilterInputStream</code>多。</p><ol start="2"><li><code>BufferedOutputStream</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BufferedOutputStream</span><span class="params">(OutputStream out)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(out, <span class="number">8192</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &gt;= buf.length) &#123;</span><br><span class="line">            flushBuffer();</span><br><span class="line">        &#125;</span><br><span class="line">        buf[count++] = (<span class="keyword">byte</span>)b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">byte</span> b[], <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (len &gt;= buf.length) &#123;</span><br><span class="line">            <span class="comment">/* If the request length exceeds the size of the output buffer,</span></span><br><span class="line"><span class="comment">               flush the output buffer and then write the data directly.</span></span><br><span class="line"><span class="comment">               In this way buffered streams will cascade harmlessly. */</span></span><br><span class="line">            flushBuffer();</span><br><span class="line">            out.write(b, off, len);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (len &gt; buf.length - count) &#123;</span><br><span class="line">            flushBuffer();</span><br><span class="line">        &#125;</span><br><span class="line">        System.arraycopy(b, off, buf, count, len);</span><br><span class="line">        count += len;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>初始化的时候声明了一个<code>8192</code>大小的<code>byte[]</code>数组，每次写入都是直接写入数组中。当调用刷新方法，或者数组满了才会调用<code>FilterOutputStream</code>的<code>write</code>将数组中的数据写入<code>IO</code>。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p><code>read</code>方法在获取到的长度小于预期的长度时会再次尝试读取剩余的长度，其它和原生<code>IO</code>一样</p></li><li><p><code>write</code>方法本质是先把数据写入内置的<code>byte[]</code>中，等到了一定大小再调用父类方法一次性写入。和自己在外部把信息写入<code>byte[]</code>再写入是一样的。</p></li><li><p><code>write</code>方法在写入的数据大于初始化缓冲区的情况下还会增加<code>IO</code>次数，因为写入后检测到大于缓存区就会马上写入<code>IO</code>，再写入剩下的。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CGLib动态代理</title>
      <link href="/2022/03/20/CGLib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
      <url>/2022/03/20/CGLib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：75,阅读全文大约需要1分钟</p><ul><li>创建一个类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"添加了一个用户"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>代理类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceCGlib</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceCGlib</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 工具类</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 设置父类</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">// 设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// 创建代理</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"before"</span>);</span><br><span class="line">        Object result = methodProxy.invokerSuper(o, object);</span><br><span class="line">        System.out.println(<span class="string">"after"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserServiceCGlib serviceCGlib = <span class="keyword">new</span> UserServiceCGlib(<span class="keyword">new</span> UserServiceImpl());</span><br><span class="line">UserServiceImpl userService = (UserServiceImpl)serviceCGlib.getProxyIntance();</span><br><span class="line">userService.addUser();</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI-CD-CD</title>
      <link href="/2022/03/20/CI-CD-CD/"/>
      <url>/2022/03/20/CI-CD-CD/</url>
      
        <content type="html"><![CDATA[<p>文章字数：187,阅读全文大约需要1分钟</p><h1 id="CI"><a href="#CI" class="headerlink" title="CI"></a>CI</h1><ol><li><p>持续集成<code>CONTINUOUS INTEGRATION</code><br>持续集成的环境中，开发人员会频繁提交代码到主干。持续集成就是对于这些代码的自动化测试，对于可能出现的问题进行预警</p></li><li><p>优点</p></li></ol><ul><li>每个新功能可以创建自动化测试用例</li><li>可以监控代码提交情况，对每个新提交都进行测试</li></ul><h1 id="CD"><a href="#CD" class="headerlink" title="CD"></a>CD</h1><ol><li><p>持续交付<code>CONTINUOUS DELIVERY</code><br>自动化发布流，定时发布，以及一键发布。最好小批量发布，以便出现问题后可以排查</p></li><li><p>优点<br>节约时间和人力成本</p></li></ol><h1 id="CD-1"><a href="#CD-1" class="headerlink" title="CD"></a>CD</h1><ul><li>持续部署<code>CONTINUOUS DEPLOYMENT</code><br>代码提交到分支之后自动被构建、测试、部署到生产环境</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAS</title>
      <link href="/2022/03/20/CAS/"/>
      <url>/2022/03/20/CAS/</url>
      
        <content type="html"><![CDATA[<p>文章字数：287,阅读全文大约需要1分钟</p><blockquote><p>CAS（Compare-and-Swap），比较并替换。java并发包中很多类都采用了CAS技术，当获取到的内存地址和期待的内存地址相等时才将值修改，否则将或获取到的新地址变成期望地址，并循环进行下一次判断，直到成功赋值。保证代码的原子性。</p></blockquote><h1 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger race = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">increase</span><span class="params">()</span></span>&#123;</span><br><span class="line">    race.getAndIncrement();<span class="comment">//原子操作，race++</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="CAS缺点"><a href="#CAS缺点" class="headerlink" title="CAS缺点"></a>CAS缺点</h1><ul><li>循环时间开销可能会很大</li><li>只能保证一个共享变量进行原子操作</li><li>ABA问题：一个变量在读取时是A,准备赋值时检测也是A。但是可能是从A变成B,又从B变成了A,发生过变化。<br>带有标记的引用类<code>AtomicStampedReference</code>可以通过控制变量的版本来保证CAS的正确</li></ul><h1 id="AtomicStampedReference"><a href="#AtomicStampedReference" class="headerlink" title="AtomicStampedReference"></a>AtomicStampedReference</h1><ol><li>循环1-1000<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicStampedReference&lt;Integer&gt; integer = <span class="keyword">new</span> AtomicStampedReference&lt;&gt;(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> timeStamp = integer.getStamp();</span><br><span class="line">            <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    System.out.println(<span class="string">"timeStamp = "</span> + timeStamp);</span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;           </span><br><span class="line">                       <span class="keyword">if</span>(integer.compareAndSet(integer.getReference(),integer.getReference()+<span class="number">1</span>,timeStamp,timeStamp+<span class="number">1</span>))&#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>integer.getStamp();</code>获取版本号</li><li><code>compareAndSet(预期对象，修改后，预期版本，修改后版本)</code>返回成功或失败，失败应该手动进入循环直到完成替换。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 锁 </tag>
            
            <tag> CAS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU占用高问题排查</title>
      <link href="/2022/03/20/CPU%E5%8D%A0%E7%94%A8%E9%AB%98%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
      <url>/2022/03/20/CPU%E5%8D%A0%E7%94%A8%E9%AB%98%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：106,阅读全文大约需要1分钟</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>查看<code>CPU</code>占用率高的程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; top</span><br></pre></td></tr></table></figure><p>查看<code>CPU</code>占用最高的几个程序</p><ol start="2"><li>查看<code>PID</code>对应的程序具体信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep PID</span><br></pre></td></tr></table></figure><ol start="3"><li>输出具体日志</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstack -l PID &gt;&gt; PID.log</span><br></pre></td></tr></table></figure><ol start="4"><li>查看程序内部哪个线程产生的问题</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -Hp PID</span><br></pre></td></tr></table></figure><ol start="5"><li>查看改线程的代号</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%x\n&quot; HID</span><br></pre></td></tr></table></figure><ol start="6"><li>通过代号在日志中查找问题详细信息（输出20行 -A20）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep id -A20 PID.log</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Calender获取上个月日期</title>
      <link href="/2022/03/20/Calender%E8%8E%B7%E5%8F%96%E4%B8%8A%E4%B8%AA%E6%9C%88%E6%97%A5%E6%9C%9F/"/>
      <url>/2022/03/20/Calender%E8%8E%B7%E5%8F%96%E4%B8%8A%E4%B8%AA%E6%9C%88%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：114,阅读全文大约需要1分钟</p><blockquote><p>日历类<code>Calender</code>获取给定时间上个月的日期，总共有两种方法获取</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        <span class="comment">// 获取默认日历</span></span><br><span class="line">        Calendar c1 = Calendar.getInstance();</span><br><span class="line">        Date lastMonth = c1.getTime();</span><br><span class="line">        System.out.println(<span class="string">"原时间："</span> + format.format(lastMonth));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法1 add 直接在原时间上加减</span></span><br><span class="line">        c1.add(Calendar.MONTH, -<span class="number">1</span>);</span><br><span class="line">        lastMonth = c1.getTime();</span><br><span class="line">        System.out.println(<span class="string">"add之后时间："</span> + format.format(lastMonth));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重置时间为当前</span></span><br><span class="line">        c1.setTime(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法2 set 设置新时间, 负数会在高位上相应调整</span></span><br><span class="line">        c1.set(Calendar.MONTH, c1.get(Calendar.MONTH)-<span class="number">1</span>);</span><br><span class="line">        lastMonth = c1.getTime();</span><br><span class="line">        System.out.println(<span class="string">"set之后时间："</span> + format.format(lastMonth));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CannotAcquireLockException--LockAcquisitionException</title>
      <link href="/2022/03/20/CannotAcquireLockException--LockAcquisitionException/"/>
      <url>/2022/03/20/CannotAcquireLockException--LockAcquisitionException/</url>
      
        <content type="html"><![CDATA[<p>文章字数：411,阅读全文大约需要1分钟</p><blockquote><p><code>sqlServer</code>数据库环境下出现<code>CannotAcquireLockException</code>和<code>LockAcquisitionException</code>异常，记录排查过程</p></blockquote><h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><ol><li>期初以为是接口执行时间过长，导致其它事务获取不到锁导致的。之后模拟锁表，结果发现锁了好几分钟的情况下其他事务都会自旋等待，直到获取到锁才会继续执行。<br>结果就是手动加锁只会让接口执行时间边长，并不会抛出上述异常。</li><li>搜索了一下上述异常，发现死锁才会抛出这个异常。之前的尝试最多是等待超时，死锁需要两个事物彼此等待。</li><li>还原发生异常的现场数据，并且运行了一下。发现下发命令的接口执行一分钟左右就会抛出异常。</li><li>使用客户端连接数据库，在程序运行时手动运行以下<code>sql</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SELECT  </span><br><span class="line">der.[session_id],der.[blocking_session_id],  </span><br><span class="line">sp.lastwaittype,sp.hostname,sp.program_name,sp.loginame,  </span><br><span class="line">der.[start_time] AS <span class="string">'开始时间'</span>,  </span><br><span class="line">der.[status] AS <span class="string">'状态'</span>,  </span><br><span class="line">dest.[text] AS <span class="string">'sql语句'</span>,  </span><br><span class="line">DB_NAME(der.[database_id]) AS <span class="string">'数据库名'</span>,  </span><br><span class="line">der.[wait_type] AS <span class="string">'等待资源类型'</span>,  </span><br><span class="line">der.[wait_time] AS <span class="string">'等待时间'</span>,  </span><br><span class="line">der.[wait_resource] AS <span class="string">'等待的资源'</span>,  </span><br><span class="line">der.[logical_reads] AS <span class="string">'逻辑读次数'</span>  </span><br><span class="line">FROM sys.[dm_exec_requests] AS der  </span><br><span class="line">INNER JOIN master.dbo.sysprocesses AS sp ON der.session_id=sp.spid  </span><br><span class="line">CROSS APPLY  sys.[dm_exec_sql_text](der.[sql_handle]) AS dest  </span><br><span class="line">--WHERE [session_id]&gt;<span class="number">50</span> AND session_id&lt;&gt;@<span class="meta">@SPID</span>  </span><br><span class="line">ORDER BY der.[session_id]  </span><br><span class="line">GO</span><br></pre></td></tr></table></figure></li><li>最后在抛出异常前发现两个互锁的事务</li></ol><table><thead><tr><th>session_id</th><th>blocking_session_id</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><ol start="6"><li>通过查询出来的<code>session_id</code>和<code>blocking_session_id</code>可以看出两个事物形成了死锁</li><li>再通过查询出的sql语句定位到具体代码（具体操作要看业务逻辑）</li><li>通过报错下的调用栈也可以定位到其中一条sql语句的位置。</li></ol><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>两张表同时被两个事物先后访问，并分别加锁。导致锁表</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ConcurrentModificationException</title>
      <link href="/2022/03/20/ConcurrentModificationException/"/>
      <url>/2022/03/20/ConcurrentModificationException/</url>
      
        <content type="html"><![CDATA[<p>文章字数：180,阅读全文大约需要1分钟</p><blockquote><p>对<code>Vector</code>、<code>ArrayList</code>在迭代的时候如果同时对其进行修改时抛出的异常<br><a href="https://www.cnblogs.com/zhuyeshen/p/10956822.html" target="_blank" rel="noopener">参考</a></p></blockquote><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>迭代器的<code>next()</code>方法在返回下一个时会判断预期执行次数和实际次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>增加、删除和修改都会导致<code>modCount+1</code>。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li>单线程下可以使用迭代器<code>Iterator</code>对象下的<code>add</code>、<code>remove</code>等方法，这些方法在调用<code>list</code>的响应方法后还会更新<code>expectedModCount</code></li><li>多线程下可以使用<code>CopyOnWriteArrayList</code>，或者迭代的代码加锁变成同步代码块。</li><li>因为迭代的时候每个线程都是单独的迭代器，所以换成<code>Vector</code>也没用</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Content-Security-Policy</title>
      <link href="/2022/03/20/Content-Security-Policy/"/>
      <url>/2022/03/20/Content-Security-Policy/</url>
      
        <content type="html"><![CDATA[<p>文章字数：647,阅读全文大约需要2分钟</p><blockquote><p><code>HTTP</code>头中的<code>Content-Security-Policy</code>字段有若干指令，可以设置指定的策略允许的源</p></blockquote><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ol><li><code>default-src</code>: 可以为其它指令提供备选项</li><li><code>child-src</code>:元素加载的嵌套浏览上下文</li><li><code>connect-src</code>指令用于控制允许通过脚本接口加载的链接地址,影响下面的</li></ol><ul><li><code>&lt;a&gt;</code> <code>ping</code></li><li><code>Fetch</code></li><li><code>XMLHttpRequest</code></li><li><code>WebSocket</code></li><li><code>EventSource</code></li></ul><ol start="4"><li><code>font-src</code>字体的地址被阻止<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123; </span><br><span class="line">    font-family: &quot;MyFont&quot;; </span><br><span class="line">    src: url(&quot;https:&#x2F;&#x2F;not-example.com&#x2F;font&quot;); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><code>frame-src</code><br><code>&lt;frame&gt;</code>标签和<code>&lt;iframe&gt;</code>指定源的限制</li><li><code>img-src</code>HTTP 指令指定图像和图标的有效来源</li><li><code>manifest-src</code> <code>manifest</code>是一个资源允许的列表</li><li><code>media-src</code> <code>&lt;audio&gt;</code>和<code>&lt;video&gt;</code>元素的有效源</li><li><code>object-src</code></li><li><code>script-src</code> <code>&lt;script&gt;</code>标签</li><li><code>style-src</code> <code>&lt;style&gt;</code>标签</li><li><code>worker-src</code> <code>Worker</code> <code>SharedWorker</code> <code>ServiceWorker</code></li></ol><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p>一个或者多个源</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &lt;source&gt;;</span><br><span class="line">Content-Security-Policy: default-src &lt;source&gt; &lt;source&gt;;</span><br></pre></td></tr></table></figure><h1 id="源"><a href="#源" class="headerlink" title="源"></a>源</h1><p><code>&lt;source&gt;</code>可以是以下之一：</p><ol><li><p><code>&lt;host-source&gt;</code>域名或者<code>ip</code>地址表示的主机名，外加可选的<code>URL</code>协议名和端口号，允许在主机名和端口的位置使用通配符<code>*</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;*.example.com</span><br></pre></td></tr></table></figure></li><li><p><code>&lt;scheme-source&gt;</code>可以直接指定源（二进制文件，数据等）不推荐使用<br>一下浏览器会特意排除<code>blob</code>与<code>filesystem</code>，可以在这里设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># data:sssssssss</span><br><span class="line">data:uris</span><br><span class="line">mediastream:uris</span><br><span class="line">blob:uris</span><br><span class="line">filesystem:uris</span><br></pre></td></tr></table></figure></li><li><p><code>&#39;self&#39;</code>指定与要保护的文件所在的源，包括相同的<code>URL scheme</code>与端口号。必须有单引号。即同源</p></li><li><p><code>&#39;unsafe-inline&#39;</code>允许使用内联资源，<code>script</code>标签，<code>javascript: URL</code>之类的</p></li><li><p><code>&#39;unsafe-eval&#39;</code>允许使用<code>eval()</code>以及相似的函数来创建代码</p></li><li><p><code>&#39;none&#39;</code>不允许任何内容</p></li><li><p><code>&#39;nonce-&lt;base64值&gt;&#39;</code>特定使用一次性加密内联的白名单，服务器必须在每一次传输政策时生成唯一的一次性值，否则有安全问题。</p></li><li><p><code>&lt;hash-source&gt;</code>使用<code>sha256</code>, <code>sha384</code>, <code>sha512</code>编码过得内联脚本或样式</p></li><li><p><code>strict-dynamic</code>指定对于含有标记脚本(通过附加一个随机数或散列)的信任，应该传播到由该脚本加载的所有脚本。与此同时，任何白名单以及源表达式例如 ‘self’  或者  ‘unsafe-inline’ 都会被忽略</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 安全 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Content-type-&#39;application-x-www-form</title>
      <link href="/2022/03/20/Content-type-&#39;application-x-www-form/"/>
      <url>/2022/03/20/Content-type-&#39;application-x-www-form/</url>
      
        <content type="html"><![CDATA[<p>文章字数：46,阅读全文大约需要1分钟</p><blockquote><p><code>java</code>后端报错<code>Content type &#39;application/x-www-form-urlencoded;charset=UTF-8&#39; not supported</code></p></blockquote><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>前端使用<code>formData</code>传值，但是后端接收使用的是<code>@RequestBody</code>。这个是<code>json</code>的接收方式<br>修改成<code>func(@RequestParam Map datas)</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Drools简单使用</title>
      <link href="/2022/03/20/Drools%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/Drools%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：230,阅读全文大约需要1分钟</p><blockquote><p>Drools是一款java规则引擎，其目的是为了将if..else这样的业务逻辑与业务代码分离。</p></blockquote><h1 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.kie&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;kie-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;6.5.0.Final&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.drools&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;drools-compiler&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;6.5.0.Final&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;scope&gt;runtime&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>新建<code>/src/resources/META-INF/kmodule.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;kmodule xmlns&#x3D;&quot;http:&#x2F;&#x2F;jboss.org&#x2F;kie&#x2F;6.0.0&#x2F;kmodule&quot;&gt;</span><br><span class="line">   &lt;!-- name任意 packages为resources下drl所在的包 --&gt;</span><br><span class="line">    &lt;kbase name&#x3D;&quot;rules&quot; packages&#x3D;&quot;rules&quot;&gt;</span><br><span class="line">        &lt;!-- ksession名字任意 --&gt;</span><br><span class="line">        &lt;ksession name&#x3D;&quot;myAgeSession&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;kbase&gt;</span><br><span class="line">&lt;&#x2F;kmodule&gt;</span><br></pre></td></tr></table></figure><h1 id="drl文件"><a href="#drl文件" class="headerlink" title="drl文件"></a>drl文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;package rules &#x2F;&#x2F;包名，不必和物理路径一样</span><br><span class="line">import com.learndrools.learndrools.User &#x2F;&#x2F;导入Bean的完整路径，也可导入静态方法</span><br><span class="line">dialect &quot;mvel&quot;</span><br><span class="line">rule &quot;age&quot;      &#x2F;&#x2F;唯一规则名，可多次执行</span><br><span class="line">    &#x2F;&#x2F;salience 1  &#x2F;&#x2F;优先级越大越高,如果不设置随机顺序</span><br><span class="line">    &#x2F;&#x2F;no-loop true &#x2F;&#x2F;规则是否只执行一次，默认false,多次执行</span><br><span class="line">    &#x2F;&#x2F;lock-on-active true &#x2F;&#x2F;避免因某些Fact对象被修改而使已经执行过的规则再次被激活执行。</span><br><span class="line">    when</span><br><span class="line">        $user: User(age&lt;15 || age&gt;60) &#x2F;&#x2F; 声明变量：Bean(规则)，变量通常$开头</span><br><span class="line">    then</span><br><span class="line">        System.out.println($user.getName()+&quot;年龄不符合&quot;);</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h1 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learndrools.learndrools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.KieServices;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieContainer;</span><br><span class="line"><span class="keyword">import</span> org.kie.api.runtime.KieSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">LearndroolsApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> KieContainer container = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> KieSession statefulKieSession = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        KieServices kieServices = KieServices.Factory.get();</span><br><span class="line">        container = kieServices.getKieClasspathContainer();</span><br><span class="line">        statefulKieSession = container.newKieSession(<span class="string">"myAgeSession"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"zhang san"</span>,<span class="number">90</span>);</span><br><span class="line">        statefulKieSession.insert(user);</span><br><span class="line">        statefulKieSession.fireAllRules();</span><br><span class="line">        statefulKieSession.dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ControllerAdvice增强器</title>
      <link href="/2022/03/20/ControllerAdvice%E5%A2%9E%E5%BC%BA%E5%99%A8/"/>
      <url>/2022/03/20/ControllerAdvice%E5%A2%9E%E5%BC%BA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：311,阅读全文大约需要1分钟</p><blockquote><p>注解<code>ControllerAdvice</code>提供了controller的全局处理功能</p></blockquote><ol><li><p><code>@ExceptionHandler</code>:全局异常捕获，捕获到指定异常后处理。通常用作获取异常后统一返回结构化的错误信息</p></li><li><p><code>@InitBinder</code>:指定参数名，获取的参数绑定变量前的自定义操作，不如给时间日期增加解析器，构建不同的变量名头部信息。</p></li><li><p><code>@ModelAttribute</code>:该方法返回的值可以在controller中接收。</p></li></ol><h1 id="ExceptionHandler"><a href="#ExceptionHandler" class="headerlink" title="@ExceptionHandler"></a>@ExceptionHandler</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ExceptionHandler &#123;</span><br><span class="line">    <span class="comment">// 指定需要捕获的异常的Class类型</span></span><br><span class="line">Class&lt;? extends Throwable&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span>(basePackages = <span class="string">"mvc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringControllerAdvice</span> </span>&#123;</span><br><span class="line"><span class="comment">//捕捉到异常后返回异常界面</span></span><br><span class="line">  <span class="meta">@ExceptionHandler</span>(RuntimeException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">ModelAndView</span> <span class="title">runtimeException</span>(<span class="title">RuntimeException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="InitBinder"><a href="#InitBinder" class="headerlink" title="@InitBinder"></a>@InitBinder</h1><blockquote><p>作用于通过@RequestParam，@RequestBody或者@ModelAttribute等注解绑定的参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> InitBinder &#123;</span><br><span class="line">    <span class="comment">// 这里value参数用于指定需要绑定的参数名称，如果不指定，则会对所有的参数进行适配，</span></span><br><span class="line">    <span class="comment">// 只有是其指定的类型的参数才会被转换</span></span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>指定转换器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span>(basePackages = <span class="string">"mvc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringControllerAdvice</span> </span>&#123;</span><br><span class="line">  <span class="meta">@InitBinder</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">globalInitBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;</span><br><span class="line">    binder.addCustomFormatter(<span class="keyword">new</span> DateFormatter(<span class="string">"yyyy-MM-dd"</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>不同的前缀返回给不同的对象</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">controller:</span><br><span class="line"><span class="meta">@InitBinder</span>(“student”)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initUser</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">binder.setFieldDefaultPrefix(“student”)</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@InitBinder</span>(“teacher”)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initAdmin</span><span class="params">(WebDataBinder binder)</span></span>&#123;</span><br><span class="line">binder.setFieldDefaultPrefix(“teacher”);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/xx"</span>)</span><br><span class="line">… save(Teacher teacher,Student student)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h1><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ModelAttribute &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 该属性与name属性的作用一致，用于指定目标参数的名称</span></span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"name"</span>)</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 与name属性一起使用，如果指定了binding为false，那么name属性指定名称的属性将不会被处理</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">binding</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span>(basePackages = <span class="string">"mvc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringControllerAdvice</span> </span>&#123;</span><br><span class="line">  <span class="meta">@ModelAttribute</span>(value = <span class="string">"message"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">globalModelAttribute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"valuexxxx"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/demo"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">detail</span><span class="params">(@ModelAttribute(<span class="string">"message"</span>)</span> String message) </span>&#123;</span><br><span class="line">    <span class="comment">//获取到了    </span></span><br><span class="line">    System.out.println(message);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块化</title>
      <link href="/2022/03/20/ES6%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>/2022/03/20/ES6%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>文章字数：237,阅读全文大约需要1分钟</p><blockquote><p>ES6支持模块化编程，模块内变量，函数外部无法获取。必须模块内使用esport输出，外部使用import接收。输出有普通和默认两种，接收时普通需要{xxx,xx}接收，默认不用。</p></blockquote><ul><li><strong>简单输出</strong></li></ul><p><code>test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> name=<span class="string">"zhangsan"</span>;</span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name&#125; <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name);<span class="comment">//输出导入的变量name</span></span><br></pre></td></tr></table></figure><ul><li><strong>多变量</strong></li></ul><p><code>test.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name=<span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="keyword">let</span> addr=<span class="string">"fz"</span>;</span><br><span class="line"><span class="keyword">let</span> myfun=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name+<span class="string">"住在"</span>+addr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    addr,</span><br><span class="line">    myfun</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>index.js</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;name,addr,myfun&#125; from &quot;.&#x2F;test.js&quot;;</span><br><span class="line">console.log(name);</span><br><span class="line">console.log(myfun());</span><br></pre></td></tr></table></figure><ul><li><strong>重命名</strong></li></ul><ol><li>模块内部<br><code>test.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myName=<span class="string">"zhangsan"</span>;</span><br><span class="line"><span class="keyword">let</span> myAddr=<span class="string">"fz"</span>;</span><br><span class="line"><span class="keyword">export</span>&#123;</span><br><span class="line">    myName <span class="keyword">as</span> name,</span><br><span class="line">    myAddr <span class="keyword">as</span> addr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>index.js</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;name,addr&#125; <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name+<span class="string">"住在"</span>+addr)</span><br></pre></td></tr></table></figure></li><li>外部<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------------------test1.js-----------------------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> myName=<span class="string">"我来自test1.js"</span>;</span><br><span class="line"><span class="comment">/*-----------------------test2.js-----------------------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> myName=<span class="string">"我来自test2.js"</span>;</span><br><span class="line"><span class="comment">/*-----------------------index.js-----------------------*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;myName <span class="keyword">as</span> name1&#125; <span class="keyword">from</span> <span class="string">"./test1.js"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;myName <span class="keyword">as</span> name2&#125; <span class="keyword">from</span> <span class="string">"./test2.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name1);<span class="comment">//我来自test1.js</span></span><br><span class="line"><span class="built_in">console</span>.log(name2);<span class="comment">//我来自test1.js</span></span><br></pre></td></tr></table></figure></li></ol><ul><li><strong>导入整个模块</strong></li></ul><p><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> poeple <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(people.name);</span><br><span class="line"><span class="built_in">console</span>.log(people.addr);</span><br></pre></td></tr></table></figure><ul><li><strong>默认导出</strong></li></ul><ol><li>导出默认方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*---------test.js-------------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"default function"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-------index.js---------*/</span></span><br><span class="line"><span class="keyword">import</span> xxxfun <span class="keyword">from</span> <span class="string">"./test.js"</span>;<span class="comment">//不需要&#123;&#125;,名字任意</span></span><br><span class="line"><span class="built_in">console</span>.log(xxxfun());</span><br></pre></td></tr></table></figure><ol start="2"><li>导出默认对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-----------test.js---------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;<span class="comment">//json对象</span></span><br><span class="line">    defaultFun()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"default fun"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    name : <span class="string">"xxx"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-----------index.js----------*/</span></span><br><span class="line"><span class="keyword">import</span> defaultOb <span class="keyword">from</span> <span class="string">"./test.js"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(defaultOb.defaultFun());</span><br><span class="line"><span class="built_in">console</span>.log(defaultOb.name);</span><br></pre></td></tr></table></figure></li></ol></li><li>混合导出<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*------------test.js-------------*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"xx"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name=<span class="string">"zzz"</span>;</span><br><span class="line"><span class="comment">/*--------------index.js-----------*/</span></span><br><span class="line"><span class="keyword">import</span> defaultFun,&#123;name&#125; <span class="keyword">from</span> <span class="string">"./test.js"</span>;<span class="comment">//&#123;&#125;是导出，不加是默认导出。</span></span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Error-creating-bean-with-name</title>
      <link href="/2022/03/20/Error-creating-bean-with-name/"/>
      <url>/2022/03/20/Error-creating-bean-with-name/</url>
      
        <content type="html"><![CDATA[<p>文章字数：154,阅读全文大约需要1分钟<br>今天遇到一个spring报错，<code>error creating bean</code>。查了报错的bean，没问题，而且报的也是其他同事写的，从主分支上拉下来的代码。<br>后来在报错的最后看到一句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Caused by: org.hibernate.MappingException: Repeated column in mapping for entity: WhiteListClass column: start_time (should be mapped with insert&#x3D;&quot;false&quot; update&#x3D;&quot;false&quot;)</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>由于jpa的列名不小心重复了，导致jpa初始化失败</li><li>导致spring初始化失败，所以报了一些莫名其妙的错误。</li></ol><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>这次只看最上面的一些报错，觉得莫名其妙，还以为是maven环境的问题。从新拉了代码，更新仓库。<br>下次要看全报错信息。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Executing-an-update-delete-query</title>
      <link href="/2022/03/20/Executing-an-update-delete-query/"/>
      <url>/2022/03/20/Executing-an-update-delete-query/</url>
      
        <content type="html"><![CDATA[<p>文章字数：118,阅读全文大约需要1分钟</p><blockquote><p>此错误是<code>jpa</code>在进行更新和删除操作时没有加事务导致的</p></blockquote><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>加上事务就可以了，<code>Service</code>层或者是<code>Repository</code>层加都可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@service</span></span><br><span class="line"><span class="meta">@Transaction</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xxxService</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Not-supported-for-DML-operations"><a href="#Not-supported-for-DML-operations" class="headerlink" title="Not supported for DML operations"></a>Not supported for DML operations</h1><p>这个错误是因为修改数据需要在<code>Dao</code>的方法上加<code>@Modifying</code>声明方法是修改数据的。</p><p>#总结</p><p><code>jpa</code>修改数据需要</p><ol><li>加事务，<code>jpa</code>修改操作必须在事务里</li><li>加注解<code>@Modifying</code>声明是修改操作</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EqualsAndHashCode导致的StackOverflowError</title>
      <link href="/2022/03/20/EqualsAndHashCode%E5%AF%BC%E8%87%B4%E7%9A%84StackOverflowError/"/>
      <url>/2022/03/20/EqualsAndHashCode%E5%AF%BC%E8%87%B4%E7%9A%84StackOverflowError/</url>
      
        <content type="html"><![CDATA[<p>文章字数：69,阅读全文大约需要1分钟</p><blockquote><p><code>Lombok</code>的注解<code>EqualsAndHashCode</code>导致栈空间溢出</p></blockquote><h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><ol><li><code>StackOverflowError</code>一般是递归之类的多嵌套导致的</li><li><code>EqualsAndHashCode</code>注解了两个类，是一对多关系</li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>手写<code>equals</code>和<code>hashCode</code>，多的一方排除循环依赖的属性。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Failed-to-clean-project--Failed-to-delete</title>
      <link href="/2022/03/20/Failed-to-clean-project--Failed-to-delete/"/>
      <url>/2022/03/20/Failed-to-clean-project--Failed-to-delete/</url>
      
        <content type="html"><![CDATA[<p>文章字数：38,阅读全文大约需要1分钟</p><blockquote><p><code>maven clean</code>命令报错</p></blockquote><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>之前编译的程序正在运行</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>结束程序，或者直接杀掉<code>java</code>进程</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ForkJoin</title>
      <link href="/2022/03/20/ForkJoin/"/>
      <url>/2022/03/20/ForkJoin/</url>
      
        <content type="html"><![CDATA[<p>文章字数：72,阅读全文大约需要1分钟</p><h1 id="ForkJoin框架"><a href="#ForkJoin框架" class="headerlink" title="ForkJoin框架"></a>ForkJoin框架</h1><h1 id="java8引入的Stream"><a href="#java8引入的Stream" class="headerlink" title="java8引入的Stream"></a>java8引入的Stream</h1><p><code>Stream</code>内置了<code>ForkJoin</code>，可以直接使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[] a = &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">       Arrays.stream(a).parallel().forEach(v -&gt; System.out.println(Thread.currentThread().getId() + <span class="string">"=="</span> + v));</span><br><span class="line">       System.out.println(<span class="string">"FockJoin 默认线程池线程数量 = "</span> + (Runtime.getRuntime().availableProcessors() - <span class="number">1</span>));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1&#x3D;&#x3D;3</span><br><span class="line">13&#x3D;&#x3D;1</span><br><span class="line">1&#x3D;&#x3D;0</span><br><span class="line">15&#x3D;&#x3D;4</span><br><span class="line">14&#x3D;&#x3D;5</span><br><span class="line">13&#x3D;&#x3D;2</span><br><span class="line">FockJoin 默认线程池线程数量 &#x3D;  3</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GC</title>
      <link href="/2022/03/20/GC/"/>
      <url>/2022/03/20/GC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1046,阅读全文大约需要4分钟</p><h1 id="GC要关注的事情"><a href="#GC要关注的事情" class="headerlink" title="GC要关注的事情"></a>GC要关注的事情</h1><ul><li><code>where/which</code></li><li><code>When</code></li><li><code>How</code></li></ul><h1 id="垃圾回收器组合"><a href="#垃圾回收器组合" class="headerlink" title="垃圾回收器组合"></a>垃圾回收器组合</h1><p><img src="https://upload-images.jianshu.io/upload_images/17243965-3d9458fc8d1226fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="垃圾回收器组合"></p><ul><li>新生代的垃圾回收器几乎都是复制法，90%对象朝生夕死（minor gc）Eden区</li></ul><ol><li><code>Serial</code>新生代，复制算法，单线程，简单高效，适合内存不大的情况</li><li><code>ParNew</code>新生代，并行多线程，<code>Serial</code>的多线程版本，搭配<code>CMS</code>的首选</li><li><code>Parallel Scavenge</code>新生代，吞吐优先，类似<code>ParNew</code>，<code>Server</code>级别多核机器默认方式，适用后台运算不需要太多交换的任务</li></ol><p>吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)<br>垃圾收集时间=垃圾回收频率*单词回收时间</p><ul><li>老年代</li></ul><ol><li><code>Serial Old</code>标记整理，单线程，<code>Client</code>模式默认</li><li><code>Parallel Old</code>标记整理，并行，配合<code>Parallel Scavenge</code>面向吞吐量的组合，使用吞吐量注重和cpu资源敏感场合</li><li><code>CMS</code>老年代，标记清除，并行和并发。尽可能缩短垃圾收集器时间占用，但是占用更多cpu以及内存碎片，浮动垃圾问题，注重服务器相应的场合，互联网后端主流</li><li><code>G1</code>新生代+老年代，并行并发，<code>1.7</code>后引入，采用分区回收，基本不牺牲吞吐量的前提下完成低停顿回收，可预测停顿。目标是取代CMS(采用分块，总体是标记整理，分区间是复制)</li></ol><p><code>java -XX: +PrintCommandLineFlage -version</code>查看jdk默认信息</p><h1 id="指定垃圾回收器"><a href="#指定垃圾回收器" class="headerlink" title="指定垃圾回收器"></a>指定垃圾回收器</h1><p><code>-XX:+UseSerialGC</code>新生代和老年代都是穿行收集器<br><code>-XX:+UseParNewGC</code>新生代<code>ParNew</code>老年代<code>Serial Old</code>(关注停顿时间，适合用户交互)<br><code>-XX:+UseParallelGC</code>新生代<code>ParallerGC</code>老年代<code>Serial Old</code>(吞吐量，关注用户代码执行的总比例)<br><code>-XX:UseConcMarkSweepGC</code>新生代<code>ParNew</code>老年代<code>CMS</code><br><code>-XX:+UseG1GC</code>使用G1</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><code>UseParallelGC</code>的参数<br><code>-XX:MaxGCPauseMills</code>最大停顿时间<br><code>-XX:GCTimeRatio</code>吞吐量的倒数，即GC占用时间占用总时间的比例</p><h1 id="ZGC"><a href="#ZGC" class="headerlink" title="ZGC"></a>ZGC</h1><p>jdk11提供，的可拓展低延迟收集器</p><ul><li>TB级别的堆</li><li>GC时间不超过10ms</li><li>和G1相比，吞吐量降低不超过<code>15%</code></li><li>有色指针和内存屏障</li></ul><h1 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h1><ul><li>垃圾优先，优先清理垃圾多的区域</li><li>并行并发，分代收集。空间整合，整体是标记-整理，区域间是复制算法。没有空间碎片，可预测的停顿。</li><li>初始标记，短暂停顿，仅仅标记一些GC Roots能直达的对象，速度很快</li><li>根区域扫描，从新生代可以直接到达的老年代区域</li><li><code>-XX:MaxGCPauseMillis</code>指定目标最大停顿时间，G1尝试调整新生代和老年代比例，堆大小，晋升年龄</li><li><code>-XX:ParallerGCThreads</code>GC工作线程数量</li></ul><h1 id="内存回收和分配策略"><a href="#内存回收和分配策略" class="headerlink" title="内存回收和分配策略"></a>内存回收和分配策略</h1><ul><li>对象优先进Eden区，Eden内存不足发生Minor GC</li><li>大对象直接进老年代，大字符串和大的数组</li><li><code>-XX:PretenureSizeThreshreshold</code>指定大于这个值直接进入老年代（默认0，即大对象不直接进入老年代）</li><li>存活对象默认15岁进入老年代</li><li><code>-XX:MaxTenuringThreshold</code>指定进入老年代的年龄</li><li>空间分配担保，<code>survivor</code>空间不够，只要老年代连续空间大于新生代对象的总大小或历次晋升平均大小，进行Minor GC否则Full GC</li></ul><h1 id="新生代配置"><a href="#新生代配置" class="headerlink" title="新生代配置"></a>新生代配置</h1><ul><li>新生代分为<code>Eden</code>区(80%)和<code>survivor</code>区(20%分为s1s2)</li><li>新对象存放在<code>Eden</code>，上次存活的放在s1或s2中，gc时向s1或s2中转移</li><li><code>-XX:NewSize/MaxSize</code>高优先级</li><li><code>-Xmn</code>(<code>NewSize=MaxNewSize</code>)中</li><li><code>-XX:NewRatio</code>比例，低</li></ul><h1 id="jdk工具"><a href="#jdk工具" class="headerlink" title="jdk工具"></a>jdk工具</h1><ul><li><code>jps</code>列出当前电脑运行的进程id <code>-q</code>只要id <code>-m</code>传入main的参数  <code>-l</code>列出临时文件 <code>-v</code>列出虚拟机启动的显示参数</li><li><code>jstat</code>虚拟机统计信息监控 <code>-gc id time i</code>每time毫秒打印一次gc信息，共i次</li><li><code>jinfo</code>java配置信息工具</li><li><code>jmap</code>内存映射</li><li><code>jstack</code>堆栈跟踪</li><li><code>jConsole</code>监控管理</li><li><code>VisualVM</code>多合一故障处理</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HQL</title>
      <link href="/2022/03/20/HQL/"/>
      <url>/2022/03/20/HQL/</url>
      
        <content type="html"><![CDATA[<p>文章字数：234,阅读全文大约需要1分钟</p><blockquote><p><code>HQL</code>是<code>Hibernate Query Language</code>的缩写，提供更加丰富灵活、强大的查询能力，接近<code>SQL</code>语句。</p></blockquote><h1 id="和SQL的区别"><a href="#和SQL的区别" class="headerlink" title="和SQL的区别"></a>和SQL的区别</h1><ol><li>HQL: </li></ol><ul><li>对查询对象进行了面向对象的封装。<code>from 类名+类对象 where 对象属性</code></li><li>区分大小写，关键字不区分大小写</li><li>占位符下标从0开始计算（hibernate5 后不支持）</li><li>支持命名参数</li></ul><ol start="2"><li>SQL</li></ol><ul><li>面向数据库表查询。<code>from 表名 where 表中字段</code></li><li>不区分大小写</li><li>从1开始计算位置</li><li>不支持:命名参数</li></ul><h1 id="查询返回结果"><a href="#查询返回结果" class="headerlink" title="查询返回结果"></a>查询返回结果</h1><ol><li>单个对象</li><li>多个</li></ol><ul><li>object[]</li><li>list</li></ul><ol start="3"><li>Map</li></ol><h1 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Query query = session.createQuery(<span class="string">"select new map(b.bookId, b.bookName) from Book b"</span>);</span><br><span class="line">    List&lt;Map&gt; list = query.list();</span><br><span class="line">    <span class="keyword">for</span>(Map b : list)&#123;</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>返回<code>String</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b.bookName from book b</span><br></pre></td></tr></table></figure></li><li><p>返回<code>Object</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select b.bookId,b.bookName from Book b</span><br></pre></td></tr></table></figure></li><li><p>返回对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select new Book(b.bookId, b.bookName) from Book b</span><br></pre></td></tr></table></figure></li><li><p>返回<code>Map</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select new map(b.bookId,b.bookName) from Book b</span><br></pre></td></tr></table></figure></li></ol><h1 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Query query = session.createQuery(<span class="string">"from Book where bookId in (:bookIds)"</span>);</span><br><span class="line">query.setParameterList(<span class="string">"bookIds"</span>, <span class="keyword">new</span> Integer[] &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line">List list= query.list();</span><br></pre></td></tr></table></figure><p><code>hibernate5</code>之后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Query query &#x3D; session.createQuery(&quot;from Book where bookId in (:bookIds)&quot;);</span><br><span class="line">List list &#x3D; query.setList(&quot;bookIds&quot;, xxxx).list();</span><br></pre></td></tr></table></figure><h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select o.orderNo,oi.quantity from Order o, OderItem oi where o &#x3D; oi.order</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><code>sun</code>总共</li><li><code>avg</code>平均</li><li><code>max</code>最大</li><li><code>min</code>最小</li><li><code>count</code>总共</li></ul><h1 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Query query &#x3D; session.createQuery(&quot;from Book&quot;);</span><br><span class="line">query.setFirstResult(2);</span><br><span class="line">query.setMaxResults(3);</span><br><span class="line">List&lt;Book&gt; list &#x3D; query.list();</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
            <tag> HQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GC（HotSpot）</title>
      <link href="/2022/03/20/GC%EF%BC%88HotSpot%EF%BC%89/"/>
      <url>/2022/03/20/GC%EF%BC%88HotSpot%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1111,阅读全文大约需要4分钟</p><blockquote><p><code>GC</code>（<code>Garbage Collection</code>）垃圾回收机制，对死亡的对象侵占的空间释放。</p></blockquote><h1 id="垃圾回收场所"><a href="#垃圾回收场所" class="headerlink" title="垃圾回收场所"></a>垃圾回收场所</h1><p><code>JVM</code>的垃圾回收主要在堆，其次是方法区。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ol><li>分区<br><code>JVM</code>将堆内存分成三部分</li></ol><ul><li>新生代（Young Generation）<br>新生代分为<strong>伊甸园</strong><code>Eden Region</code>和<strong>幸存者区</strong><code>Survivor Region</code><br>幸存者区又分为<code>Form Survivor Region</code>和<code>To Survivor Region</code><br>幸存者区的两个部分是<code>from</code>还是<code>to</code>并不固定，有对象的就是<code>from</code>另一个是<code>to</code>。<br>所以新生代总共是三部分，协同工作。</li><li>老年代（Old Generation）</li><li>永久代（Perm Generation）<br>java8后变成元数据区</li></ul><ol start="2"><li>回收条件</li></ol><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例</li><li>加载该类的ClassLoader已经被回收</li><li>该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><ol start="3"><li>回收过程</li></ol><p><strong>新生代</strong></p><ul><li>新对象首先进入<code>Eden</code>区</li><li>再来一个对象，加入<code>Eden</code>区剩余内存不够。此时会触发一次<code>Minor GC</code>,把<code>Eden</code>区存活的对象转移到<code>From</code>区</li><li>给新对象分配内存，放到<code>Eden</code>区</li></ul><p><strong>老年代</strong></p><ul><li>在进行Minor GC时发现，存活的对象在To区中存不下，那么把存活的对象存入老年代</li><li>大对象直接进入老年代：若新创建的对象很大，即使Eden区有足够的空间，也不会放在Eden区，而是直接存入老年代。（PretenureSizeThreshold设置，默认3M）</li><li>长期存活的对象将进入老年代：如果对象在Eden出生且经过1次Minor GC后仍存活，并能被To区容纳，将被移动到To区，并把对象年龄设置为1，对象过1次Minor GC，年龄就+1，当它的年龄增加到一定程度(默认15岁，配置参数-XX:MaxTenuringThreshold)，就会被晋升到老年代中。</li><li>动态对象年龄判定：如果在From中，相同年龄所有对象的大小总和大于From和To空间总和的一半，那么年龄大于等于该年龄的对象就会被移动到老年代，而不用等到15岁(默认)</li></ul><ol start="4"><li><p>GC运行方式</p></li><li><p>串行GC：client模式下默认GC方式，使用-XX:+UseSerialGC指定</p></li><li><p>并行GC：server模式下默认GC方式，可用-XX:+UseParallelGC指定</p></li><li><p>并发GC：CMS GC时默认采用，可用-XX:+UseParNewGC，-XX:+UseConcMarkSweepGC指定；</p></li></ol><p>吞吐量收集器使用并行版本的新生代垃圾收集器，用于中大规模数据的应用程序。<br>串行收集器对大多数的小应用(在处理器上需要大概100M左右的内存)就足够了。</p><ol start="5"><li>存活判断</li></ol><ul><li><p>引用计数算法<br>给对象添加一个引用计数器，当有地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；计数器为0的对象就是不被使用的。</p></li><li><p>可达性分析算法<br>通过GC Roots的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</p></li></ul><ol start="6"><li>垃圾清除算法</li></ol><ul><li><p>标记-清楚算法（Mark-Sweep）<br>用在老生代中， 先对对象进行标记，然后清除。标记过程就是第五部分提到的标记过程。值得注意的是，使用该算法清楚过后会产生大量不连续的内存碎片，空间碎片太多可能会导致以后在程序运行过程中需要分配较大对象时，无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作。</p></li><li><p>复制算法（Copying）<br>用在新生代中，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活的对象复制到另外一块上，然后再把已使用过的内存空间一次清理掉。这样使得每次都是对整个半区进行内存回收，内存分配时也就不用考虑内存碎片等复杂情况，只要移动堆顶指针，按顺序分配内存即可。<br>（内存缩小，代价太高）</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap扩容机制</title>
      <link href="/2022/03/20/HashMap%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/03/20/HashMap%E6%89%A9%E5%AE%B9%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：273,阅读全文大约需要1分钟</p><blockquote><p><code>HashMap</code>初始大小为<code>16</code>，即内部容器容量为16。但是如果是自定义大小的<code>HashMap</code>，那么什么情况下会触发扩容？</p></blockquote><h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1><ol><li><p><code>loadFactor</code>：负载因子，默认<code>0.75f</code>。当内部元素大于<code>容器容量*负载因子</code>时触发扩容。</p></li><li><p><code>table</code>：实际存储数据的数组<code>transient Node&lt;K,V&gt;[] table;</code>初始化大小也就是<code>table</code>的大小。</p></li><li><p><code>tableSizeFor()</code>：这个方法保证传入的初始化值是2 的 N 次幂，比如传入1000，经过这个方法转换就成了1024。而实际存储大小为768（1024 * 0.75）</p></li></ol><h1 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h1><ol><li>传入的初始大小经过<code>tableSizeFor()</code>转换，保证值为2 的 N 次幂</li><li>初始化负载因子为<code>0.75f</code></li><li>生成内部存储数组<code>table</code>，大小为初始化传入的值，默认16</li><li>当内部元素超过扩容阈值（初始化大小*负载因子）时扩容，扩容大小为原理的一倍</li></ol><h1 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h1><p>初始值 = （需要存储的元素 / 负载因子） + 1</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap的存储原理</title>
      <link href="/2022/03/20/HashMap%E7%9A%84%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/"/>
      <url>/2022/03/20/HashMap%E7%9A%84%E5%AD%98%E5%82%A8%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：177,阅读全文大约需要1分钟</p><ol><li><p>内部使用<code>transient Node&lt;K,V&gt;[] table;</code>存储数据</p></li><li><p>插入和读取元素主要通过<code>hash</code>算法将<code>key</code>转换成相应数组下标。当多个元素拥有同一个<code>hash</code>值时这些元素就会在这个数组下形成链表，（jdk1.8）之后链表元素超过8个就会使用红黑树的形式存储。</p></li><li><p>插入之前会判断一下是否需要扩容，扩容机制另一篇文章有说明。<a href="https://www.jianshu.com/p/06ac1a057e25" target="_blank" rel="noopener">HashMap扩容机制</a></p></li><li><p>序列化时<code>table</code>字段不会被保存因为被<code>transient</code>修饰。<code>HashMap</code>重写了<code>writeObject</code>和<code>readObject</code>方法，以保证系列化时数据的保存。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpServletRequestWrapper过滤HttpRequest请求</title>
      <link href="/2022/03/20/HttpServletRequestWrapper%E8%BF%87%E6%BB%A4HttpRequest%E8%AF%B7%E6%B1%82/"/>
      <url>/2022/03/20/HttpServletRequestWrapper%E8%BF%87%E6%BB%A4HttpRequest%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>文章字数：101,阅读全文大约需要1分钟</p><blockquote><p><code>HttpServletRequestWrapper</code>使用了装饰模式可以增强<code>request</code></p></blockquote><h1 id="包装"><a href="#包装" class="headerlink" title="包装"></a>包装</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request=<span class="keyword">new</span> RequestWrapper((HttpServletRequest)request);</span><br></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写需要修改的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> filter(<span class="keyword">super</span>.getRequest().getParameter(<span class="string">"name"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//过滤...</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">filter</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"xssFilter"</span>, urlPatterns = &#123; <span class="string">"/*"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XSSFilterimplements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对request和response进行一些预处理</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="comment">// 包装一下request</span></span><br><span class="line">        chain.doFilter(<span class="keyword">new</span> RequestWrapper((HttpServletRequest)request), response); <span class="comment">// 让目标资源执行，放行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 安全 </tag>
            
            <tag> 装饰模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http请求头安全策略概述</title>
      <link href="/2022/03/20/Http%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/03/20/Http%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%AE%89%E5%85%A8%E7%AD%96%E7%95%A5%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：703,阅读全文大约需要2分钟</p><blockquote><p><code>Http</code>请求头中有一些可以控制安全策略的部分，通过设置这些头可以提高网站安全系数</p></blockquote><h1 id="X-Frame-Options-Frame-Options"><a href="#X-Frame-Options-Frame-Options" class="headerlink" title="X-Frame-Options/Frame-Options"></a>X-Frame-Options/Frame-Options</h1><p>如果网站可以嵌入到<code>IFRAME</code>元素中，则攻击者可以建一个假网页，在假网页中嵌套真实的网站。即使有跨站点请求伪造保护，这种攻击也是可能的，并且被称为<code>clickjacking</code><br>创建<code>X-Frame-Options</code>标题可以允许网站所有者决定哪些网站允许构建（嵌套）。<br>通常设置成</p><ol><li><code>SAMEORIGIN</code>: 允许同源策略的资源嵌套</li><li><code>DENY</code>: 拒绝任何资源嵌套</li></ol><blockquote><p><code>X-Frame-Options</code> 标题已被弃用，将由内容安全策略中的Frame-Options指令替换，该指令仍处于活动开发阶段。但是，“X-Frame-Options”标题目前具有更广泛的支持，因此仍应实施安全措施。</p></blockquote><h1 id="Content-Security-Policy"><a href="#Content-Security-Policy" class="headerlink" title="Content-Security-Policy"></a>Content-Security-Policy</h1><p>内容安全策略（CSP）旨在<code>web</code>程序通知浏览器有关应用程序预期行为（内容源、脚本源、插件类型、和其它远程资源），即设置引入的图像、脚本等资源的限制。可以防止跨站脚本攻击等。</p><p>例：CSP指定您的网站希望从任何URI加载图像，从受信任的媒体提供商（包括内容分发网络）列表中插入插件内容，以及仅从您控制的服务器加载脚本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy：default-src&#39;self&#39;; img-src *; object-src media1.example.com media2.example.com * .cdn.example.com; script-src trustedscripts.example.com</span><br></pre></td></tr></table></figure><ul><li><code>none</code>不匹配任何东西</li><li><code>self</code>匹配当前域，单不包括子域。例如<code>xxx.com</code>可以，<code>www.xxx.com</code>不行</li><li><code>unsafe-inline</code>允许内嵌脚本样式</li><li><code>unsafe-eval</code>允许通过字符串动态创建脚本，如<code>eval</code>，<code>setTimeout</code>等</li></ul><h1 id="X-Content-Type-Options"><a href="#X-Content-Type-Options" class="headerlink" title="X-Content-Type-Options"></a>X-Content-Type-Options</h1><p>如果服务器响应头<code>X-Content-Type-Options: nosniff</code>则<code>script</code>和<code>styleSheet</code>元素会拒绝错误的<code>MIME</code>类型的响应，防止<code>MIME</code>类型的混淆的工具。<br>如果设置了<code>X-Content-Type-Options: nosniff</code>参数，<code>script</code>和<code>styleSheet</code>标签就会过滤非指定的文件类型。正确的<code>MIME</code>应该是<code>text/javascript</code>这样的。</p><h1 id="X-XSS-Protection"><a href="#X-XSS-Protection" class="headerlink" title="X-XSS-Protection"></a>X-XSS-Protection</h1><p><code>xss</code>自动过滤的配置，浏览器可以帮助防止跨站点脚本攻击（IE, Chrome, Safari支持）<br>推荐设置(开启xss防护，并且阻止而不是过滤用户注入的脚本)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-XSS-Protection：1; mode &#x3D; block。</span><br></pre></td></tr></table></figure><p>其它参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 – 关闭对浏览器的xss防护 </span><br><span class="line">1 – 开启xss防护 </span><br><span class="line">1; mode&#x3D;block – 开启xss防护并通知浏览器阻止而不是过滤用户注入的脚本。 </span><br><span class="line">1; report&#x3D;http:&#x2F;&#x2F;site.com&#x2F;report – 这个只有chrome和webkit内核的浏览器支持，这种模式告诉浏览器当发现疑似xss攻击的时候就将这部分数据post到指定地址。</span><br></pre></td></tr></table></figure><p><code>X-XSS-Protection</code>标题已被弃用，被内容安全策略的<code>Reflected-XSS</code>指令取代，但是该指令仍处于活动开发阶段。<code>X-XSS-Protection</code>有更广泛的支持</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 安全 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer类型之间比较</title>
      <link href="/2022/03/20/Integer%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E6%AF%94%E8%BE%83/"/>
      <url>/2022/03/20/Integer%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<p>文章字数：55,阅读全文大约需要1分钟<br>直接比较<code>==</code>对比的是类的地址，<code>equals</code>才是对比值。但是<code>equals</code>对比似乎会有bug，最好使用<code>ob.intValue()</code>转换成<code>int</code>再比较，或者<code>float(ob)</code>转成其他类型比较</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij-IDEA运行报Command-line-is-too-long</title>
      <link href="/2022/03/20/Intellij-IDEA%E8%BF%90%E8%A1%8C%E6%8A%A5Command-line-is-too-long/"/>
      <url>/2022/03/20/Intellij-IDEA%E8%BF%90%E8%A1%8C%E6%8A%A5Command-line-is-too-long/</url>
      
        <content type="html"><![CDATA[<p>文章字数：28,阅读全文大约需要1分钟</p><blockquote><p>Error running ‘ServiceStarter’: Command line is too long. Shorten command line for ServiceStarter or also for Application default configuration.</p></blockquote><p>命令太长</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p><code>.idea\workspace.xml</code>，找到标签 <code>&lt;component name=&quot;PropertiesComponent&quot;&gt;</code>， 在标签里加一行<code>&lt;property name=&quot;dynamic.classpath&quot; value=&quot;true&quot; /&gt;</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK动态代理和CGLIB</title>
      <link href="/2022/03/20/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8CCGLIB/"/>
      <url>/2022/03/20/JDK%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8CCGLIB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：340,阅读全文大约需要1分钟</p><h1 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h1><ul><li>只能代理接口</li><li>思路是新建一个接口的实现类，并持有需要被代理的实现类。将被代理的对象方法进行增强。</li></ul><ol><li><p>定义一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">jump</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>需要代理的类</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">implements</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Dog Running..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">jump</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Dog Jumping..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>代理类，需要以<code>Proxy</code>结尾<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 目标类，也就是被代理对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTarget</span><span class="params">(Object target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置动作"</span>);</span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"后置动作"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成代理类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">CreatProxyedObj</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="CGLIB"><a href="#CGLIB" class="headerlink" title="CGLIB"></a>CGLIB</h1><ul><li>可以代理普通类</li><li>思路是新建一个子类继承需要被代理的目标类，通过继承的方式持有原来的方法</li><li>通过字节码操作形成新的类，会占用方法区（元空间）的空间，过于频繁的操作肯能会导致内存溢出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">// 根据一个类型产生代理类，可以放在其他地方</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">CreatProxyedObj</span><span class="params">(Class&lt;?&gt; clazz)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(clazz);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object arg0, Method arg1, Object[] arg2, MethodProxy arg3)</span> <span class="keyword">throws</span> Throwable</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"前置操作"</span>);</span><br><span class="line">        <span class="keyword">return</span> arg3.invokeSuper(arg0, arg2);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 动态代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JNA</title>
      <link href="/2022/03/20/JNA/"/>
      <url>/2022/03/20/JNA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：251,阅读全文大约需要1分钟</p><blockquote><p>java native interface JNA(Java Native Access)框架是一个开源的Java框架，是SUN公司主导开发的，建立在经典的JNI的基础之上的一个框架</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Library;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Native;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Platform;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.win32.StdCallLibrary;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JNADllCall</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DLL动态库调用方法 </span></span><br><span class="line"><span class="comment">     * stdCall模式，调用完内存清除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StdCallDll</span> <span class="keyword">extends</span> <span class="title">StdCallLibrary</span> </span>&#123;</span><br><span class="line">        <span class="comment">// DLL文件默认路径为项目根目录，若DLL文件存放在项目外，请使用绝对路径</span></span><br><span class="line">        StdCallDll INSTANCE = (StdCallDll) Native.loadLibrary(<span class="string">"dllName"</span>,StdCallDll<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">// 加载动态库文件</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 声明将要调用的DLL中的方法（可以是多个方法）</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(String format, Object... args)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DLL动态库调用方法2</span></span><br><span class="line"><span class="comment">     * cdecl模式，调用完内存信息保留，数据由调用者清除 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CLibrary</span> <span class="keyword">extends</span> <span class="title">Library</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 做个判断，是windos下就加载msvcrt.dll ,否则是 c.so</span></span><br><span class="line">        CLibrary INSTANCE = (CLibrary) Native.loadLibrary((Platform.isWindows() ? <span class="string">"msvcrt"</span> : <span class="string">"c"</span>),</span><br><span class="line">                CLibrary<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printf</span><span class="params">(String format, Object... args)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StdCallDll.INSTANCE.printf(<span class="string">"Hello, World!\n"</span>);</span><br><span class="line">        CLibrary.INSTANCE.printf(<span class="string">"Hello, World\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JMH</title>
      <link href="/2022/03/20/JMH/"/>
      <url>/2022/03/20/JMH/</url>
      
        <content type="html"><![CDATA[<p>文章字数：251,阅读全文大约需要1分钟</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><code>JMH</code>是<code>JDK9</code>自带的<code>JVM</code>基准测试套件，用于定位代码性能，执行时间、吞吐量等</p><h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><ol><li>通过<code>maven</code>依赖引入</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jmh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jmh-generator-annprocess<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>直接生成<code>maven</code>工程（官方推荐）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:generate </span><br><span class="line"> -DinteractiveMode&#x3D;false </span><br><span class="line"> -DarchetypeGroupId&#x3D;org.openjdk.jmh </span><br><span class="line"> -DarchetypeArtifactId&#x3D;jmh-java-benchmark-archetype </span><br><span class="line"> -DgroupId&#x3D;com.test.jmh </span><br><span class="line"> -DartifactId&#x3D;jmh </span><br><span class="line"> -Dversion&#x3D;1.0.0-SNAPSHOT</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 预热5次，每次1s</span></span><br><span class="line"><span class="meta">@Warmup</span>(iterations = <span class="number">5</span>, time = <span class="number">1</span>, timeUnit = TimeUnit.SECONDS)</span><br><span class="line"><span class="comment">// 循环运行5次，总共5秒</span></span><br><span class="line"><span class="meta">@Measurement</span>(iterations = <span class="number">5</span>, time = <span class="number">1</span>, timeUnit = TimeUnit.SECONDS)</span><br><span class="line"><span class="comment">// 1个线程运行基准测试</span></span><br><span class="line"><span class="meta">@Fork</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">// 平均时间</span></span><br><span class="line"><span class="meta">@BenchmarkMode</span>(Mode.AverageTime)</span><br><span class="line"><span class="comment">// 纳秒，和上面的组合就是每次操作的纳秒单位的平均时间</span></span><br><span class="line"><span class="meta">@OutputTimeUnit</span>(TimeUnit.NANOSECONDS)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBenchmark</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GenerateMicroBenchmark</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cardCount = <span class="number">54</span>;</span><br><span class="line">        List&lt;Integer&gt; cardList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cardCount; i++)&#123;</span><br><span class="line">            cardList.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 洗牌算法</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cardCount; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> rand = random.nextInt(cardCount);</span><br><span class="line">            Collections.swap(cardList, i, rand);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cardList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Mean + Units</code>就是每次操作的毫秒数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Benchmark                        Mode   Samples         Mean   Mean error    Units</span><br><span class="line">c.a.j.MyBenchmark.testMethod     avgt         5     1056.677       30.809    ns&#x2F;op</span><br></pre></td></tr></table></figure><p><code>@BenchmarkMode(Mode.Throughput)</code> 和 <code>@OutputTimeUnit(TimeUnit.MILLISECONDS)</code>组合，就是每毫秒吞吐量</p><p><code>943.437 ops/ms</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Benchmark                        Mode   Samples         Mean   Mean error    Units</span><br><span class="line">c.a.j.MyBenchmark.testMethod    thrpt         5      943.437       44.060   ops&#x2F;ms</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JNI</title>
      <link href="/2022/03/20/JNI/"/>
      <url>/2022/03/20/JNI/</url>
      
        <content type="html"><![CDATA[<p>文章字数：250,阅读全文大约需要1分钟</p><blockquote><p>jni(java native interface)允许java和本地方法交互，但是会丧失平台的可移植性。</p></blockquote><h1 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h1><ol><li>编写<code>java native</code>方法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">displayHelloWorld</span><span class="params">()</span></span>;<span class="comment">//所有native关键词修饰的都是对本地的声明</span></span><br><span class="line">     <span class="keyword">static</span> &#123;</span><br><span class="line">         System.loadLibrary(<span class="string">"hello"</span>);<span class="comment">//载入本地库</span></span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          <span class="comment">//调用</span></span><br><span class="line">         <span class="keyword">new</span> HelloWorld().displayHelloWorld();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li>使用<code>javac</code>编译java类<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javac HelloWorld.java</span><br></pre></td></tr></table></figure></li><li>使用<code>javah</code>生成头文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah HelloWord</span><br></pre></td></tr></table></figure></li><li>本地方法实现<br>编写和<code>javah</code>生成的头文件声明方法相同的方法。<br><code>HelloWorldImpl.cpp</code><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"jni.h"</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"HelloWorld.h"</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">"stdio.h"</span></span></span><br><span class="line">JNIEXPORT <span class="keyword">void</span> JNICALL</span><br><span class="line">Java_HelloWorld_displayHelloWorld(JNIEnv*env,jobject obj)</span><br><span class="line">&#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"hello"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>生成dll,重命名为hello.dll移动到java目录下。<br>调用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">       System.loadLibrary(<span class="string">"hello"</span>);<span class="comment">//载入本地库</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存模型jmm</title>
      <link href="/2022/03/20/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8Bjmm/"/>
      <url>/2022/03/20/JVM%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8Bjmm/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1076,阅读全文大约需要4分钟</p><blockquote><p>java内存模型(java Memory Model)是一种符合内存模型规范，屏蔽硬件及操作系统的差异，保证java程序在不同平台下的内存访问效果一致性的机制及规范。</p></blockquote><p>本文整理自-<a href="https://www.jianshu.com/p/76959115d486" target="_blank" rel="noopener">深入理解JVM-内存模型（jmm）和GC</a>的上半部分</p><hr><h1 id="一、电脑内存模型"><a href="#一、电脑内存模型" class="headerlink" title="一、电脑内存模型"></a>一、电脑内存模型</h1><ol><li>背景</li></ol><blockquote><p>随着cpu的发展，内存的读写速度远远赶不上cpu。因此，cpu的厂商在每颗cpu上加上了高速缓存，作为cpu和内存间的缓冲区域。</p></blockquote><p>2.带来的问题</p><blockquote><p>每个cpu各自的一套缓存(一级缓存、二级缓存、三级缓存),如何保证多处理器运算到同一个内存区域时的数据一致性？</p></blockquote><ol start="3"><li>解决方法</li></ol><blockquote><p>为了解决这个问题，各个处理器需要遵循缓存一致性协议与主存交互</p></blockquote><p>在cpu层面，<strong>内存屏障(Memory Barrier)</strong>提供了支持(硬件层支持)：</p><ol><li>内存屏障的类型</li></ol><blockquote><p>硬件层的内存屏障分为:<code>Load Barrier</code>(读屏障)和<code>Store Barrier</code>(写屏障)</p></blockquote><ol start="2"><li>内存屏障作用</li></ol><blockquote><p>1.cpu执行指令可能是；无序的，内存屏障可以组织屏障两侧进行指令重排。<br>2.强制把写缓冲区/高速缓存中的数据失效，从而强制从主存中获取。</p></blockquote><ol start="3"><li>java中的生成jvm内存屏障</li></ol><blockquote><p>使用关键词volatitle修饰变量</p></blockquote><p>相当于变量读写加锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VolatitleValue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span>  <span class="keyword">void</span> <span class="title">set</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>volatile变量特性</li></ol><blockquote><p>1.可见性，该变量的读一定可以看到读之前最后的写<br>2.原子性，对于该变量的读写具有原子性。</p></blockquote><h1 id="java内存区域"><a href="#java内存区域" class="headerlink" title="java内存区域"></a>java内存区域</h1><blockquote><p>jvm主要有 sun的<code>HotSpot/JRockit</code>和IBM的<code>IBMJVM</code>,其中HotSpot为主流，在此探讨HotSpot虚拟机。</p></blockquote><ol><li>Java内存模型（Java Memory Model ,JMM）</li></ol><blockquote><p>如开题所说，jmm是jvm的一种规范。使语言不能直接访问硬件内存，作为中转以解决各硬件和操作系统的差异问题。</p></blockquote><h3 id="虚拟机五大数据区域"><a href="#虚拟机五大数据区域" class="headerlink" title="虚拟机五大数据区域"></a>虚拟机五大数据区域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">方法区、堆是线程共享的</span><br><span class="line">栈、本地方法栈、计数器是线程私有的</span><br></pre></td></tr></table></figure><ol><li>计数器</li></ol><blockquote><p>线程执行java方法时指向字节码，方便cpu线程切换时切换回正确位置</p></blockquote><p>注：内存中唯一没有OutOfMemoryError的区域</p><p>2 虚拟机栈</p><blockquote><p>由栈帧组成，每个方法执行的时候都会创建栈帧存储变量表，操作栈，动态链接，方法出入口等。</p></blockquote><p>注：方法调用入栈，调用完出栈。局部变量表大小在方法运行前就完全确定了</p><ol start="3"><li>本地方法栈</li></ol><blockquote><p>虚拟机栈调用的是java方法(字节码文件),本地方法栈则是调动native方法(c、c++)的实现方法</p></blockquote><hr><p><strong>以下为线程共有的</strong></p><ol start="4"><li>堆</li></ol><blockquote><p>一般来说对象实例及数组都是在堆上被分配内存。堆作为最大的内存区域也是GC(内存回收机制)主要管理的区域。根据规范，堆可以存在与物理上不连续的内存空间，可设定固定大小也可扩展。(-Xmx和-Xms)。</p></blockquote><p>注：没有内存可分配会报OOM(OutOfMemory)</p><ol start="5"><li>方法区</li></ol><blockquote><p>存储已被虚拟机加载的类信息、常量、静态变量、静态方法、静态代码块。</p></blockquote><hr><p><strong>再回顾一下</strong><br>线程私有的:</p><table><thead><tr><th>区域名</th><th>作用</th></tr></thead><tbody><tr><td>计数器</td><td>cpu线程切换后找到正确位置</td></tr><tr><td>jvm栈</td><td>引用java方法</td></tr><tr><td>native栈</td><td>引用本地c/c++方法及功能</td></tr></tbody></table><p>线程共享的:</p><table><thead><tr><th>区域名</th><th>作用</th></tr></thead><tbody><tr><td>堆</td><td>对象实例、数组</td></tr><tr><td>方法区</td><td>类的静态信息</td></tr></tbody></table><ol start="3"><li>对象在内存中的结构<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.对象头&#x2F;&#x2F;</span><br><span class="line">2.数据实体&#x2F;&#x2F;对象信息</span><br><span class="line">3.对齐填充&#x2F;&#x2F;占位</span><br></pre></td></tr></table></figure></li></ol><p><strong>对象头(markword)</strong>说明：</p><blockquote><ol><li>64操作系统下16字节(开启指针压缩12)</li><li>synchronized的锁信息就存储在这里</li><li>根据锁位偏移有四种锁状态<code>无锁态</code>、<code>偏向锁</code>、<code>轻量级锁</code>、<code>重量级锁</code></li></ol></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> JMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM性能调优</title>
      <link href="/2022/03/20/JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/"/>
      <url>/2022/03/20/JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1244,阅读全文大约需要4分钟</p><h1 id="一、性能调优目的"><a href="#一、性能调优目的" class="headerlink" title="一、性能调优目的"></a>一、性能调优目的</h1><pre><code>1. 减少`minor gc`的频率，将转移到老年代的对象数量降低到最新2. 减少`full gc`次数3. 找到并提升性能瓶颈</code></pre><h1 id="二、软件调优大致过程"><a href="#二、软件调优大致过程" class="headerlink" title="二、软件调优大致过程"></a>二、软件调优大致过程</h1><ol><li>查看内存和GC日志</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-verbose.gc：显示GC的操作内容。打开它，可以显示最忙和最空闲收集行为发生的时间、收集前后的内存大小、收集需要的时间等。</span><br><span class="line">-XX:+PrintGC      #输出GC日志    </span><br><span class="line">-XX:+PrintGCDetails    #输出GC的详细日志    </span><br><span class="line">-XX:+PrintGCTimeStamps   #输出GC时间戳(以基准时间的形式)    </span><br><span class="line">-XX:+PrintHeapAtGC    #在进行GC的前后打印出堆的信息    </span><br><span class="line">-Xloggc:&#x2F;path&#x2F;gc.log    #日志文件的输出路径    </span><br><span class="line">-XX:+PrintGCApplicationStoppedTime    #打印由GC产生的停顿时间</span><br></pre></td></tr></table></figure><ol start="2"><li>调整新生代和老年代比例</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 新生代和老年代一般内存比例为 1:2</span><br><span class="line">-Xms # 初始堆大小</span><br><span class="line">-Xmx # 最大堆大小</span><br><span class="line">-Xmn # 新生代大小</span><br><span class="line">-XX:NewRatio&#x3D;n # 新生代和老年代的比例，一般为2，新生代1：老年代2</span><br><span class="line">-XX:PermSize&#x3D;n # 非堆内存大小，一般为物理内存1&#x2F;64</span><br><span class="line">-XX:MaxPermSize&#x3D;n # 非堆内存最大值，默认是物理内存的1&#x2F;4</span><br><span class="line"># 新生代中 Eden和Survivor区设置（Survivor还分为to Survivor和from Survivor）</span><br><span class="line">-XX:SurvivorRatio&#x3D;n:新生代中Eden区与两个Survivor区的比值</span><br><span class="line">-XX:PretenureSizeThreshold：直接进入老年代中的对象大小</span><br><span class="line">-XX:MaxTenuringThreshold：进入老年代的年龄</span><br></pre></td></tr></table></figure><h1 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h1><ol><li>性能达标条件</li></ol><ul><li><code>Minor GC</code>执行时间不超过<code>50ms</code></li><li><code>Minor GC</code>执行频率在<code>10s</code>一次以上</li><li><code>Full GC</code>执行时间不到<code>1s</code></li><li><code>Full GC</code>执行频率在<code>10</code>分钟一次以上</li></ul><h1 id="常用工具列表"><a href="#常用工具列表" class="headerlink" title="常用工具列表"></a>常用工具列表</h1><ol><li>内存监控和故障处理</li></ol><ul><li><code>jps</code>: <code>JVM Process Status Tool</code>, 显示指定系统内所有的HotSpot虚拟机进程。</li><li><code>jstat</code>: <code>JVM statistics Monitoring</code>, 是用于监视虚拟机运行时状态信息的命令，它可以显示出虚拟机进程中的类装载、内存、垃圾收集、JIT编译等运行数据。</li><li><code>jmap</code>: <code>JVM Memory Map</code>用于生成<code>heap dump</code>文件。</li><li><code>jhat</code>: <code>JVM Heap Analysis Tool</code>, 与<code>jmap</code>搭配使用，用来分析<code>jmap</code>生成的<code>dump</code>，<code>jhat</code>内置了一个微型的<code>HTTP/HTML</code>服务器，生成<code>dump</code>的分析结果后，可以在浏览器中查看。<br><code>jstack</code>: 用于生成<code>java</code>虚拟机当前时刻的线程快照。</li><li><code>jinfo</code>: <code>JVM Configuration info</code>实时查看和调整虚拟机运行参数。</li><li><code>javap</code>: 查看经<code>javac</code>之后产生的<code>JVM</code>字节码代码，自动解析<code>.class</code>文件, 避免了去理解<code>class</code>文件格式以及手动解析<code>class</code>文件内容。</li><li><code>jcmd</code>: 几乎集合了<code>jps</code>、<code>jstat</code>、<code>jinfo</code>、<code>jmap</code>、<code>jstack</code>所有功能，一个多功能工具, 可以用来导出堆, 查看<code>Java</code>进程、导出线程信息、 执行<code>GC</code>、查看性能相关数据等。</li></ul><ol start="2"><li>jdk自带调优工具</li></ol><ul><li><code>jconsole</code>: <code>Java Monitoring and Management Console</code>, 监控内存，线程和类</li><li><code>jvisualvm</code>: 全能工具，可以分析内存快照、线程快照；监控内存变化、GC变化等</li></ul><ol start="3"><li>第三方工具</li></ol><ul><li><code>MAT</code>: <code>Memory Analyzer Tool</code>, Java heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗, 基于Eclipse</li><li><code>GChisto</code>: 分析gc日志的工具</li></ul><h1 id="JPS"><a href="#JPS" class="headerlink" title="JPS"></a>JPS</h1><ul><li>查看基于<code>HotSpot</code>的<code>JVM</code>里，具有访问权限的<code>java</code>进程的具体状态</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jps [options] [hostid]</span><br><span class="line">-q  #禁止输出类名，JAR文件名和传递给main方法的参数，只产生一个本地JVM标识符列表。</span><br><span class="line">-m  #显示传递给主方法的参数。 嵌入式JVM的输出可能为空。输出JVM启动时传递给main()的参数。</span><br><span class="line">-l  #显示应用程序主类的完整程序包名称或应用程序JAR文件的完整路径名称。</span><br><span class="line">-v  #显示传递给JVM的参数。</span><br><span class="line">-V  #禁止输出类名，JAR文件名和传递给main方法的参数，只产生一个本地JVM标识符列表（.hotspotrc文件，或者是通过参数-XX:Flags&#x3D;指定的文件）。</span><br><span class="line">-Joption  #将选项传递给JVM，其中选项是Java应用程序启动器参考页上描述的选项之一。 例如，-J -Xms48m将启动内存设置为48 MB。</span><br></pre></td></tr></table></figure><h1 id="Jstat"><a href="#Jstat" class="headerlink" title="Jstat"></a>Jstat</h1><ul><li>另开一篇</li></ul><h1 id="Jmap"><a href="#Jmap" class="headerlink" title="Jmap"></a>Jmap</h1><ul><li>用于生成<code>heap dump</code>文件，如果不使用这个命令，可以使用<code>-XX:+HeapDumpOnOutOfMemoryError</code>参数来让虚拟机出现<code>OOM</code>时自动生成<code>dunp</code>文件</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jpa整合ElasticSearch</title>
      <link href="/2022/03/20/Jpa%E6%95%B4%E5%90%88ElasticSearch/"/>
      <url>/2022/03/20/Jpa%E6%95%B4%E5%90%88ElasticSearch/</url>
      
        <content type="html"><![CDATA[<p>文章字数：476,阅读全文大约需要1分钟</p><blockquote><p>SpringBoot中可以使用jpa整合ElasticSearch</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li><code>jdk 1.8</code></li><li><code>ElasticSearch 2.4</code>需要和springBoot版本匹配</li><li><code>com.sun.jna</code></li></ul><h1 id="继承依赖"><a href="#继承依赖" class="headerlink" title="继承依赖"></a>继承依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring-boot-starter-data-elasticsearch</span><br><span class="line">com.sun.jna</span><br><span class="line">org.springframework.boot:spring-boot-starter-web</span><br></pre></td></tr></table></figure><h1 id="配置实体"><a href="#配置实体" class="headerlink" title="配置实体"></a>配置实体</h1><blockquote><p>data-elasticsearch的依赖自带了ES的jar,如果不配置ES实例SpringBoot会自动生成一个。但是性能不如自己搭建的。</p></blockquote><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">      <span class="attr">cluster-name:</span> <span class="string">elasticsearch</span></span><br><span class="line">      <span class="attr">cluster-nodes:</span> <span class="string">localhost:9300</span></span><br></pre></td></tr></table></figure><h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  <span class="comment">//lombok</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"shop"</span>, type = <span class="string">"user"</span>, refreshInterval = <span class="string">"0s"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String realname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这三个注解是为了前台序列化java8 LocalDateTime使用的，需要引入jsr310的包才可以使用</span></span><br><span class="line">    <span class="meta">@JsonSerialize</span>(using = LocalDateTimeSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">JsonDeserialize</span>(<span class="title">using</span> </span>= LocalDateTimeDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">JsonFormat</span>(<span class="title">pattern</span> </span>= <span class="string">"yyyy-MM-dd HH:mm"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime birth;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Document</code>加在类上</li></ul><table><thead><tr><th align="center">类型</th><th align="center">属性名</th><th align="center">默认值</th><th>说明</th></tr></thead><tbody><tr><td align="center">String</td><td align="center">indexName</td><td align="center">无</td><td>索引库的名称，建议以项目的名称命名</td></tr><tr><td align="center">String</td><td align="center">type</td><td align="center">“”</td><td>类型，建议以实体的名称命名</td></tr><tr><td align="center">short</td><td align="center">shards</td><td align="center">5</td><td>默认分区数</td></tr><tr><td align="center">short</td><td align="center">replica</td><td align="center">1</td><td>每个分区默认的备份数</td></tr><tr><td align="center">String</td><td align="center">refreshInterval</td><td align="center">“1s”</td><td>刷新间隔</td></tr><tr><td align="center">String</td><td align="center">indexStoreType</td><td align="center">“fs”</td><td>索引文件存储类型</td></tr></tbody></table><ul><li><code>@Field</code>属性上加的，相当于<code>@Column</code>，可以不写，默认全部添加到ES中。主键上是<code>@Id</code>。</li></ul><table><thead><tr><th align="center">类型</th><th align="center">属性名</th><th align="center">默认值</th><th>说明</th></tr></thead><tbody><tr><td align="center">FieldType</td><td align="center">type</td><td align="center">FieldType.Auto</td><td>自动检测属性的类型</td></tr><tr><td align="center">FieldIndex</td><td align="center">index</td><td align="center">FieldIndex.analyzed</td><td>默认情况下分词</td></tr><tr><td align="center">boolean</td><td align="center">store</td><td align="center">false</td><td>默认情况下不存储原文</td></tr><tr><td align="center">String</td><td align="center">searchAnalyzer</td><td align="center">“”</td><td>指定字段搜索时使用的分词器</td></tr><tr><td align="center">String</td><td align="center">indexAnalyzer</td><td align="center">“”</td><td>指定字段建立索引时指定的分词器</td></tr><tr><td align="center">String[]</td><td align="center">ignoreFields</td><td align="center">{}</td><td>如果某个字段需要被忽略</td></tr></tbody></table><h1 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">UserInfo</span>,<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jpa </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jstat</title>
      <link href="/2022/03/20/Jstat/"/>
      <url>/2022/03/20/Jstat/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1807,阅读全文大约需要7分钟</p><h1 id="JSTAT"><a href="#JSTAT" class="headerlink" title="JSTAT"></a>JSTAT</h1><ul><li>用于监视虚拟机运行时的状态信息，可以显示虚拟机进程类装载、内存、垃圾收集、<code>JIT</code>编译等运行数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jstat [ generalOption | outputOptions vmid [ interval[s|ms] [ count ] ]</span><br><span class="line"># 查看1111的gc数据，两秒一次，共一次</span><br><span class="line">jstat -gc 1111 2 1</span><br></pre></td></tr></table></figure><ul><li><code>-statOption</code>统计参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class   #显示有关类加载器行为的统计信息。</span><br><span class="line">compiler  #显示有关Java HotSpot VM即时编译器行为的统计信息。</span><br><span class="line">gc  #显示有关垃圾回收堆的行为的统计信息。</span><br><span class="line">gccapacity  #各个垃圾回收代容量(young,old,perm)和他们相应的空间统计。</span><br><span class="line">gccause   #垃圾收集统计概述（同-gcutil），附加最近两次垃圾回收事件的原因。</span><br><span class="line">gcnew  #显示新生代行为的统计信息。gcnewcapacity  #显示有关新生代及其相应空间大小的统计信息。</span><br><span class="line">gcold   #显示有关老年代和metaspace统计信息的统计信息。</span><br><span class="line">gcoldcapacity  #年老代行为统计。</span><br><span class="line">gcmetacapacity  #显示有关元空间大小的统计信息。</span><br><span class="line">gcutil  #显示关于垃圾收集统计信息的摘要。</span><br><span class="line">printcompilation   #显示Java HotSpot VM编译方法统计信息。</span><br></pre></td></tr></table></figure></li></ul><p>其它参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> -h n  #每n个样本（输出行）显示一个列标题，其中n是一个正整数。 默认值是0，它显示列标题的第一行数据。</span><br><span class="line">-t   #显示一个时间戳列作为输出的第一列。 时间戳是从目标JVM开始时间开始的时间。</span><br><span class="line">-JjavaOption #将javaOption传递给Java应用程序启动器。</span><br></pre></td></tr></table></figure><h2 id="gcutil选项"><a href="#gcutil选项" class="headerlink" title="gcutil选项"></a>gcutil选项</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>S0</td><td>幸存者0空间利用率占空间当前容量的百分比。</td></tr><tr><td>S1</td><td>幸存者1空间利用率占空间当前容量的百分比。</td></tr><tr><td>E</td><td>Eden空间利用率占空间当前容量的百分比。</td></tr><tr><td>O</td><td>旧空间利用率占空间当前容量的百分比。</td></tr><tr><td>M</td><td>Metaspace利用率占空间当前容量的百分比。</td></tr><tr><td>CCS</td><td>压缩类空间利用率，以百分比表示。</td></tr><tr><td>YGC</td><td>年轻一代GC事件的数量。</td></tr><tr><td>YGCT</td><td>年轻一代的垃圾收集时间(S)。</td></tr><tr><td>FGC</td><td>完整的GC事件的数量。</td></tr><tr><td>FGCT</td><td>完整的垃圾收集时间(S)。</td></tr><tr><td>GCT</td><td>垃圾收集总时间(S)。</td></tr></tbody></table><h1 id="gcnew选项"><a href="#gcnew选项" class="headerlink" title="gcnew选项"></a>gcnew选项</h1><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>S0C</td><td>当前幸存者空间0容量（kB）。</td></tr><tr><td>S1C</td><td>当前幸存者空间1容量（kB）。</td></tr><tr><td>S0U</td><td>幸存者空间0利用率（kB）。</td></tr><tr><td>S1U</td><td>幸存者空间1利用率（kB）。</td></tr><tr><td>TT</td><td>任期阀值</td></tr><tr><td>MTT</td><td>最大任期阀值</td></tr><tr><td>DSS</td><td>所需的幸存者大小（kB）。</td></tr><tr><td>EC</td><td>当前eden空间容量（kB）。</td></tr><tr><td>EU</td><td>Eden空间利用率（kB）。</td></tr><tr><td>YGC</td><td>年轻一代GC事件的数量。</td></tr><tr><td>YGCT</td><td>年轻一代的垃圾收集时间(S)。</td></tr></tbody></table><h2 id="gcoldcapacity"><a href="#gcoldcapacity" class="headerlink" title="gcoldcapacity"></a>gcoldcapacity</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>OGCMN</td><td>最小老年代容量（kB）。#从上图可以看出是670MB</td></tr><tr><td>OGCMX</td><td>最大老年代容量（kB）。#从上如可以看出最大内存是2730MB</td></tr><tr><td>OGC</td><td>当前的老年代容量（kB）。  #当前老年代是2730MB</td></tr><tr><td>OC</td><td>老年代大小（kB）。</td></tr><tr><td>YGC</td><td>年轻一代GC事件的数量。</td></tr><tr><td>FGC</td><td>full GC事件的数量。</td></tr><tr><td>FGCT</td><td>完整的垃圾收集时间(S)。</td></tr><tr><td>GCT</td><td>垃圾收集总时间(S)。</td></tr></tbody></table><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>Loaded</td><td>加载class的数量</td></tr><tr><td>Bytes</td><td>class字节大小</td></tr><tr><td>Unloaded</td><td>卸载的类数。</td></tr><tr><td>Bytes</td><td>卸载的千字节数。</td></tr><tr><td>Time</td><td>执行类加载和卸载操作的时间。</td></tr></tbody></table><h2 id="compiler"><a href="#compiler" class="headerlink" title="compiler"></a>compiler</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>Compiled</td><td>执行的编译任务数。</td></tr><tr><td>Failed</td><td>编译任务的失败数量。</td></tr><tr><td>Invalid</td><td>无效的编译任务数。</td></tr><tr><td>Time</td><td>执行编译任务的时间。</td></tr><tr><td>FailedType</td><td>编译最后一次失败编译的类型。</td></tr><tr><td>FailedMethod</td><td>上次失败编译的类名称和方法。</td></tr></tbody></table><h2 id="gc"><a href="#gc" class="headerlink" title="gc"></a>gc</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>S0C</td><td>当前survivor0区容量（kB）。 #大概是136MB</td></tr><tr><td>S1C</td><td>当前survivor1区容量（kB）。 #大概是136MB</td></tr><tr><td>S0U</td><td>survivor0区已使用的容量（KB） #当前使用了17MB</td></tr><tr><td>S1U</td><td>survivor1区已使用的容量（KB）</td></tr><tr><td>EC</td><td>Eden区的总容量（KB）  #Eden区的大小现在是1092MB</td></tr><tr><td>EU</td><td>当前Eden区已使用的容量（KB） #当前Eden区使用了1006MB</td></tr><tr><td>OC</td><td>Old空间容量（kB）。 #当前老年代是2730MB</td></tr><tr><td>OU</td><td>Old区已使用的容量（KB） #当前使用了748MB</td></tr><tr><td>MC</td><td>Metaspace空间容量（KB） #在jdk1.7的版本MC是PC，也就是256MB</td></tr><tr><td>MU</td><td>Metacspace使用量（KB）  #也就是jdk1.7版本永久代使用了140MB</td></tr><tr><td>CCSC</td><td>压缩类空间容量（kB）。</td></tr><tr><td>CCSU</td><td>压缩类空间使用（kB）。</td></tr><tr><td>YGC</td><td>新生代垃圾回收次数</td></tr><tr><td>YGCT</td><td>新生代垃圾回收时间</td></tr><tr><td>FGC</td><td>老年代 full GC垃圾回收次数</td></tr><tr><td>FGCT</td><td>老年代垃圾回收时间</td></tr><tr><td>GCT</td><td>垃圾回收总消耗时间</td></tr></tbody></table><h1 id="gccapacity"><a href="#gccapacity" class="headerlink" title="gccapacity"></a>gccapacity</h1><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>NGCMN</td><td>年轻代(young)中初始化(最小)的大小(KB)</td></tr><tr><td>NGCMX</td><td>年轻代(young)的最大容量 (KB)</td></tr><tr><td>NGC</td><td>年轻代(young)中当前的容量 (KB)</td></tr><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (KB)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (KB)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (KB)</td></tr><tr><td>OGCMN</td><td>old代中初始化(最小)的大小 (KB)</td></tr><tr><td>OGCMX</td><td>old代的最大容量(KB)</td></tr><tr><td>OGC</td><td>old代当前新生成的容量 (KB)</td></tr><tr><td>OC</td><td>Old代的容量 (KB)</td></tr><tr><td>PGCMN</td><td>perm代中初始化(最小)的大小 (KB) ，jdk1.8改为了MCMN</td></tr><tr><td>PGCMX</td><td>perm代的最大容量 (KB)，jdk1.8改为了MCMX</td></tr><tr><td>PGC</td><td>perm代当前新生成的容量 (KB)</td></tr><tr><td>PC</td><td>Perm(持久代)的容量 (KB)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>MC</td><td>Metaspace空间（KB）</td></tr><tr><td>CCSMN</td><td>压缩类空间最小容量（kB）。</td></tr><tr><td>CCSMX</td><td>压缩类空间最大容量（kB）。</td></tr><tr><td>CCSC</td><td>压缩类空间容量（kB）。</td></tr></tbody></table><h2 id="gcnewcapacity"><a href="#gcnewcapacity" class="headerlink" title="gcnewcapacity"></a>gcnewcapacity</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>NGCMN</td><td>年轻代(young)中初始化(最小)的大小(kb)</td></tr><tr><td>NGCMX</td><td>年轻代(young)的最大容量 (kb)</td></tr><tr><td>NGC</td><td>年轻代(young)中当前的容量 (kb)</td></tr><tr><td>S0CMX</td><td>年轻代中第一个survivor（幸存区）的最大容量 (kb)</td></tr><tr><td>S0C</td><td>年轻代中第一个survivor（幸存区）的容量 (kb)</td></tr><tr><td>S1CMX</td><td>年轻代中第二个survivor（幸存区）的最大容量 (kb)</td></tr><tr><td>S1C</td><td>年轻代中第二个survivor（幸存区）的容量 (kb)</td></tr><tr><td>ECMX</td><td>年轻代中Eden（伊甸园）的最大容量 (kb)</td></tr><tr><td>EC</td><td>年轻代中Eden（伊甸园）的容量 (kb)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr></tbody></table><h2 id="gcold"><a href="#gcold" class="headerlink" title="gcold"></a>gcold</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>PC</td><td>Perm(持久代)的容量 (kb) #jdk1.8是MC Metaspace容量</td></tr><tr><td>PU</td><td>Perm(持久代)目前已使用空间 (kb)  #jdk1.8是MU  Metaspace目前的使用量</td></tr><tr><td>OC</td><td>Old代的容量 (kb)</td></tr><tr><td>OU</td><td>Old代目前已使用空间 (kb)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(full gc)gc所用时间</td></tr><tr><td>GCT</td><td>垃圾收集总时间</td></tr></tbody></table><h2 id="gcoldcapacity-1"><a href="#gcoldcapacity-1" class="headerlink" title="gcoldcapacity"></a>gcoldcapacity</h2><table><thead><tr><th>名称</th><th>简介</th></tr></thead><tbody><tr><td>OGCMN</td><td>old代中初始化(最小)的大小 (kb)</td></tr><tr><td>OGCMX</td><td>old代的最大容量(kb)</td></tr><tr><td>OGC</td><td>old代当前的容量 (kb)</td></tr><tr><td>OC</td><td>Old代的容量 (kb)</td></tr><tr><td>YGC</td><td>从应用程序启动到采样时年轻代中gc次数</td></tr><tr><td>FGC</td><td>从应用程序启动到采样时old代(全gc)gc次数</td></tr><tr><td>FGCT</td><td>从应用程序启动到采样时old代(full gc)gc所用时间</td></tr><tr><td>GCT</td><td>垃圾收集总时间。</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LazyInitializationException</title>
      <link href="/2022/03/20/LazyInitializationException/"/>
      <url>/2022/03/20/LazyInitializationException/</url>
      
        <content type="html"><![CDATA[<p>文章字数：564,阅读全文大约需要2分钟</p><blockquote><p>记一次查找问题的过程</p></blockquote><ol><li><p>做一个用<code>jpa</code>从数据库中查找数据，修改再保存到数据库的简单功能。</p></li><li><p>查找出来后使用<code>BeanUtil</code>将修改的信息放入<code>jpa</code>的对象中，结果报了错误<br><code>Could not copy property &#39;id&#39; from source to target</code></p></li><li><p>查看<code>BeanUtil</code>的源代码</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (readMethod != <span class="keyword">null</span> &amp;&amp; ClassUtils.isAssignable(writeMethod.getParameterTypes()[<span class="number">0</span>], readMethod.getReturnType())) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) &#123;</span><br><span class="line">                                readMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            Object value = readMethod.invoke(source);</span><br><span class="line">                            <span class="keyword">if</span> (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) &#123;</span><br><span class="line">                                writeMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            writeMethod.invoke(target, value);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Throwable var15) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> FatalBeanException(<span class="string">"Could not copy property '"</span> + targetPd.getName() + <span class="string">"' from source to target"</span>, var15);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br></pre></td></tr></table></figure><p>发现在反射调用失败后统一返回这个异常，于是打断点。果然是反射报的异常。</p><ol start="4"><li><p>检查属性是否一一对应，是否有公共的<code>get</code>和<code>set</code>，是否有基础类型（有的话传入空会空指针）</p></li><li><p>都没发现有问题，于是手动赋值又运行了一遍。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.setId(b.getId());</span><br></pre></td></tr></table></figure><ol start="6"><li><p>期初只是为了测试一下方法是否被私有化，属性名是否一致。结果抛出异常<code>LazyInitializationException</code></p></li><li><p>这才是导致反射出错的原因，异常信息的意思大致是<code>session</code>被关闭。在<code>stackoverflow</code>上找到解决方法:方法上加上<code>@Transactional</code>。</p></li><li><p>最后成功解决问题，回想了一下。当元素或者元素的lazy属性为true时执行<code>find()</code>得到的只是一个代理对象，只有执行<code>getId()</code>时才会从数据库中取。然后取的时候事务已经关闭了。（可能是因为find操作是在Stream流中进行的，流关闭事务也关闭了）加上<code>@Transactional</code>注解可以使代码块事务统一。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keytool简单使用</title>
      <link href="/2022/03/20/Keytool%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/Keytool%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：569,阅读全文大约需要2分钟</p><blockquote><p><code>Keytool</code>是一个Java数据证书的管理工具。</p></blockquote><h1 id="keystore"><a href="#keystore" class="headerlink" title="keystore"></a>keystore</h1><ul><li><code>Keytool</code>将秘钥(<code>key</code>)和证书(<code>certificates</code>)存在名为<code>keystore</code>的文件中。</li><li><code>keystore</code>中有两种数据</li></ul><ol><li>秘钥实体(<code>key entity</code>)，私钥+公钥</li><li>可信的证书实体(<code>trusted certificate entries</code>)，公钥</li></ol><ul><li><code>alias</code>别名，不区分大小写。keystore下又若干别名条目</li></ul><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li><code>-genkey</code>: 在用户主目录中创建一个默认文件<code>.keystore</code>，还会产生一个<code>mykey</code>的别名，<code>mykey</code>中包含用户的公钥、私钥和证书。没有指定目录，会生成在默认目录下。</li><li><code>-alias</code>: 产生别名</li><li><code>-keystore</code>: 指定秘钥库的名称。加上此命令，生成的各类信息将不在<code>.keystore</code>文件中</li><li><code>-keyalg</code>: 指定秘钥的算法，默认<code>DSA</code>，可以设置成<code>RSA</code></li><li><code>-validity</code>: 创建的证书有效期是多少天</li><li><code>-keysize</code>: 指定秘钥长度</li><li><code>-storepass</code>: 指定秘钥库的访问密码（查看秘钥库内容需要）</li><li><code>-keypass</code>: 指定别名条目的密码（私钥的密码）</li><li><code>-dname</code>: 指定证书拥有者的信息<code>CN=名字与姓氏,OU=组织单位名称,O=组织名称,L=城市或区域名称,ST=州或省份名称,C=单位的两字母国家代码</code></li><li><code>-list</code>: 显示密钥库中的证书信息，例如<code>keytool -list -v -keystore</code>, <code>-storepass</code>指定密码</li><li><code>-v</code>: 显示秘钥库中的证书详细信息</li><li><code>-export</code>: 将别名指定的证书导出到文件，<code>-alias</code>指定导出的别名，<code>-keystore</code>指定keystore，<code>-file</code>指定导出证书的位置及证书名称，<code>-storepass</code>密码</li><li><code>-file</code>: 指定导出文件的文件名</li><li><code>-delete</code>: 删除秘钥库中某条目，<code>keytool -delete -alias</code>指定删除的别名</li><li><code>-printcert</code>: 查看导出的证书信息<code>keytool -printcert -file xxx.crt</code>查看导出的证书信息</li><li><code>-keypasswd</code>: 修改秘钥库中指定条目口令，<code>-keypasswd -alias</code>指定需要修改的别名，<code>-keypass 旧密码 -new 新密码 -storepass keystore密码 -keystore xxx</code></li><li><code>-storepasswd</code>:  修改<code>keystore</code>口令，<code>-storepasswd -keystore e:\sture.keystore(需修改口令的keystore) -storepass 123456(原始密码) -new 321(新密码)</code></li><li><code>-import</code>: 将签名数字证书导入秘钥库<code>keytool -import -alias</code>指定导入条目的别名 <code>-keystore</code>，<code>-file</code>指定导入的证书</li></ul><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><ul><li><p>生成<code>keystore</code><br><code>keytool -genkey -v -alias broker -keyalg RSA -keystore broker.keystore -storepass brokerPwd -keypass brokerKeyPwd</code></p></li><li><p>查看<code>keystore</code><br><code>keytool -list -v -keystore broker.keystore</code></p></li><li><p><code>keystore</code>导出成证书<br><code>keytool -export -alias broker -keystore broker.keystore -file borker_cert -storepass brokerPwd</code></p></li><li><p>导入证书到<code>truststore</code><br><code>keytool -import -v -file borker_cert -keystore client.truststore -storepass clientTrustPwd</code></p></li><li><p><code>jks</code>转<code>p12</code></p></li></ul><p><code>keytool -importkeystore -srckeystore keyStore.jks -srcstoretype JKS -deststoretype PKCS12 -destkeystore keyStore.p12</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keytool </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT服务质量qos</title>
      <link href="/2022/03/20/MQTT%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8Fqos/"/>
      <url>/2022/03/20/MQTT%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8Fqos/</url>
      
        <content type="html"><![CDATA[<p>文章字数：546,阅读全文大约需要2分钟</p><blockquote><p><code>QOS</code>即<code>Quality of Service</code>服务质量，有发布者的<code>QOS</code>和订阅者的<code>QOS</code></p></blockquote><h1 id="等级和作用"><a href="#等级和作用" class="headerlink" title="等级和作用"></a>等级和作用</h1><ol><li><code>level0</code>: 最多传输一次</li><li><code>level1</code>: 至少传输一次</li><li><code>level2</code>: 只有一次的传输</li></ol><h1 id="交互过程"><a href="#交互过程" class="headerlink" title="交互过程"></a>交互过程</h1><h2 id="qos0"><a href="#qos0" class="headerlink" title="qos0"></a>qos0</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">生产者---》中间件---》消费者</span><br></pre></td></tr></table></figure><p>只会发送一次，不管有没有收到。适合不是很重要的数据，比如传感器温度。反正很快会有下一次的数据。</p><h2 id="qos1"><a href="#qos1" class="headerlink" title="qos1"></a>qos1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生产者《------》中间件《-------》消费者</span><br><span class="line">  发送      确认    发送      确认</span><br></pre></td></tr></table></figure><p>接受者需要发送确认信息，确认自己收到了。发送者如果没有收到确认信息就会再次发送。这个保证了发送的信息一定会到达，但是如果确认的信息没有被收到，可能导致重复发送。</p><h2 id="qos2"><a href="#qos2" class="headerlink" title="qos2"></a>qos2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">发送者发送信息+信息编号--》接受者接收，保存编号--》确认收到+信息编号</span><br><span class="line">--》发送者收到确认消息后发送请求删除编号--》接受者删除编号，并发请求删除编号</span><br><span class="line">--》接受者删除编号</span><br></pre></td></tr></table></figure><p>增加了信息编号的传递，可以有效防止重复信息，但是多了删除编号的步骤。<br>并且假如接受者的删除请求没有到达（即没收到删除请求就有新的message）还会多次发送删除请求。<br>信息发送的次数过多。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT-Broker选型</title>
      <link href="/2022/03/20/MQTT-Broker%E9%80%89%E5%9E%8B/"/>
      <url>/2022/03/20/MQTT-Broker%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：559,阅读全文大约需要2分钟</p><blockquote><p><code>MQTT</code>是一个互联网协议，基于这个协议有很多的实现。</p></blockquote><h1 id="一、MQTT-Broker的需求"><a href="#一、MQTT-Broker的需求" class="headerlink" title="一、MQTT Broker的需求"></a>一、MQTT Broker的需求</h1><h2 id="1-1-基本需求"><a href="#1-1-基本需求" class="headerlink" title="1.1 基本需求"></a>1.1 基本需求</h2><ol><li>支持<code>mqtt3.1</code> / <code>mqtt3.1.1</code>可选<code>mqtt5.0</code>协议</li></ol><ul><li><code>3.1</code>和<code>3.1.1</code>是常见的协议版本，几乎生产的<code>IOT</code>设备都支持，<code>5.0</code>普及可能还要一段时间。</li></ul><ol start="2"><li>支持<code>QOS0</code>、<code>QOS1</code>可选<code>QOS2</code></li></ol><ul><li>各大厂商至少都支持了<code>QOS1</code>，能够保证信息的必到达。</li></ul><ol start="3"><li><p>支持<strong>遗嘱信息</strong>：即设备异常断开后通知后端服务或者其他设备处理</p></li><li><p>支持<strong>持久化</strong>：比如<code>QOS1</code>的消息，设备因为网络原因接收不到或者异常断线，需要把未发送的信息保存在<code>session</code>中。</p></li><li><p>支持多种连接方式</p></li></ol><ul><li><code>MQTT over TCP</code>: 最基本的连接方式</li><li><code>MQTT over Webscoket</code>: 基于<code>Websocket</code>连接的<code>MQTT</code></li><li><code>MQTT over TCP/SSL</code>: 基础连接之上做了加密，一般采用<code>TLS</code>加密</li><li><code>MQTT over Websocket/SSL</code>: 基于<code>Websocket</code>的加密连接，一般<code>SSL</code>采用<code>TLS</code></li></ul><ol start="6"><li>集群</li></ol><ul><li>需要海量的连接需要支持集群，集群的<code>session</code>持久化和集群通信都是难点。</li><li>集群信息共享，可以保证某个节点宕机时功能还能正常使用，但是未发送的信息可能会丢失。</li></ul><ol start="7"><li>自定义权限验证</li></ol><ul><li>连接阶段是否允许连接</li><li>发送阶段判断是否允许发送</li><li>订阅阶段是否允许订阅</li><li>大部分开源<code>Broker</code>只支持<code>userName</code>和<code>Password</code>的验证。<code>ClientId</code>和<code>Ip</code>不一定支持</li></ul><h2 id="1-2-可选需求"><a href="#1-2-可选需求" class="headerlink" title="1.2 可选需求"></a>1.2 可选需求</h2><ol><li>保留信息</li></ol><ul><li>保留信息就是主题会依照<code>QOS</code>级别保留最后一条消息，当有新的订阅时会发送这条消息</li><li>主要应对订阅之后不知道第一条信息何时会发送的情况。如获取设备状态，设备如果不发送信息新加进来的管理端就无法获得状态信息，不知道如何显示。如果这个时候有一条保留信息，就能够知道当前设备状态。</li><li>开销较大，每次订阅主题都需要检查有没有保留消息。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Math类常用函数</title>
      <link href="/2022/03/20/Math%E7%B1%BB%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/20/Math%E7%B1%BB%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：173,阅读全文大约需要1分钟</p><blockquote><p><code>Math</code>类包含很多数学计算常用函数</p></blockquote><h1 id="算数计算"><a href="#算数计算" class="headerlink" title="算数计算"></a>算数计算</h1><ul><li><code>Math.sqrt(v)</code>: 计算v的平方根</li><li><code>Math.cbrt(v)</code>: 计算v的立方根</li><li><code>Math.pow(a, b)</code>: 计算a的b次方</li><li><code>Math.max(a, b)</code>: 返回a和b中大的值</li><li><code>Math.min(a, b)</code>: 返回a和b中小的值</li><li><code>Math.abs(v)</code>: 计算v的绝对值</li></ul><h1 id="小数取整"><a href="#小数取整" class="headerlink" title="小数取整"></a>小数取整</h1><ul><li><code>Math.ceil(v)</code>: 向上取整（正数整数部分加1，负数去掉小数部分）</li><li><code>Math.floor(v)</code>: 向下取整（正数去掉小数部分，负数整数部分加1）</li><li><code>Math.rint(v)</code>: 四舍五入（当小数是5的时候，优先取偶数。即两边距离一样是先去偶数，如<code>12.5=&gt;12</code>）</li><li><code>Math.round(v)</code>: 四舍五入</li></ul><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><ul><li><code>Math.random()</code>: 取一个<code>[0, 1)</code>之间的值</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ModelAndView返回404</title>
      <link href="/2022/03/20/ModelAndView%E8%BF%94%E5%9B%9E404/"/>
      <url>/2022/03/20/ModelAndView%E8%BF%94%E5%9B%9E404/</url>
      
        <content type="html"><![CDATA[<p>文章字数：162,阅读全文大约需要1分钟</p><blockquote><p>今天新建了一个项目，测试demo的时候发现返回界面的Controller报404</p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>打断点，发现进入了Controller。并且没有抛出异常，说明基本流程是对的。</li><li>ModelAndView有数据，但是返回后404.可能是没找到视图</li><li>查看配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.freemarker.suffix&#x3D;.xx</span><br><span class="line">spring.freemarker.template-loader-path&#x3D;classpath:&#x2F;static</span><br></pre></td></tr></table></figure>查看文件名后缀是否是设置的.xx(modelAndView中不要加后缀)<br>查看路径是否是设置的根目录下的（static/xxx）</li></ol><blockquote><p>我的问题是没有static路径，创建static目录，把文件放进去。问题解决</p></blockquote><h1 id="其它可能"><a href="#其它可能" class="headerlink" title="其它可能"></a>其它可能</h1><ol><li>@RestController或者@RequestMapping使用错误</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL锁机制</title>
      <link href="/2022/03/20/MySQL%E9%94%81%E6%9C%BA%E5%88%B6/"/>
      <url>/2022/03/20/MySQL%E9%94%81%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1042,阅读全文大约需要4分钟</p><h1 id="锁分类"><a href="#锁分类" class="headerlink" title="锁分类"></a>锁分类</h1><p>按照粒度可以分为表级锁<code>table-level locking</code>和行级锁<code>row-level locking</code></p><ul><li><p><strong>表级锁</strong>：开销小，加锁快。但是因为锁定的粒度大，发生冲突的概率高，支持并发度低。适合查询为主的应用</p></li><li><p><strong>行级锁</strong>：开销大，加锁慢。但是粒度小，发生冲突概率低，支持并发高。</p></li></ul><p><code>InnoDB</code>默认采用行级锁<code>MyISAM</code>和<code>MEMORY</code>默认采用表级锁</p><h1 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h1><p><code>InnoDB</code>实现类两种类型的行锁</p><ul><li><p>共享锁<code>S</code>：获取该锁的事务可以读取数据，并同时允许其他事务获取改行的共享锁，但阻止其他事务获取排他锁。</p></li><li><p>排他锁<code>X</code>：获取该锁的事务可以更新或删除数据行，同时阻止其他事务获取该行的共享锁和排他锁。</p></li></ul><table><thead><tr><th>锁类型</th><th>共享锁S</th><th>排他锁X</th></tr></thead><tbody><tr><td>共享锁S</td><td>兼容</td><td>冲突</td></tr><tr><td>排他锁X</td><td>冲突</td><td>冲突</td></tr></tbody></table><h1 id="手动添加行锁"><a href="#手动添加行锁" class="headerlink" title="手动添加行锁"></a>手动添加行锁</h1><p>默认情况下锁都是自动获取的，但也可以手动加锁。</p><ul><li><p><code>select * from table where id = 1 for share</code><br>for share就是加共享锁，<code>MySQL8.0</code>之前的版本可以使用<code>select...lock in share mode</code><br>由于 InnoDB 中的自动提交 autocommit 默认设置为 ON，我们必须在事务中为数据行加锁；或者将 autocommit 设置为 OFF。</p></li><li><p><code>select * from table where id = 1 for update</code><br>for update是获取排他锁<br>数据行被其它事务加了共享锁，并且事务未结束（即未释放）此时其它事务加排他锁则会处于等待状态，直到超时。（因为不兼容）</p></li></ul><h1 id="意向锁"><a href="#意向锁" class="headerlink" title="意向锁"></a>意向锁</h1><p>为了兼容表级锁和行级锁，<code>InnoDB</code>采用了<strong>意向锁</strong>（属于表级锁）。<strong>意向锁</strong>为自动添加，也可以手动<code>LOCK TABLE</code>添加</p><ul><li>意向共享锁（IS）：事务在给数据行加行级共享锁之前，必须先取得该表的 IS 锁。</li><li>意向排他锁（IX）：事务在给数据行加行级排他锁之前，必须先取得该表的 IX 锁。</li></ul><table><thead><tr><th>锁类型</th><th>共享锁S</th><th>排他锁X</th><th>意向共享锁IS</th><th>意向排他锁</th></tr></thead><tbody><tr><td>共享锁S</td><td>兼容</td><td>冲突</td><td>兼容</td><td>冲突</td></tr><tr><td>排他锁X</td><td>冲突</td><td>冲突</td><td>冲突</td><td>冲突</td></tr><tr><td>意向共享锁IS</td><td>兼容</td><td>冲突</td><td>兼容</td><td>兼容</td></tr><tr><td>意向排他锁IX</td><td>冲突</td><td>冲突</td><td>兼容</td><td>兼容</td></tr></tbody></table><p><strong>意向锁</strong>只是标记当前有事务在操作行级锁，<strong>意向锁</strong>和<strong>意向锁</strong>之间并不会冲突</p><h1 id="手动添加意向锁"><a href="#手动添加意向锁" class="headerlink" title="手动添加意向锁"></a>手动添加意向锁</h1><ul><li><code>select * from t where id = 1 for update</code> 添加行锁会自动添加表锁</li><li><code>lock tables t read</code> 也可以手动添加</li><li><code>unlock tables</code> 释放表上的排他锁</li></ul><h1 id="行锁实现"><a href="#行锁实现" class="headerlink" title="行锁实现"></a>行锁实现</h1><ol><li><p>记录锁<code>Record Lock</code>：通过索引值进行加锁</p></li><li><p>间隙锁<code>Gap Lock</code>：<code>BETWEEN 1 and 10</code>这样的语句会产生多行记录的锁，此时就是间隙锁。代表一段区域，可以是两个索引之间、某个索引之前、某个索引之后。</p></li><li><p><code>Next-key</code>锁：该锁可以锁住当前位置和之前的区域，即记录锁+间隙锁。主要用于解决幻读，使用<code>for update</code>时通过加<code>Next-key</code>解决幻读。普通情况下采用<code>MVCC</code>解决幻读</p></li></ol><p>可以使用<code>SHOW ENGINE INNODB STATUS</code>命令查看<code>InnoDB</code>监控中关于锁的事务数据<br>记录锁永远都是锁定索引记录，优先聚集索引，没有定义索引<code>InnoDB</code>会自动创建隐藏的聚集索引。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql使用全文索引FullText</title>
      <link href="/2022/03/20/MySql%E4%BD%BF%E7%94%A8%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95FullText/"/>
      <url>/2022/03/20/MySql%E4%BD%BF%E7%94%A8%E5%85%A8%E6%96%87%E7%B4%A2%E5%BC%95FullText/</url>
      
        <content type="html"><![CDATA[<p>文章字数：371,阅读全文大约需要1分钟</p><blockquote><p>全文索引，通过建立<strong>倒排索引</strong>，可以极大的提升索引效率，用于判断字段是否包含关键词的问题，以替代like %xx%</p></blockquote><h1 id="创建表时指定全文索引"><a href="#创建表时指定全文索引" class="headerlink" title="创建表时指定全文索引"></a>创建表时指定全文索引</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span> (</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">INT</span> <span class="keyword">UNSIGNED</span> AUTO_INCREMENT <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    title <span class="built_in">VARCHAR</span>(<span class="number">200</span>),</span><br><span class="line">    <span class="keyword">body</span> <span class="built_in">TEXT</span>,</span><br><span class="line">    FULLTEXT(title, <span class="keyword">body</span>) <span class="keyword">WITH</span> PARSER ngram <span class="comment">## 全文索引，使用ngram分词模型</span></span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COMMENT</span>=<span class="string">'test表'</span>;</span><br></pre></td></tr></table></figure><h1 id="表中添加全文索引"><a href="#表中添加全文索引" class="headerlink" title="表中添加全文索引"></a>表中添加全文索引</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> article <span class="keyword">ADD</span> FULLTEXT <span class="keyword">INDEX</span> title_body_index (title,<span class="keyword">body</span>) <span class="keyword">WITH</span> PARSER ngram;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>默认模式</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> article <span class="keyword">WHERE</span> <span class="keyword">MATCH</span> (title,<span class="keyword">body</span>) AGAINST (<span class="string">'精神'</span> <span class="keyword">IN</span> <span class="keyword">NATURAL</span> <span class="keyword">LANGUAGE</span> <span class="keyword">MODE</span>);</span><br><span class="line"><span class="comment">## LANGUAGE 模式是默认的，所以也可以不指定</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> article <span class="keyword">WHERE</span> <span class="keyword">MATCH</span> (title,<span class="keyword">body</span>) AGAINST (<span class="string">'精神'</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>带操作符模式</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## +代表必须出现 -代表必须不出现 无符号代表可有可无，有的话排列更靠前</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> article <span class="keyword">WHERE</span> <span class="keyword">MATCH</span> (title,<span class="keyword">body</span>) AGAINST (<span class="string">'+精神 -关键词 关键词2'</span> <span class="keyword">IN</span> <span class="built_in">BOOLEAN</span> <span class="keyword">MODE</span>);</span><br></pre></td></tr></table></figure><h1 id="自然语言的全文索引"><a href="#自然语言的全文索引" class="headerlink" title="自然语言的全文索引"></a>自然语言的全文索引</h1><ul><li>即<code>LANGUAGE MODE</code></li><li>用于匹配文章和关键字的匹配程度</li><li>当一个次在超过<code>50%</code>的文章中都出现过，就不会被查询</li><li>所以数据数需要超过4条</li></ul><h1 id="布尔全文索引"><a href="#布尔全文索引" class="headerlink" title="布尔全文索引"></a>布尔全文索引</h1><ul><li><code>show variables like &#39;%ft%&#39;;</code>查看相应参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 默认的搜索最小单词长度和最大单词长度，中文最小应该改成1</span><br><span class="line">&#x2F;&#x2F; MyISAM</span><br><span class="line">ft_min_word_len &#x3D; 4;</span><br><span class="line">ft_max_word_len &#x3D; 84;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; InnoDB</span><br><span class="line">innodb_ft_min_token_size &#x3D; 3;</span><br><span class="line">innodb_ft_max_token_size &#x3D; 84;</span><br></pre></td></tr></table></figure><ol><li><code>+</code> 必须包含该词</li><li><code>-</code> 必须不包含该词</li><li><code>&gt;</code> 提高该词的相关性，查询的结果靠前</li><li><code>&lt;</code> 降低该词的相关性，查询的结果靠后</li><li><code>*</code> 星号 通配符，只能接在词后面</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>NIO</title>
      <link href="/2022/03/20/NIO/"/>
      <url>/2022/03/20/NIO/</url>
      
        <content type="html"><![CDATA[<p>文章字数：222,阅读全文大约需要1分钟</p><h1 id="NIO"><a href="#NIO" class="headerlink" title="NIO"></a>NIO</h1><ol><li>同步，非阻塞<code>IO</code><br>NIO之所以是同步，是因为它的accept/read/write方法的内核I/O操作都会阻塞当前线程。<br>但又说是非阻塞，即读取到信息的处理并不在主线程上进行，所以也是非阻塞的。</li><li>组成部分</li></ol><ul><li><p><code>Channel</code>通道：一个可以读和写的对象，相比于只能单向的流对象，速度更快。通过<code>IO</code>通道可以实现异步处理。</p></li><li><p>Buffer`缓存：该对象本质就是一块可以写入然后读取的数据的内存块。<br>使用流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 写入到缓冲区</span><br><span class="line">2. 调用buffer.flip()切换成读模式</span><br><span class="line">3. 读取数据</span><br><span class="line">4. 调用buffer.clear()或buffer.compat()方法清除缓冲区，以备下次使用。</span><br></pre></td></tr></table></figure><p>缓存有三个重要属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Capacith :内存大小</span><br><span class="line">2. Position :待写入位置或者当前读取位置</span><br><span class="line">3.</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos配置中心</title>
      <link href="/2022/03/20/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/"/>
      <url>/2022/03/20/Nacos%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<p>文章字数：395,阅读全文大约需要1分钟</p><h1 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h1><ol><li>下载<code>nacos</code></li><li>配置<code>mysql</code>连接信息</li><li><code>/bin/startup.cmd</code>启动</li></ol><h1 id="创建普通应用"><a href="#创建普通应用" class="headerlink" title="创建普通应用"></a>创建普通应用</h1><ol><li>创建一个<code>SpringBoot</code>应用，并配置</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表示当前是开发环境的配置文件</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>: <span class="string">dev</span></span><br><span class="line"><span class="comment"># 服务器端口</span></span><br><span class="line"><span class="meta">server.port</span>: <span class="string">8081</span></span><br><span class="line"><span class="comment"># 业务参数</span></span><br><span class="line"><span class="attr">param</span>: <span class="string">10;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取参数</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;param:0&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String param;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/param"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getParam</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>此时访问<code>/param</code>路径就会返回<code>application</code>中配置的参数</li></ul><h1 id="应用参数动态配置"><a href="#应用参数动态配置" class="headerlink" title="应用参数动态配置"></a>应用参数动态配置</h1><ul><li>增加依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Greenwich.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alibaba.version</span>&gt;</span>0.9.0.RELEASE<span class="tag">&lt;/<span class="name">alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">&lt;!-- 增加nacos-config的依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- type默认是jar,pom代表引入的是父级 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 只能用在dependencyManagement里，代表把springcloud的dependencyManagement内容引入，类似继承的效果。因为当前项目父级是springBoot,所以无法再指定一个springCloud的父级，所以用这种方式引入 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加配置文件<code>bootstrap.yml</code></li><li>这个配置文件<code>spring</code>会在加载<code>application.properties</code>之前加载，将<code>nacos</code>相关信息配置在这里</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">application:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">test-service</span></span><br><span class="line">    <span class="attr">cloud:</span></span><br><span class="line">        <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">config:</span></span><br><span class="line">                <span class="attr">serer-addr:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8848</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加这个标签，spring在加载bean时就会自动代理相应的setter方法，从而实现动态加载配置</span></span><br><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nacos动态配置参数"><a href="#nacos动态配置参数" class="headerlink" title="nacos动态配置参数"></a>nacos动态配置参数</h1><ol><li>进入<code>nacos</code>后台<code>http://localhost:8848/nacos/</code>,默认用户名密码都是<code>nacos</code></li><li>选择 <code>配置管理-》配置列表</code></li><li>新增配置</li><li><code>Data Id</code> 设置为<code>test-service-dev.properties</code>（服务名-运行环境）</li><li>格式选择<code>properties</code></li><li>增加配置内容</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">param</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><ul><li>重启应用即可生效</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty-PipLine</title>
      <link href="/2022/03/20/Netty-PipLine/"/>
      <url>/2022/03/20/Netty-PipLine/</url>
      
        <content type="html"><![CDATA[<p>文章字数：233,阅读全文大约需要1分钟</p><blockquote><p>pipLine是Netty数据链式处理的处理流，每一个节点都能处理数据并返回传入值类型的对象，再给下一个节点。一般来说会使用一些工具类对于数据现行处理，然后再进入自身的数据处理中。</p></blockquote><h1 id="字符串类型粘包和拆包"><a href="#字符串类型粘包和拆包" class="headerlink" title="字符串类型粘包和拆包"></a>字符串类型粘包和拆包</h1><p>使用LineBasedFrameDecoder和StringDecoder处理之后的msg</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> LineBasedFrameDecoder(<span class="number">1024</span>));</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>请求中的字符串会被<code>\n</code>或者<code>\r</code>分割成一个个部分，分别被<code>channelRead</code>执行。一次连接中多次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接收客户端消息，自动触发</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String mess = (String) msg;</span><br><span class="line">    System.out.println(<span class="string">"服务端收到 = "</span> + mess);</span><br><span class="line">    <span class="comment">//回复消息</span></span><br><span class="line">    String respMess = message+<span class="string">"\n"</span>;</span><br><span class="line">    ByteBuf respByteBuf = Unpooled.copiedBuffer(respMess.getBytes());</span><br><span class="line">    ctx.write(respByteBuf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="http解析"><a href="#http解析" class="headerlink" title="http解析"></a>http解析</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//request解码</span></span><br><span class="line"> arg0.pipeline().addLast(<span class="keyword">new</span> HttpRequestDecoder());</span><br><span class="line"><span class="comment">//request解码</span></span><br><span class="line"> arg0.pipeline().addLast(<span class="keyword">new</span> HttpRequestDecoder());</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> http </tag>
            
            <tag> 网络 </tag>
            
            <tag> socket </tag>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>No-executable-code-found-at-line-208</title>
      <link href="/2022/03/20/No-executable-code-found-at-line-208/"/>
      <url>/2022/03/20/No-executable-code-found-at-line-208/</url>
      
        <content type="html"><![CDATA[<p>文章字数：83,阅读全文大约需要1分钟</p><blockquote><p>idea打断点出现x,并且提示错误。</p></blockquote><p>没有可执行的代码，原因可能是没有编译成功，代码不可到达，等。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>我用的是idea,一般修改完control+f9直接热加载。可能部分代码没有加载成功，重启软件就正常了。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NoClassDefFoundError</title>
      <link href="/2022/03/20/NoClassDefFoundError/"/>
      <url>/2022/03/20/NoClassDefFoundError/</url>
      
        <content type="html"><![CDATA[<p>文章字数：154,阅读全文大约需要1分钟</p><blockquote><p>这是java在运行的时候发现类未找到报出的错误，即编译成功，运行失败。</p></blockquote><h1 id="区别于编译失败"><a href="#区别于编译失败" class="headerlink" title="区别于编译失败"></a>区别于编译失败</h1><ol><li><code>ClassNotFoundException</code>编译时类未找到</li><li><code>NoClassDefFoundError</code>运行时类未找到</li></ol><h1 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h1><ol><li><code>classpath</code>环境或者其中的类不可用</li><li>类依赖的原生方法调用失败</li><li>maven依赖传递失败<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 子模块依赖父模块的引用传递，但是却使用了&lt;optional&gt;true&lt;optional&#x2F;&gt;阻断了依赖</span><br><span class="line">父模块引入依赖，子模块仅声明一下，使用依赖传递使用父类引入的依赖。</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Null-value-was-assigned-to-a-property</title>
      <link href="/2022/03/20/Null-value-was-assigned-to-a-property/"/>
      <url>/2022/03/20/Null-value-was-assigned-to-a-property/</url>
      
        <content type="html"><![CDATA[<p>文章字数：43,阅读全文大约需要1分钟</p><blockquote><p>报错 <code>org.springframework.orm.jpa.JpaSystemException: Null value was assigned to a property[class xxx.xxx.xxx] of primitive type setter of...</code></p></blockquote><h1 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h1><p><code>jpa</code>实体属性为<code>int</code>类型，但是数据库中的数据为空。无法为属性赋值，所以报错</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenResty</title>
      <link href="/2022/03/20/OpenResty/"/>
      <url>/2022/03/20/OpenResty/</url>
      
        <content type="html"><![CDATA[<p>文章字数：136,阅读全文大约需要1分钟<br>OpenResty 的目标是让你的 Web 服务直接跑在 Nginx 服务内部,充分利用 Nginx 的非阻塞 I/O 模型,不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL,PostgreSQL,~Memcaches 以及 ~Redis 等都进行一致的高性能响应。</p><p>所以对于一些高性能的服务来说，可以直接使用 OpenResty 访问 Mysql或Redis等，而不需要通过第三方语言（PHP、Python、Ruby）等来访问数据库再返回，这大大提高了应用的性能。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
            <tag> OpenResty </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Observable</title>
      <link href="/2022/03/20/Observable/"/>
      <url>/2022/03/20/Observable/</url>
      
        <content type="html"><![CDATA[<p>文章字数：23,阅读全文大约需要1分钟</p><blockquote><p>java.util.Observable </p></blockquote><p><code>ApplicationEventPublisher</code><br><code>@EventListener</code></p><h1 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h1><p>applicationContext.publishEvent(MessData data);// 发送</p><p>@EventListener<br>public void hander(MessData data){}//订阅MessData相关的</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 发布订阅 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PathVariable注解</title>
      <link href="/2022/03/20/PathVariable%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/03/20/PathVariable%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>文章字数：20,阅读全文大约需要1分钟</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p><code>REST</code>风格接口参数获取</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testPathVariable/&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPathVariable</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testPathVariable:"</span>+id);</span><br><span class="line">        <span class="keyword">return</span> SUCCESS;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA加密</title>
      <link href="/2022/03/20/RSA%E5%8A%A0%E5%AF%86/"/>
      <url>/2022/03/20/RSA%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：361,阅读全文大约需要1分钟</p><blockquote><p>非对称加密，公钥可以加密，私钥才能解密</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPair;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyPairGenerator;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.interfaces.RSAPublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAEncrypt</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, String&gt; keyMap = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();  <span class="comment">//用于封装随机产生的公钥与私钥</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//生成公钥和私钥</span></span><br><span class="line">genKeyPair();</span><br><span class="line">System.out.println(<span class="string">"公钥:"</span> + keyMap.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(<span class="string">"私钥:"</span> + keyMap.get(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//加密字符串</span></span><br><span class="line">String message = <span class="string">"test123"</span>;</span><br><span class="line">String messageEn = encrypt(message,keyMap.get(<span class="number">0</span>));</span><br><span class="line">System.out.println(message + <span class="string">"\t加密后的字符串为:"</span> + messageEn);</span><br><span class="line">String messageDe = decrypt(messageEn,keyMap.get(<span class="number">1</span>));</span><br><span class="line">System.out.println(<span class="string">"还原后的字符串为:"</span> + messageDe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 随机生成密钥对 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> NoSuchAlgorithmException </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">genKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;  </span><br><span class="line"><span class="comment">// KeyPairGenerator类用于生成公钥和私钥对，基于RSA算法生成对象  </span></span><br><span class="line">KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);  </span><br><span class="line"><span class="comment">// 初始化密钥对生成器，密钥大小为96-1024位  </span></span><br><span class="line">keyPairGen.initialize(<span class="number">1024</span>,<span class="keyword">new</span> SecureRandom());  </span><br><span class="line"><span class="comment">// 生成一个密钥对，保存在keyPair中  </span></span><br><span class="line">KeyPair keyPair = keyPairGen.generateKeyPair();  </span><br><span class="line">RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();   <span class="comment">// 得到私钥  </span></span><br><span class="line">RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();  <span class="comment">// 得到公钥  </span></span><br><span class="line">String publicKeyString = <span class="keyword">new</span> String(Base64.encodeBase64(publicKey.getEncoded()));  </span><br><span class="line"><span class="comment">// 得到私钥字符串  </span></span><br><span class="line">String privateKeyString = <span class="keyword">new</span> String(Base64.encodeBase64((privateKey.getEncoded())));  </span><br><span class="line"><span class="comment">// 将公钥和私钥保存到Map</span></span><br><span class="line">keyMap.put(<span class="number">0</span>,publicKeyString);  <span class="comment">//0表示公钥</span></span><br><span class="line">keyMap.put(<span class="number">1</span>,privateKeyString);  <span class="comment">//1表示私钥</span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * RSA公钥加密 </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str </span></span><br><span class="line"><span class="comment"> *            加密字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> publicKey </span></span><br><span class="line"><span class="comment"> *            公钥 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 密文 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> *             加密过程中的异常信息 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypt</span><span class="params">( String str, String publicKey )</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//base64编码的公钥</span></span><br><span class="line"><span class="keyword">byte</span>[] decoded = Base64.decodeBase64(publicKey);</span><br><span class="line">RSAPublicKey pubKey = (RSAPublicKey) KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(decoded));</span><br><span class="line"><span class="comment">//RSA加密</span></span><br><span class="line">Cipher cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">cipher.init(Cipher.ENCRYPT_MODE, pubKey);</span><br><span class="line">String outStr = Base64.encodeBase64String(cipher.doFinal(str.getBytes(<span class="string">"UTF-8"</span>)));</span><br><span class="line"><span class="keyword">return</span> outStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * RSA私钥解密</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> str </span></span><br><span class="line"><span class="comment"> *            加密字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> privateKey </span></span><br><span class="line"><span class="comment"> *            私钥 </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 铭文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception </span></span><br><span class="line"><span class="comment"> *             解密过程中的异常信息 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(String str, String privateKey)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//64位解码加密后的字符串</span></span><br><span class="line"><span class="keyword">byte</span>[] inputByte = Base64.decodeBase64(str.getBytes(<span class="string">"UTF-8"</span>));</span><br><span class="line"><span class="comment">//base64编码的私钥</span></span><br><span class="line"><span class="keyword">byte</span>[] decoded = Base64.decodeBase64(privateKey);  </span><br><span class="line">        RSAPrivateKey priKey = (RSAPrivateKey) KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePrivate(<span class="keyword">new</span> PKCS8EncodedKeySpec(decoded));  </span><br><span class="line"><span class="comment">//RSA解密</span></span><br><span class="line">Cipher cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">cipher.init(Cipher.DECRYPT_MODE, priKey);</span><br><span class="line">String outStr = <span class="keyword">new</span> String(cipher.doFinal(inputByte));</span><br><span class="line"><span class="keyword">return</span> outStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RBAC</title>
      <link href="/2022/03/20/RBAC/"/>
      <url>/2022/03/20/RBAC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：496,阅读全文大约需要1分钟</p><h1 id="安全原则"><a href="#安全原则" class="headerlink" title="安全原则"></a>安全原则</h1><ol><li>最小权限原则：将角色配置成其完成任务所需的最小权限集合</li><li>责任分离原则：可以通过相互独立互斥的角色共同完成敏感任务，例如记账员和财务管理员共同完成过账操作</li><li>数据抽象原则：通过权限的抽象来体现，例如借款，存款，等，而不是使用读、写、执行权限</li></ol><h1 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h1><ol><li><code>User</code>用户：每个用户有唯一的<code>UUID</code>标识，并被授予不同角色</li><li><code>Role</code>角色：每个角色有不同的权限</li><li><code>Permission</code>权限：访问权限</li><li><code>User-Role</code>用户权限映射</li><li><code>Role-Permission</code>角色-权限映射</li></ol><h1 id="RBAC0"><a href="#RBAC0" class="headerlink" title="RBAC0"></a>RBAC0</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">用户 &lt;--- 用户角色分配 ----&gt; 角色 &lt;--- 角色权限分配 ---&gt; （操作 &lt;--- 权限 ---&gt; 控制对象）</span><br><span class="line">   ^</span><br><span class="line">    \                     &#x2F;</span><br><span class="line">  和用户联系的会话     激活的角色</span><br><span class="line">      \                 &#x2F;</span><br><span class="line">       \               &#x2F;</span><br><span class="line">         用户会话集合</span><br></pre></td></tr></table></figure><ol><li>用户和角色为多对多关系</li><li>每个用户至少有一个角色</li></ol><ul><li>优点是结构简单，灵活授权</li></ul><h1 id="RBAC1"><a href="#RBAC1" class="headerlink" title="RBAC1"></a>RBAC1</h1><ul><li>和<code>RBAC0</code>基本一致，角色改为树形结构，可以继承</li></ul><h1 id="RBAC2"><a href="#RBAC2" class="headerlink" title="RBAC2"></a>RBAC2</h1><ul><li>增加一下约束</li></ul><ol><li>互斥角色：同一用户智能分配到一组互斥角色集合至多一个角色。对于某一个用户，某一次活动中只能有一个角色。</li><li>基数约束：角色分配数量受限、用户拥有角色数目受限、角色访问权限数目受限等</li><li>先决条件角色：拥有某一基础角色权限后，才能获取更高级别的权限</li><li>运行互斥：允许用户获取两个角色，但运行中不能两个角色同时激活</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 权限 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-List和MQ的区别</title>
      <link href="/2022/03/20/Redis-List%E5%92%8CMQ%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/03/20/Redis-List%E5%92%8CMQ%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：212,阅读全文大约需要1分钟</p><blockquote><p>redis和消息队列的区别在于消息队列拥有更完善的功能，redis是可以加入一些功能实现消息队列的</p></blockquote><h1 id="容错机制"><a href="#容错机制" class="headerlink" title="容错机制"></a>容错机制</h1><p>容错机制需要保证出错后信息还会被重新插入队列，在<code>redis</code>中需要手动<code>try</code> <code>catch</code>处理。在其他消息队列中都有提供容错机制，比如消息取出变为挂起状态，一定时间内没有删除就会重新插入队列。</p><h1 id="消息延迟"><a href="#消息延迟" class="headerlink" title="消息延迟"></a>消息延迟</h1><p>消息队列中有延迟的概念，取出后判断是否在延迟时间内，如果在则重新插入队列，达到延迟效果。</p><h1 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h1><p><code>redis</code>的推送方式注重快速而不保证推送成功<br>部分<code>MQ</code>可以做到虽然有延迟，但是保证推送成功。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reactor模式</title>
      <link href="/2022/03/20/Reactor%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/03/20/Reactor%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：538,阅读全文大约需要2分钟</p><blockquote><p><code>Reactor pattern</code>(反应器模式)是一种处理并发服务器请求，将请求提交给一个或者多个服务器处理程序的事件设计模式。机制是客户端使用一个线程监听连接请求，监听到后提交给另一个专门负责定时批量处理请求的非阻塞线程。node.js,netty等均使用这种设计模式实现</p></blockquote><h1 id="传统方法-thread-based-architecture基于线程"><a href="#传统方法-thread-based-architecture基于线程" class="headerlink" title="传统方法(thread-based architecture基于线程)"></a>传统方法(thread-based architecture基于线程)</h1><p>传统的应对服务器并发请求的方法是</p><ol><li>死循环监听服务器请求</li><li>接收到请求开启一个线程处理此请求</li></ol><p>这样带来了几个后果</p><ol><li>产生大量线程，线程间切换需要消耗资源。</li><li>大量线程占用内存空间</li><li>处理请求的线程大部分时间用于等待输入</li></ol><h1 id="event-driven-architecture（事件驱动）方法"><a href="#event-driven-architecture（事件驱动）方法" class="headerlink" title="event-driven architecture（事件驱动）方法"></a>event-driven architecture（事件驱动）方法</h1><p>Reactor设计模式就是事件驱动方法的实现之一。监听请求并转发给对应的事件处理器来执行。<br><strong>组成角色</strong></p><ol><li><code>handle</code>（句柄/文件描述符）<br>事件的发源地，如socket、磁盘文件。<br>handle可能会发生的事件有:connection、ready for read、ready for write等。</li><li><code>Synchronous Event Demultiplexer</code>（同步事件分离器）<br>阻塞等待Handles中的事件发生。</li><li><code>Event Handler</code>(事件处理器的接口)</li><li><code>Concrete Event Handler</code>（事件处理器实现）<br>事件处理器可能有多种，所以声明接口，使用接口调用。不同类型事件处理器具体实现不同。</li></ol><h1 id="和观察者模式对比"><a href="#和观察者模式对比" class="headerlink" title="和观察者模式对比"></a>和观察者模式对比</h1><ol><li><p>都是主体发生变化时通知依附的客体。</p></li><li><p>观察者模式是与单个事件源有关（发布），反应器模式与多个事件源关联。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate</title>
      <link href="/2022/03/20/RedisTemplate/"/>
      <url>/2022/03/20/RedisTemplate/</url>
      
        <content type="html"><![CDATA[<p>文章字数：294,阅读全文大约需要1分钟</p><blockquote><p>org.springframework.data.redis.core.RedisTemplate</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;spring-boot-starter-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.5.6.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database&#x3D;0  </span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host&#x3D;127.0.0.1</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port&#x3D;6379  </span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password&#x3D;</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active&#x3D;8  </span><br><span class="line"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait&#x3D;-1  </span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle&#x3D;8  </span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle&#x3D;0  </span><br><span class="line"># 连接超时时间（毫秒）</span><br><span class="line">spring.redis.timeout&#x3D;0</span><br></pre></td></tr></table></figure><h1 id="注入Bean"><a href="#注入Bean" class="headerlink" title="注入Bean"></a>注入Bean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">  <span class="meta">@ConditionalOnClass</span>(RedisOperations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">  @<span class="title">EnableConfigurationProperties</span>(<span class="title">RedisProperties</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class">  <span class="title">public</span> <span class="title">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"redisTemplate"</span>)</span><br><span class="line">      <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">              RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">          RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">          <span class="comment">//使用fastjson序列化</span></span><br><span class="line">          FastJsonRedisSerializer fastJsonRedisSerializer = <span class="keyword">new</span> FastJsonRedisSerializer(Object<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">          <span class="comment">// value值的序列化采用fastJsonRedisSerializer</span></span><br><span class="line">          template.setValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">          template.setHashValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">          <span class="comment">// key的序列化采用StringRedisSerializer</span></span><br><span class="line">          template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">          template.setHashKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">          template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">          <span class="keyword">return</span> template;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="meta">@Bean</span></span><br><span class="line">      <span class="meta">@ConditionalOnMissingBean</span>(StringRedisTemplate<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">      <span class="title">public</span> <span class="title">StringRedisTemplate</span> <span class="title">stringRedisTemplate</span>(</span></span><br><span class="line"><span class="class">              <span class="title">RedisConnectionFactory</span> <span class="title">redisConnectionFactory</span>) </span>&#123;</span><br><span class="line">          StringRedisTemplate template = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">          template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">          <span class="keyword">return</span> template;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class RedisService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 默认过期时长，单位：秒</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static final long DEFAULT_EXPIRE &#x3D; 60 * 60 * 24;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 不设置过期时长</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public static final long NOT_EXPIRE &#x3D; -1;</span><br><span class="line"></span><br><span class="line">    public boolean existsKey(String key) &#123;</span><br><span class="line">        return redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 重名名key，如果newKey已经存在，则newKey的原值被覆盖</span><br><span class="line">     *</span><br><span class="line">     * @param oldKey</span><br><span class="line">     * @param newKey</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void renameKey(String oldKey, String newKey) &#123;</span><br><span class="line">        redisTemplate.rename(oldKey, newKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * newKey不存在时才重命名</span><br><span class="line">     *</span><br><span class="line">     * @param oldKey</span><br><span class="line">     * @param newKey</span><br><span class="line">     * @return 修改成功返回true</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public boolean renameKeyNotExist(String oldKey, String newKey) &#123;</span><br><span class="line">        return redisTemplate.renameIfAbsent(oldKey, newKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除key</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void deleteKey(String key) &#123;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除多个key</span><br><span class="line">     *</span><br><span class="line">     * @param keys</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void deleteKey(String... keys) &#123;</span><br><span class="line">        Set&lt;String&gt; kSet &#x3D; Stream.of(keys).map(k -&gt; k).collect(Collectors.toSet());</span><br><span class="line">        redisTemplate.delete(kSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 删除Key的集合</span><br><span class="line">     *</span><br><span class="line">     * @param keys</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void deleteKey(Collection&lt;String&gt; keys) &#123;</span><br><span class="line">        Set&lt;String&gt; kSet &#x3D; keys.stream().map(k -&gt; k).collect(Collectors.toSet());</span><br><span class="line">        redisTemplate.delete(kSet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 设置key的生命周期</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param time</span><br><span class="line">     * @param timeUnit</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void expireKey(String key, long time, TimeUnit timeUnit) &#123;</span><br><span class="line">        redisTemplate.expire(key, time, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 指定key在指定的日期过期</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param date</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void expireKeyAt(String key, Date date) &#123;</span><br><span class="line">        redisTemplate.expireAt(key, date);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 查询key的生命周期</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     * @param timeUnit</span><br><span class="line">     * @return</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public long getKeyExpire(String key, TimeUnit timeUnit) &#123;</span><br><span class="line">        return redisTemplate.getExpire(key, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 将key设置为永久有效</span><br><span class="line">     *</span><br><span class="line">     * @param key</span><br><span class="line">     *&#x2F;</span><br><span class="line">    public void persistKey(String key) &#123;</span><br><span class="line">        redisTemplate.persist(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisTemplate连接池</title>
      <link href="/2022/03/20/RedisTemplate%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2022/03/20/RedisTemplate%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：54,阅读全文大约需要1分钟</p><blockquote><p>RedisTemplate每次都从连接池中获取一个连接，并执行回调。执行完毕后将连接放回连接池。</p></blockquote><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p>基于<code>jdk1.8</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(RedisCallback&lt;T&gt; action, <span class="keyword">boolean</span> exposeConnection, <span class="keyword">boolean</span> pipeline)</span> </span>&#123;</span><br><span class="line">        Assert.isTrue(<span class="keyword">this</span>.initialized, <span class="string">"template not initialized; call afterPropertiesSet() before using it"</span>);</span><br><span class="line">        Assert.notNull(action, <span class="string">"Callback object must not be null"</span>);</span><br><span class="line">        RedisConnectionFactory factory = <span class="keyword">this</span>.getConnectionFactory();</span><br><span class="line">        RedisConnection conn = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Object var11;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.enableTransactionSupport) &#123;</span><br><span class="line">                conn = RedisConnectionUtils.bindConnection(factory, <span class="keyword">this</span>.enableTransactionSupport);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                conn = RedisConnectionUtils.getConnection(factory);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> existingConnection = TransactionSynchronizationManager.hasResource(factory);</span><br><span class="line">            RedisConnection connToUse = <span class="keyword">this</span>.preProcessConnection(conn, existingConnection);</span><br><span class="line">            <span class="keyword">boolean</span> pipelineStatus = connToUse.isPipelined();</span><br><span class="line">            <span class="keyword">if</span> (pipeline &amp;&amp; !pipelineStatus) &#123;</span><br><span class="line">                connToUse.openPipeline();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RedisConnection connToExpose = exposeConnection ? connToUse : <span class="keyword">this</span>.createRedisConnectionProxy(connToUse);</span><br><span class="line">            T result = action.doInRedis(connToExpose);</span><br><span class="line">            <span class="keyword">if</span> (pipeline &amp;&amp; !pipelineStatus) &#123;</span><br><span class="line">                connToUse.closePipeline();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var11 = <span class="keyword">this</span>.postProcessResult(result, connToUse, existingConnection);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RedisConnectionUtils.releaseConnection(conn, factory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var11;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ResponseBodyAdvice切面操作返回值</title>
      <link href="/2022/03/20/ResponseBodyAdvice%E5%88%87%E9%9D%A2%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
      <url>/2022/03/20/ResponseBodyAdvice%E5%88%87%E9%9D%A2%E6%93%8D%E4%BD%9C%E8%BF%94%E5%9B%9E%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：131,阅读全文大约需要1分钟</p><blockquote><p><code>ResponseBodyAdvice</code>可以在注解<code>@ResponseBody</code>将返回值处理成相应格式之前操作返回值。实现这个接口即可完成相应操作。可用于返回值加密</p></blockquote><blockquote><p>@ControllerAdvice标记类</p></blockquote><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Whether this component supports the given controller method return type</span></span><br><span class="line"><span class="comment"> * and the selected &#123;<span class="doctag">@code</span> HttpMessageConverter&#125; type.(此组件是否支持给定的控制器方法返回值类型)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> returnType the return type（返回类型）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> converterType the selected converter type(选中的转换器类型)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if &#123;<span class="doctag">@link</span> #beforeBodyWrite&#125; should be invoked;</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> false&#125; otherwise（返回是否调用处理方法）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">support</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; converterType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Invoked after an &#123;<span class="doctag">@code</span> HttpMessageConverter&#125; is selected and just before</span></span><br><span class="line"><span class="comment"> * its write method is invoked.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> body the body to be written（需要写操作的body）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> returnType the return type of the controller method</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selectedContentType the content type selected through content negotiation</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> selectedConverterType the converter type selected to write to the response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request the current request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response the current response</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the body that was passed in or a modified (possibly new) instance</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">T <span class="title">beforeBodyWrite</span><span class="params">(@Nullable T body, MethodParameter returnType, MediaType selectedContentType,</span></span></span><br><span class="line"><span class="function"><span class="params">Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; selectedConverterType,</span></span></span><br><span class="line"><span class="function"><span class="params">ServerHttpRequest request, ServerHttpResponse response)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>在参数被方法调用之前截取参数的是<code>RequestBodyAdvice</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogRequestBodyAdvice</span> <span class="keyword">implements</span> <span class="title">RequestBodyAdvice</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter methodParameter, Type type, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HttpInputMessage <span class="title">beforeBodyRead</span><span class="params">(HttpInputMessage httpInputMessage, MethodParameter methodParameter, Type type, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> httpInputMessage;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">afterBodyRead</span><span class="params">(Object o, HttpInputMessage httpInputMessage, MethodParameter methodParameter, Type type, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        Method method=methodParameter.getMethod();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;.&#123;&#125;:&#123;&#125;"</span>,method.getDeclaringClass().getSimpleName(),method.getName(),JSON.toJSONString(o));</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">handleEmptyBody</span><span class="params">(Object o, HttpInputMessage httpInputMessage, MethodParameter methodParameter, Type type, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        Method method=methodParameter.getMethod();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;.&#123;&#125;"</span>,method.getDeclaringClass().getSimpleName(),method.getName());</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ推送方式</title>
      <link href="/2022/03/20/RocketMQ%E6%8E%A8%E9%80%81%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/03/20/RocketMQ%E6%8E%A8%E9%80%81%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：192,阅读全文大约需要1分钟</p><blockquote><p>阿里巴巴用java开发的消息中间件，支持大规模topic数量，性能好。</p></blockquote><h1 id="推送方式"><a href="#推送方式" class="headerlink" title="推送方式"></a>推送方式</h1><ol><li><p><code>pull</code>模式：拉取，<code>DefaultMQPullConsumer</code>模式。是由客户端主动向<code>MQ</code>请求数据，主动权在客户端，先拉取数据再消费。不会因为推送太快而处理不及时。</p></li><li><p><code>push</code>模式：推送，<code>DefaultMQPushConsumer</code>模式。一般的<code>push</code>是<code>MQ</code>主动推送信息，但是可能会导致消费者跟不上推送速度。<code>RocketMQ</code>采用的是长轮询的方式，客户端访问<code>MQ</code>，有信息就拉取关闭连接消费，然后再请求并拉取。没有信息请求就会等待新信息，知道超时，超时会关闭连接并再次发送新的请求。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RuntimeException</title>
      <link href="/2022/03/20/RuntimeException/"/>
      <url>/2022/03/20/RuntimeException/</url>
      
        <content type="html"><![CDATA[<p>文章字数：97,阅读全文大约需要1分钟</p><h1 id="RuntimeException-和-Exception"><a href="#RuntimeException-和-Exception" class="headerlink" title="RuntimeException 和 Exception"></a>RuntimeException 和 Exception</h1><p>相同</p><ol><li><code>RuntimeException</code> 继承与 <code>Exception</code></li><li><code>RuntimeException</code> 和 <code>Exception</code>都能被<code>try...catch</code></li></ol><p>不同</p><ol><li>如果程序抛出<code>Exception</code>，编译器会要求代码中处理，即<code>try...catch</code>或<code>throws</code></li><li><code>RuntimeException</code>可以不在代码中处理，运行时遇到则会抛出。例如空指针异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        runtimeException(); <span class="comment">// 可以不处理，运行时会直接抛出异常</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            exception(); <span class="comment">// 必须try catch</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">runtimeException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"runtime exception"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"exception"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQLServerException</title>
      <link href="/2022/03/20/SQLServerException/"/>
      <url>/2022/03/20/SQLServerException/</url>
      
        <content type="html"><![CDATA[<p>文章字数：37,阅读全文大约需要1分钟</p><blockquote><p>SQLServerException:列名‘true’无效</p></blockquote><p><code>mysql</code>里支持<code>true</code>，在<code>sql server</code>里只有0,1所以语句不兼容。只有改字段类型了。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RxJava和Spring响应式编程</title>
      <link href="/2022/03/20/RxJava%E5%92%8CSpring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/03/20/RxJava%E5%92%8CSpring%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：667,阅读全文大约需要2分钟</p><h1 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h1><ol><li><p>传统方式<br>前端访问后端，后端调用其他服务。<br>然而调用的过程中(即网络IO)需要等待结果，这种同步阻塞的过程会产生大量无用的等待。<br>占用服务端连接池(tomcat处理请求的线程)、降低吞吐量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">前端--&gt; tomcat ---&gt; tomcate</span><br></pre></td></tr></table></figure></li><li><p>响应式系统</p></li></ol><ul><li>有请求才会相应，快速响应</li><li>系统吞吐量增高</li></ul><h1 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h1><ul><li>一种响应式编程的类库</li><li>基于观察者模式 (订阅-发布)</li></ul><h2 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h2><p><img src="https://upload-images.jianshu.io/upload_images/17243965-40cef81d0d2a5286.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="三种类型的消费者"><a href="#三种类型的消费者" class="headerlink" title="三种类型的消费者"></a>三种类型的消费者</h2><p><img src="https://upload-images.jianshu.io/upload_images/17243965-f7b90386a83b6550.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/17243965-3065c2f260baff1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/17243965-3fda0f24a97bdf54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="订阅关系"><a href="#订阅关系" class="headerlink" title="订阅关系"></a>订阅关系</h2><p><img src="https://upload-images.jianshu.io/upload_images/17243965-4f0e27b42bc43217.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"hello world"</span>)<span class="comment">//简单创建一个生产者</span></span><br><span class="line">              .subscribe(System.out::println);<span class="comment">// 简易订阅</span></span><br></pre></td></tr></table></figure><h2 id="变换操作符"><a href="#变换操作符" class="headerlink" title="变换操作符"></a>变换操作符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Observable.just(<span class="string">"hello world"</span>)<span class="comment">//简单创建一个生产者</span></span><br><span class="line">              .map(v-&gt;v+<span class="string">"xxxx"</span>)</span><br><span class="line">              .subscribe(System.out::println);<span class="comment">// 简易订阅</span></span><br></pre></td></tr></table></figure><h2 id="中间操作使用不同线程"><a href="#中间操作使用不同线程" class="headerlink" title="中间操作使用不同线程"></a>中间操作使用不同线程</h2><p>中间操作和消费者使用不同线程池</p><p><img src="https://upload-images.jianshu.io/upload_images/17243965-013dea61d779a5f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p>创建线程池操作</p><ul><li><code>Schedulers.computation()</code>：和cup数量相关，cpu密集型使用</li><li><code>Schedulers.io()</code>：io操作相关的操作</li><li><code>Schedulers.newThread()</code>：直接创建线程，一般不用</li><li><code>Schedulers.from()</code>：使用自定义线程池<br>出现多个<code>subscribeon</code>以第一个为准，即被观察者的线程池只有一个。</li></ul><h2 id="应用于业务代码"><a href="#应用于业务代码" class="headerlink" title="应用于业务代码"></a>应用于业务代码</h2><ul><li><code>Controller</code>层直接返回Observable，<code>Spring</code>会自动订阅该生产者(RxJava的)</li><li>可以节约连接池线程，连接池不用处理业务代码。</li></ul><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>减少代码量</li><li>简化线程操作，几乎不用考虑如何创建操作线程</li></ol><h1 id="Spring-Reactor"><a href="#Spring-Reactor" class="headerlink" title="Spring Reactor"></a>Spring Reactor</h1><h2 id="DeferredResult"><a href="#DeferredResult" class="headerlink" title="DeferredResult"></a>DeferredResult</h2><ul><li>基于<code>Servlet3.0</code>的异步<code>Servlet</code>(设置<code>@Servlet(asyncSupported=true)</code>)</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/17243965-d0df7aad0bdac06e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>Controller</code>层直接返回<code>DeferredResult</code></li><li><code>Servlet</code>进入两次，一次是请求进入，然后调用业务线程。自身直接返回（连接线程返回线程池）。业务线程执行完通过<code>DeferredResult</code>再次找到<code>Servlet</code>获取连接对象，返回信息</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 订阅发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-Integration-Channel</title>
      <link href="/2022/03/20/Spring-Integration-Channel/"/>
      <url>/2022/03/20/Spring-Integration-Channel/</url>
      
        <content type="html"><![CDATA[<p>文章字数：377,阅读全文大约需要1分钟</p><blockquote><p><code>channel</code>最主要的作用就是作为一个传输<code>Message</code>的管道，<code>Spring Integration</code>中实现了各种各样的<code>channel</code>可以满足不同的需求。</p></blockquote><h1 id="一、顶级接口"><a href="#一、顶级接口" class="headerlink" title="一、顶级接口"></a>一、顶级接口</h1><ol><li><code>MessageChannel</code>: 该接口中没有提供从<code>channel</code>中接收的方法，因为接收的方法被两个子接口表示。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">send</span><span class="params">(Message&lt;?&gt; message)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">sned</span><span class="params">(Message&lt;?&gt; message, <span class="keyword">long</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>PollableChannel</code>: 接收的子接口，具备轮询获取消息的能力。要求消息消费者或者框架周期性检测消息是否可达。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Message&lt;?&gt; receive();</span><br><span class="line">Message&lt;?&gt; receive(<span class="keyword">long</span> timeout);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>SubscribableChannel</code>: 发送消息给订阅了<code>MessageHanlder</code>的订阅者</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">subscribe</span><span class="params">(MessageHandler handler)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">unsubscribe</span><span class="params">(MessageHandler hanlder)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="二、常用channel"><a href="#二、常用channel" class="headerlink" title="二、常用channel"></a>二、常用channel</h1><ol><li><p><code>DirectChannel</code>: 默认的<code>Spring Integration</code>默认的消息通道，它允许将消息发送给一个订阅者，然后阻碍发送直到消息被接收。同步发送。</p></li><li><p><code>QueueChannel</code>: 允许消息接收者轮询获得消息，用一个队列<code>queue</code>接收消息，队列的容量大小可配置。异步发送</p></li><li><p><code>PublishSubscribeChannel</code>: 允许广播消息给所有订阅者，不支持缓存即<code>Quenue</code></p></li><li><p><code>PriorityChannel</code>: 可以按照优先级将数据存储到队列</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 订阅发布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBean循环依赖及解决</title>
      <link href="/2022/03/20/SpringBean%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%8F%8A%E8%A7%A3%E5%86%B3.md/"/>
      <url>/2022/03/20/SpringBean%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E5%8F%8A%E8%A7%A3%E5%86%B3.md/</url>
      
        <content type="html"><![CDATA[<p>文章字数：770,阅读全文大约需要3分钟</p><h1 id="一、什么是循环依赖"><a href="#一、什么是循环依赖" class="headerlink" title="一、什么是循环依赖"></a>一、什么是循环依赖</h1><p>循环依赖就是两个或者以上的<code>bean</code>相互持有对方，形成了一个依赖闭环。</p><p>循环依赖的场景有</p><ol><li>构造器的循环依赖</li><li><code>field</code>属性的循环依赖</li></ol><h1 id="二、检测循环依赖"><a href="#二、检测循环依赖" class="headerlink" title="二、检测循环依赖"></a>二、检测循环依赖</h1><ol><li><code>Spring</code>创建<code>Bean</code>时是递归创建的，即发现属性有依赖的<code>Bean</code>就回去创建属性对象的<code>Bean</code>。</li><li>检测循环依赖就是在创建<code>Bean</code>的时候做个标记，当再次递归调用创建的时候，发现有创建的标记就知道了</li></ol><h1 id="三、解决循环依赖"><a href="#三、解决循环依赖" class="headerlink" title="三、解决循环依赖"></a>三、解决循环依赖</h1><ol><li><p>三级缓存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** 存放单例bean 1级*&#x2F;</span><br><span class="line">private final Map&lt;String, Object&gt; singletonObjects &#x3D; new ConcurrentHashMap&lt;String, Object&gt;(256);</span><br><span class="line"></span><br><span class="line">&#x2F;** 存放初始化，但还没赋值的bean的工厂（存放函数接口、钩子函数等） 3级*&#x2F;</span><br><span class="line">private final Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories &#x3D; new HashMap&lt;String, ObjectFactory&lt;?&gt;&gt;(16);</span><br><span class="line"></span><br><span class="line">&#x2F;** 存放提前曝光的bean 2级*&#x2F;</span><br><span class="line">private final Map&lt;String, Object&gt; earlySingletonObjects &#x3D; new HashMap&lt;String, Object&gt;(16);</span><br></pre></td></tr></table></figure></li><li><p>bean实例化过程</p></li></ol><ul><li>createBeanInstance实例化bean</li><li>populateBean填充属性</li><li>initializeBean初始化bean</li></ul><p>依赖循环发送在实例化bean(调用构造方法)和填充属性（递归创建bean）的时候</p><ol start="3"><li>创建流程</li></ol><ul><li>执行构造函数，创建一个未初始化的类</li><li>将初始化的类暴露到<code>singletonFactories</code>中，并标记已创建(加入<code>registeredSingletons</code>)</li><li>填充属性，属性中包含其他<code>bean</code>则递归进入创建流程</li><li>递归创建的属性假如也依赖最早的类，则会先尝试获取它</li><li>尝试在一级缓存（<code>singletonObjects</code>）获取</li><li>当获取不到，且改<code>bean</code>被标记过正在创建尝试在二级缓存(<code>earlySingletonObjects</code>)中获取提前暴露的类</li><li>找不到则从三级缓存(<code>singletonFactories</code>)获取。</li><li>此时就找到了创建但未初始化的类</li><li>找到后将三级缓存中的类工厂移除，将类添加到提前曝光的二级缓存中<code>earlySingletonObjects</code></li><li>然后返回本身，此时最初的类获取到属性的<code>bean</code>后也能创建成功了。</li><li><h1 id="四、三级缓存的意义"><a href="#四、三级缓存的意义" class="headerlink" title="四、三级缓存的意义"></a>四、三级缓存的意义</h1></li></ul><ol><li>二级缓存也可以解决循环依赖，一个存正常的单例，一个存提前曝光的类</li><li>三级缓存主要是在曝光且提前引用时能够做一下拓展操作，二级缓存只能知道提前曝光，三级缓存转移到二级缓存才是曝光并提前引用</li></ol><ul><li>每个对象创建之后会放在三级缓存中，暴露自己的构造工厂</li><li>然后执行初始化方法，填充需要的依赖。</li><li>递归创建依赖对象时，如果发现需要注入的对象是之前递归过程中创建并初始化的（二级缓存中的），或者是创建未初始化的（三级缓存中），就从缓存中拿出来</li><li>如果是从三级缓存拿的，从三级缓存中移除，放到二级缓存中</li></ul><p>关键词: <code>java</code>, <code>spring</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBean生命周期</title>
      <link href="/2022/03/20/SpringBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/03/20/SpringBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：122,阅读全文大约需要1分钟</p><ol><li><code>bean</code>实例化</li><li><code>bean</code>属性注入</li><li>调用<code>BeanNameAware.setBeanName()</code></li><li>调用<code>BeanClassLoaderAware.setBeanClassLoader()</code></li><li>调用<code>BeanFactoryAware.setBeanFactory()</code></li><li>调用<code>EnvironmentAware.setEnviroment()</code></li><li>调用<code>EmbeddedValueResolverAware.setEmbedValueResolver()</code></li><li>调用<code>ResourceLoaderAware.setResourceLoader()</code></li><li>调用<code>ApplicationEventPublisherAware.setApplicationEventPublisher()</code></li><li>调用<code>MessageSourceAware.setMessageSource()</code></li><li>调用<code>ApplicationContextAware.setApplicationContext()</code></li><li>如果是<code>WebApplicationContext</code>,调用<code>ServletContextAware.setServletContext()</code></li><li>调用<code>BeanPostProcessor</code>初始化方法</li><li>调用<code>InitializingBean.afterPropertitesSet()</code></li><li>调用自定义初始化方法</li><li>调用<code>BeanPostProcessor</code>初始化之后方法</li><li>结束</li></ol><p>销毁环境</p><ol><li>调用<code>DisposableBean.destory()</code></li><li>调用自定义销毁功能</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> ioc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot国际化</title>
      <link href="/2022/03/20/SpringBoot%E5%9B%BD%E9%99%85%E5%8C%96/"/>
      <url>/2022/03/20/SpringBoot%E5%9B%BD%E9%99%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>文章字数：191,阅读全文大约需要1分钟</p><blockquote><p><a href="https://www.jianshu.com/p/e2eae08f3255" target="_blank" rel="noopener">https://www.jianshu.com/p/e2eae08f3255</a></p></blockquote><h1 id="配置参数-bean"><a href="#配置参数-bean" class="headerlink" title="配置参数(bean)"></a>配置参数(bean)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocaleConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认解析器 其中locale表示默认语言</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LocaleResolver <span class="title">localeResolver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SessionLocaleResolver localeResolver = <span class="keyword">new</span> SessionLocaleResolver();</span><br><span class="line">        <span class="comment">//设置默认英语</span></span><br><span class="line">        localeResolver.setDefaultLocale(Locale.US);</span><br><span class="line">        <span class="comment">//注入Bean</span></span><br><span class="line">        <span class="keyword">return</span> localeResolver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认拦截器 其中lang表示切换语言的参数名</span></span><br><span class="line"><span class="comment">     * 例如:   ?lang=zh_CN</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">localeInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurer() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">                LocaleChangeInterceptor localeInterceptor = <span class="keyword">new</span> LocaleChangeInterceptor();</span><br><span class="line">                localeInterceptor.setParamName(<span class="string">"lang"</span>);</span><br><span class="line">                registry.addInterceptor(localeInterceptor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置国际化文件存放的地方</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">messages:</span></span><br><span class="line">        <span class="attr">basename:</span> <span class="string">static/i18n/messages</span>  <span class="comment">#相对路径，开头没有/</span></span><br></pre></td></tr></table></figure><p><code>classpath:/static/i18n</code>目录中添加文件:</p><ol><li>默认文件<code>messages.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">默认翻译</span><br></pre></td></tr></table></figure></li><li>美式英语<code>messages_en_US.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.title&#x3D;User Login</span><br></pre></td></tr></table></figure></li><li>简体中文<code>messages_zh_CN.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user.title&#x3D;用户登陆</span><br></pre></td></tr></table></figure></li></ol><h1 id="后端使用国际化"><a href="#后端使用国际化" class="headerlink" title="后端使用国际化"></a>后端使用国际化</h1><ul><li>编写通用国际化工具类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageUtils</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> MessageSource messageSource;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MessageUtils</span><span class="params">(MessageSource messageSource)</span> </span>&#123;</span><br><span class="line">        MessageUtils.messageSource = messageSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单个国际化翻译值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span><span class="params">(String msgKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> messageSource.getMessage(msgKey,  <span class="keyword">null</span>, LocaleContextHolder.getLocale());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> msgKey;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="freeMarker中获取"><a href="#freeMarker中获取" class="headerlink" title="freeMarker中获取"></a>freeMarker中获取</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!DOCTYPE html&gt;</span><br><span class="line"> &lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">    &lt;!--引入--&gt;</span><br><span class="line">     &lt;#import &quot;spring.ftl&quot; as spring&gt;</span><br><span class="line">     &lt;#assign arg &#x3D; [&quot;AAA&quot;,&quot;张三&quot;]&gt;</span><br><span class="line">     &lt;title&gt;&lt;@spring.messageArgs &quot;title&quot; ,arg &#x2F;&gt;&lt;&#x2F;title&gt;</span><br><span class="line">     &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;br&#x2F;&gt;</span><br><span class="line"> &lt;a class&#x3D;&quot;changeLang&quot; href&#x3D;&quot;javascript:void(0);&quot;&gt;english&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;</span><br><span class="line"> &lt;a class&#x3D;&quot;changeLang&quot; href&#x3D;&quot;javascript:void(0);&quot;&gt;中文&lt;&#x2F;a&gt;&lt;br&#x2F;&gt;</span><br><span class="line"> &lt;!--使用--&gt;</span><br><span class="line"> &lt;@spring.message code&#x3D;&quot;user.loginname&quot;&#x2F;&gt;&lt;br&#x2F;&gt;</span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line"> &lt;script src&#x3D;&quot;$&#123;request.contextPath&#125;&#x2F;static&#x2F;jquery.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">     $(&quot;.changeLang&quot;).on(&quot;click&quot;, function () &#123;</span><br><span class="line">         switch ($(this).text()) &#123;</span><br><span class="line">             case &quot;中文&quot;: &#123;</span><br><span class="line">                 window.location.href &#x3D; &quot;index?_lang&#x3D;zh_CN&quot;;</span><br><span class="line">                 break;</span><br><span class="line">             &#125;</span><br><span class="line">             case &quot;english&quot;: &#123;</span><br><span class="line">                 window.location.href &#x3D; &quot;index?_lang&#x3D;en_US&quot;;</span><br><span class="line">                 break;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
            <tag> 国际化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Mail</title>
      <link href="/2022/03/20/SpringBoot%E6%95%B4%E5%90%88Mail/"/>
      <url>/2022/03/20/SpringBoot%E6%95%B4%E5%90%88Mail/</url>
      
        <content type="html"><![CDATA[<p>文章字数：298,阅读全文大约需要1分钟</p><blockquote><p>Spring中默认有starter实现类Mail</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-mail&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-freemarker&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># JavaMailSender 邮件发送的配置</span><br><span class="line">spring.mail.host&#x3D;smtp.qq.com</span><br><span class="line">spring.mail.username&#x3D;用户qq邮箱</span><br><span class="line">#QQ邮箱的授权码</span><br><span class="line">spring.mail.password&#x3D;密码</span><br><span class="line">spring.mail.properties.mail.smtp.auth&#x3D;true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.enable&#x3D;true</span><br><span class="line">spring.mail.properties.mail.smtp.starttls.required&#x3D;true</span><br><span class="line">spring.mail.default-encoding&#x3D;UTF-8</span><br></pre></td></tr></table></figure><h1 id="简单邮件"><a href="#简单邮件" class="headerlink" title="简单邮件"></a>简单邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        SimpleMaileMessage simpleMailMessage = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        simpleMailMessage .setFrom(<span class="string">"sendFrom@qq.com"</span>);</span><br><span class="line">        simpleMailMessage .setTo(<span class="string">"sendTo@qq.com"</span>);</span><br><span class="line">        simpleMailMessage.setSubject(<span class="string">"主题"</span>);</span><br><span class="line">        simpleMailMessage.setText(<span class="string">"内容"</span>);</span><br><span class="line">        javaMailSender.send(simpleMailMessage);<span class="comment">//发送</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        logger.error(<span class="string">"发送失败"</span>,e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义发件人名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String nick = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                nick = javax.mail.internet.MimeUtility.encodeText(<span class="string">"张三"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 设置发件人</span></span><br><span class="line">            mimeMsg.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"sendFrom@qq.com"</span>, nick));</span><br></pre></td></tr></table></figure><h1 id="html格式邮件"><a href="#html格式邮件" class="headerlink" title="html格式邮件"></a>html格式邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHTMLMail</span><span class="params">(MailBean mailBean)</span> </span>&#123;</span><br><span class="line">        MimeMessage mimeMailMessage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mimeMailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMailMessage, <span class="keyword">true</span>);</span><br><span class="line">            mimeMessageHelper.setFrom(MAIL_SENDER);</span><br><span class="line">            mimeMessageHelper.setTo(mailBean.getRecipient());</span><br><span class="line">            mimeMessageHelper.setSubject(mailBean.getSubject());</span><br><span class="line">            mimeMessageHelper.setText(<span class="string">"&lt;h1&gt;hello&lt;/h1&gt;"</span>, <span class="keyword">true</span>);</span><br><span class="line">            javaMailSender.send(mimeMailMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"邮件发送失败"</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="带附件格式的邮件"><a href="#带附件格式的邮件" class="headerlink" title="带附件格式的邮件"></a>带附件格式的邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentMail</span><span class="params">(MailBean mailBean)</span> </span>&#123;</span><br><span class="line">       MimeMessage mimeMailMessage = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           mimeMailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">           MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMailMessage, <span class="keyword">true</span>);</span><br><span class="line">           mimeMessageHelper.setFrom(MAIL_SENDER);</span><br><span class="line">           mimeMessageHelper.setTo(mailBean.getRecipient());</span><br><span class="line">           mimeMessageHelper.setSubject(mailBean.getSubject());</span><br><span class="line">           mimeMessageHelper.setText(mailBean.getContent());</span><br><span class="line">           <span class="comment">//文件路径  spring的FileSystemResource,使用绝对路径访问文件资源</span></span><br><span class="line">           FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">"src/main/resources/static/image/mail.png"</span>));</span><br><span class="line">           mimeMessageHelper.addAttachment(<span class="string">"mail.png"</span>, file);</span><br><span class="line"></span><br><span class="line">           javaMailSender.send(mimeMailMessage);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           logger.error(<span class="string">"邮件发送失败"</span>, e.getMessage());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="发送带静态资源的邮件"><a href="#发送带静态资源的邮件" class="headerlink" title="发送带静态资源的邮件"></a>发送带静态资源的邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInlineMail</span><span class="params">(MailBean mailBean)</span> </span>&#123;</span><br><span class="line">    MimeMessage mimeMailMessage = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        mimeMailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMailMessage, <span class="keyword">true</span>);</span><br><span class="line">        mimeMessageHelper.setFrom(MAIL_SENDER);</span><br><span class="line">        mimeMessageHelper.setTo(mailBean.getRecipient());</span><br><span class="line">        mimeMessageHelper.setSubject(mailBean.getSubject());</span><br><span class="line">        mimeMessageHelper.setText(<span class="string">"&lt;html&gt;&lt;body&gt;带静态资源的邮件内容，这个一张IDEA配置的照片:&lt;img src='cid:picture' /&gt;&lt;/body&gt;&lt;/html&gt;"</span>, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line">        FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(<span class="string">"src/main/resources/static/image/mail.png"</span>));</span><br><span class="line">        mimeMessageHelper.addInline(<span class="string">"picture"</span>, file);</span><br><span class="line"></span><br><span class="line">        javaMailSender.send(mimeMailMessage);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        logger.error(<span class="string">"邮件发送失败"</span>, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基于Freemarker的模板邮件"><a href="#基于Freemarker的模板邮件" class="headerlink" title="基于Freemarker的模板邮件"></a>基于Freemarker的模板邮件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTemplateMail</span><span class="params">(MailBean mailBean)</span> </span>&#123;</span><br><span class="line">        MimeMessage mimeMailMessage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mimeMailMessage = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper mimeMessageHelper = <span class="keyword">new</span> MimeMessageHelper(mimeMailMessage, <span class="keyword">true</span>);</span><br><span class="line">            mimeMessageHelper.setFrom(MAIL_SENDER);</span><br><span class="line">            mimeMessageHelper.setTo(mailBean.getRecipient());</span><br><span class="line">            mimeMessageHelper.setSubject(mailBean.getSubject());</span><br><span class="line"></span><br><span class="line">            Map&lt;String, Object&gt; model = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            model.put(<span class="string">"content"</span>, mailBean.getContent());</span><br><span class="line">            model.put(<span class="string">"title"</span>, <span class="string">"标题Mail中使用了FreeMarker"</span>);</span><br><span class="line">            Template template = configuration.getTemplate(<span class="string">"mail.ftl"</span>);</span><br><span class="line">            String text = FreeMarkerTemplateUtils.processTemplateIntoString(template, model);</span><br><span class="line">            mimeMessageHelper.setText(text, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">            javaMailSender.send(mimeMailMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"邮件发送失败"</span>, e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="动态添加邮箱配置信息"><a href="#动态添加邮箱配置信息" class="headerlink" title="动态添加邮箱配置信息"></a>动态添加邮箱配置信息</h1><p>和之前使用接口<code>javaMailSender</code>不同，这次使用的是接口的实现类。<br>使用<code>JavaMailSenderImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">JavaMailSenderImpl mailSender = <span class="keyword">new</span> JavaMailSenderImpl();<span class="comment">//直接生产一个实例</span></span><br><span class="line">String users[] = &#123;<span class="string">"xxxxx@qq.com"</span>,<span class="string">"xxxxx@126.com"</span>&#125;;</span><br><span class="line">mailSender.setHost(<span class="string">"smtp.126.com"</span>);<span class="comment">//动态添加配置</span></span><br><span class="line">mailSender.setPassword(<span class="string">"xxxxx"</span>);</span><br><span class="line">mailSender.setPort(<span class="number">25</span>);</span><br><span class="line">mailSender.setProtocol(<span class="string">"smtp"</span>);</span><br><span class="line">mailSender.setUsername(<span class="string">"xxxxx"</span>);</span><br><span class="line">SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">message.setFrom(<span class="string">"xxxxxxx"</span>);</span><br><span class="line">message.setTo(users); <span class="comment">// 使用数组的形式还可以群发</span></span><br><span class="line">message.setSubject(<span class="string">"羽毛球比赛"</span>);</span><br><span class="line">message.setText(<span class="string">"报名参加羽毛球赛"</span>);</span><br><span class="line">mailSender.send(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot常用注解</title>
      <link href="/2022/03/20/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/03/20/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>文章字数：835,阅读全文大约需要3分钟</p><h1 id="一、配置相关"><a href="#一、配置相关" class="headerlink" title="一、配置相关"></a>一、配置相关</h1><p>@springBootApplication<br>通常在主类上，包含:</p><ul><li><code>@Configuration</code>:表明是配置文件</li><li><code>@EnableAutoConfiguration</code>:根据依赖自动配置springBoot</li><li><code>@ComponentScan</code>:告诉Spring从哪里找bean(注解的包及下级包)</li></ul><p>@Profiles<br>隔离应用程序配置，让配置在特定环境生效。<br>标注于@Component 或者 @Configuration</p><h1 id="二、注入Bean"><a href="#二、注入Bean" class="headerlink" title="二、注入Bean"></a>二、注入Bean</h1><p>@Repository<br>标记数据库访问组件DAO。</p><p>@Service<br>标记业务层组件。</p><p>@RestController<br>标记控制层组件，包含：</p><ul><li><code>@Controller</code>:标记控制层组件</li><li><code>@ResponseBody</code>:根据前端<code>dataType</code>将返回的对象转换成相应格式<code>json</code> 、<code>xml</code></li></ul><p>@Component<br>泛指组件，不好归类时标记</p><p>@Bean<br><strong>在方法上使用</strong>，产生一个bean,交给spring</p><h1 id="三、使用Bean"><a href="#三、使用Bean" class="headerlink" title="三、使用Bean"></a>三、使用Bean</h1><p>@AutoWired<br>自动注入，可以作用于成员变量、方法、构造方法。（required=false）找不到bean也不报错</p><p>@Qualifier<br>当AutoWired有多个同类型bean时(“name”)指定</p><p>@Resource(name=”name”,type=”type”)：<br>没有括号内内容的话，默认byName。与@Autowired干类似的事。</p><h1 id="四、网络请求相关"><a href="#四、网络请求相关" class="headerlink" title="四、网络请求相关"></a>四、网络请求相关</h1><p>@RequestMapping<br>处理请求的地址映射，可在类与方法上。类上代表是方法上的父路径。<br>六个属性：</p><ul><li>params:指定request中必须有某参数</li><li>headers:request中必须有指定的header</li><li>value:指定请求实际地址</li><li>method:指定类型，GET、POST….</li><li>consumes:指定处理提交类型(Content-Type),application/json,test/html等</li></ul><p>@RequestParam<br><strong>方法的参数前</strong>,获取指定名称的参数并传入形参(键值对类型的参数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public User getUser(@RequestParam(value &#x3D; &quot;id&quot;, required &#x3D; false) Integer id)</span><br></pre></td></tr></table></figure><p><code>required=false</code>表示该值可不存在，可为空。也可以作用于<code>@Autowired</code>表示该bean不是必须的，可不存在，可为空。</p><p>@PathVariable<br>路径变量，获取RequestMapping中占位符的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/&#123;uid&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserById</span><span class="params">(@PathVariable Integer id)</span></span>&#123;</span><br><span class="line"><span class="comment">//do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestBody<br>可以接收json格式的数据(应该可省略，直接写实体类目前可以直接转换)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public DbBook findBookByName(@RequestBody DbBook book)</span><br></pre></td></tr></table></figure><p>接收字符串（不能组成一个实体类，所以不能用实体类接收的情况）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public void deleteBookById(@RequestBody Map&lt;String, String&gt; map)</span><br></pre></td></tr></table></figure><p>@RequestBody接收不同的对象</p><ol><li>创建一个新的entity，将两个entity都进去。</li><li>用Map&lt;String, Object&gt;接受request body，自己反序列化到各个entity中。</li><li>实现自己的HandlerMethodArgumentResolver</li></ol><p>@ModelAttribute<br>和实体类绑定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public String modelAttributeTest(@ModelAttribute User user)</span><br></pre></td></tr></table></figure><blockquote><p>注:multipart/form-data（二进制文件）@RequestBody不能处理这种格式的数据。<br>application/json、application/xml等格式的数据，必须使用@RequestBody来处理。</p></blockquote><h1 id="五、全局异常处理"><a href="#五、全局异常处理" class="headerlink" title="五、全局异常处理"></a>五、全局异常处理</h1><p>@ControllerAdvice<br>control增强器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.bind.WebDataBinder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * controller 增强器,作用于所有有效的control</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应用到所有<span class="doctag">@RequestMapping</span>注解方法，在其执行之前初始化数据绑定器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> binder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InitBinder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initBinder</span><span class="params">(WebDataBinder binder)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 把值绑定到Model中，使全局<span class="doctag">@RequestMapping</span>可以获取到该值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAttributes</span><span class="params">(Model model)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"author"</span>, <span class="string">"Magical Sam"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全局异常捕捉处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">Map</span> <span class="title">errorHandler</span>(<span class="title">Exception</span> <span class="title">ex</span>) </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"code"</span>, <span class="number">100</span>);</span><br><span class="line">        map.put(<span class="string">"msg"</span>, ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@ExceptionHandler（Exception.class）：<br>标注在方法上，遇到这个异常就执行以下方法</p><h1 id="六、JPA"><a href="#六、JPA" class="headerlink" title="六、JPA"></a>六、JPA</h1><ul><li>建表时的附加语句，可以用来指定类型，默认值等</li></ul><ol><li>tinyint类型的默认值<code>@Column(name=&quot;state&quot;,columnDefinition=&quot;tinyint default 0&quot;)</code></li><li>varchar(128),非空<code>@Column(name = &quot;Email&quot;,columnDefinition=&quot;varchar(128) not null&quot;)</code></li></ol><p>当String类型不够用时可以指定属性在数据库中的类型为<code>text</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Column(name &#x3D; &quot;Remark&quot;,columnDefinition&#x3D;&quot;text&quot;)</span><br></pre></td></tr></table></figure><ul><li><p>uuid,见jpa主键生成策略</p></li><li><p>query执行sql语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> @Query(&quot;from User u where u.name&#x3D;:name&quot;)</span><br><span class="line">    User findUser(@Param(&quot;name&quot;) String name);</span><br><span class="line"></span><br><span class="line">@Query(&quot;select * from User u where u.name like :first and u.age&gt;:age&quot;)</span><br><span class="line">List&lt;User&gt; findByNameLikeAndAgeGreaterThan(@Param(&quot;first&quot;)String firstName,@Param(&quot;age&quot;)Integer age);</span><br></pre></td></tr></table></figure></li></ul><h1 id="七、值注入"><a href="#七、值注入" class="headerlink" title="七、值注入"></a>七、值注入</h1><ul><li><p><code>@Value(&quot;${key}&quot;)</code></p><blockquote><p>通过key注入配置文件中的value</p></blockquote></li><li><p><code>@Value(&quot;${myValue:#{null}}&quot;)</code>注入非必填的<br><code>@Value</code> 想要非必填 required false</p></li><li><p>set上加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;key&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeyvalue</span><span class="params">(String keyvalue)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.keyvalue=keyvalue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String text;</span><br><span class="line">    Message(<span class="meta">@Value</span>(<span class="string">"$&#123;app.text&#125;"</span>) String text)&#123;</span><br><span class="line">        <span class="keyword">this</span>.text = text;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Mybatis</title>
      <link href="/2022/03/20/SpringBoot%E6%95%B4%E5%90%88Mybatis/"/>
      <url>/2022/03/20/SpringBoot%E6%95%B4%E5%90%88Mybatis/</url>
      
        <content type="html"><![CDATA[<p>文章字数：153,阅读全文大约需要1分钟</p><h1 id="一、引入"><a href="#一、引入" class="headerlink" title="一、引入"></a>一、引入</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql数据库驱动--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h1><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#数据库连接配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://47.107.105.158:3306/test?characterEncoding=utf-8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis的相关配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#mapper配置文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.demo.mybatis.model</span></span><br><span class="line">  <span class="comment">#开启驼峰命名</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h1 id="三、实体类"><a href="#三、实体类" class="headerlink" title="三、实体类"></a>三、实体类</h1><ul><li>位置在<code>type-aliases-package</code>配置的包中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//...get set方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="四、DAO层"><a href="#四、DAO层" class="headerlink" title="四、DAO层"></a>四、DAO层</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>mapper-locations</code>中配置的位置编写和接口对应的映射表</li></ul><p><code>UserMapper.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.demo.mybatis.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findAll"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        SELECT * FROM USER</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="五、使用"><a href="#五、使用" class="headerlink" title="五、使用"></a>五、使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 注入即可直接使用</span><br><span class="line">@Autowired</span><br><span class="line">private UserMapper  userMapper;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Swagger2</title>
      <link href="/2022/03/20/SpringBoot%E6%95%B4%E5%90%88Swagger2/"/>
      <url>/2022/03/20/SpringBoot%E6%95%B4%E5%90%88Swagger2/</url>
      
        <content type="html"><![CDATA[<p>文章字数：334,阅读全文大约需要1分钟</p><blockquote><p>swagger2是一款帮助我们生成restful接口细节记录信息的工具。</p></blockquote><h1 id="引入Swagger2"><a href="#引入Swagger2" class="headerlink" title="引入Swagger2"></a>引入Swagger2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="创建配置类"><a href="#创建配置类" class="headerlink" title="创建配置类"></a>创建配置类</h1><p><code>Application.java</code>的同级创建<code>Swagger2.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> <span class="comment">//标注为配置类</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2 <span class="comment">//启动Swagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.didispace.web"</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"标题"</span>)</span><br><span class="line">                .description(<span class="string">"介绍"</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">"url"</span>)</span><br><span class="line">                .contact(<span class="string">"name"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="丰富文档内容"><a href="#丰富文档内容" class="headerlink" title="丰富文档内容"></a>丰富文档内容</h1><ul><li><code>@ApiOperation</code>给api增加说明</li><li><code>@ApiImplicitParams</code>包裹多个参数注解信息</li><li><code>@ApiImplicitParam</code>参数注解信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/users"</span>)     <span class="comment">// 通过这里配置使下面的映射都在/users下，可去除</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;Long, User&gt; users = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, User&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户列表"</span>, notes=<span class="string">""</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;User&gt; r = <span class="keyword">new</span> ArrayList&lt;User&gt;(users.values());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建用户"</span>, notes=<span class="string">"根据User对象创建用户"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</span><br><span class="line">        users.put(user.getId(), user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取用户详细信息"</span>, notes=<span class="string">"根据url的id来获取用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> users.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新用户详细信息"</span>, notes=<span class="string">"根据url的id来指定更新对象，并根据传过来的user信息来更新用户详细信息"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>),</span><br><span class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"user"</span>, value = <span class="string">"用户详细实体user"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"User"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody User user)</span> </span>&#123;</span><br><span class="line">        User u = users.get(id);</span><br><span class="line">        u.setName(user.getName());</span><br><span class="line">        u.setAge(user.getAge());</span><br><span class="line">        users.put(id, u);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除用户"</span>, notes=<span class="string">"根据url的id来指定删除对象"</span>)</span><br><span class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"用户ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</span><br><span class="line">        users.remove(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动springBoot，访问<a href="http://localhost:8080/swagger-ui.html" target="_blank" rel="noopener">http://localhost:8080/swagger-ui.html</a>就能看到详细信息。</p><h1 id="调试API"><a href="#调试API" class="headerlink" title="调试API"></a>调试API</h1><p>进入Swagger2的web界面，点击进入api,里面有调试api的按钮，并且黄色区域有参数的模板。</p><h1 id="生产环境禁用"><a href="#生产环境禁用" class="headerlink" title="生产环境禁用"></a>生产环境禁用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swagger2:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot文件上传</title>
      <link href="/2022/03/20/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/03/20/SpringBoot%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：39,阅读全文大约需要1分钟</p><h1 id="简便方法"><a href="#简便方法" class="headerlink" title="简便方法"></a>简便方法</h1><ol><li>使用<code>file.transferTo(&quot;地址/文件名&quot;)</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file) </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">file.transferTo(<span class="keyword">new</span> File(<span class="string">"/file/upload/"</span> + file.getName()));</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>IOUTils<br><code>import org.apache.commons.io.IOUtils;</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile file)</span>&#123;</span><br><span class="line">    file file1 = <span class="keyword">new</span> File(<span class="string">"c:\\xxx\\aaa"</span>,<span class="string">"a.txt"</span>);</span><br><span class="line">    <span class="comment">//原始文件输入流</span></span><br><span class="line">    InputStream inputStream = file.getInputStream();</span><br><span class="line">    <span class="comment">//新文件输出流</span></span><br><span class="line">    FileOutputStream fosm = <span class="keyword">new</span> FileOutputStream (file1);</span><br><span class="line">IOUtils.copy(inputStream,fosm );</span><br><span class="line">inputStream.close();</span><br><span class="line">fosm .close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot的tomcat配置</title>
      <link href="/2022/03/20/SpringBoot%E7%9A%84tomcat%E9%85%8D%E7%BD%AE/"/>
      <url>/2022/03/20/SpringBoot%E7%9A%84tomcat%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>文章字数：16,阅读全文大约需要1分钟<br><code>spring</code>加载服务相关信息的类<br><code>org.springframework.boot.autoconfigure.web.ServerProperties.class</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot集成MQTT</title>
      <link href="/2022/03/20/SpringBoot%E9%9B%86%E6%88%90MQTT/"/>
      <url>/2022/03/20/SpringBoot%E9%9B%86%E6%88%90MQTT/</url>
      
        <content type="html"><![CDATA[<p>文章字数：282,阅读全文大约需要1分钟</p><blockquote><p>使用<code>SpringBoot</code>进行<code>MQTT</code>的推送和订阅主题。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><p><code>jdk1.8</code></p></li><li><p><code>maven</code></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-integration&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.integration&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-integration-stream&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.integration&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-integration-mqtt&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.eclipse.paho.client.mqttv3.MqttConnectOptions;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.annotation.IntegrationComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.annotation.ServiceActivator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.channel.DirectChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.endpoint.MessageProducerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.core.DefaultMqttPahoClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.core.MqttPahoClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.inbound.MqttPahoMessageDrivenChannelAdapter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.outbound.MqttPahoMessageHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.integration.mqtt.support.DefaultPahoMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageChannel;</span><br><span class="line"><span class="keyword">import</span> org.springframework.messaging.MessageHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// spring Integration组件扫描，MessageChannel使用的就是这个组件</span></span><br><span class="line"><span class="meta">@IntegrationComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqttConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String username = <span class="string">"userName"</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">"password"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mqtt 服务地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mqtt.url&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String hostUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设备id,用来区分不同的设备连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mqtt.client.id&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String clientId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅那个主题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;mqtt.topic&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String defaultTopic;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建连接的工厂</span></span><br><span class="line"><span class="comment">     * 用于构建MessageHandler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MqttPahoClientFactory <span class="title">mqttClientFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultMqttPahoClientFactory factory = <span class="keyword">new</span> DefaultMqttPahoClientFactory();</span><br><span class="line">        MqttConnectOptions mqttConnectOptions=<span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">        <span class="comment">// mqtt服务器url</span></span><br><span class="line">        mqttConnectOptions.setServerURIs(<span class="keyword">new</span> String[]&#123;hostUrl&#125;);</span><br><span class="line">        <span class="comment">// 设置会话心跳时间(秒)</span></span><br><span class="line">        mqttConnectOptions.setKeepAliveInterval(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 每次请求是否清空连接记录</span></span><br><span class="line">        mqttConnectOptions.setCleanSession(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 可以设置用户名密码</span></span><br><span class="line">        mqttConnectOptions.setUserName(username);</span><br><span class="line">        mqttConnectOptions.setPassword(password.toCharArray());</span><br><span class="line">        factory.setConnectionOptions(mqttConnectOptions);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* --------------------发布配置----------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 发布信息的MessageHandler</span></span><br><span class="line"><span class="comment">     * 订阅 mqttOutboundChannel 通道的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mqttClientFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ServiceActivator</span>(inputChannel = <span class="string">"mqttOutboundChannel"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageHandler <span class="title">mqttOutbound</span><span class="params">(MqttPahoClientFactory mqttClientFactory)</span> </span>&#123;</span><br><span class="line">        MqttPahoMessageHandler messageHandler = <span class="keyword">new</span> MqttPahoMessageHandler(clientId, mqttClientFactory);</span><br><span class="line">        messageHandler.setAsync(<span class="keyword">true</span>);</span><br><span class="line">        messageHandler.setDefaultQos(<span class="number">0</span>);</span><br><span class="line">        messageHandler.setDefaultRetained(<span class="keyword">false</span>);</span><br><span class="line">        messageHandler.setAsyncEvents(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> messageHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageChannel <span class="title">mqttOutboundChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* --------------------接收配置-------------------- */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理订阅的MessageHandler</span></span><br><span class="line"><span class="comment">     * 订阅 aaInboundChannel 通道的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ServiceActivator</span>(inputChannel = <span class="string">"mqttInboundChannel"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageHandler <span class="title">newHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message -&gt; System.out.println(<span class="string">"收到消息 = "</span> + message.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageChannel <span class="title">mqttInboundChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectChannel();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 订阅主题，可订阅多个主题</span></span><br><span class="line"><span class="comment">     * 2. 将主题返回的内容发布到指定的 MessageChannel 里</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mqttClientFactory</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageProducerSupport <span class="title">mqttInbound</span><span class="params">(MqttPahoClientFactory mqttClientFactory)</span> </span>&#123;</span><br><span class="line">        MqttPahoMessageDrivenChannelAdapter adapter = <span class="keyword">new</span> MqttPahoMessageDrivenChannelAdapter(clientId, mqttClientFactory, defaultTopic);</span><br><span class="line">        adapter.setConverter(<span class="keyword">new</span> DefaultPahoMessageConverter());</span><br><span class="line">        adapter.setQos(<span class="number">0</span>);</span><br><span class="line">        adapter.setOutputChannel(mqttInboundChannel());</span><br><span class="line">        <span class="keyword">return</span> adapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面配置了订阅了一个<code>DirectChannel</code>，接收到消息后推送给<code>MQTT</code><br>下面就是如何使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@MessagingGateway</span>(defaultRequestChannel = <span class="string">"mqttOutboundChannel"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MsgWriter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendToMqtt</span><span class="params">(String data)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendToMqtt</span><span class="params">(String payload,@Header(MqttHeaders.TOPIC)</span> String topic)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendToMqtt</span><span class="params">(@Header(MqttHeaders.TOPIC)</span> String topic, @<span class="title">Header</span><span class="params">(MqttHeaders.QOS)</span> <span class="keyword">int</span> qos, String payload)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC和servlet3-0</title>
      <link href="/2022/03/20/SpringMVC%E5%92%8Cservlet3-0/"/>
      <url>/2022/03/20/SpringMVC%E5%92%8Cservlet3-0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：325,阅读全文大约需要1分钟</p><h1 id="web三大组件"><a href="#web三大组件" class="headerlink" title="web三大组件"></a>web三大组件</h1><ul><li><code>Servlet</code></li><li><code>Filter</code></li><li>``</li></ul><h1 id="Servlet运行时插件"><a href="#Servlet运行时插件" class="headerlink" title="Servlet运行时插件"></a>Servlet运行时插件</h1><ul><li><p><code>META-INF/services/javax.servlet.ServletContaonerInitializer</code>创建这个文件</p></li><li><p>继承<code>ServletContainerInitializer</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@HandlesTypes</span>(value = &#123;MyService<span class="class">.<span class="keyword">class</span>&#125;) // 指定需要加载的父类</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyServletContainerInitializer</span> <span class="keyword">implements</span> <span class="title">ServletContainerInitializer</span> </span>&#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(Set&lt;Class&lt;?&gt;&gt; arg0, ServletContext arg1)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// arg0: 上面指定的父类的子类会全部传过来</span></span><br><span class="line">        <span class="comment">// arg1: 应用上下文，可以注册Servlet、Listener、Filter</span></span><br><span class="line">        arg1.addServlet(<span class="string">"servletName"</span>, <span class="keyword">new</span> xxxServlet()).addMapping(<span class="string">"/myServlet"</span>);</span><br><span class="line">        arg1.addListener(OrderListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// filter比较麻烦。。。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将类的位置写入<code>META-INF/services/javax.servlet.ServletContaonerInitializer</code></p></li><li><p><code>SpringMVC</code>中也实现了一个，需要运行前加载的类继承<code>AbstractAnnotationConfigDospatcherServletInitializer</code></p></li><li><p><code>WEB</code>容器加载之前会创建此对象，调用其中方法初始化容器以前的一个控制器<br><code>getRootConfigClasses</code>根容器（Spring的Config文件，注入bean和指定扫描位置的）<br><code>getServletConfigClasses</code>子容器（Spring的Config文件，注入bean和指定扫描位置的）<br>``</p></li></ul><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><ul><li><p>核心类是<code>DispatcherServlet</code></p></li><li><p><code>SpringMvcConfigurer</code>可以进行代替xml的配置，例如jsp根目录，静态资源目录，拦截器等</p></li></ul><h1 id="servlet3-0"><a href="#servlet3-0" class="headerlink" title="servlet3.0"></a>servlet3.0</h1><ul><li><p>异步执行业务，链接池线程直接返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/order"</span>, asyncSupported = <span class="keyword">true</span>)<span class="comment">// 开启异步</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="title">extend</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException</span>&#123;</span><br><span class="line">        AsyncContext startAsync = req.startAsync(); <span class="comment">// 打开一个异步执行</span></span><br><span class="line">        startAsync.start(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//...业务逻辑</span></span><br><span class="line">                    startAsync.complete();<span class="comment">// 通知容器，执行结束</span></span><br><span class="line">                    AsyncContext asyncContext = req.getAsyncContext();</span><br><span class="line">                    ServletResponse response = asyncContext .getReponse();</span><br><span class="line">                    response.getWriter().write(<span class="string">"res.....success"</span>);<span class="comment">// 返回结果</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e)&#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>SpringMVC</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncOrderController</span> </span>&#123;</span><br><span class="line">        <span class="meta">@RequestMapping</span>(<span class="string">"/order1"</span>)</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">order1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Callable&lt;String&gt; callable = <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> callable;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/doOrder"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> DeferredResult&lt;Object&gt; <span class="title">doOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DeferredResult&lt;Object&gt; deferredResult = <span class="keyword">new</span> DeferredResult&lt;&gt; ((<span class="keyword">long</span>) <span class="number">5000</span>, <span class="string">"fail..."</span>); <span class="comment">// 设置超时时间以及超时返回的值</span></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            deferredResult.setResult(<span class="string">"success"</span>); <span class="comment">// 调用这个就可以异步返回执行结果</span></span><br><span class="line">         &#125;).run();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中异步执行方法</title>
      <link href="/2022/03/20/Spring%E4%B8%AD%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/20/Spring%E4%B8%AD%E5%BC%82%E6%AD%A5%E6%89%A7%E8%A1%8C%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：263,阅读全文大约需要1分钟</p><blockquote><p>java程序与第三方系统交互的时候使用同步容易造成响应迟缓，解决方法除了多线程之外还可以使用Spring内置的<code>@Async</code>来解决这个问题</p></blockquote><h1 id="开启注解"><a href="#开启注解" class="headerlink" title="开启注解"></a>开启注解</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//springBoot启动类上开启</span></span><br><span class="line"><span class="meta">@ComponentScan</span>(basePackages = &#123; <span class="string">"com.xwj.controller"</span>, <span class="string">"com.xwj.service"</span> &#125;)</span><br><span class="line"><span class="meta">@EnableAsync</span> <span class="comment">//开启异步调用</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App<span class="class">.<span class="keyword">class</span>, <span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="无返回值调用"><a href="#无返回值调用" class="headerlink" title="无返回值调用"></a>无返回值调用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Async</span>  <span class="comment">//标注使用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">asyncMethodWithVoidReturnType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"获取:"</span>+ Thread.currentThread().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="有返回值"><a href="#有返回值" class="headerlink" title="有返回值"></a>有返回值</h1><p>异步方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Future接口类型的get方法可以在没有执行之前阻塞，直到获取到值</span></span><br><span class="line"><span class="meta">@Async</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Future&lt;String&gt; <span class="title">asyncMethodWithReturnType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);<span class="comment">//模拟执行耗时</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsynResult&lt;String&gt;(<span class="string">"hello"</span>);<span class="comment">//返回类型是AsynResult;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>&#123;</span><br><span class="line">    Future&lt;String&gt; future = asyncMethodWithReturnType();<span class="comment">//调用</span></span><br><span class="line">    future.get();<span class="comment">//获取结果，如果工作没结束阻塞线程。</span></span><br><span class="line">    future.cancel(<span class="keyword">boolean</span> mayInterruptIfRunning);<span class="comment">//停止任务，通过传入值判断是否可以停止。如果可以(在运行)返回true,不可以(运行结束,或无法停止)返回false。</span></span><br><span class="line">    future.isDone();<span class="comment">//判断方法是否完成</span></span><br><span class="line">    future.isCancel();<span class="comment">//是否可以被取消</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Future接口"><a href="#Future接口" class="headerlink" title="Future接口"></a>Future接口</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> InterruptedException,ExecutionException</span>&#123;</span><br><span class="line">  Callable ca1 = <span class="keyword">new</span> Callable()&#123;<span class="comment">//线程1</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"xxx"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用FutureTask包裹</span></span><br><span class="line">    FutureTask&lt;String&gt; ft1 = <span class="keyword">new</span> FutureTask&lt;String&gt;(ca1);</span><br><span class="line">    <span class="keyword">new</span> Thread(ft1).start();<span class="comment">//运行</span></span><br><span class="line">    System.out.println(ft1.get());<span class="comment">//获取值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring使用redis的订阅和发布</title>
      <link href="/2022/03/20/Spring%E4%BD%BF%E7%94%A8redis%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%91%E5%B8%83/"/>
      <url>/2022/03/20/Spring%E4%BD%BF%E7%94%A8redis%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%91%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<p>文章字数：215,阅读全文大约需要1分钟</p><h1 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h1><ul><li><code>Spring</code>提供了一个统一订阅监听的工具类，可以将多个监听复用一个连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisListenerConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">redisMessageListenerContainer</span><span class="params">(RedisConnectionFactory connectionFactory, MyListener mylistener)</span> </span>&#123;</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 添加监听</span></span><br><span class="line">        container.addMessageListener(mylistener, <span class="keyword">new</span> ChannelTopic(<span class="string">"topicName"</span>));</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如何处理消息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] messageBody = message.getBody();</span><br><span class="line">        String messageStr = <span class="keyword">new</span> String(messageBody, StandardCharsets.UTF_8);</span><br><span class="line">        System.out.println(<span class="string">"messageStr = "</span> + messageStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用适配器订阅"><a href="#使用适配器订阅" class="headerlink" title="使用适配器订阅"></a>使用适配器订阅</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisMessageListenerContainer <span class="title">redisMessageListenerContainer</span><span class="params">(RedisConnectionFactory connectionFactory, MyService myService)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化</span></span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 添加适配器，使用反射调用myService的dealMess方法处理</span></span><br><span class="line">        <span class="comment">// dealMess方法只有一个入参，参数类型和通道发送时的一致即可</span></span><br><span class="line">        MessageListenerAdapter transactionAdapter =</span><br><span class="line">            <span class="keyword">new</span> MessageListenerAdapter(myService, <span class="string">"dealMess"</span>);</span><br><span class="line">        <span class="comment">// 适配器初始化   </span></span><br><span class="line">        transactionAdapter.afterPropertiesSet();</span><br><span class="line">        <span class="comment">// 监听'myChannel'通道，并用上面的适配器处理</span></span><br><span class="line">        container.addMessageListener(transactionAdapter, <span class="keyword">new</span> ChannelTopic(<span class="string">"myChannel"</span>));</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String mess = <span class="string">"发送消息"</span>;</span><br><span class="line">redisTemplate.convertAndSend(<span class="string">"topicName"</span>, mess.getBytes(StandardCharsets.UTF_8));</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring定时任务</title>
      <link href="/2022/03/20/Spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/03/20/Spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>文章字数：675,阅读全文大约需要2分钟</p><blockquote><p>通过类上设置注解<code>@EnableScheduling</code>可以开启spring自带的定时任务，<code>@Scheduled</code>设置定时时间。还可以通过<code>ThreadPoolTaskScheduler</code>的<code>schedule(Runable,cron)</code>动态添加</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span> <span class="comment">//定时任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulingTest</span></span>&#123;</span><br><span class="line">     <span class="comment">//每30秒执行一次</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span> * <span class="number">30</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="comment">//没30秒输出一次</span></span><br><span class="line">           System.out.println (<span class="string">"定时输出："</span> + dateFormat ().format (<span class="keyword">new</span> Date ()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在固定时间执行(当时间匹配规则时输出)</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0 */1 *  * * * "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reportCurrentByCron</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println (<span class="string">"固定时间输出"</span> + dateFormat ().format (<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">private</span> SimpleDateFormat <span class="title">dateFormat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleDateFormat (<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="固定时间匹配规则"><a href="#固定时间匹配规则" class="headerlink" title="固定时间匹配规则"></a>固定时间匹配规则</h1><table><thead><tr><th>字段</th><th>允许值</th><th>允许的特殊字符</th></tr></thead><tbody><tr><td>秒</td><td>0-59</td><td>, - * /</td></tr><tr><td>分</td><td>0-59</td><td>, - * /</td></tr><tr><td>小时</td><td>0-23</td><td>, - * /</td></tr><tr><td>日期</td><td>1-31</td><td>, - * ? / L W C</td></tr><tr><td>月份</td><td>1-12 或者 JAN-DEC</td><td>, - * /</td></tr><tr><td>星期</td><td>1-7 或者 SUN-SAT</td><td>, - * ? / L C #</td></tr><tr><td>年</td><td>空, 1970-2099</td><td>, - * /</td></tr></tbody></table><ul><li>每个元素都可以是一个值如<code>6</code>，一个区间<code>9-12</code> 一个间隔时间<code>8-18/4</code> <code>/4</code>代表间隔四个小时，一个列表<code>1,3,5</code></li><li>日期和星期互斥，即两个元素重合，必须其中一个设置<code>?</code>忽略</li><li><code>*</code>代表所有可能的值</li><li><code>/</code>指定数值的增量，如<code>0/10</code>(分钟单位中)代表0分钟开始，10分钟执行一次</li><li><code>?</code>仅在日期和星期中，代表不指定值</li><li><code>L</code>用于日期和星期中，代表倒数第几个</li><li><code>W</code>仅在日其中，代表平日（工作日）。<code>15W</code>代表离15号最近的一个工作日。</li><li><code>C</code>日期，<code>5C</code>五个单位后的第一天</li><li><code>#</code>每个月第几个星期几，例如在<code>4#2</code>表示某月的第二个星期三。 </li></ul><h1 id="转换异步线程"><a href="#转换异步线程" class="headerlink" title="转换异步线程"></a>转换异步线程</h1><blockquote><p>单线程执行时间超过定时间隔可能会出现任务丢失的情况，可以使用异步线程避免这个问题。</p></blockquote><ul><li>配置<code>Spring</code>的<code>@EnableAsync</code></li><li>执行方法上配置任务线程池<code>@Async</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每30秒执行一次</span></span><br><span class="line">   <span class="meta">@Async</span>(<span class="string">"taskExecutor"</span>)</span><br><span class="line">   <span class="meta">@Scheduled</span>(fixedRate = <span class="number">1000</span> * <span class="number">3</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">xxx</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="分布式情况下避免重复执行"><a href="#分布式情况下避免重复执行" class="headerlink" title="分布式情况下避免重复执行"></a>分布式情况下避免重复执行</h1><ol><li><code>lock = redisTemplate.opsForValue().setIfAbsent(KEY, LOCK);</code>采用<code>Redis</code>判断是否存在<code>key</code>,不存在则设置<code>key</code>,执行完成删除<code>key</code>的方式加锁(跨时区部署还是会重复执行)</li><li><code>shedlock</code>加锁<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.javacrumbs.shedlock&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shedlock-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.16.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;net.javacrumbs.shedlock&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;shedlock-provider-jdbc-template&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;0.16.1&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>配置（jdbc）,还有redis,mongo,zookeeper等锁的实现<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShedlockConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LockProvider <span class="title">lockProvider</span><span class="params">(DataSource dataSource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JdbcTemplateLockProvider(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ScheduledLockConfiguration <span class="title">scheduledLockConfiguration</span><span class="params">(LockProvider lockProvider)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ScheduledLockConfigurationBuilder</span><br><span class="line">                .withLockProvider(lockProvider)</span><br><span class="line">                .withPoolSize(<span class="number">10</span>)</span><br><span class="line">                .withDefaultLockAtMostFor(Duration.ofMinutes(<span class="number">10</span>))<span class="comment">//lock expire最大时间10分钟</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>shedlock表<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> shedlock(</span><br><span class="line">    <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">64</span>),</span><br><span class="line">    lock_until <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>) <span class="literal">NULL</span>,</span><br><span class="line">    locked_at <span class="built_in">TIMESTAMP</span>(<span class="number">3</span>) <span class="literal">NULL</span>,</span><br><span class="line">    locked_by  <span class="built_in">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">name</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>加锁<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled</span>(fixedDelay = <span class="number">10</span>*<span class="number">1000</span> <span class="comment">/**ms**/</span>,initialDelay = <span class="number">10</span>*<span class="number">1000</span>)</span><br><span class="line">   <span class="meta">@SchedulerLock</span>(name = <span class="string">"demoLockTask"</span>, lockAtMostFor = <span class="number">5</span>*<span class="number">1000</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkTask</span><span class="params">()</span></span>&#123;</span><br><span class="line">       LOGGER.error(<span class="string">"checkTask executed"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="动态添加关闭定时任务"><a href="#动态添加关闭定时任务" class="headerlink" title="动态添加关闭定时任务"></a>动态添加关闭定时任务</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入定时调度线程池</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ThreadPoolTaskScheduler threadPoolTaskScheduler; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收线程调度返回的结果获取类</span></span><br><span class="line"><span class="keyword">private</span> ScheduledFuture&lt;?&gt; future;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 如果已经有任务了就取消原有任务</span></span><br><span class="line">    <span class="keyword">if</span> (future != <span class="keyword">null</span>) &#123;</span><br><span class="line">           future.cancel(<span class="keyword">true</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">// 每月第一天</span></span><br><span class="line">    String cron = <span class="string">"0 0 0 1 * ?"</span>;</span><br><span class="line">    future = threadPoolTaskScheduler.schedule(<span class="keyword">new</span> MyRunnable(), <span class="keyword">new</span> CronTrigger(cron));</span><br><span class="line">    <span class="comment">// Runnable也可以写成lambda</span></span><br><span class="line">    future = threadPoolTaskScheduler.schedule(()-&gt;&#123;</span><br><span class="line">            <span class="comment">//do..</span></span><br><span class="line">        &#125;, <span class="keyword">new</span> CronTrigger(cron));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注入</title>
      <link href="/2022/03/20/Spring%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/03/20/Spring%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：590,阅读全文大约需要2分钟</p><h1 id="配置注解"><a href="#配置注解" class="headerlink" title="配置注解"></a>配置注解</h1><ul><li><p><code>@Configuration</code>注解相当于将当前类当作一个<code>bean</code>注入的组件</p></li><li><p><code>@Bean</code>将当前方法的返回值注入成为组件，<code>bean</code>的<code>id</code>是方法名</p></li><li><p><code>@ComponentScan(value=&quot;com.xx.xx&quot;)</code>扫描并注入的文件/文件包位置</p></li><li><p><code>AnnotationConfigApplicationContext(xxx.class)</code>把指定的<code>class</code>当作配置文件加载一个上下文。</p></li><li><p>指定扫描的包中标记有<code>@Controller</code>注解的类注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan</span>(value=<span class="string">"com.xx.xx"</span>, includeFilters=&#123;</span><br><span class="line">    <span class="meta">@Filter</span>(type=FilterType.ANNOTATION, classes=&#123;Controller<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">&#125;, <span class="title">useDefaultFilter</span></span>=<span class="keyword">false</span>)</span><br></pre></td></tr></table></figure><p>使用<code>excludeFilters</code>即为排除<br><code>useDefaultFilter</code>即是否使用默认的扫描<br><code>@Filter(type=FilterType.ASSIGNABLE_TYPE), classes={xx.class}</code>指定注入的类</p></li><li><p>自定义扫描器<br><code>@Filter(type=FilterType.CUSTOM, classes={MyFilter .class}</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">TypeFilter</span></span>&#123;</span><br><span class="line">    <span class="comment">/** MetadataReader 当前扫描类信息 MetadataReaderFactory 其他任何类信息 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">match</span><span class="params">(MetadataReader r, MetadataReaderFactory f)</span>thros IOException</span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前类注解信息</span></span><br><span class="line">        r.getAnnotationMetadata();</span><br><span class="line">        <span class="comment">// 获取当前正在扫描的类信息</span></span><br><span class="line">        r.getClassMetadata();</span><br><span class="line">        <span class="comment">// 类路径信息</span></span><br><span class="line">        r.getResource();</span><br><span class="line">        <span class="comment">// 类信息</span></span><br><span class="line">        f.</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="单实例和多实例"><a href="#单实例和多实例" class="headerlink" title="单实例和多实例"></a>单实例和多实例</h1><ul><li>单实例在容器初始化时就创建(<code>@Bean</code>创建默认是单实例)，可以使用<code>@Lazy</code>强制懒加载，第一次使用再创建。</li><li>多实例用时创建(<code>@Scope(&quot;prototype&quot;)</code>注解)</li></ul><h1 id="注入判断"><a href="#注入判断" class="headerlink" title="注入判断"></a>注入判断</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span></span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前IOC容器使用的beanFactory</span></span><br><span class="line">        context.getBeanFactory();</span><br><span class="line">        <span class="comment">// 获取当前环境变量（例如当前的操作系统）</span></span><br><span class="line">        Enviroment enviroment = context.getEnviroment();</span><br><span class="line">        <span class="comment">// 判断当前的操作系统</span></span><br><span class="line">        enviroment.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">// 是否注入</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注入时使用判断过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Coditional</span>(MyCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Bean</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">Object</span> <span class="title">getOb</span>()</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="import注册Bean"><a href="#import注册Bean" class="headerlink" title="import注册Bean"></a>import注册Bean</h1><h2 id="注入的几种方式"><a href="#注入的几种方式" class="headerlink" title="注入的几种方式"></a>注入的几种方式</h2><ul><li><code>@Bean</code>一般用于导入第三方的组件</li><li>包扫描+类上的标注注解</li><li><code>@Import</code>能够快速给容器导入组件</li><li><code>Factorybean</code>接口实现</li></ul><h2 id="import注册Bean的几种方式"><a href="#import注册Bean的几种方式" class="headerlink" title="import注册Bean的几种方式"></a>import注册Bean的几种方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册类上直接注册，id是全类名</span></span><br><span class="line"><span class="meta">@Import</span>(value=&#123;xx<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br></pre></td></tr></table></figure><ul><li><code>ImportSelector</code>是一个接口，返回需要导入容器的全类名和数组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySelect</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">        <span class="comment">// 返回类的全类名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="string">"com.xx.yy"</span>, <span class="string">"com.xx.zz"</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用选择器注入</span></span><br><span class="line"><span class="meta">@Import</span>(value=&#123;MySelect <span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br></pre></td></tr></table></figure><ul><li><code>ImportBeanDefinitionRegistrar</code>接口，满足条件注入Bean</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**AnnotationMetadata 当前类注解信息</span></span><br><span class="line"><span class="comment">  * BeanDefinitionRegistry BeanDefinition注册类，把所需要添加到容器的bean加入</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata annotationMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> bean1 = registry.containsBeanDefintion(<span class="string">"com.xx.yy"</span>);</span><br><span class="line">        <span class="keyword">boolean</span> bean2 = registry.containsBeanDefintion(<span class="string">"com.xx.zz"</span>);</span><br><span class="line">        <span class="comment">// 如果这两个bean都存在于容器，那就创建Pig类到容器</span></span><br><span class="line">        <span class="keyword">if</span>(bean1 &amp;&amp; bean2) &#123;</span><br><span class="line">            <span class="comment">// 注册之前需要先对类封装一下（Spring中很多bean都这个类封装的）</span></span><br><span class="line">            RootBeanDefinition rootBeanDefinition = <span class="keyword">new</span> BootBeanDefinition(Pig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 注册进容器</span></span><br><span class="line">             registry.registerBeanDefinition(<span class="string">"pig"</span>, rootBeanDefinition );</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用ImportBeanDefinitionRegistrar注入</span></span><br><span class="line"><span class="meta">@Import</span>(value=&#123;MyregisterBeanDefinitions<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Configuration</span></span></span><br></pre></td></tr></table></figure><h1 id="FactoryBean接口注入"><a href="#FactoryBean接口注入" class="headerlink" title="FactoryBean接口注入"></a>FactoryBean接口注入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> MyFactoryBean implements FactoryBean&lt;MyClass&gt;&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> MyClass <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> MyClass();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">            <span class="keyword">return</span> MyClass<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注入FactoryBean即为注入MyFactoryBean所包含的Class</span></span><br><span class="line"><span class="comment">// BeanFactory在获取bean时会判断，如果类型是FactoryBean，会调用其getObject方法，并返回内容。</span></span><br><span class="line"><span class="comment">// &amp;getMyFactoryBean则是获取factory本身</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> MyFactoryBean <span class="title">getMyFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> MyFactoryBean();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="spring容器"><a href="#spring容器" class="headerlink" title="spring容器"></a>spring容器</h1><ul><li><code>beanDefinitionMap</code>里面就是<code>Spring</code>的容器</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StackOverflowError与OutOfMemoryError区别</title>
      <link href="/2022/03/20/StackOverflowError%E4%B8%8EOutOfMemoryError%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/03/20/StackOverflowError%E4%B8%8EOutOfMemoryError%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：306,阅读全文大约需要1分钟</p><h1 id="一、StackOverflowError"><a href="#一、StackOverflowError" class="headerlink" title="一、StackOverflowError"></a>一、StackOverflowError</h1><p>分析： 栈空间溢出，栈空间是线程私有的，一般用于保存方法体。所以可能是方法体太大或者太多了？</p><p>查看源码注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown when a stack overflow occurs because an application</span></span><br><span class="line"><span class="comment"> * recurses too deeply.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StackOverflowError</span> <span class="keyword">extends</span> <span class="title">VirtualMachineError</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>大致意思是：抛出这个异常是因为方法递归太深。也就是每次递归调用新方法都会将上一个方法的运行信息压入栈，当递归太深，导致数据过多，栈空间不足是就会抛出这个错误。</p><h1 id="OutOfMemoryError"><a href="#OutOfMemoryError" class="headerlink" title="OutOfMemoryError"></a>OutOfMemoryError</h1><p>分析： 内存不足，jvm中方法保存在堆里。应该是内存不够分配新的对象导致的</p><p>源码注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Thrown when the Java Virtual Machine cannot allocate an object</span></span><br><span class="line"><span class="comment"> * because it is out of memory, and no more memory could be made</span></span><br><span class="line"><span class="comment"> * available by the garbage collector.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> OutOfMemoryError&#125; objects may be constructed by the virtual</span></span><br><span class="line"><span class="comment"> * machine as if &#123;<span class="doctag">@linkplain</span> Throwable#Throwable(String, Throwable,</span></span><br><span class="line"><span class="comment"> * boolean, boolean) suppression were disabled and/or the stack trace was not</span></span><br><span class="line"><span class="comment"> * writable&#125;.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  unascribed</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutOfMemoryError</span> <span class="keyword">extends</span> <span class="title">VirtualMachineError</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>当内存不过创建新对象，gc也不能回收足够的空间时抛出。也就是创建太多的对象实例，或者集合一直扩容此类情况导致的。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring监听RedisKey过期事件</title>
      <link href="/2022/03/20/Spring%E7%9B%91%E5%90%ACRedisKey%E8%BF%87%E6%9C%9F%E4%BA%8B%E4%BB%B6/"/>
      <url>/2022/03/20/Spring%E7%9B%91%E5%90%ACRedisKey%E8%BF%87%E6%9C%9F%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：48,阅读全文大约需要1分钟</p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>先引入<code>redis</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ol><li>配置监听器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.zut.ding.listener.RedisExpiredListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.PatternTopic;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisListenerConfig</span></span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisMessageListenerContainer <span class="title">container</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisMessageListenerContainer container = <span class="keyword">new</span> RedisMessageListenerContainer();</span><br><span class="line">        container.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> container;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>监听消息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> edu.zut.ding.constants.SystemConstant;</span><br><span class="line"><span class="keyword">import</span> edu.zut.ding.enums.OrderState;</span><br><span class="line"><span class="keyword">import</span> edu.zut.ding.service.OrderService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.Message;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.KeyExpirationEventMessageListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.listener.RedisMessageListenerContainer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyExpirationListener</span> <span class="keyword">extends</span> <span class="title">KeyExpirationEventMessageListener</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisKeyExpirationListener</span><span class="params">(RedisMessageListenerContainer listenerContainer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(listenerContainer);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 针对redis数据失效事件，进行数据处理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pattern</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        String key= message.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>StringUtils工具</title>
      <link href="/2022/03/20/StringUtils%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/StringUtils%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1283,阅读全文大约需要5分钟</p><blockquote><p>StringUtils是一款字符串处理工具，这里列举了一下常用功能</p></blockquote><ol><li>isEmpty(String str) 是否为空，空格字符为false</li><li>isNotEmpty(String str) 是否为非空，空格字符为true</li><li>isBlank(String str) 是否为空，空格字符为true</li><li>isNotBlank(String str) 是否为非空，空格字符为false</li><li>trim(String str)去除字符串两端的控制符，空字符串、null 返回 null</li><li>trimToEmpty(String str) 去除字符串两端的控制符，空字符串、null 返回””</li><li>stripToNull(String str) 去除字符串两端的空白符，空字符串、null 返回null</li><li>stripToEmpty(String str) 去除字符串两端的空白符，空字符串、null 返回””</li><li>strip(String str, String stripChars) 去掉str两端的在stripChars中的字符</li><li>StringUtils.strip(“000000134_76539000”,”0”)=”134_76539”</li><li>stripStart (String str,String stripChars) 去除str 前端在stripChars中的字符</li><li>stripEnd (String str,String stripChars) 去除str 后端在stripChars中的字符</li><li>equals(String str1,String str2) 比较两个字符串是否相等，如果两个均为空则认为相等</li><li>indexOf(String str,char searchChar) 返回searchChar 在字符串中第一次出现的位置，如果没找到则返回 -1，如果str 为null 或者 “”,也返回-1</li><li>indexOf(String str,char searchChar,int startPos) 返回字符searchChar从startPos开始在字符串str中第一次出现的位置。</li><li>contains(String str,char searchChar) str中是否包含字符searchChar，str为null 或者 searchChar为null,返回false 。</li><li>StringUtils.contains(“”, “”)  = true </li><li>StringUtils.contains(“dfg”, “”)  = true</li><li>containsIgnoreCase(String str,String searchStr) str中是否包含字符searchChar，不区分大小写<ol><li>int indexOfAny(String str, char[] searchChars) 找出字符数组searchChars中的字符第一次出现在字符串str中的位置。 如果字符数组中的字符都不在字符串中，则返回-1 ，如果字符串为null或””，则返回-1 </li></ol></li><li>subString(String str,int start) 从start 开始，包含start 那个字符，得到字符串str 的子串，如果start为负数，则从后面开始数起。如果str 为null 或者 “” 则返回其本身</li><li>subStringBefore(String str,String separator) 得到字符串separator第一次出现前的子串。不包含那个字符，如果str 为null 或者 “” 则返回其本身。</li><li>subStringAfter(String str,String separator) 得到字符串separator第一次出现后的子串，不包含那个字符，如果 str 为null，或者””,则返回其本身</li><li>subString(String str,int start,int end) 同上<br>left(String str,int len) 得到字符串str从左边数len长度的子串，如果str 为null 或者 “”,则返回其本身，如果len小于0，则返回””</li><li>right(String str,int len)得到字符串str从右边数len长度的子串</li><li>mid(String str,int pos,int len) 得到字符串str从pos开始len长度的子串，pos小于0，则设为0。</li><li>split(String str) 把字符串拆分成一个字符串数组，用空白符 作为分隔符，字符串为null 返回null，字符串为””,返回空数组{}</li><li>split(String str,char c) 按照 char c 拆分字符串</li><li>join(Object[] arrey)把数组中的元素连接成一个字符串返回</li><li>join(Object[] arrey,char c) 把数组中的元素拼接成一个字符串返回，把分隔符 c 也带上</li><li>deleteWhitespace(String str) 删除字符串中的所有空白符，包括转义字符</li><li>removeStart(String str,String remove) 如果字符串str是以remove开始，则去掉这个开始，然后返回，否则返回原来的串</li><li>removeEnd(String str,String remove) 如果字符串str是以字符串remove结尾，则去掉这个结尾，然后返回，否则返回原来的串。</li><li>remove(String str,char remove) 去掉字符串str中所有包含remove的部分，然后返回</li><li>replace(String str,String reql,String with) 在字符串text中用with代替repl，替换所有</li><li>replaceChars(String str,char old,char new) 在字符串中 new 字符代替 old 字符</li><li>replaceChars(String str, String searchChars, String replaceChars) 这个有点特别，先看下面三个例子</li><li>StringUtils.replaceChars(“asssdf”,”s”,”yyy”))    =    “ayyydf” </li><li>StringUtils.replaceChars(“asdf”,”sd”,”y”))        = “ayf” </li><li>StringUtils.replaceChars(“assssddddf”,”sd”,”y”))= “ayyyyf”<blockquote><p>解释:为什么会出现上面这样的结果呢？原来这个置换规则是这样的，他是拿searchChars的index，去replaceChars找相应的index然后替换掉，怎么说呢？比如说第一个例子 s 的index 是0，找到yyy相对应的index为0的字符是y。第二个例子 ‘s’ 的index是0，’d’的index是1, 字符’s’ 可以找到对应index为0的 ‘y’，d就找不到index为’1’的的字符了，所以就直接过滤掉了，听明白了吗？</p></blockquote></li><li>overlay(String str,String new,int start,int end) 用字符串new 覆盖字符串str从start 到 end 之间的串</li><li>chop(String str) 去掉字符串的最后一个字符,比如/r/n</li><li>repeat(String str,int repart) 重复字符串repeat次</li><li>rightPad(String str,int size,String padStr) size长度的字符串，如果不够用padStr补齐</li><li>leftPad(String str,int size,String padStr)同上</li><li>center(String str,int size)产生一个字符串，长度等于size，str位于新串的中心</li><li>swapCase(String str) 字符串中的大写转小写，小写转换为大写</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String字符编码</title>
      <link href="/2022/03/20/String%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"/>
      <url>/2022/03/20/String%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：341,阅读全文大约需要1分钟</p><blockquote><p><code>java</code>程序中经常会有中文乱码的问题，通常都是字符编码的问题。这次系统性的了解一下这个问题</p></blockquote><h1 id="发生原因"><a href="#发生原因" class="headerlink" title="发生原因"></a>发生原因</h1><p> 字符编码的问题主要发生在编码和解码使用了不同的编码方式，体现在代码上就是</p><ol><li><p>使用相同的字符编码解码和编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String test = <span class="keyword">new</span> String(<span class="string">"abc123阿布才"</span>);</span><br><span class="line">        <span class="keyword">byte</span>[] testByte = test.getBytes(Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">        String testRes = <span class="keyword">new</span> String(testByte, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">        System.out.println(<span class="string">"testRes = "</span> + testRes);</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testRes = abc123阿布才</span><br></pre></td></tr></table></figure></li><li><p>使用不同的字符编码解码和编码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String test = <span class="keyword">new</span> String(<span class="string">"abc123阿布才"</span>);</span><br><span class="line">        <span class="comment">// 这里变成了gbk编码</span></span><br><span class="line">        <span class="keyword">byte</span>[] testByte = test.getBytes(Charset.forName(<span class="string">"gbk"</span>));</span><br><span class="line">        String testRes = <span class="keyword">new</span> String(testByte, Charset.forName(<span class="string">"utf-8"</span>));</span><br><span class="line">        System.out.println(<span class="string">"testRes = "</span> + testRes);</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">testRes = abc123������</span><br></pre></td></tr></table></figure></li></ol><h1 id="默认编码"><a href="#默认编码" class="headerlink" title="默认编码"></a>默认编码</h1><p>程序内部交互一般不会出现字符编码的问题，因为编码和解码都会默认使用内部的默认编码。所以解析和编码是同一种编码类型。但是如果与其它程序交互，因为两个程序的默认编码不同则可能导致这种问题。</p><ol><li>获取<code>jvm</code>当前默认字符编码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(System.getProperty(file.encoding));</span><br></pre></td></tr></table></figure></li></ol><p>无参的<code>String.getBytes()</code>和<code>new String(byte[])</code>使用的都是默认编码</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow入门</title>
      <link href="/2022/03/20/Tensorflow%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/20/Tensorflow%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1208,阅读全文大约需要4分钟</p><blockquote><p>基本概念</p></blockquote><h1 id="一、计算模型——计算图"><a href="#一、计算模型——计算图" class="headerlink" title="一、计算模型——计算图"></a>一、计算模型——计算图</h1><h2 id="1-1基本概念"><a href="#1-1基本概念" class="headerlink" title="1.1基本概念"></a>1.1基本概念</h2><ol><li><strong>计算图</strong>是<code>Tensorflow</code>最基本的概念，<code>Tensorflow</code>中所有的计算都会转为计算图上的节点。</li><li><strong>张量</strong><code>Tensor</code>，可以理解为多维数组（0-d tensor：标量，1-d tensor：向量，2-d tensor：矩阵）表明了数据结构。</li><li><strong>流</strong><code>flow</code>，体现了计算模型（张量之间通过计算相互转换的过程）。<code>Tensorflow</code>每个计算都是计算图上的节点，节点之间的边描述了计算之间依赖关系。</li></ol><h2 id="1-2-基本过程"><a href="#1-2-基本过程" class="headerlink" title="1.2 基本过程"></a>1.2 基本过程</h2><ol><li>定义计算图中所有计算</li><li>执行计算</li></ol><h2 id="1-3使用默认计算图"><a href="#1-3使用默认计算图" class="headerlink" title="1.3使用默认计算图"></a>1.3使用默认计算图</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入TensorFlow</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义两个张量</span></span><br><span class="line">a = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>], name=<span class="string">"a"</span>)</span><br><span class="line">b = tf.constant([<span class="number">2.0</span>, <span class="number">3.0</span>], name=<span class="string">"b"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Tensorflow会自动将定义的计算转为计算图上的节点</span></span><br><span class="line">result = a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 系统会自动维护一个默认的计算图</span></span><br><span class="line"><span class="comment"># 可以通过tf.get_default_graph获取当前默认计算图</span></span><br><span class="line"><span class="comment">#通过a.graph可以查看张量所属的计算图。因为我们没指定，所以是默认计算图</span></span><br><span class="line">print(a.graph <span class="keyword">is</span> tf.get_default_graph)</span><br></pre></td></tr></table></figure><h2 id="1-4生成新的计算图"><a href="#1-4生成新的计算图" class="headerlink" title="1.4生成新的计算图"></a>1.4生成新的计算图</h2><p>注：不同的计算图张量和运算都不会共享</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成新的计算图</span></span><br><span class="line">g1 = tf.Graph()</span><br><span class="line"><span class="comment"># 设为默认</span></span><br><span class="line">whith g1.as_default():</span><br><span class="line">    <span class="comment"># 在计算图上定义变量'v'，并且初始化为0</span></span><br><span class="line">    v = tf.get_variable(<span class="string">'v'</span>, initializer=tf.zeros_initalizer()(shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">g2 = tf.Graph()</span><br><span class="line">whith g2.as_default():</span><br><span class="line">    <span class="comment"># 另一个计算图上定义变量'v'，初始化为1</span></span><br><span class="line">    v = tf.get_variable(<span class="string">'v'</span>, initializer=tf.ones_initializer()(shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取g1上的变量</span></span><br><span class="line">whith tf.Session(graph=g1) <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># 初始化图上的变量</span></span><br><span class="line">    tf.global_variables_initializer().run()</span><br><span class="line">    <span class="comment"># 退出变量作用域（返回上层）并开启变量复用</span></span><br><span class="line">    whith tf.variable_scope(<span class="string">""</span>, reuse=<span class="literal">True</span>):</span><br><span class="line">        <span class="comment"># 输出0</span></span><br><span class="line">        print(sess.run(tf.get_variable(<span class="string">"v"</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在计算图 g2 中读取变量'v'的取值</span></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph=g2) <span class="keyword">as</span> sess:</span><br><span class="line">    tf.global_variables_initializer().run()</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">""</span>, reuse=<span class="literal">True</span>):</span><br><span class="line">        <span class="comment">#输出为 1</span></span><br><span class="line">        print(sess.run(tf.get_variable(<span class="string">"v"</span>)))</span><br></pre></td></tr></table></figure><h2 id="1-5指定运行计算的设备"><a href="#1-5指定运行计算的设备" class="headerlink" title="1.5指定运行计算的设备"></a>1.5指定运行计算的设备</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g.device(<span class="string">'/gpu:0'</span>):</span><br><span class="line">    result = a + b</span><br></pre></td></tr></table></figure><h2 id="1-6常用集合"><a href="#1-6常用集合" class="headerlink" title="1.6常用集合"></a>1.6常用集合</h2><p><code>Tensorflow</code>的图可以有效管理资源（张量、变量等）。其中自动维护的集合就是访问这些资源的有效手段</p><table><thead><tr><th>集合名</th><th>集合内容</th><th>使用场景</th></tr></thead><tbody><tr><td>tf.GraphKeys.VARIABLES</td><td>所有变量</td><td>持久化TensorFlow模型</td></tr><tr><td>tf.GraphKeys.TRAINABLE_VARIABLES</td><td>可学习的变量（一般指神经网络的参数）</td><td>模型迅雷、生成可视化内容</td></tr><tr><td>tf.GraphKeys.SUMMARIES</td><td>日志生成相关的张量</td><td>TensorFlow计算可视化</td></tr><tr><td>tf.GraphKeys.QUEUE_RUNNERS</td><td>处理输入的QuecueRunner</td><td>输入处理</td></tr><tr><td>tf.GraphKeys.MOVING_AVERAGE_VARIABLES</td><td>所有计算了滑动平均值的变量</td><td>计算变量滑动平均值</td></tr></tbody></table><h1 id="二、数据类型——张量"><a href="#二、数据类型——张量" class="headerlink" title="二、数据类型——张量"></a>二、数据类型——张量</h1><h2 id="2-1概念"><a href="#2-1概念" class="headerlink" title="2.1概念"></a>2.1概念</h2><ol><li><strong>张量</strong>可以简单理解为多维数组（矩阵），零阶表示标量（scalar），一节代表向量（vector），n阶代表矩阵。</li><li><strong>张量</strong>并没有保存具体数字，保存的是的到这些数字的计算过程</li></ol><h2 id="2-2创建张量"><a href="#2-2创建张量" class="headerlink" title="2.2创建张量"></a>2.2创建张量</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment"># tf.constant是一个计算，这个计算的结果为一个张量，保存在a中</span></span><br><span class="line">a = tf.constant([<span class="number">1.0</span>, <span class="number">2.0</span>], name=<span class="string">'a'</span>)</span><br><span class="line">b = tf.constant([<span class="number">2.0</span>, <span class="number">3.0</span>], name=<span class="string">'b'</span>)</span><br><span class="line">result - tf.add(a, b, name=<span class="string">'add'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># Tensor("add_2:0", shape=(2,), dtype=float32)</span></span><br></pre></td></tr></table></figure><ol><li>计算结果也是一个张量</li><li>张量的结构中有三个要素，名字（name是唯一标准）、维度（shape）、类型（type）</li><li>张量可以通过’node:src_output’的形式命名，其中node为节点名称，src_output表示当前张量来自节点的第几个输出。shape=(2,)是张量的维度信息，这个说明result是一个一维数组，且数组长度是2。第三个是类型，每个张量都有唯一的类型，Tensorflow的计算类型必须相同。</li></ol><p>类型不匹配的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">a = tf.constant([<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">'a'</span>)</span><br><span class="line">b = tf.constant([<span class="number">2.0</span>, <span class="number">3.0</span>], name=<span class="string">'b'</span>)</span><br><span class="line">result = a + b</span><br><span class="line"><span class="comment">#类型不匹配报错：</span></span><br><span class="line"><span class="comment">#ValueError: Tensor conversion requested dtype int32 for Tensor with dtype float32: </span></span><br><span class="line"><span class="comment">#'Tensor("b_1:0", shape=(2,), dtype=float32)'</span></span><br></pre></td></tr></table></figure><h2 id="2-3tf-constant"><a href="#2-3tf-constant" class="headerlink" title="2.3tf.constant"></a>2.3tf.constant</h2><p>用于计算得出张量的方法，原型如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tf.constant(</span><br><span class="line">    value,</span><br><span class="line">    dtype=<span class="literal">None</span>,</span><br><span class="line">    shape=<span class="literal">None</span>,</span><br><span class="line">    name=<span class="string">'Const'</span>,</span><br><span class="line">    verify_shape=<span class="literal">False</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>value</code>是必填的</p><p><code>value</code>的数量必须小于<code>shape</code>代表的矩阵最大承受数量，少于则会用最后一个值填充</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tf.constant([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], shape=[<span class="number">2</span>, <span class="number">3</span>])</span><br></pre></td></tr></table></figure><h2 id="2-4tf-Variable"><a href="#2-4tf-Variable" class="headerlink" title="2.4tf.Variable"></a>2.4tf.Variable</h2><p><code>tf.Variable</code>的运算结果也是一个张量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用正态分布的方式创建一个2*3的矩阵，随机元素标准差为2</span></span><br><span class="line">tf.Variable(tf.random_normal([<span class="number">2</span>,<span class="number">3</span>], stddev=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h2 id="2-5张量的作用"><a href="#2-5张量的作用" class="headerlink" title="2.5张量的作用"></a>2.5张量的作用</h2><ol><li>对中间计算结果的引用，提高代码可读性</li><li>计算图构造完成后，张量用来计算结果</li></ol><h1 id="三、运行模型——会话"><a href="#三、运行模型——会话" class="headerlink" title="三、运行模型——会话"></a>三、运行模型——会话</h1><p><code>Tensorflow</code>中的会话（session）是来执行定义好的运算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment">#使用创建好的会话来计算关心的结果(默认图)</span></span><br><span class="line">    sess.run()</span><br></pre></td></tr></table></figure><p><code>tf.Tensor.eval</code>函数可以计算一个张量的取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br><span class="line"><span class="keyword">with</span> sess.as_default():</span><br><span class="line">    print(result.eval)</span><br><span class="line"></span><br><span class="line"><span class="comment">#下面代码和上面功能相同</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment">#下面两个命令相同</span></span><br><span class="line">print(sess.run(result))</span><br><span class="line">print(result.evsl(session=sess))</span><br><span class="line">sess.close()   <span class="comment">#书本上没有这句</span></span><br></pre></td></tr></table></figure><p><code>tf.InteractiveSession</code>函数可以省去将产生的会话注册为默认会花的过程。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#交互式环境下直接构建默认会话</span></span><br><span class="line">sess = tf.InteractiveSession()</span><br><span class="line">print(result.eval())</span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tensorflow </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow简单神经网络</title>
      <link href="/2022/03/20/Tensorflow%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2022/03/20/Tensorflow%E7%AE%80%E5%8D%95%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1639,阅读全文大约需要6分钟</p><h1 id="神经网络参数与Tensorflow变量"><a href="#神经网络参数与Tensorflow变量" class="headerlink" title="神经网络参数与Tensorflow变量"></a>神经网络参数与Tensorflow变量</h1><p><code>tf.Variable</code>作用是保存和更新神经网络中的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#声明2 X 3的矩阵变量，元素均值为0，标准差为2的随机数</span></span><br><span class="line">weights = tf.Variable(tf.random_normal([<span class="number">2</span>,<span class="number">3</span>], stddev=<span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>其它生成器</p><table><thead><tr><th>函数</th><th>随机数分布</th><th>主要参数</th></tr></thead><tbody><tr><td>tf.random_normal</td><td>正太分布</td><td>平均值、标准差、取值类型</td></tr><tr><td>tf.truncated_normal</td><td>正太分布，但如果随机出来的值偏离平均值超过2个标准差，那么值会重新随机</td><td>平均值、标准差、取值类型</td></tr><tr><td>tf.random_uniform</td><td>拼接分布</td><td>最小、最大取值，取值类型</td></tr><tr><td>tf.random_gamma</td><td>Gamma分布</td><td>形状参数alpha、尺度参数beta、取值类型</td></tr></tbody></table><p>使用常数初始化</p><table><thead><tr><th>函数名</th><th>功能</th><th>样例</th></tr></thead><tbody><tr><td>tf.zeros</td><td>产生全0的数组</td><td>tf.zeros([2,3], int32) -&gt; [[0,0,0], [0,0,0]]</td></tr><tr><td>tf.ones</td><td>产生全1的数组</td><td>tf.ones([2,3], int32) -&gt;[[1,1,1], [1,1,1]]</td></tr><tr><td>tf.fill</td><td>产生指定数字的数组</td><td>tf.fill([2,3], 9) -&gt; [[9,9,9], [9,9,9]]</td></tr><tr><td>tf.constant</td><td>给定值的</td><td>tf.constant([1,2,3]) -&gt; [1,2,3]</td></tr></tbody></table><p>变量使用的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#初始化两个变量</span></span><br><span class="line">w1 = tf.Variable(tf.random_normal((<span class="number">2</span>,<span class="number">3</span>), stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal((<span class="number">3</span>,<span class="number">1</span>), stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入的特征向量</span></span><br><span class="line">x = tf.constant([[<span class="number">0.7</span>, <span class="number">0.9</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#前向传播</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment">#初始化变量</span></span><br><span class="line">init_op = tf.global_variables_initializer()</span><br><span class="line">sess.run(init_op)</span><br><span class="line"></span><br><span class="line">print(sess.run(y))</span><br><span class="line">sess.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#输出：[[3.957578]]</span></span><br></pre></td></tr></table></figure><p>变量和张量的区别</p><ol><li><code>tf.Variable</code>是一个运算，运算的结果也是一个张量，变量本质是特殊的张量</li><li><code>tf.Variable</code>里包含的就是一个张量</li><li><code>tf.constant</code>声明的是一个常量，<code>tf.Variable</code>是变量，后续会进行模型参数调整</li><li><code>tf.Variable</code>会加入到<code>GraphKeys.VARIABLES</code>中，<code>trainable</code>参数可以区分优化参数（神经网络参数）和其它参数（迭代参数）</li></ol><h1 id="训练神经网络"><a href="#训练神经网络" class="headerlink" title="训练神经网络"></a>训练神经网络</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 声明两个参数，即神经网络的层</span></span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">1</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给出维度可以降低出错率</span></span><br><span class="line"><span class="comment"># 声明占位符（入口）</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=(<span class="number">1</span>, <span class="number">2</span>), name=<span class="string">'input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用全加，将层连接，形成网络</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># 调用初始化参数</span></span><br><span class="line">init_go = tf.global_variables_initializer()</span><br><span class="line">sess.run(init_go)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给入口占位符值，并运算</span></span><br><span class="line">print(sess.run(y, feed_dict=&#123;x: [[<span class="number">0.7</span>, <span class="number">0.9</span>]]&#125;))   <span class="comment">#feed_dict是个字典</span></span><br><span class="line"><span class="comment"># 输出: [[3.957578]]</span></span><br></pre></td></tr></table></figure><p>上面的是运行一个神经网络的代码，输入feed_dict根据神经网络运算得出结果。<br>神经网络可以通过大量样本调整变量的值，以提高预测结果准确性。</p><h1 id="交叉熵和反向传播"><a href="#交叉熵和反向传播" class="headerlink" title="交叉熵和反向传播"></a>交叉熵和反向传播</h1><ol><li><strong>交叉熵</strong>：用于表示预测值和实际值差距的值，通过特定公式得出</li><li><strong>反向传播</strong>：根据交叉熵反向调整神经网络参数的过程</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用sigmoid函数将y转换为0~1之间的数值，转换后y代表预测是正样本的概率</span></span><br><span class="line">y = tf.sigmoid(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数来刻画预测值与真实值得差距，交叉熵</span></span><br><span class="line">cross_entropy = -tf.reduce_mean(y_ * tf.log(tf.clip_by_value(y, <span class="number">1e-10</span>, <span class="number">1.0</span>)) </span><br><span class="line">                                + (<span class="number">1</span>-y_)*tf.log(tf.clip_by_value(<span class="number">1</span>-y, <span class="number">1e-10</span>, <span class="number">1.0</span>)))</span><br><span class="line"><span class="comment"># 上面操作中的这个方法是为了将值限定在一定范围内</span></span><br><span class="line"><span class="comment"># tf.clip_by_value(A,min,max)</span></span><br><span class="line"><span class="comment"># 学习率</span></span><br><span class="line">learning_rate = <span class="number">0.001</span></span><br><span class="line"><span class="comment"># 定义反向传播算法来优化神经网络参数</span></span><br><span class="line">train_step = tf.train.AdamOptimizer(learning_rate).minimize(cross_entropy)</span><br></pre></td></tr></table></figure><p>Tensorflow提供的优化算法有10种，常用的有：tf.train.GradientDescentOptimizer, tf.train.AdamOptimizer, tf.train.MomentumOptimizer。定义反向传播之后，通过运行sess.run(train_step)就可以对所有在GraphKeys.TRAINABLE_VARIABLES集合中的变量来进行优化，使当前batch下损失函数更小。</p><h1 id="完整神经网络"><a href="#完整神经网络" class="headerlink" title="完整神经网络"></a>完整神经网络</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> RandomState</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义训练数据batch的大小</span></span><br><span class="line">batch_size = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定义神经网络参数</span></span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">1</span>], stddev=<span class="number">1</span>, seed=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#在shape的一个维度上使用None可以方便使用不同的batch大小</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">2</span>), name=<span class="string">'x-input'</span>)</span><br><span class="line">y_ = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">1</span>), name=<span class="string">'y-input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#前向传播</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#损失函数和反向传播</span></span><br><span class="line">y = tf.sigmoid(y)</span><br><span class="line">cross_entropy = -tf.reduce_mean(y_ * tf.log(tf.clip_by_value(y, <span class="number">1e-10</span>, <span class="number">1.0</span>)) </span><br><span class="line">                                + (<span class="number">1</span>-y_)*tf.log(tf.clip_by_value(<span class="number">1</span>-y, <span class="number">1e-10</span>, <span class="number">1.0</span>)))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line"><span class="comment">#随机生成一个模拟数据集</span></span><br><span class="line">rdm = RandomState(<span class="number">1</span>)</span><br><span class="line">dataset_size = <span class="number">128</span></span><br><span class="line">X = rdm.rand(dataset_size, <span class="number">2</span>)</span><br><span class="line"><span class="comment">#定义规则来给出样本标签，x1+x2&lt;1的样例都认为是正样本，其他为负，</span></span><br><span class="line">Y = [[int(x1 + x2 &lt; <span class="number">1</span>)] <span class="keyword">for</span> (x1, x2) <span class="keyword">in</span> X]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个会话来运行Tensorflow程序</span></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_go = tf.global_variables_initializer()</span><br><span class="line">    <span class="comment">#初始化变量</span></span><br><span class="line">    sess.run(init_go)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#训练之前的参数</span></span><br><span class="line">    print(<span class="string">'parameter w1 before train: '</span>, sess.run(w1))</span><br><span class="line">    print(<span class="string">'parameter w2 before train: '</span>, sess.run(w2))</span><br><span class="line"></span><br><span class="line">    STEPS = <span class="number">5000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</span><br><span class="line">        <span class="comment">#每次迭代取batch_size个样本进行训练</span></span><br><span class="line">        start = (i * batch_size) % dataset_size</span><br><span class="line">        end = min(start+batch_size, dataset_size)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#通过训练样本训练神经网络并更新参数</span></span><br><span class="line">        sess.run(train_step, feed_dict=&#123;x: X[start:end], y_: Y[start:end]&#125;)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#每隔1000步计算所有数据集上的交叉熵并输出</span></span><br><span class="line">            total_cross_entropy = sess.run(cross_entropy, feed_dict=&#123;x: X, y_: Y&#125;)</span><br><span class="line">            print(<span class="string">'After %d training_steps, cross entropy on all data is %g'</span>%(i, total_cross_entropy))</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'parameter w1 after train: '</span>, sess.run(w1))</span><br><span class="line">    print(<span class="string">'parameter w2 after train: '</span>, sess.run(w2))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">parameter w1 before train:  [[-0.8113182   1.4845988   0.06532937]</span><br><span class="line"> [-2.4427042   0.0992484   0.5912243 ]]</span><br><span class="line">parameter w2 before train:  [[-0.8113182 ]</span><br><span class="line"> [ 1.4845988 ]</span><br><span class="line"> [ 0.06532937]]</span><br><span class="line">After 0 training_steps, cross entropy on all data is 1.89805</span><br><span class="line">After 1000 training_steps, cross entropy on all data is 0.655075</span><br><span class="line">After 2000 training_steps, cross entropy on all data is 0.626172</span><br><span class="line">After 3000 training_steps, cross entropy on all data is 0.615096</span><br><span class="line">After 4000 training_steps, cross entropy on all data is 0.610309</span><br><span class="line">parameter w1 after train:  [[ 0.02476983  0.56948674  1.6921941 ]</span><br><span class="line"> [-2.1977348  -0.23668921  1.1143895 ]]</span><br><span class="line">parameter w2 after train:  [[-0.45544702]</span><br><span class="line"> [ 0.49110925]</span><br><span class="line"> [-0.98110336]]</span><br></pre></td></tr></table></figure><h1 id="clip-by-value"><a href="#clip-by-value" class="headerlink" title="clip_by_value"></a>clip_by_value</h1><ol><li>可以将一个张量中的数值限制在一个范围之内。（可以避免一些运算错误:可以保证在进行log运算时，不会出现log0这样的错误或者大于1的概率）</li><li><code>tf.clip_by_value(1-y,1e-10,1.0)</code></li></ol><h1 id="交叉熵"><a href="#交叉熵" class="headerlink" title="交叉熵"></a>交叉熵</h1><p>主要有两个表达式</p><ol><li>二分类（预测的结果只有两种，0/1）<br><img src="https://upload-images.jianshu.io/upload_images/17243965-b082a4cca807954e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ol><ul><li><code>yi</code> 表示样本i的label，正类为1，负类为0</li><li><code>pi</code> 表示样本i预测为正的概率</li></ul><ol start="2"><li>多分类<br><img src="https://upload-images.jianshu.io/upload_images/17243965-988a868f5bf31caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></li></ol><ul><li><code>M</code> 类别的数量</li><li><code>yic</code> 指示变量（0或1）,如果该类别和样本i的类别相同就是1，否则是0；</li><li><code>pic</code>对于观测样本i属于类别c的预测概率。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tensorflow </tag>
            
            <tag> python </tag>
            
            <tag> 神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal剖析</title>
      <link href="/2022/03/20/ThreadLocal%E5%89%96%E6%9E%90/"/>
      <url>/2022/03/20/ThreadLocal%E5%89%96%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>文章字数：455,阅读全文大约需要1分钟</p><blockquote><p><code>ThreadLocal</code>可以在多线程下实现各个线程的数据隔离</p></blockquote><h1 id="存储原理"><a href="#存储原理" class="headerlink" title="存储原理"></a>存储原理</h1><p>直接看<code>ThreadLocal</code>的<code>get()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>可以看出</p><ol><li>数据是使用<code>ThreadLocalMap</code>存储的</li><li><code>ThreadLocalMap</code>是存放在线程对象上，所以可以保证线程之间的独立</li></ol><p>再看<code>map.getEntry(this)</code>这句话调用的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">            Entry e = table[i];</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>可以看出</p><ol><li>存放在线程的<code>Map</code>通过<code>ThreadLocal</code>对象的<code>threadLocalHashCode</code>获取具体是那个对象</li><li><code>ThreadLocal</code>对象只是获取值的<code>key</code>真正的数据保存在<code>Thread</code>线程对象上</li></ol><h1 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h1><p>存储数据的<code>ThreadLocalMap</code>里可以看到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="keyword">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol><li><code>entry</code>的键是被弱引用包裹的，即<code>GC</code>的时候如果没有强引用则会被直接清理。</li><li>即外面的<code>ThreadLocal</code>如果被赋值为<code>null</code>，即取消对象的强引用。不会因为<code>ThreadLocalMap</code>里面还有强引用而无法被清除</li><li>但是<code>value</code>还是强引用，所以如果不<code>remove</code>元素值还是会造成内存泄露</li></ol><h1 id="内存泄露的问题"><a href="#内存泄露的问题" class="headerlink" title="内存泄露的问题"></a>内存泄露的问题</h1><p>因为只有键有加弱引用，可以使<code>ThreadLocal</code>外界无强引用时直接被<code>GC</code>。但是<code>key</code>还是强引用，所以需要手动<code>remove</code></p><h1 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h1><ol><li>虽然<code>ThreadLocal</code>是随着线程消亡，但如果使用线程池，那么就会被复用。因为线程池的原理就是复用线程</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadLocal线程变量拷贝</title>
      <link href="/2022/03/20/ThreadLocal%E7%BA%BF%E7%A8%8B%E5%8F%98%E9%87%8F%E6%8B%B7%E8%B4%9D/"/>
      <url>/2022/03/20/ThreadLocal%E7%BA%BF%E7%A8%8B%E5%8F%98%E9%87%8F%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<p>文章字数：198,阅读全文大约需要1分钟</p><blockquote><p>java.lang.ThreadLocal<T>为每个线程提供不同的变量拷贝(线程变量)</p></blockquote><h1 id="和其他变量的区别"><a href="#和其他变量的区别" class="headerlink" title="和其他变量的区别"></a>和其他变量的区别</h1><ol><li><p>全局变量：属于类，类保存在堆中。属于所有线程共有的区域。所以全局变量能够被所有的线程访问到</p></li><li><p>局部变量：属于方法，方法存在栈空间，是线程私有的。但是方法的局部变量只属于方法，外部无法访问。</p></li><li><p><code>ThreadLocal</code>：属于线程，线程全局使用。一个<code>ThreadLocal</code>存储一个值</p></li></ol><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ThreadLocal&lt;String&gt; tl = <span class="keyword">new</span> ThreadLocal&lt;String&gt;;</span><br><span class="line"></span><br><span class="line">tl.set(<span class="string">"xxx"</span>);</span><br><span class="line">tl.get();</span><br><span class="line"><span class="comment">//在线程结束的时候最好手动清除一下，提高回收效率</span></span><br><span class="line">tl.remove();</span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>每个线程独立连接sql</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Connection;  </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;  </span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionManager</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;Connection&gt; connectionHolder = <span class="keyword">new</span> ThreadLocal&lt;Connection&gt;() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Connection <span class="title">initialValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">            Connection conn = <span class="keyword">null</span>;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                conn = DriverManager.getConnection(  </span><br><span class="line">                        <span class="string">"jdbc:mysql://localhost:3306/test"</span>, <span class="string">"username"</span>,  </span><br><span class="line">                        <span class="string">"password"</span>);  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> conn;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> connectionHolder.get();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setConnection</span><span class="params">(Connection conn)</span> </span>&#123;  </span><br><span class="line">        connectionHolder.set(conn);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
            <tag> ThreadLocal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThreadPoolExecutor自定义线程池</title>
      <link href="/2022/03/20/ThreadPoolExecutor%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2022/03/20/ThreadPoolExecutor%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：316,阅读全文大约需要1分钟</p><blockquote><p>自定义线程池，设置数据</p></blockquote><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue)</span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory)</span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, RejectedExecutionHandler handler)</span><br><span class="line"></span><br><span class="line">ThreadPoolExecutor(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize, <span class="keyword">long</span> keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</span><br></pre></td></tr></table></figure><p>构造方法参数</p><table><thead><tr><th>名称</th><th>类型</th><th>含义</th></tr></thead><tbody><tr><td>corePoolSize</td><td>int</td><td>核心线程池大小</td></tr><tr><td>maximumPoolSize</td><td>int</td><td>最大线程池大小</td></tr><tr><td>keepAliveTime</td><td>long</td><td>最大线程池空闲时间</td></tr><tr><td>unit</td><td>TimeUnit</td><td>时间单位</td></tr><tr><td>workQueue</td><td>BlockingQueue<Runnable></td><td>线程等待队列，如ArrayBlockingQueue，有界队列，构造函数需要传入队列最大值。</td></tr><tr><td>threadFactory</td><td>ThreadFactory</td><td>线程创建工厂</td></tr><tr><td>handler</td><td>RejectedExecutionHandler</td><td>拒绝策略</td></tr></tbody></table><h1 id="预定义线程池"><a href="#预定义线程池" class="headerlink" title="预定义线程池"></a>预定义线程池</h1><ol><li><code>FixedThreadPool</code>: </li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                      <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>核心线程数和最大线程数相同，所以是固定大小。</li><li><code>keepAliveTime</code>对核心线程无效</li><li><code>LinkedBlockingQueue</code>是无界阻塞队列，最大值是<code>Integer.MAX_VALUE</code>。如果提交速度大于处理速度，会造成队列阻塞，又因为队列无界，所以可能会内存溢出。</li></ul><ol start="2"><li><code>CachedThreadPool</code>:</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                      <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                      <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>核心线程<code>0</code>，最大线程<code>Integer.MAX_VALUE</code>。无核心线程，最大线程几乎无限。</li><li><code>keepAliveTime = 60</code>，即<code>60s</code>后空闲线程自动结束</li><li><code>workQueue</code>是<code>SynchronousQueue</code>，无缓冲队列。入队和出队必须同时进行。</li></ul><h1 id="自定义线程池案例"><a href="#自定义线程池案例" class="headerlink" title="自定义线程池案例"></a>自定义线程池案例</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> corePoolSize = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> maximumPoolSize = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">long</span> keepAliveTime = <span class="number">10</span>;</span><br><span class="line">        TimeUnit unit = TimeUnit.SECONDS;</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        ThreadFactory threadFactory = <span class="keyword">new</span> NameTreadFactory();</span><br><span class="line">        RejectedExecutionHandler handler = <span class="keyword">new</span> MyIgnorePolicy();</span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit,</span><br><span class="line">                workQueue, threadFactory, handler);</span><br><span class="line">        executor.prestartAllCoreThreads(); <span class="comment">// 预启动所有核心线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            MyTask task = <span class="keyword">new</span> MyTask(String.valueOf(i));</span><br><span class="line">            executor.execute(task);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.in.read(); <span class="comment">//阻塞主线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mThreadNum = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(r, <span class="string">"my-thread-"</span> + mThreadNum.getAndIncrement());</span><br><span class="line">            System.out.println(t.getName() + <span class="string">" has been created"</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIgnorePolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            doLog(r, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLog</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 可做日志记录等</span></span><br><span class="line">            System.err.println( r.toString() + <span class="string">" rejected"</span>);</span><br><span class="line"><span class="comment">//          System.out.println("completedTaskCount: " + e.getCompletedTaskCount());</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.toString() + <span class="string">" is running!"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>); <span class="comment">//让任务执行慢点</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"MyTask [name="</span> + name + <span class="string">"]"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TomCat类加载器</title>
      <link href="/2022/03/20/TomCat%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2022/03/20/TomCat%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：65,阅读全文大约需要1分钟<br>tomcat在jdk的三个类加载器下增加了share,webApp加载器，多个webApp用于TomCat下不同的应用，防止不同程序相同的类冲突。shre用于提取不同app下相同的类。如同版本的Spring</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TimeUnit类</title>
      <link href="/2022/03/20/TimeUnit%E7%B1%BB/"/>
      <url>/2022/03/20/TimeUnit%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：285,阅读全文大约需要1分钟</p><blockquote><p>这是<code>java</code>并发包<code>java.util.concurrent</code>下的一个用于定义时间粒度、时间转换、线程休眠的工具类。</p></blockquote><h1 id="枚举量"><a href="#枚举量" class="headerlink" title="枚举量"></a>枚举量</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SECONDS：秒</span><br><span class="line">MINUTES：分</span><br><span class="line">HOURS：时</span><br><span class="line">DAYS：日</span><br><span class="line">NANOSECONDS：纳秒，等于<span class="number">1</span>*<span class="number">10</span>^-<span class="number">9</span> s</span><br><span class="line">MICROSECONDS：微妙 <span class="number">1</span>*<span class="number">10</span>^-<span class="number">6</span> s</span><br><span class="line">MILLISECONDS：毫秒 <span class="number">1</span>*<span class="number">10</span>^-<span class="number">3</span> s</span><br></pre></td></tr></table></figure><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><ol><li><p><code>toHours(long duration)</code>:<br>粒度之间都有类似的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一天几个小时</span></span><br><span class="line">Long dayToHour = TimeUnit.DAYS.toHours(<span class="number">1</span>);<span class="comment">//24</span></span><br></pre></td></tr></table></figure></li><li><p><code>convert(long sourceDuration, TimeUnit sourceUnit)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 48小时转换成天</span></span><br><span class="line">TimeUnit.DAYS.convert(<span class="number">48</span>, TimeUnit.HOURS);<span class="comment">//2</span></span><br></pre></td></tr></table></figure></li><li><p><code>sleep(long timeout)</code><br>可读性更好的线程休眠操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//休眠两分钟</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>timedJoin(Thread thread, long timeout)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定线程休眠指定毫秒数</span></span><br><span class="line">TimeUnit.SECONDS.timedJoin(Thread.currentThread(), <span class="number">2</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>timedWait(Object obj, long timeout)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//休眠指定对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        TimeUnit.SECONDS.timedWait(<span class="keyword">this</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"HelloWorld"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UnsupportedOperationException</title>
      <link href="/2022/03/20/UnsupportedOperationException/"/>
      <url>/2022/03/20/UnsupportedOperationException/</url>
      
        <content type="html"><![CDATA[<p>文章字数：54,阅读全文大约需要1分钟<br>操作不支持的异常，使用<code>jpa</code>分页的到的<code>List</code>进行<code>addAll</code>操作是抛出的异常。</p><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>查看<code>Page</code>的源码，发现返回的<code>List</code>是不可修改的<code>list</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Collections.unmodifiableList(content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Uncaught-SyntaxError--Unexpected-end-of-input</title>
      <link href="/2022/03/20/Uncaught-SyntaxError--Unexpected-end-of-input/"/>
      <url>/2022/03/20/Uncaught-SyntaxError--Unexpected-end-of-input/</url>
      
        <content type="html"><![CDATA[<p>文章字数：145,阅读全文大约需要1分钟</p><blockquote><p>意外的终止输入，浏览器读取我们的javascript代码时，碰到了不可预知的错误，导致无法继续解析下去。</p></blockquote><p>今天遇到这个问题，开发的时候没问题，软件打包测试时前端抛出这个错误。<br>首先想到是不是标签没结束之类的，检查了一遍提交的代码没有发现异常。<br>之后考虑到前端有做压缩，然后思考是不是注释的问题。最后发现有一处<code>\\</code>的注释，删除运行正常。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web扫描工具</title>
      <link href="/2022/03/20/Web%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/Web%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：132,阅读全文大约需要1分钟</p><blockquote><p>IBM Security App Scan Standard 是IBM的一款web安全扫描工具，可以利用爬虫技术进行网站安全渗透测试，根据网站入口自动对网页链接进行安全扫描，扫描之后会提供扫描报告和修复建议等。 </p></blockquote><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><ol><li>通过探索了解整个web页面结果 </li><li>通过分析，使用扫描规则库对修改的HTTP Request进行攻击尝试 </li><li>分析 Response 来验证是否存在安全漏洞</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
            <tag> 安全 </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZGC</title>
      <link href="/2022/03/20/ZGC/"/>
      <url>/2022/03/20/ZGC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：557,阅读全文大约需要2分钟</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p><code>ZGC</code>是<code>JDK11</code>之后带来的全新垃圾回收器，主要目标是降低停顿时间，但是会一定程度上降低吞吐量。</p><ul><li>主要目标</li></ul><ol><li>支持<code>TB</code>级别的堆</li><li>最大停顿不超过<code>10ms</code>，无论堆的大小，这个数据都不会变</li><li>奠定未来<code>GC</code>特性的基础</li><li>最糟糕的情况下吞吐量只降低<code>15%</code>，不过可以用横向扩容解决</li></ol><h1 id="机制"><a href="#机制" class="headerlink" title="机制"></a>机制</h1><ol><li><code>Pause Mark Start</code>暂停标记阶段，找到当前活跃的引用。此阶段速度很快，会造成短暂的停顿</li><li><code>Concurrent Mark</code>并发标记阶段，从上一步基础上继续往下标记存活对象。在并发结束后会有一个端在的停顿，确保所有对象都被标记</li><li><code>Concurrent Prepare for Relocate</code>准备阶段，并发选取接下来需要标记整理的对象。结束后会有一个端在的停顿，用于移动<code>root</code>集合对象的引用</li><li><code>Concurrent Relocate</code>移动上一阶段标记存活的对象，并整理</li></ol><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li>没有分代，分代实现较为麻烦，目前没有分代</li><li><code>Region Based</code>,<code>ZGC</code>的内存空间被分为三类规格的空间，<code>2MB</code>、<code>32MB</code>、<code>N*2MB</code>，灵活性更好</li><li><code>Partial Compaction</code>部分压缩</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>YGC和FGC</title>
      <link href="/2022/03/20/YGC%E5%92%8CFGC/"/>
      <url>/2022/03/20/YGC%E5%92%8CFGC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：165,阅读全文大约需要1分钟</p><ol><li><code>YGC</code>:对新生代堆进行<code>gc</code>，即<code>young GC</code>。频率较高，<code>edn</code>空间不足时会执行，此时会回收大部分对象。性能消耗较小</li><li><code>FGC</code>:全堆范围的<code>gc</code>默认堆空间达到80%时触发<code>fgc</code>。触发频率较低，7-10天可能才会触发一次。<code>old</code>空间、<code>perm</code>空间不足，调用<code>System.gc()</code>，<code>ygc</code>的悲观策略、dump live的内存信息时(jmap –dump:live)都会触发</li></ol><p>悲观策略<br>当jvm计算<code>ygc</code>之后需要晋升的空间大于剩余空间时就会直接执行一次<code>fgc</code>，因为反正晋升之后也需要执行一次。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activeMQ基于插件的连接鉴权</title>
      <link href="/2022/03/20/activeMQ%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E7%9A%84%E8%BF%9E%E6%8E%A5%E9%89%B4%E6%9D%83/"/>
      <url>/2022/03/20/activeMQ%E5%9F%BA%E4%BA%8E%E6%8F%92%E4%BB%B6%E7%9A%84%E8%BF%9E%E6%8E%A5%E9%89%B4%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>文章字数：297,阅读全文大约需要1分钟</p><blockquote><p><code>activeMQ</code>本身只支持通过配置文件配置用户名和密码的方式管理连接，但是实际使用中 用户名和密码都是动态分配的。最后在网上找到了一个给<code>activeMQ</code>开发插件鉴权的方法。</p></blockquote><h1 id="大致步骤"><a href="#大致步骤" class="headerlink" title="大致步骤"></a>大致步骤</h1><ol><li><p>创建一个<code>java application</code>，并添加<code>activeMQ</code>的依赖。版本和部署的版本保持一致。</p></li><li><p>创建一个<code>broker plunin</code>类，并返回一个<code>Broker</code>的子类。这个子类就是控制连接鉴权的。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.broker.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginAhthPlugin</span> <span class="keyword">implements</span> <span class="title">BrokerPlugin</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Broker <span class="title">installPlugin</span><span class="params">(Broker broker)</span> throw Exception</span>&#123;</span><br><span class="line">        <span class="function">reutrn new <span class="title">AuthFilter</span><span class="params">(broker)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.实现<code>AuthFilter</code>，重写<code>addConnection</code>方法，进行权限校验。失败抛出<code>SecurityException</code>,提示用户名密码错误。验证成功调用传入的<code>broker</code>的<code>addConnection</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用父类构造方法，传入broker</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AuthFilter</span><span class="params">(Broker next)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(next);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function">publuc <span class="keyword">void</span> <span class="title">addConnection</span><span class="params">(ConnectionContext context, ConnectionInfo info)</span>throw Exception</span>&#123;</span><br><span class="line">    <span class="comment">// 鉴权，失败抛出异常</span></span><br><span class="line">    auth(info.getUserName(),info.getPassword(),info.getClientId());</span><br><span class="line">    <span class="keyword">super</span>.addConnection(context,info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>通过配置文件加入插件</li></ol><p><code>activemq.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 其它同级的地方可以配置注入spring的bean,完成数据库的配置 --&gt;</span><br><span class="line">&lt;broker ...&gt;</span><br><span class="line">&lt;!-- 在这个标签中加入 --&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">          &lt;bean xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot; id&#x3D;&quot;LoginAuthPlugin&quot; class&#x3D;&quot;com.study.mqttatuh.LoginAuthPlugin&quot;&gt;</span><br><span class="line">         &lt;&#x2F;bean&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;broker&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>activeMQ配置mqtt ssl</title>
      <link href="/2022/03/20/activeMQ%E9%85%8D%E7%BD%AEmqtt%20ssl/"/>
      <url>/2022/03/20/activeMQ%E9%85%8D%E7%BD%AEmqtt%20ssl/</url>
      
        <content type="html"><![CDATA[<p>文章字数：313,阅读全文大约需要1分钟</p><h1 id="第一步，生成证书"><a href="#第一步，生成证书" class="headerlink" title="第一步，生成证书"></a>第一步，生成证书</h1><ol><li>生成证书以及导入受信证书</li><li>放在<code>ActiveMQ</code>安装目录下<code>/conf/</code>新建<code>cert</code>目录，并放入证书</li></ol><h1 id="第二步，配置证书"><a href="#第二步，配置证书" class="headerlink" title="第二步，配置证书"></a>第二步，配置证书</h1><ul><li><code>activemq.xml</code>子节点增加证书配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sslContext</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sslContext</span> <span class="attr">keyStore</span>=<span class="string">"file:$&#123;activemq.base&#125;/conf/cert/broker.keystore"</span></span></span><br><span class="line"><span class="tag"><span class="attr">keyStorePassword</span>=<span class="string">"broker123"</span></span></span><br><span class="line"><span class="tag"><span class="attr">trustStore</span>=<span class="string">"file:$&#123;activemq.base&#125;/conf/cert/broker.truststore"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">trustStorePassword</span>=<span class="string">"brokerTrust123"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sslContext</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="第三步，增加mqtt-ssl协议"><a href="#第三步，增加mqtt-ssl协议" class="headerlink" title="第三步，增加mqtt+ssl协议"></a>第三步，增加mqtt+ssl协议</h1><ol><li>单向认证配置，即不会去验证客户端连接的证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnector name&#x3D;&quot;mqtt+ssl&quot; uri&#x3D;&quot;mqtt+ssl:&#x2F;&#x2F;0.0.0.0:1883?maximumConnections&#x3D;30000&amp;wireFormat.maxFrameSize&#x3D;204857600&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>双向认证，客户端的证书需要可以被<code>truststore</code>认证通过（自签的话就是需要把证书先导入到<code>ActiveMq</code>的<code>truststore</code>）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;transportConnector name&#x3D;&quot;mqtt+ssl&quot; uri&#x3D;&quot;mqtt+ssl:&#x2F;&#x2F;0.0.0.0:1883?maximumConnections&#x3D;30000&amp;wireFormat.maxFrameSize&#x3D;204857600&amp;needClientAuth&#x3D;true&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mqtt </tag>
            
            <tag> activeMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb常用命令</title>
      <link href="/2022/03/20/adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/20/adb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1116,阅读全文大约需要4分钟</p><blockquote><p><code>Android Debug Bridge</code>安卓调试桥，是一款<code>C/S</code>架构的命令行工具。</p></blockquote><h1 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h1><ol><li><code>Client</code>:运行在PC端，对<code>Android</code>应用进行安装、卸载、调试。</li><li><code>Service</code>:运行在PC端，管理客户端到设备的abd后台进程的连接</li><li><code>adb进程</code>:运行在<code>Android</code>设备<code>5037</code>端口</li></ol><h1 id="adb命令"><a href="#adb命令" class="headerlink" title="adb命令"></a>adb命令</h1><p>命令格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb [-e | -d | -s &lt;设备序列号&gt;] &lt;子命令&gt;</span><br></pre></td></tr></table></figure><ol><li><p><code>adb devices</code>获取设备列表及设备状态</p></li><li><p><code>adb get-state</code>获取设备的状态，<code>device</code>正常连接、<code>offline</code>连接异常无响应、<code>unknown</code>没有连接设备</p></li><li><p><code>adb kill-server | abd start-server</code>:结束或者启动adb服务，状态异常是kill-server再start</p></li><li><p><code>adb logcat</code>:打印<code>Android</code>的系统日志</p></li><li><p><code>adb bugreport</code>:打印<code>dumpsys</code>、<code>dumpstate</code>、<code>logcat</code>的输出，用于错误分析</p></li><li><p><code>adb install</code>:安装应用，覆盖安装<code>-r</code></p></li><li><p><code>adb uninstall</code>:卸载应用，后面跟应用包名。<code>-k</code>选项保留数据和缓存目录</p></li><li><p><code>adb pull</code>:将<code>Android</code>设备上的文件或者文件夹复制到本地</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb pull xxx&#x2F;a.txt d:\xxx.txt</span><br></pre></td></tr></table></figure></li><li><p><code>adb push</code>:推送本地文件到<code>Android</code>设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 最后的&#39;&#x2F;&#39;一定要有，否则报错</span><br><span class="line">adb push d:\push.txt sdcard&#x2F;test&#x2F;</span><br></pre></td></tr></table></figure></li><li><p><code>adb root , adb remount</code>:部分手机支持，获取root权限，系统文件为可读状态</p></li><li><p><code>adb reboot</code>:重启设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 重启，进入fastboot模式</span><br><span class="line">adb reboot-bootloader</span><br><span class="line"></span><br><span class="line"># 重启，进入recovery模式</span><br><span class="line">adb recovery</span><br></pre></td></tr></table></figure></li><li><p><code>adb foward</code>:将宿主机上的某个端口重定向到设备的某个端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 把主机1214端口的信息数据都转发到设备的8888端口，实现远程控制</span><br><span class="line">adb forward tcp:1214 tcp :8888</span><br></pre></td></tr></table></figure></li><li><p><code>adb connect</code>:远程链接Android设备</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. pc,设备处于同一网段</span><br><span class="line">2. 手机root，安装adbWireless,运行</span><br><span class="line">3.adb connect ip</span><br></pre></td></tr></table></figure></li><li><p><code>adb disconnect &lt;ip&gt;</code>断开连接<br>不断开连接别人的<code>adb</code>就登录不上去</p></li></ol><h1 id="adb-shell命令"><a href="#adb-shell命令" class="headerlink" title="adb shell命令"></a>adb shell命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 调用安卓设备上&#96;system&#x2F;bin&#96;目录下的脚本程序</span><br><span class="line">adb shell 命令</span><br></pre></td></tr></table></figure><ol><li><p><code>adb shell pm list package</code>:列出安装在设备上的应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 系统应用</span><br><span class="line">adb shell pm list package -s </span><br><span class="line"></span><br><span class="line"># 第三方应用</span><br><span class="line">adb shell pm list package -3</span><br><span class="line"></span><br><span class="line"># 应用包名及对应apk名及位置</span><br><span class="line">adb shell pm list package -f</span><br><span class="line"></span><br><span class="line"># 查看安装来源</span><br><span class="line"># 例：package:com.zhihu.android installer&#x3D;com.xiaomi.market</span><br><span class="line">adb shell pm list package -i</span><br><span class="line"></span><br><span class="line"># 查找关键字 -f  | -FILTER</span><br><span class="line">adb shell pm list package -f -3 -i 关键字</span><br></pre></td></tr></table></figure></li><li><p><code>adb shell pm path packageName</code>:列出包名对应的apl位置</p></li><li><p><code>pm list instrumentation</code>:列出含有单元测试case的应用，可加-f参数</p></li><li><p><code>pm dump package</code>:列出指定应用的<code>dump</code>信息</p></li><li><p><code>pm install</code>:安装应用</p></li><li><p><code>pm uninstall packageName</code>:卸载应用</p></li><li><p><code>pm clear</code>:清除应用数据</p></li><li><p><code>pm set-install-location</code>、<code>pm get-install-location</code>:设置/获取应用安装位置</p></li><li><p><code>am start</code>:启动一个Activity</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 打开相机</span><br><span class="line">adb shell am start -n com.android.camera&#x2F;.Camera</span><br><span class="line"># 先停止再启动</span><br><span class="line">adb shell am start -S com.android.camera&#x2F;.Camera</span><br><span class="line"># 等待应用完成启动</span><br><span class="line">adb shell am start -W com.android.camera&#x2F;.Camera</span><br><span class="line"># 用默认浏览器打开网页</span><br><span class="line">adb shell am start -a android.intent.action.VIEW -d http:&#x2F;&#x2F;testerhome.com</span><br><span class="line"># 启动拨号器拨打10086</span><br><span class="line">adb shell am start -a android.intent.action.CALL -d tel:10086</span><br></pre></td></tr></table></figure></li><li><p><code>am instrument</code>:启动instrumentation </p></li><li><p><code>am monitor</code>: 监控crash与ANR</p></li><li><p><code>am force-stop</code>: 后跟包名，结束应用</p></li><li><p><code>am startservice</code>:启动一个服务</p></li><li><p><code>am broadcast</code>: 发送一个广播</p><h2 id="向设备发送按键事件"><a href="#向设备发送按键事件" class="headerlink" title="向设备发送按键事件"></a>向设备发送按键事件</h2></li><li><p><code>input text</code>:发送文本，非中文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell input text test123456</span><br></pre></td></tr></table></figure></li><li><p><code>input keyevent</code>:发送按键事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 按下home键</span><br><span class="line">adb shell input keyevent KEYCODE_HOME</span><br></pre></td></tr></table></figure></li><li><p><code>inout tap</code>:发送触摸事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 点击坐标为500 500的位置</span><br><span class="line">adb shell input tap 500 500</span><br></pre></td></tr></table></figure></li><li><p><code>input swipe</code>:滑动事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 从右边向左滑动</span><br><span class="line">adb shell input swipe 900 500 100 500</span><br><span class="line"># 模拟长按（小距离内较长时间滑动）</span><br><span class="line">adb shell input swipe 500 500 501 501 2000</span><br></pre></td></tr></table></figure><h2 id="screencap截图"><a href="#screencap截图" class="headerlink" title="screencap截图"></a>screencap截图</h2></li><li><p><code>screencap -p</code>: 截屏保存</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell screencap -p &#x2F;sdcard&#x2F;screen.png</span><br></pre></td></tr></table></figure></li><li><p><code>screenrecord</code>:录制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 录制视频，ctrl + c 结束录制</span><br><span class="line">adb shell screenrecord sdcard&#x2F;record.mp4</span><br></pre></td></tr></table></figure><h2 id="获取当前界面的控件信息"><a href="#获取当前界面的控件信息" class="headerlink" title="获取当前界面的控件信息"></a>获取当前界面的控件信息</h2></li><li><p><code>adb shell uiautomator dump</code>:获取控件信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 不加 [file] 选项时，默认存放在 sdcard 下</span><br><span class="line">[xuxu:~]$ adb shell uiautomator dump   </span><br><span class="line">UI hierchary dumped to: &#x2F;storage&#x2F;emulated&#x2F;legacy&#x2F;window_dump.xml</span><br></pre></td></tr></table></figure><h2 id="输入法ime"><a href="#输入法ime" class="headerlink" title="输入法ime"></a>输入法ime</h2></li><li><p><code>adb shell ime list -s</code>:列出输入法</p></li><li><p><code>adb shell ime set com.baidu.input_mi/.ImeService</code>:选则输入法</p></li></ol><h2 id="分辨率wm"><a href="#分辨率wm" class="headerlink" title="分辨率wm"></a>分辨率wm</h2><ol start="24"><li><code>adb shell wm size</code>: 获取屏幕分辨率</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><ol start="25"><li><code>monkey</code>:随机发送输入事件，用于测试<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 保存信息到d盘 monkey.log</span><br><span class="line">adb shell monkey -p com.android.settings 5000 &gt; d:\monkey.log</span><br><span class="line"># 保存信息到手机的目录（加引号）</span><br><span class="line">adb shell &quot;monkey -p com.android.settings 5000 &gt; sdcard&#x2F;monkey.log&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><ol start="26"><li><code>settings</code>:设置系统参数</li><li><code>dumpsys</code>:服务信息</li><li><code>log</code>:在logcat中打印指定信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -p：优先级，-t：tag，标签，后面加上 message</span><br><span class="line">adb shell log -p d -t xuxu &quot;test adb shell log&quot;</span><br></pre></td></tr></table></figure></li><li><code>getprop</code>:查看系统参数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.build.version.sdk</span><br></pre></td></tr></table></figure></li></ol><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>还支持linux的命令</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安卓 </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>aop</title>
      <link href="/2022/03/20/aop/"/>
      <url>/2022/03/20/aop/</url>
      
        <content type="html"><![CDATA[<p>文章字数：131,阅读全文大约需要1分钟</p><blockquote><p>面向切面的编程，底层是动态代理</p></blockquote><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ul><li>前置通知<code>@Before(&quot;execution(public int com.xx.yy.*(...))&quot;)</code></li><li>后置通知<code>@After</code></li><li>返回后通知<code>@AfterReturning</code></li><li>出现异常后运行<code>@AfterThrowing</code></li><li>环绕通知（动态代理）<code>@Around</code>手动<code>joinPoint.procced()</code>手动执行业务方法</li></ul><h1 id="pointcut"><a href="#pointcut" class="headerlink" title="pointcut"></a>pointcut</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原生Spring需要开启EnableAspectJAutoProxy, SpringBoot默认开了</span></span><br><span class="line"><span class="comment">// 需要注入到Spring</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">xxx</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">/** 指定切面，这样就不用每个方法都指定作用于那个地方 */</span></span><br><span class="line">@Pointcut("execution(public int com.xx.yy.*(...))")</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pointCut</span><span class="params">()</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logStart</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sout(<span class="string">"xxx"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Around</span>(<span class="string">"pointCut()"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">Around</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        sout(<span class="string">"前置"</span>);<span class="comment">// 比Before还早</span></span><br><span class="line">        <span class="comment">// 执行业务方法，类似反射调用方法</span></span><br><span class="line">        Object res = joinPoint.proceed();</span><br><span class="line">        sout(<span class="string">"后置"</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>badUSB</title>
      <link href="/2022/03/20/badUSB/"/>
      <url>/2022/03/20/badUSB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：78,阅读全文大约需要1分钟</p><blockquote><p>利用单片机伪装成U盘，插上U盘后单片机伪装成键盘设备，并且输入恶意代码</p></blockquote><h1 id="常见的BadUSB"><a href="#常见的BadUSB" class="headerlink" title="常见的BadUSB"></a>常见的<code>BadUSB</code></h1><ul><li><code>TEENSY</code>：一种在<code>USB</code>设备中植入攻击芯片的系统。</li><li><code>USB RUBBER DUCKY</code>：USB橡皮鸭较为完整成熟的按键攻击平台</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
            <tag> 安全 </tag>
            
            <tag> badUSB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bean生命周期</title>
      <link href="/2022/03/20/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2022/03/20/bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：316,阅读全文大约需要1分钟</p><blockquote><p>创建–》初始化(赋值)–》销毁</p></blockquote><h1 id="设置初始化和销毁调用函数"><a href="#设置初始化和销毁调用函数" class="headerlink" title="设置初始化和销毁调用函数"></a>设置初始化和销毁调用函数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Bean(initMethod&#x3D;&quot;init&quot;, destroyMethod&#x3D;&quot;destroy&quot;)</span><br></pre></td></tr></table></figure><h1 id="继承接口也可以实现初始化和销毁"><a href="#继承接口也可以实现初始化和销毁" class="headerlink" title="继承接口也可以实现初始化和销毁"></a>继承接口也可以实现初始化和销毁</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Train implements InitializingBean, DisposableBean&#123;</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JSR250规范方式"><a href="#JSR250规范方式" class="headerlink" title="JSR250规范方式"></a>JSR250规范方式</h1><ul><li>提供了两个注解，可以指定初始化和销毁调用的方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@PostConstruct</span><br><span class="line">public void init() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@PreDestroy</span><br><span class="line">public void destory()&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="BeanPostProcessorsr"><a href="#BeanPostProcessorsr" class="headerlink" title="BeanPostProcessorsr"></a>BeanPostProcessorsr</h1><ul><li>后处理器<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBeanPostProcessor</span>  <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span></span>&#123;</span><br><span class="line">    <span class="comment">// override...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>把bean封装成wrappedBean</li><li>首先创建并初始化容器相关的processor(大部分Spring的注解都对应一个BeanPostProcessor)，遍历<code>Spring</code>所有的处理器，调用processor的初始化方法</li><li>bean赋值，注入其他组件，生命周期等功能都是这样实现的</li></ul><h1 id="容器启动过程"><a href="#容器启动过程" class="headerlink" title="容器启动过程"></a>容器启动过程</h1><p>启动加载配置类-》refresh()-&gt;finishBeanFactoryInitialization()-&gt;getBean()-&gt;doCreateBean()-&gt;beanWrapper(对象创建)-》populated(属性赋值)-&gt;inializate()-&gt;processors</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c10k问题</title>
      <link href="/2022/03/20/c10k%E9%97%AE%E9%A2%98/"/>
      <url>/2022/03/20/c10k%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>文章字数：213,阅读全文大约需要1分钟</p><h1 id="c10k本质"><a href="#c10k本质" class="headerlink" title="c10k本质"></a>c10k本质</h1><p><code>c10k</code>就是大并发下所产生的问题。传统的同步阻塞io导致大并发量下效率低下，甚至是系统崩溃。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>主要解决方式是io多路复用</p><ol><li><code>select</code>方式：使用<code>fd_set</code>结构体告诉内核同时监控那些文件句柄，逐个排查文件句柄是否就绪或超时。缺点（句柄数量有限，逐个检查效率低，每次都要初始化fd_set）</li><li><code>poll</code>该方式采用链表存储句柄，解决句柄上线问题。采用关注事件和发生的事件解决重复初始化问题。但是逐个检查的问题没解决</li><li><code>epoll</code>该方式基于内核(linux)发出就绪之后的通知，效率很高但是一来操作系统。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> c10k </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cannot-simultaneously-fetch-multiple-bags</title>
      <link href="/2022/03/20/cannot-simultaneously-fetch-multiple-bags/"/>
      <url>/2022/03/20/cannot-simultaneously-fetch-multiple-bags/</url>
      
        <content type="html"><![CDATA[<p>文章字数：117,阅读全文大约需要1分钟</p><blockquote><p>jpa持久层抛出的异常</p></blockquote><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>查了一下，问题主要是持久层加载了过多对象导致的，主要是多对多关系加载了太多相同的对象。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li>设置懒加载</li><li>如果不用懒加载可以将存储的容器设置成<code>set</code></li><li>如果使用的是<code>Hibernate</code>，可以在字段上声明<code>@IndexColumn</code>。 此注解可以建立唯一索引，保证唯一性。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cicd工具选型</title>
      <link href="/2022/03/20/cicd%E5%B7%A5%E5%85%B7%E9%80%89%E5%9E%8B/"/>
      <url>/2022/03/20/cicd%E5%B7%A5%E5%85%B7%E9%80%89%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：416,阅读全文大约需要1分钟</p><blockquote><p><code>CI</code>持续集成，<code>CD</code>持续交付</p></blockquote><h1 id="On-Premise和Hosted"><a href="#On-Premise和Hosted" class="headerlink" title="On-Premise和Hosted"></a>On-Premise和Hosted</h1><ol><li><code>On-Premise</code>需要用户自己搭建服务器</li></ol><ul><li><code>TeamCity</code></li><li><code>Jenkins</code></li></ul><ol start="2"><li><code>Hosted</code>类型的则是一个<code>SaaS</code>服务，不需要自己搭建服务器</li></ol><ul><li><code>Travis CI</code></li></ul><ol start="3"><li>两种类型都可以的</li></ol><ul><li><code>AppVeyor</code></li><li><code>Azure Pipelines</code></li></ul><ol start="4"><li>对比</li></ol><ul><li><code>On-Premise</code>是自己搭建服务器，所以可以方便的访问不同的内网服务器，部署内网等</li><li><code>Hosted</code>维护成本地，自带环境，预装工具，节约时间</li></ul><h1 id="价格"><a href="#价格" class="headerlink" title="价格"></a>价格</h1><ul><li><code>On-Premise</code>类型的都是免费的，但是需要自费服务器</li><li><code>Hosted CI/CD Service</code>类型对于私有项目收费，开源项目免费。<code>Azure Pipelines</code>有一个月 1800 分钟的免费额度</li></ul><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><ul><li><code>Jenkins</code>插件最多，超过1600个</li><li><code>Azure Pipelines</code>970以上</li><li><code>TeamCity</code>366以上</li></ul><h1 id="SCM-Support"><a href="#SCM-Support" class="headerlink" title="SCM Support"></a>SCM Support</h1><p>支持那些源代码管理工具</p><ul><li><code>Jenkins</code> <code>TeamCity</code> <code>Azure Pipelines</code>支持多种不同种类的代码管理工具<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GitHub, GitHub Enterprise, Bitbucket, GitLab, Azure Repos, Kiln 以及custom repos 等等</span><br></pre></td></tr></table></figure></li><li><code>Travis CI</code>只支持<code>GitHub</code></li></ul><h1 id="UI配置和YAML"><a href="#UI配置和YAML" class="headerlink" title="UI配置和YAML"></a>UI配置和YAML</h1><ul><li><code>TeamCity</code> <code>Jenkins</code> <code>Travis CI</code> <code>AppVeyor</code> <code>Azure Pipelines</code>都支持<code>YAML</code>定义配置</li><li><code>TeamCity</code> <code>Jenkins</code> <code>Azure Pipelines</code>同时支持UI界面方便的定义持续集成的配置</li></ul><h1 id="Cron-job"><a href="#Cron-job" class="headerlink" title="Cron job"></a>Cron job</h1><p>定时任务上<code>AppVeyor</code>支持最好，它支持标准的<code>Crontab</code>语法</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keytool </tag>
            
            <tag> cicd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-段落选中后字体样式修改</title>
      <link href="/2022/03/20/css-%E6%AE%B5%E8%90%BD%E9%80%89%E4%B8%AD%E5%90%8E%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/"/>
      <url>/2022/03/20/css-%E6%AE%B5%E8%90%BD%E9%80%89%E4%B8%AD%E5%90%8E%E5%AD%97%E4%BD%93%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<p>文章字数：17,阅读全文大约需要1分钟</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ff645d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::-moz-selection</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ff645d</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::-webkit-selection</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#ff645d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css-图片自动居中</title>
      <link href="/2022/03/20/css-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E5%B1%85%E4%B8%AD/"/>
      <url>/2022/03/20/css-%E5%9B%BE%E7%89%87%E8%87%AA%E5%8A%A8%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>文章字数：34,阅读全文大约需要1分钟</p><blockquote><p>一张的时候居中，多张自动排列开</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width: 100%;height: 200px;overflow: auto;text-align:center&quot;&gt;</span><br><span class="line">        &lt;div style&#x3D;&quot;display: inline-block&quot;&gt;</span><br><span class="line">            img1</span><br><span class="line">            img2</span><br><span class="line">            ...</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>上下垂直居中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">display:flex;justify-content: center;align-items: center</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css文字格式</title>
      <link href="/2022/03/20/css%E6%96%87%E5%AD%97%E6%A0%BC%E5%BC%8F/"/>
      <url>/2022/03/20/css%E6%96%87%E5%AD%97%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：36,阅读全文大约需要1分钟</p><h1 id="多行文字-多余省略"><a href="#多行文字-多余省略" class="headerlink" title="多行文字+多余省略"></a>多行文字+多余省略</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">overflow: hidden;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 2;</span><br></pre></td></tr></table></figure><h1 id="单行-文字省略"><a href="#单行-文字省略" class="headerlink" title="单行+文字省略"></a>单行+文字省略</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">display: inherit; &#x2F;** 行级元素 *&#x2F;</span><br><span class="line">overflow: hidden;</span><br><span class="line">white-space: nowrap; &#x2F;** 不换行 *&#x2F;</span><br><span class="line">text-overflow: ellipsis; &#x2F;** 超出省略 *&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css选择器</title>
      <link href="/2022/03/20/css%E9%80%89%E6%8B%A9%E5%99%A8/"/>
      <url>/2022/03/20/css%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：770,阅读全文大约需要3分钟</p><h1 id="css选择"><a href="#css选择" class="headerlink" title="css选择"></a>css选择</h1><ol><li>基本选择器</li></ol><table><thead><tr><th>选择器</th><th align="left">含义</th></tr></thead><tbody><tr><td>*</td><td align="left">通用元素选择器，匹配任何元素</td></tr><tr><td>E</td><td align="left">标签选择器，匹配所有使用e的标签</td></tr><tr><td>.myClass</td><td align="left">class选择器</td></tr><tr><td>#myId</td><td align="left">id选择器</td></tr></tbody></table><ol start="2"><li>选择器组合</li></ol><table><thead><tr><th>选择器</th><th align="left">含义</th></tr></thead><tbody><tr><td>E,F</td><td align="left">多元素选择器，匹配所有E元素或F</td></tr><tr><td>E F</td><td align="left">后代元素选择器，匹配所有E的后代元素F</td></tr><tr><td>E &gt; F</td><td align="left">子元素选择器，匹配所有E的子元素F</td></tr><tr><td>E + F</td><td align="left">毗邻元素选择器，匹配所有紧随E的同级元素F</td></tr><tr><td>E ~ F</td><td align="left">同级元素选择器，匹配所有E元素之后的同级F</td></tr></tbody></table><ol start="3"><li>属性选择器</li></ol><table><thead><tr><th>选择器</th><th align="left">含义</th></tr></thead><tbody><tr><td>[att]</td><td align="left">匹配所有具有att属性的元素,以下所有选择器都能省略具体元素，代表任意元素</td></tr><tr><td>E[att]</td><td align="left">匹配所有具有att属性的E元素</td></tr><tr><td>E[att=’val’]</td><td align="left">匹配所有att属性等于’val’的E元素</td></tr><tr><td>E[att~=’val’]</td><td align="left">匹配att有多个空格分割的值，其中一个是’val’的E元素</td></tr><tr><td>E[att</td><td align="left">=’val’]</td></tr></tbody></table><ol start="4"><li>伪元素选择器</li></ol><table><thead><tr><th>选择器</th><th align="left">含义</th></tr></thead><tbody><tr><td>E:first-line</td><td align="left">匹配E元素的第一行</td></tr><tr><td>E:first-letter</td><td align="left">匹配E元素的第一个字母</td></tr><tr><td>E:before</td><td align="left">在E元素之前插入内容</td></tr><tr><td>E:after</td><td align="left">在E元素之后插入内容</td></tr></tbody></table><ol start="5"><li>模糊搜索元素</li></ol><table><thead><tr><th>选择器</th><th align="left">含义</th></tr></thead><tbody><tr><td>a[att^=’val’]</td><td align="left">属性att的值以’val’开头</td></tr><tr><td>a[att$=’val’]</td><td align="left">属性att的值以’val’结尾</td></tr><tr><td>a[att*=’val’]</td><td align="left">属性att的值包含’val’</td></tr></tbody></table><ol start="6"><li>用户界面关系相关的伪类</li></ol><table><thead><tr><th>选择器</th><th align="left">含义</th></tr></thead><tbody><tr><td>E:enabled</td><td align="left">表单中激活的元素</td></tr><tr><td>E:disabled</td><td align="left">表单中禁用的元素</td></tr><tr><td>E:checked</td><td align="left">表单中被选中的单选和复选框</td></tr><tr><td>E::selection</td><td align="left">用户当前选中的元素</td></tr></tbody></table><ol start="7"><li>结构性伪类</li></ol><table><thead><tr><th>选择器</th><th align="left">含义</th></tr></thead><tbody><tr><td>E:root</td><td align="left">文档的根元素，对于html文档来说，就是html元素</td></tr><tr><td>E:nth-child(n)</td><td align="left">匹配E的第n个子元素，从1开始</td></tr><tr><td>E:nth-last-child(n)</td><td align="left">匹配父元素倒数第n个子元素，从1开始</td></tr><tr><td>E:nth-of-type(n)</td><td align="left">匹配父元素第n个E元素，从1开始</td></tr><tr><td>E:last-child</td><td align="left">匹配父元素最后一个子元素，相当于<code>nth-last-child(1)</code></td></tr><tr><td>E:first-of-type</td><td align="left">相当于<code>nth-of-type(1)</code></td></tr><tr><td>E:only:child</td><td align="left">匹配父元素下仅有的一个子元素，相当于<code>first-child:last-child</code></td></tr><tr><td>E:only-of-type</td><td align="left">匹配父元素下使用唯一一个使用相同标签的子元素,相当于<code>E:first-of-type:last-of-type</code></td></tr><tr><td>E:empty</td><td align="left">匹配不包含任何子元素的元素</td></tr></tbody></table><h1 id="target伪类"><a href="#target伪类" class="headerlink" title="target伪类"></a>target伪类</h1><table><thead><tr><th>选择器</th><th align="left">含义</th></tr></thead><tbody><tr><td>E:target</td><td align="left">匹配文档中特定跳转id的元素</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 点击之后页面会跳转到制定id的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#text1"</span>&gt;</span>示例文字1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#text2"</span>&gt;</span>示例文字2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#text3"</span>&gt;</span>示例文字3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- div:target 就是指向跳转的那个div --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>示例文字1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>示例文字2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"text3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>示例文字3<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 也可以使用window.location.hash='#text1'，相当于点击了a标签 --&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dhtmlx-grid无限请求后端</title>
      <link href="/2022/03/20/dhtmlx-grid%E6%97%A0%E9%99%90%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF/"/>
      <url>/2022/03/20/dhtmlx-grid%E6%97%A0%E9%99%90%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：149,阅读全文大约需要1分钟</p><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>使用<code>dhtmlx</code>的<code>grid</code>组件时发现进行刷新操作之后浏览器的<code>Network</code>疯狂增加条目，即一直在请求后端。</p><h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><ol><li>通过请求定位到那个功能有问题</li><li>后端打断点，发现返回的数据数量和<code>total</code>的值不一致。</li><li>原因是我在后台做了数据过滤，但是没有重新给<code>total</code>赋值</li><li>组件发现数据不完整，于是重新请求。</li><li>因为后端代码的原因，再次请求也是不完整的。于是无限循环</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dockerfile</title>
      <link href="/2022/03/20/dockerfile/"/>
      <url>/2022/03/20/dockerfile/</url>
      
        <content type="html"><![CDATA[<p>文章字数：844,阅读全文大约需要3分钟</p><h1 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h1><ol><li>编写<code>dockerfile</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo &#39;hello world&#39; &gt; &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;index.html</span><br></pre></td></tr></table></figure><ul><li><code>FROM</code>基于那个镜像做的定制</li><li><code>RUN</code>执行后面的命令，执行一次会生成一层镜像，避免镜像膨胀过大，多个命令可以用<code>&amp;&amp;</code>连接，而不是多个<code>RUN</code></li></ul><h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ol><li>COPY</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">COPY [--chown&#x3D;&lt;user&gt;:&lt;group&gt;] &lt;源路径1&gt;...  &lt;目标路径&gt;</span><br><span class="line">COPY [--chown&#x3D;&lt;user&gt;:&lt;group&gt;] [&quot;&lt;源路径1&gt;&quot;,...  &quot;&lt;目标路径&gt;&quot;]</span><br></pre></td></tr></table></figure><ul><li><code>[--chown=&lt;user&gt;:&lt;group&gt;]</code>: 可选，更改复制到容器内文件的拥有者和所属组</li><li><code>&lt;源路径&gt;</code>可以是文件或目录，也可以是通配符。需要满足<code>go</code>的<code>filepath.Match</code>规则</li><li><code>&lt;目标路径&gt;</code>容器内的路径，不存在会自动创建</li></ul><ol start="2"><li>ADD</li></ol><ul><li>使用同<code>COPY</code></li><li>在源文件是<code>tar</code>压缩文件时使用，可以自动解压到目标目录</li><li><code>gzip</code>,<code>bzip2</code>,<code>xz</code>压缩格式</li></ul><ol start="3"><li>RUN</li></ol><ul><li><p>两种使用格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN &lt;命令行命令&gt;</span><br><span class="line">RUN [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot;]</span><br></pre></td></tr></table></figure></li><li><p>多个命令一起执行</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RUN &lt;命令行命令&gt; \</span><br><span class="line">    &amp;&amp; &lt;命令行命令&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>CMD</li></ol><ul><li>使用同<code>RUN</code></li><li>作用是指定容器启动后执行的<code>cmd</code>命令，可被启动时传入的<code>cmd</code>覆盖。作用即设置默认<code>cmd</code>命令</li><li>多条<code>cmd</code>只有最后一条有用</li></ul><ol start="5"><li>ENTRYPOINT</li></ol><ul><li>多条只有最后一个有效</li><li>可以使用<code>--entrypoint</code>覆盖</li><li>和<code>CMD</code>一样，容器启动后的默认执行的，一般搭配<code>CMD</code>一起使用，组合成一条命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line"></span><br><span class="line">ENTRYPOINT [&quot;nginx&quot;, &quot;-c&quot;] # 定参</span><br><span class="line">CMD [&quot;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&quot;] # 变参</span><br></pre></td></tr></table></figure><p>这样运行时会执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -c &#x2F;etc&#x2F;nginx&#x2F;nginx.conf</span><br></pre></td></tr></table></figure><p>然后可以通过修改<code>cmd</code>达到参数变化的效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run  nginx:test -c &#x2F;etc&#x2F;nginx&#x2F;new.conf</span><br></pre></td></tr></table></figure><ol start="6"><li>ENV</li></ol><ul><li>定义环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENV &lt;key&gt; &lt;value&gt;</span><br><span class="line">ENV &lt;key1&gt;&#x3D;&lt;value1&gt; &lt;key2&gt;&#x3D;&lt;value2&gt;...</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ENV NODE_VERSION 7.2.0</span><br><span class="line"># 在命令中使用变量</span><br><span class="line">RUN curl -SLO &quot;https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v$NODE_VERSION&#x2F;node-v$NODE_VERSION-linux-x64.tar.xz&quot;</span><br></pre></td></tr></table></figure><ol start="7"><li>ARG</li></ol><ul><li>效果和<code>ENV</code>类似，只是作用域不同。<code>ARG</code>设置的智能在<code>dockerfile</code>里有效果</li><li>可以使用<code>--build-arg &lt;参数名&gt;=&lt;值&gt;</code>覆盖</li></ul><ol start="8"><li>VOLUME</li></ol><ul><li>用于定义默认挂载路径</li><li>可以被<code>-v</code>覆盖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;&lt;路径1&gt;&quot;, &quot;&lt;路径2&gt;&quot;...]</span><br><span class="line">VOLUME &lt;路径&gt;</span><br></pre></td></tr></table></figure><ol start="9"><li>EXPOSE</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE &lt;端口1&gt; [&lt;端口2&gt;...]</span><br></pre></td></tr></table></figure><ul><li>帮助镜像使用者理解这个镜像服务的守护端口，以方便配置映射。</li><li>在运行时使用随机端口映射时，也就是 docker run -P 时，会自动随机映射 EXPOSE 的端口。</li></ul><ol start="10"><li>WORKDIR</li></ol><ul><li>切换目录，切换之后命令会在新的目录下执行</li><li>需要是存在的目录</li></ul><ol start="11"><li>USER</li></ol><ul><li>指定后续执行命令的用户和用户组（切换用户）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USER &lt;用户名&gt;[:&lt;用户组&gt;]</span><br></pre></td></tr></table></figure></li></ul><ol start="12"><li>HEALTHCHECK</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt;：设置检查容器健康状况的命令</span><br><span class="line">HEALTHCHECK NONE：如果基础镜像有健康检查指令，使用这行可以屏蔽掉其健康检查指令</span><br><span class="line"></span><br><span class="line">HEALTHCHECK [选项] CMD &lt;命令&gt; : 这边 CMD 后面跟随的命令使用，可以参考 CMD 的用法。</span><br></pre></td></tr></table></figure><ol start="13"><li>ONBUILD</li></ol><ul><li>本次构建时不会执行，其他<code>dockerfile</code>使用<code>FROM</code>调用次<code>dockerfile</code>时会执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD &lt;其它指令&gt;</span><br></pre></td></tr></table></figure><ol start="14"><li>LABEL</li></ol><ul><li>添加元数据<code>metadata</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LABEL &lt;key&gt;&#x3D;&lt;value&gt; &lt;key&gt;&#x3D;&lt;value&gt; &lt;key&gt;&#x3D;&lt;value&gt; ...</span><br><span class="line"># 例如添加作者</span><br><span class="line">LABEL org.opencontainers.image.authors&#x3D;&quot;runoob&quot;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker</title>
      <link href="/2022/03/20/docker/"/>
      <url>/2022/03/20/docker/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1482,阅读全文大约需要5分钟</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ol><li>镜像<code>Image</code>: 相当于一个<code>root</code>文件系统。</li><li>容器<code>Container</code>: 是镜像在运行中的实例，和镜像的关系类似于类和实例。</li><li>仓库<code>Repository</code>: 用于保存镜像<a href="https://hub.docker.com" target="_blank" rel="noopener">Docker Hub</a> 提供了大量镜像集合供使用。</li><li>注册中心<code>Registry</code>: 包含多个仓库，每个仓库有多个标签<code>Tag</code>。通常用<code>&lt;仓库名&gt;:&lt;标签&gt;</code>指定镜像，标签为镜像版本号，不写默认为<code>latest</code></li><li>客户端<code>client</code>: 用户可以通过客户端，利用命令行或其他工具和docker的守护进程通讯</li><li>主机<code>host</code>: 物理或虚拟机器，用于执行<code>Docker</code>守护进程和容器</li></ol><h1 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h1><ol><li>前期准备</li></ol><ul><li><p>卸载旧版本(docker、docker.io、docker-engine)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure></li><li><p>当前为<code>Docker Engine-Community</code> 软件包 <code>docker-ce</code></p></li><li><p>更新仓库索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装<code>https</code>依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>自动安装</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:&#x2F;&#x2F;get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sSL https:&#x2F;&#x2F;get.daocloud.io&#x2F;docker | sh</span><br></pre></td></tr></table></figure><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ol><li>hello world</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:15.10 &#x2F;bin&#x2F;echo &quot;hello world&quot;</span><br></pre></td></tr></table></figure><ul><li><code>run</code>命令代表运行容器</li><li><code>ubuntu:15.10</code>指定<code>ubuntu</code>镜像<code>15.10</code>标签的镜像实例。如果不存在此镜像，<code>Docker</code>会从镜像仓库<code>Docker Hub</code>中下载公共镜像</li><li><code>/bin/echo &quot;hello world&quot;</code>在容器启动后执行的命令</li></ul><ol start="2"><li>交互</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t ubuntu:15.10 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><ul><li><code>-i</code>允许容器内的标准输入<code>STDIN</code>进行交互</li><li><code>-t</code>在新容器内指定一个伪终端或终端</li><li>使用<code>exit</code>命令或者<code>CTRL+D</code>可以退出容器</li></ul><ol start="3"><li>容器后台启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d ubuntu:15.10 &#x2F;bin&#x2F;sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>后台执行</li><li><code>-c</code>启动后执行命令</li></ul><ol start="4"><li>查看容器状态</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line">CONTAINER ID        IMAGE                  COMMAND              ...  </span><br><span class="line">5917eac21c36        ubuntu:15.10           &quot;&#x2F;bin&#x2F;sh -c &#39;while t…&quot;    ...</span><br></pre></td></tr></table></figure><ol start="5"><li>查看后台容器的日志</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs 5917eac21c36</span><br></pre></td></tr></table></figure><ol start="6"><li>停止容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop 5917eac21c36</span><br></pre></td></tr></table></figure><ol start="7"><li>容器别名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name&#x3D;myName ...</span><br><span class="line"># 之后就可以</span><br><span class="line">docker logs myName</span><br><span class="line"># 以及</span><br><span class="line">docker stop myName</span><br></pre></td></tr></table></figure><ol start="8"><li>容器信息对照表</li></ol><table><thead><tr><th>标题</th><th align="left">含义</th></tr></thead><tbody><tr><td>CONTAINER ID</td><td align="left">容器 ID</td></tr><tr><td>IMAGE</td><td align="left">使用的镜像</td></tr><tr><td>COMMAND</td><td align="left">启动容器时运行的命令</td></tr><tr><td>CREATED</td><td align="left">容器的创建时间</td></tr><tr><td>PORTS</td><td align="left">容器的端口信息和使用的连接类型（tcp\udp）</td></tr><tr><td>NAMES</td><td align="left">自动分配的容器名称</td></tr><tr><td>STATUS</td><td align="left">容器状态</td></tr></tbody></table><ol start="9"><li>容器状态对照表</li></ol><table><thead><tr><th>状态</th><th>含义</th></tr></thead><tbody><tr><td>created</td><td>已创建</td></tr><tr><td>restarting</td><td>重启中</td></tr><tr><td>running/up</td><td>运行中</td></tr><tr><td>removing</td><td>迁移中</td></tr><tr><td>paused</td><td>暂停</td></tr><tr><td>exited</td><td>停止</td></tr><tr><td>dead</td><td>死亡</td></tr></tbody></table><h1 id="容器使用"><a href="#容器使用" class="headerlink" title="容器使用"></a>容器使用</h1><ol><li>查看所有的命令</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker command --help</span><br></pre></td></tr></table></figure><ol start="2"><li>获取镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><ol start="3"><li>启动容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><ul><li><code>-it</code>即<code>-i -t</code>，开启交互，打开终端</li><li><code>/bin/bash</code>镜像名后面跟的是命令，当前命令是希望开启容器后打开交互式的<code>shell</code></li></ul><ol start="4"><li>退出</li></ol><ul><li>命令行模式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure></li></ul><ol start="5"><li>后台启动</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name ubuntu-test ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>即不进入容器</li><li><code>-it</code>是打开输入，并开启终端</li></ul><ol start="6"><li>进入后台开启的容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec ubuntu-test</span><br></pre></td></tr></table></figure><ul><li><code>exec</code>命令进入后<code>exit</code>不会停止容器</li><li><code>attach</code>命令进入后<code>exit</code>会停止容器,不建议使用</li><li><code>docker exec --help</code>查看更多参数</li></ul><ol start="7"><li>本地容器导出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export 1e560fca3906 &gt; ubuntu.tar</span><br></pre></td></tr></table></figure><ol start="8"><li>导入镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat docker&#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1</span><br></pre></td></tr></table></figure><p>也可以导入路径或是网络地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker import http:&#x2F;&#x2F;example.com&#x2F;exampleimage.tgz example&#x2F;imagerepo</span><br></pre></td></tr></table></figure><ol start="9"><li>删除容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f xxxxxxx</span><br></pre></td></tr></table></figure><ol start="10"><li>清除所有终止状态的容器</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker container prune</span><br></pre></td></tr></table></figure><ol start="11"><li>web应用端口映射</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p imageName</span><br></pre></td></tr></table></figure><ul><li><code>-d</code>后台运行</li><li><code>-p</code>容器内部网络端口映射到外部主机</li><li><code>-p 80:8098</code>可以指定容器内部的<code>80</code>端口映射到外部主机的<code>8098</code>端口上</li><li><code>-p 127.0.0.1:80:8098</code>端口映射的同时绑定容器的ip</li><li><code>docker port xxxxx</code>可以查看具体容器的端口映射情况</li></ul><ol start="12"><li>挂载宿主机的目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v &#x2F;home&#x2F;dock:usr&#x2F;docker ubuntu64</span><br></pre></td></tr></table></figure><ul><li><code>-v 宿主机目录:镜像目录</code></li><li>默认读写权限，<code>-v 宿主机目录:镜像目录:ro</code>指定只读</li></ul><ol start="13"><li>挂载其他的容器，作为数据存储</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --volumes-from xxxxx ubuntu64 &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><ul><li><code>--volumes-from</code>挂载数据卷，一般是一个容器挂载宿主目录，然后其他容器再将这个容器当做数据卷挂载。</li></ul><h1 id="镜像的使用"><a href="#镜像的使用" class="headerlink" title="镜像的使用"></a>镜像的使用</h1><ol><li>列出本机镜像列表</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><ol start="2"><li>查找镜像</li></ol><ul><li>可以通过(Docker Hub)[<a href="https://hub.docker.com/]网站查找" target="_blank" rel="noopener">https://hub.docker.com/]网站查找</a></li><li>或者通过命令查询</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search httpd</span><br></pre></td></tr></table></figure><table><thead><tr><th>列名</th><th align="left">含义</th></tr></thead><tbody><tr><td>NAME</td><td align="left">镜像仓库名称</td></tr><tr><td>DESCRIPTION</td><td align="left">镜像描述</td></tr><tr><td>OFFICIAL</td><td align="left">是否是官方发布</td></tr><tr><td>STARS</td><td align="left">点赞数</td></tr><tr><td>AUTOMATED</td><td align="left">是否是自动构建</td></tr></tbody></table><ol start="3"><li>拉取镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull httpd</span><br></pre></td></tr></table></figure><ol start="4"><li>删除镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi httpd</span><br></pre></td></tr></table></figure><ol start="5"><li>修改并创建新镜像</li></ol><ul><li><p>如果当前镜像不满足要求，可以直接对镜像的实例进行修改，然后保存快照形成镜像</p></li><li><p>运行一个实例,并修改内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -t -i ubuntu:15.10 &#x2F;bin&#x2F;bash</span><br><span class="line">root@e218edb10161:&#x2F;# apt-get update</span><br></pre></td></tr></table></figure></li><li><p>保存为快照</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m&#x3D;&quot;has update&quot; -a&#x3D;&quot;runoob&quot; e218edb10161 runoob&#x2F;ubuntu:v2</span><br></pre></td></tr></table></figure></li><li><p><code>-m</code>提交描述</p></li><li><p><code>-a</code>镜像的作者</p></li><li><p><code>e218edb10161</code>容器id,提交那个容器</p></li><li><p><code>runoob/ubuntu:v2</code>创建的镜像名</p></li></ul><ol start="6"><li>构建镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t runoob&#x2F;centos:6.7 .&#x2F;dockerFile</span><br></pre></td></tr></table></figure><ul><li><code>-t</code>指定创建的镜像名</li><li><code>./dockerFile</code>dockerFile地址</li></ul><h1 id="仓库管理"><a href="#仓库管理" class="headerlink" title="仓库管理"></a>仓库管理</h1><ol><li>登录仓库，登录docker hub</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><ol start="2"><li>退出</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logout</span><br></pre></td></tr></table></figure><ol start="3"><li>搜索仓库</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search ubuntu</span><br></pre></td></tr></table></figure><ol start="4"><li>拉取镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull ubuntu</span><br></pre></td></tr></table></figure><ol start="5"><li>推送镜像</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 标记镜像</span><br><span class="line">docker tag ubuntu:18.04 username&#x2F;ubuntu:18.04</span><br><span class="line"># 列出本机所有镜像</span><br><span class="line">docker image ls</span><br><span class="line"># 推送镜像到仓库</span><br><span class="line">docker push username&#x2F;ubuntu:18.04</span><br></pre></td></tr></table></figure><h1 id="docker容器互联"><a href="#docker容器互联" class="headerlink" title="docker容器互联"></a>docker容器互联</h1><ol><li>创建网络<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker nerwork create -d bridge test-net</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>-d</code>指定网络类型，有<code>bridge</code>和<code>overlay</code></li></ul><ol start="2"><li>创建两个容器并设置网络</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -itd --name test1 --network test-net ubuntu &#x2F;bin&#x2F;bash</span><br><span class="line">$ docker run -itd --name test2 --network test-net ubuntu &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><ol start="3"><li>测试网络连接</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ping test1</span><br><span class="line">ping test2</span><br></pre></td></tr></table></figure><h1 id="配置DNS"><a href="#配置DNS" class="headerlink" title="配置DNS"></a>配置DNS</h1><ol><li>全局DNS</li></ol><ul><li>宿主机<code>/etc/docker/daemon.json</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;dns&quot; : [</span><br><span class="line">    &quot;114.114.114.114&quot;,</span><br><span class="line">    &quot;8.8.8.8&quot;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>查看容器DNS</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm  ubuntu  cat etc&#x2F;resolv.conf</span><br></pre></td></tr></table></figure><ol start="3"><li>启动时手动指定DNS<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --rm -h host_ubuntu  --dns&#x3D;114.114.114.114 --dns-search&#x3D;test.com ubuntu</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>-rm</code>退出时自动清理内部文件系统</li><li><code>-h HOSTNAME</code> 设置主机名，会被写到<code>/etc/hostname</code>和<code>/etc/hosts</code></li><li><code>--dns--search=test.com</code>设置搜索域，当搜索名为<code>host</code>的主机时，还会多搜索一个<code>host.test.com</code></li><li><code>-dns</code>指定dns</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo自定义轮询策略(SPI)</title>
      <link href="/2022/03/20/dubbo%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AE%E8%AF%A2%E7%AD%96%E7%95%A5(SPI)/"/>
      <url>/2022/03/20/dubbo%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BD%AE%E8%AF%A2%E7%AD%96%E7%95%A5(SPI)/</url>
      
        <content type="html"><![CDATA[<p>文章字数：398,阅读全文大约需要1分钟</p><h1 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h1><p>本质是<strong>策略模式</strong>,一个接口，多个实现。根据不同策略选择，进行不同的策略。</p><ol><li><code>java spi</code>例子</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 使用spi加载接口的具体实现类</span></span><br><span class="line">    ServiceLoader&lt;TestService&gt; spiLoader = ServiceLoader.load(TestService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Iterator&lt;SpiService&gt; iteratorSpi = spiLoader.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iteratorSpi.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 遍历出每个指定的实现类</span></span><br><span class="line">        TestService testService = spiLoader,next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>META-INF.services</code>文件夹内创建<code>com.test.service.testService</code>文件，即接口名称命名的文件</p><p>其中指定了此接口指定的实现类，可用<code>spi</code>获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.test.service.impl.testServiceImpl1</span><br><span class="line">com.test.service.impl.testServiceImpl2</span><br><span class="line">com.test.service.impl.testServiceImpl3</span><br></pre></td></tr></table></figure><ol start="2"><li><code>dubbo spi</code><ul><li><code>@SPI</code>注释标记的接口都可以使用<code>dubbo spi</code>进行拓展</li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置成编译期间使用，否则放入dubbo项目后会jar冲突 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>LoadBalance</code>负载均衡</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoadBalance</span> <span class="keyword">implements</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 自定义负载均衡策略</span></span><br><span class="line">    <span class="comment">// invokers 是所有provider的实现，此方法主要是通过自定义策略选择返回一个provider的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">select</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line"><span class="comment">// 返回其中一个</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>``META-INF.dubbo<code>中创建接口全名的文件</code>com.alibaba.dubbo.rpc.cluster.LoadBalance`</li><li>和<code>java</code>自带的<code>spi</code>稍微不同，需要指定一个名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myLoad&#x3D;com.test.service.impl.MyLoadBalance</span><br></pre></td></tr></table></figure><ul><li>使用此负载均衡</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"TestService"</span> <span class="attr">interface</span>=<span class="string">"com.test.service.TestService"</span> <span class="attr">loadbalance</span>=<span class="string">"myLoad"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>spi</code>原理<ul><li>为所有接口生产一个加载器</li><li>使用加载器生成接口代理对象</li><li>使用代理对象执行方法时，根据参数判断使用那个实现类</li></ul></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dubbo常用注解</title>
      <link href="/2022/03/20/dubbo%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/03/20/dubbo%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>文章字数：177,阅读全文大约需要1分钟</p><h1 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h1><ul><li><code>org.apache.dubbo.config.annotation.Service</code></li></ul><h1 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h1><ul><li><code>org.apache.dubbo.config.annotation.Reference</code></li></ul><p>常用属性</p><ul><li><code>timeout</code>: 超时时间(毫秒)</li><li><code>version</code>服务版本，需要与服务提供在设置的一致</li><li><code>group</code>服务分组，一个接口有多个实现时，可以使用分组区分，需要与服务提供者设置的一致</li><li><code>retires</code>重试次数，默认0</li><li><code>loadbalance</code>负载均衡策略：random(随机), roundrobin(轮询), leastactive(最少活跃调用)</li><li><code>url</code>可以直连服务提供着，当注册中心宕机时，可以使用这个参数直连</li><li><code>registry</code>注册中心服务列表，多个注册中心用逗号隔开</li><li><code>actives</code>每个服务消费者最大并发调用数</li><li><code>protocol</code>指定服务提供方协议</li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dubbo进阶</title>
      <link href="/2022/03/20/dubbo%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/03/20/dubbo%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：430,阅读全文大约需要1分钟</p><h1 id="RPC-服务暴露与引入"><a href="#RPC-服务暴露与引入" class="headerlink" title="RPC 服务暴露与引入"></a>RPC 服务暴露与引入</h1><p>服务方</p><ol start="2"><li>中转对象，用于中转代理对象的网络请求，参数、返回结果（<code>Protocol.export</code>创建）。</li></ol><p>消费方</p><ol><li>动态代理，为接口创建动态代理类，做请求发送功能。</li><li>使用<code>Protocol.referInvoker</code>,用于发送网络请求</li></ol><h1 id="Spring-Rmi"><a href="#Spring-Rmi" class="headerlink" title="Spring Rmi"></a>Spring Rmi</h1><p>服务提供者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Spring rmi 中转对象</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RmiServiceExporter <span class="title">serviceExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RmiServiceExporter res = <span class="keyword">new</span> RmiServiceExporter();</span><br><span class="line">    <span class="comment">// 代理接口的路径名称</span></span><br><span class="line">    res.setServiceName(TestService<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    res.setRegistryPort(port);</span><br><span class="line">    <span class="comment">// 暴露给外部访问的接口</span></span><br><span class="line">    res.setServiceInterface(TestService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">// 实际使用对象</span></span><br><span class="line">    res.setService(<span class="keyword">new</span> TestServiceImpl())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SPI机制"><a href="#SPI机制" class="headerlink" title="SPI机制"></a>SPI机制</h1><p>本质是<strong>策略模式</strong>,一个接口，多个实现。根据不同策略选择，进行不同的策略。</p><ol><li><code>java spi</code>例子</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 使用spi加载接口的具体实现类</span></span><br><span class="line">    ServiceLoader&lt;TestService&gt; spiLoader = ServiceLoader.load(TestService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Iterator&lt;SpiService&gt; iteratorSpi = spiLoader.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iteratorSpi.hasNext()) &#123;</span><br><span class="line">        <span class="comment">// 遍历出每个指定的实现类</span></span><br><span class="line">        TestService testService = spiLoader,next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>META-INF.services</code>文件夹内创建<code>com.test.service.testService</code>文件，即接口名称命名的文件</p><p>其中指定了此接口指定的实现类，可用<code>spi</code>获取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">com.test.service.impl.testServiceImpl1</span><br><span class="line">com.test.service.impl.testServiceImpl2</span><br><span class="line">com.test.service.impl.testServiceImpl3</span><br></pre></td></tr></table></figure><ol start="2"><li><code>dubbo spi</code><ul><li><code>@SPI</code>注释标记的接口都可以使用<code>dubbo spi</code>进行拓展</li></ul></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置成编译期间使用，否则放入dubbo项目后会jar冲突 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>LoadBalance</code>负载均衡</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLoadBalance</span> <span class="keyword">implements</span> <span class="title">LoadBalance</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 自定义负载均衡策略</span></span><br><span class="line">    <span class="comment">// invokers 是所有provider的实现，此方法主要是通过自定义策略选择返回一个provider的实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">select</span><span class="params">(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line"><span class="comment">// 返回其中一个</span></span><br><span class="line">        <span class="keyword">return</span> invokers.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>``META-INF.dubbo<code>中创建接口全名的文件</code>com.alibaba.dubbo.rpc.cluster.LoadBalance`</li><li>和<code>java</code>自带的<code>spi</code>稍微不同，需要指定一个名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myLoad&#x3D;com.test.service.impl.MyLoadBalance</span><br></pre></td></tr></table></figure><ul><li>使用此负载均衡</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"TestService"</span> <span class="attr">interface</span>=<span class="string">"com.test.service.TestService"</span> <span class="attr">loadbalance</span>=<span class="string">"myLoad"</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>spi</code>原理<ul><li>为所有接口生产一个加载器</li><li>使用加载器生成接口代理对象</li><li>使用代理对象执行方法时，根据参数判断使用那个实现类</li></ul></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>echart</title>
      <link href="/2022/03/20/echart/"/>
      <url>/2022/03/20/echart/</url>
      
        <content type="html"><![CDATA[<p>文章字数：866,阅读全文大约需要3分钟</p><blockquote><p>ECharts是百度开源的前端可视化工具，纯js图标库</p></blockquote><h1 id="基本图类"><a href="#基本图类" class="headerlink" title="基本图类"></a>基本图类</h1><p>echart-gl还提供了3D的图表，这里只列举2D图表</p><ol><li>柱状图（Bar）</li><li>折线图（Line）</li><li>散点图（Scatter）</li><li>K线图（K）</li><li>饼图（Pie）</li><li>仪表盘（Gauge）</li><li>漏斗图（Funnel）</li><li>地图（Map）</li><li>雷达图（Radar）</li><li>和弦图（Chord）</li><li>力导布局图（Force）</li><li>孤岛图（Island）</li></ol><p>以下图可以混搭使用<br>折线图（区域图）、柱状图（条状图）、散点图（气泡图）、K线图、 饼图（环形图）、雷达图、地图、和弦图、力导布局图</p><h1 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h1><ol><li>坐标轴（Axis）</li><li>网格（Grid）</li><li>极坐标（Polar）</li><li>标题（Title）</li><li>提示（Tooltip）</li><li>图例（Legend）</li><li>数据区域缩放（DataZoom）</li><li>值域漫游（DataRange）</li><li>工具箱（Toolbox）</li><li>时间轴（Timeline）</li></ol><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><table><thead><tr><th align="left">名称</th><th>描述</th></tr></thead><tbody><tr><td align="left">拖拽重计算</td><td>可以通过拖拽的方式提取、整合当前图表的数据；多表之间交换数据</td></tr><tr><td align="left">数据视图</td><td>将图表数据输出成文本，并可以直接编辑</td></tr><tr><td align="left">动态类型切换</td><td>折线图、柱状图自由切换</td></tr><tr><td align="left">图例开关</td><td>通过点击图例，可以隐藏/显示部分数据</td></tr><tr><td align="left">数据区域选择</td><td>通过拖动滑块，选择展示的数据区域</td></tr><tr><td align="left">多图联动connect</td><td>多张图之间事件共享，保存图片时自动拼接。多张图公用一个区域选择以及详细信息查看等，用于展示相关数据的不同视角。</td></tr><tr><td align="left">值域漫游</td><td>基于坐标的图标（地图、散点图）是通过颜色表明数组大小的，此功能可以只显示某个区域的数值</td></tr><tr><td align="left">炫光特效</td><td>可以在地图上展示好看的光电以及标线</td></tr><tr><td align="left">大规模散点图</td><td>900 x 400的区域就可以显示36W组，上百万的散点数据也能轻松展示</td></tr><tr><td align="left">数据动态加载</td><td>每次setOption之后echart会自动获取不同的地方，并进行平滑转换</td></tr><tr><td align="left">标线辅助</td><td>k线图可以画辅助标线</td></tr><tr><td align="left">多维度堆积</td><td>多组数据叠加</td></tr><tr><td align="left">子区域地图</td><td>通过主地图类型拓展出子区域地图</td></tr><tr><td align="left">GeoJson地图扩展</td><td>压缩的地图拓展</td></tr><tr><td align="left">事件交互</td><td>获取用户与图标的交互数据</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg推流命令</title>
      <link href="/2022/03/20/ffmpeg%E6%8E%A8%E6%B5%81%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/20/ffmpeg%E6%8E%A8%E6%B5%81%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：274,阅读全文大约需要1分钟</p><blockquote><p>记录几个ffmpeg的命令，其中有推hls流的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">hls:</span><br><span class="line">点播：ffmpeg -re -i source.mp4 -codec:v libx264 -codec:a libfaac -map 0 -f hls -hls_list_size 6 -hls_wrap 10 -hls_time 10 playlist.m3u8</span><br><span class="line">      &#x2F;&#x2F;ffmpeg -re -f dshow -i video&#x3D;&quot;BisonCam, NB Pro&quot; -codec:v libx264 -codec:a libfaac -map 0 -f hls -hls_list_size 6 -hls_wrap 10 -hls_time 10 playlist.m3u8</span><br><span class="line">    ffmpeg -re -f dshow -video_size 1280x720 -rtbufsize 702000k -framerate 60 -i video&#x3D;&quot;BisonCam, NB Pro&quot; -codec:v libx264 -codec:a libfaac -map 0 -f hls -hls_list_size 6 -hls_wrap 10 -hls_time 10 playlist.m3u8</span><br><span class="line">  </span><br><span class="line">rmtp:</span><br><span class="line">桌面：ffmpeg -f avfoundation -i &quot;1&quot; -vcodec libx264 -preset ultrafast -acodec libfaac -f flv rtmp:&#x2F;&#x2F;localhost:1935&#x2F;rtmplive&#x2F;home </span><br><span class="line">桌面+麦克风：ffmpeg -f avfoundation -i &quot;1:0&quot; -vcodec libx264 -preset ultrafast -acodec libmp3lame -ar 44100 -ac 1 -f flv rtmp:&#x2F;&#x2F;localhost:1935&#x2F;rtmplive&#x2F;home </span><br><span class="line">桌面麦克风摄像头在下：ffmpeg -f avfoundation -framerate 30 -i &quot;1:0&quot; \-f avfoundation -framerate 30 -video_size 640x480 -i &quot;0&quot; \-c:v libx264 -preset ultrafast \-filter_complex &#39;overlay&#x3D;main_w-overlay_w-10:main_h-overlay_h-10&#39; -acodec libmp3lame -ar 44100 -ac 1  -f flv rtmp:&#x2F;&#x2F;localhost:1935&#x2F;rtmplive&#x2F;home </span><br><span class="line">摄像头：</span><br><span class="line">获取摄像头列表：ffmpeg -list_devices true -f dshow -i dummy  </span><br><span class="line">            ffmpeg -f dshow -i video&#x3D;&quot;BisonCam, NB Pro&quot; out.mp4</span><br><span class="line">录制摄像头：ffmpeg -f dshow -i video&#x3D;&quot;Integrated Camera&quot; out.mp4  </span><br><span class="line">查看摄像头详细信息：ffmpeg -f dshow -list_options true -i video&#x3D;&quot;BisonCam, NB Pro&quot;  </span><br><span class="line">指定分辨率1280x720帧数15：ffmpeg -f dshow -s 1280x720 -r 15 -vcodec mjpeg -i video&#x3D;&quot;Integrated Camera&quot; out.avi</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex布局</title>
      <link href="/2022/03/20/flex%E5%B8%83%E5%B1%80/"/>
      <url>/2022/03/20/flex%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<p>文章字数：589,阅读全文大约需要2分钟</p><h1 id="一、Flex布局是什么"><a href="#一、Flex布局是什么" class="headerlink" title="一、Flex布局是什么"></a>一、Flex布局是什么</h1><ol><li><code>Flex</code>即弹性布局，设置容器内部空间如何布局</li><li>任何容器都能设置<code>display: flex</code></li><li>行内元素也可以设置<code>display: inline-flex</code></li><li>设置<code>flex</code>之后，子元素<code>float</code>、<code>clear</code>、<code>vertical-align</code>都会失效</li></ol><h1 id="二、基本概念"><a href="#二、基本概念" class="headerlink" title="二、基本概念"></a>二、基本概念</h1><ol><li><code>flex</code>容器即<code>flex container</code></li><li>子元素自动成为容器成员，即<code>flex item</code></li></ol><ul><li><p>flex container</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">   cross start  ^ </span><br><span class="line">                |</span><br><span class="line">           cross axis</span><br><span class="line">                |</span><br><span class="line">                |</span><br><span class="line">main start      |      main end</span><br><span class="line">&lt;---main axis------------------&gt;</span><br><span class="line">                |</span><br><span class="line">                |</span><br><span class="line">                |</span><br><span class="line">                |</span><br><span class="line">    cross end   v</span><br></pre></td></tr></table></figure></li><li><p>flex item</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">        ^</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">    cross size</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">&lt;----------main size---&gt;</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">        |</span><br><span class="line">        V</span><br></pre></td></tr></table></figure><h1 id="三、容器属性"><a href="#三、容器属性" class="headerlink" title="三、容器属性"></a>三、容器属性</h1><table><thead><tr><th>属性名</th><th>作用</th><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>flex-direction</td><td>主轴方向</td><td>row</td><td>从左向右，默认</td></tr><tr><td>-</td><td>-</td><td>row-reverse</td><td>从右向左</td></tr><tr><td>-</td><td>-</td><td>column</td><td>从上到下</td></tr><tr><td>-</td><td>-</td><td>column-reverse</td><td>从下到上</td></tr><tr><td>flex-wrap</td><td>主轴换行模式</td><td>nowrap</td><td>不换行，默认</td></tr><tr><td>-</td><td>-</td><td>wrap</td><td>换行，多余的在下</td></tr><tr><td>-</td><td>-</td><td>wrap-reverse</td><td>换行，多余在上</td></tr><tr><td>flex-flow</td><td>主轴方向及换行</td><td>flex-flow: <flex-direction>  <flex-wrap></td><td>主轴方向 换行</td></tr><tr><td>justify-content</td><td>主轴对齐方式</td><td>flex-start</td><td>向主轴开端对齐，默认</td></tr><tr><td>-</td><td>-</td><td>flex-end</td><td>向主轴末尾对齐</td></tr><tr><td>-</td><td>-</td><td>center</td><td>居中</td></tr><tr><td>-</td><td>-</td><td>space-between</td><td>两端对齐，项目间间隔相等</td></tr><tr><td>-</td><td>-</td><td>space-around</td><td>每个项目两侧间隔都相等</td></tr><tr><td>align-items</td><td>交叉轴对齐方式</td><td>flex-start</td><td>交叉轴开端对齐</td></tr><tr><td>-</td><td>-</td><td>flex-end</td><td>交叉轴末尾对</td></tr><tr><td>-</td><td>-</td><td>center</td><td>居中对齐</td></tr><tr><td>-</td><td>-</td><td>baseline</td><td>项目的第一行文字基线对齐</td></tr><tr><td>-</td><td>-</td><td>stretch</td><td>如果未设置高度，或者auto，占满整个容器</td></tr><tr><td>align-content</td><td>换行之后各行对齐方式</td><td>flex-start</td><td>对齐交叉轴起点</td></tr><tr><td>-</td><td>-</td><td>flex-end</td><td>对齐交叉轴终点</td></tr><tr><td>-</td><td>-</td><td>center</td><td>居中</td></tr><tr><td>-</td><td>-</td><td>space-between</td><td>交叉轴两端对齐</td></tr><tr><td>-</td><td>-</td><td>space-around</td><td>交叉轴间间隔相等</td></tr><tr><td>-</td><td>-</td><td>stretch</td><td>占满整个交叉轴，默认</td></tr></tbody></table><h1 id="四、项目属性"><a href="#四、项目属性" class="headerlink" title="四、项目属性"></a>四、项目属性</h1><table><thead><tr><th>属性名</th><th>作用</th><th>属性值</th><th>含义</th></tr></thead><tbody><tr><td>order</td><td>项目排列顺序</td><td>int</td><td>小的靠前</td></tr><tr><td>flex-grow</td><td>项目放大比例</td><td>int</td><td>默认0，不放大</td></tr><tr><td>flex-shrink</td><td>项目缩小比例</td><td>int</td><td>默认1，空间不足按比例缩小</td></tr><tr><td>flex-basis</td><td>主轴再分配多余空间前，项目占用的空间</td><td>px</td><td>默认auto,及项目本身大小</td></tr><tr><td>flex</td><td>放大、缩小比例、空间分配三个合并</td><td>none,flex-grow flex-shrink flex-basis</td><td>默认 0 1 auto</td></tr><tr><td>align-self</td><td>元素交叉轴对齐方式</td><td>auto</td><td>继承父元素align-items，默认</td></tr><tr><td>-</td><td>-</td><td>flex-start</td><td>交叉轴起点对齐</td></tr><tr><td>-</td><td>-</td><td>flex-end</td><td>交叉轴终点对齐</td></tr><tr><td>-</td><td>-</td><td>center</td><td>中心对齐</td></tr><tr><td>-</td><td>-</td><td>baseline</td><td>项目第一行文字对齐</td></tr><tr><td>-</td><td>-</td><td>stretch</td><td>占满容器（未设置高度）</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for循环下标多了1</title>
      <link href="/2022/03/20/for%E5%BE%AA%E7%8E%AF%E4%B8%8B%E6%A0%87%E5%A4%9A%E4%BA%861/"/>
      <url>/2022/03/20/for%E5%BE%AA%E7%8E%AF%E4%B8%8B%E6%A0%87%E5%A4%9A%E4%BA%861/</url>
      
        <content type="html"><![CDATA[<p>文章字数：71,阅读全文大约需要1分钟</p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>遇到需要将<code>for</code>循环的计数器<code>i</code>用在循环之外的情况，发现比判断条件多加了<code>1</code></p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p><code>for</code>循环在判断之后还会执行一下最后的<code>++</code>操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= <span class="number">10</span>; j++) &#123;&#125;</span><br><span class="line">System.out.println(<span class="string">"j = "</span> + j);</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">j &#x3D; 11</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freemaker获取不到值</title>
      <link href="/2022/03/20/freemaker%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E5%80%BC/"/>
      <url>/2022/03/20/freemaker%E8%8E%B7%E5%8F%96%E4%B8%8D%E5%88%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：83,阅读全文大约需要1分钟</p><blockquote><p>后台request.setAttribute(“model.key”,”xxx”);前端 ${model.key!}获取不到值。</p></blockquote><p>原因：命名错误，<code>model.key</code>的命名方式使freem把model当成对象获取key，当然获取不到。<br>解决方案：</p><ul><li><code>model_key</code>修改名字</li><li>new Model(); model.setKey(“xxx”);request.setAttribute(“model”,model); ${model.key!}新建一个Model实体类，设置属性key,传入实体类到request，前端就可以model.key获取</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freemarker传入日期报错</title>
      <link href="/2022/03/20/freemarker%E4%BC%A0%E5%85%A5%E6%97%A5%E6%9C%9F%E6%8A%A5%E9%94%99/"/>
      <url>/2022/03/20/freemarker%E4%BC%A0%E5%85%A5%E6%97%A5%E6%9C%9F%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：23,阅读全文大约需要1分钟</p><blockquote><p> Use ?date, ?time, or ?datetime to tell FreeMarker the exact type.</p></blockquote><p>原因：传入时间格式需要转换成字符串<code>?string(&quot;format&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value=<span class="string">"$&#123;(model.time?string('yyyy-MM-dd HH:mm:ss'))!&#125;"</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>freemarker报错Syntax-error</title>
      <link href="/2022/03/20/freemarker%E6%8A%A5%E9%94%99Syntax-error/"/>
      <url>/2022/03/20/freemarker%E6%8A%A5%E9%94%99Syntax-error/</url>
      
        <content type="html"><![CDATA[<p>文章字数：128,阅读全文大约需要1分钟</p><blockquote><p>freemarker.core.ParseException: Syntax error in template “xxx” in line 42, column 1:<br>Encountered “&lt;/#macro&gt;”, but was expecting one of: …..</p></blockquote><p>提示意思大概是不应该出现结尾符号<code>&lt;/#macro&gt;</code>,  期望的结果是<code>&lt;#macro&gt;</code>之类的开头符号。<br>经检查，发现<code>&lt;#macro&gt;</code>和<code>&lt;/#macro&gt;</code>确实是成对出现，并没有遗漏之类的。于是想到会不会是宏定义内部的自定义代码没有闭合，从而影响到了<code>&lt;/#macro&gt;</code>的闭合判断。</p><p>果然，一个自定义的标签未闭合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;@i18nMes &#39;common_close&#39;&gt;</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;@i18nMes &#39;common_close&#39;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>问题解决</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gc常用算法</title>
      <link href="/2022/03/20/gc%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/20/gc%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：627,阅读全文大约需要2分钟</p><h1 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h1><p>标记清除主要分为两步</p><ol><li>标记，标记需要清除的对象</li><li>清除，在内存中清除这些对象</li></ol><p>优点</p><ol><li>速度快</li><li>清理之后存活对象的地址没变，所以不影响引用</li></ol><p>缺点</p><ol><li>会造成内存碎片<br>例如：清理了一个小对象，腾出一块小空间。当有大对象需要分配时因为空间太小就无法在此区域分配空间。</li><li>因为内存碎片导致内存不足及频繁gc</li></ol><h1 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h1><ol><li>把空间分成两份同等大小的区域</li><li>只有一块区域存放对象，当此区域快要满了的时候把存活的对象放到另一个区域里</li><li>清除之前的区域</li></ol><p>优点</p><ol><li>只搬运存活对象，速度也很快</li><li>不会产生内存碎片</li></ol><p>缺点</p><ol><li>降低了内存使用率，实际只使用了一半内存</li></ol><h1 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h1><ol><li>标记可回收对象</li><li>回收对象并腾出空间</li><li>对剩下存活的对象整理</li></ol><p>和标记清除对比</p><ol><li>前两步一样，多了对于存活对象的整理</li></ol><p>优点</p><ol><li>相对复制算法，节约空间</li><li>解决了标记清除的内存碎片问题</li></ol><p>缺点</p><ol><li>效率比上面两个低</li></ol><h1 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h1><p><code>jvm</code>中年轻代采用的就是复制算法，因为年轻代中大部分对象是需要清空的，只用把少部分放到另一块内存即可<br>老年代采用的是标记-整理算法</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>happens before原则</title>
      <link href="/2022/03/20/happens%20before%E5%8E%9F%E5%88%99/"/>
      <url>/2022/03/20/happens%20before%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：287,阅读全文大约需要1分钟</p><blockquote><p><code>happens before</code>指的是在<code>cpu</code>指令重排的情况下，能保证程序运行顺序的原则。</p></blockquote><table><thead><tr><th>序号</th><th align="left">规则名</th><th align="left">描述</th></tr></thead><tbody><tr><td>1</td><td align="left">程序次序</td><td align="left">一个线程内，按照代码顺序，书写在前的先发生于书写在后的。</td></tr><tr><td>2</td><td align="left">锁定</td><td align="left">一个<code>unLock</code>操作先发生于后面对于一个锁<code>lock</code>的操作</td></tr><tr><td>3</td><td align="left"><code>volatile</code></td><td align="left">对一个变量的写操作现行发生于后面对这个变量的读操作</td></tr><tr><td>4</td><td align="left">传递</td><td align="left">如果操作A现行发生于操作B,操作B先行发生于操作C,则A先行发生于操作C</td></tr><tr><td>5</td><td align="left">线程启动</td><td align="left"><code>Thread</code>对象的<code>start()</code>方法先行发生于次线程的每一个动作</td></tr><tr><td>6</td><td align="left">线程中断</td><td align="left">对线程<code>interrupt</code>方法的调用先行发生于被中断线程的代码检测到中断事件的发生</td></tr><tr><td>7</td><td align="left">线程终结</td><td align="left">线程中所有操作都先行发生于线程的终止检测，可以通过<code>Thread.join()</code>方法结束、<code>Thread.isAlive()</code>的返回值检测线程结束</td></tr><tr><td>8</td><td align="left">对象终结</td><td align="left">对象初始化完成先行发生于他的<code>finalize()</code>方法的开始</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo个人博客搭建</title>
      <link href="/2022/03/20/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/03/20/hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1255,阅读全文大约需要5分钟</p><blockquote><p>hexo是一款基于github的博客系统，使用markdown编写文章内容。在此记录一次博客搭建主要工作。</p></blockquote><h1 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1.安装环境"></a>1.安装环境</h1><p>##1.1 git<br><code>git --version</code>查看git版本<br>##1.2 node<br><code>node -v</code>查看node版本</p><h1 id="2-初步安装Hexo"><a href="#2-初步安装Hexo" class="headerlink" title="2.初步安装Hexo"></a>2.初步安装Hexo</h1><ul><li>安装Hexo脚手架<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li><li>初始化站点<br>新建一个文件加，并使用命令行进入。执行以下命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>一个本地博客系统就构建好了</li><li>2.3站点目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml &#x2F;&#x2F;博客配置，名称、关键词、作者、语言、主体等内容设置。</span><br><span class="line">├── package.json&#x2F;&#x2F;应用信息，插件等内容。</span><br><span class="line">├── scaffolds&#x2F;&#x2F;脚手架，有三个模板：文章(posts)、博客页(page)、草稿页(draft)。</span><br><span class="line">├── source&#x2F;&#x2F;博客存放处，之后通过命令可以新建tags(标签)、categories(分页)</span><br><span class="line">|   ├── _drafts&#x2F;&#x2F;草稿(初始)</span><br><span class="line">|   └── _posts&#x2F;&#x2F;文章(初始)</span><br><span class="line">└── themes&#x2F;&#x2F;主题存放处</span><br></pre></td></tr></table></figure></li><li>常用命令<br><code>hexo n &lt;filename&gt;</code>新建文章<br><code>hexo clean</code>清除缓存<br><code>hexo g</code>生成静态页面<br><code>hexo s</code>启动本地服务器，本地查看效果<br><code>hexo d</code>部署到网站上<h1 id="3-站点优化"><a href="#3-站点优化" class="headerlink" title="3.站点优化"></a>3.站点优化</h1><h2 id="3-1分类"><a href="#3-1分类" class="headerlink" title="3.1分类"></a>3.1分类</h2></li><li>新建分类页面<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure></li><li>给页面添加类型<br>进入source-&gt;categories-&gt;index.md<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:文章分类</span><br><span class="line">date: 2019-04-22 12:25:30</span><br><span class="line">type: &quot;categories&quot;   #添加</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li>模板添加分类<br>打开scarffolds-&gt;post.md<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>这样新建文章后就会有这个属性，填写分类就可以实现文章分类功能。<h2 id="3-2-标签"><a href="#3-2-标签" class="headerlink" title="3.2 标签"></a>3.2 标签</h2></li><li>新建标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure></li><li>给页面添加标签属性<br>打开 source-&gt;tags-&gt;index.md<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2019-04-23 00:13:22</span><br><span class="line">type: &quot;tags&quot; #新添加的内容</span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="3-3使用分类和标签"><a href="#3-3使用分类和标签" class="headerlink" title="3.3使用分类和标签"></a>3.3使用分类和标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">layout: posts</span><br><span class="line">title: 我的第一篇博客</span><br><span class="line">date: 2019-04-23 00:17:41</span><br><span class="line">categories: 学习笔记</span><br><span class="line">tags: [node.js, java]</span><br></pre></td></tr></table></figure><h1 id="4-部署到GitHub"><a href="#4-部署到GitHub" class="headerlink" title="4.部署到GitHub"></a>4.部署到GitHub</h1>github中：</li></ul><ol><li>创建<code>用户名.github.io</code>的仓库</li><li>setting里添加GitHub Pages选项</li><li>本地同步 打开 . -&gt;config.yml，添加部署路径<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">    type: git</span><br><span class="line">    repo: git@github.com:yourName&#x2F;yourName.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure>注意：</li><li>冒号后有一个空格</li><li>需要先关联仓库，配置ssh</li></ol><p>使用命令<code>hexo g</code>  <code>hexo d</code> 完成生成并推送<br><code>yourName.github.io</code>就是博客网址</p><p>注：报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error deployer not found:github</span><br></pre></td></tr></table></figure><p>时，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure><p>然后再试一次。</p><hr><h1 id="主题篇"><a href="#主题篇" class="headerlink" title="主题篇"></a>主题篇</h1><h1 id="1-安装NEXT"><a href="#1-安装NEXT" class="headerlink" title="1.安装NEXT"></a>1.安装NEXT</h1><blockquote><p>next是hexo的一款主题，也可以点击<a href="https://hexo.io/themes/" target="_blank" rel="noopener">官网</a>查看跟多（even主题也不错）</p></blockquote><p>安装主题只用将next的项目clone到根目录下themes/next里</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>然后修改配置启用next主题<br>修改根目录下 <code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>在next的<code>_config.yml</code>中可以修改next的样式，共有四个。可以在<a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">官网</a>看到案例</p><ul><li>Muse  (默认)</li><li>Mist</li><li>Pisces</li><li>Gemini<br>注释其他的，留下想要的样式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure><h1 id="2-设置Menu-最上面的按钮"><a href="#2-设置Menu-最上面的按钮" class="headerlink" title="2.设置Menu(最上面的按钮)"></a>2.设置Menu(最上面的按钮)</h1><code>themes/next/_config.yml</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home #首页</span><br><span class="line">  about: &#x2F;about&#x2F; || user #关于我</span><br><span class="line">  tags: &#x2F;tags&#x2F; || tags  #标签</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th #分类</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive #归档</span><br></pre></td></tr></table></figure><h1 id="3-github挂饰"><a href="#3-github挂饰" class="headerlink" title="3.github挂饰"></a>3.github挂饰</h1><blockquote><p>点击fork me on github的按钮，在<a href="https://links.jianshu.com/go?to=http%3A%2F%2Ftholman.com%2Fgithub-corners%2F" target="_blank" rel="noopener">GitHub Corners</a>选择挂饰，复制代码添加到<code>themes/next/layout/_layout.swig</code>的<code>&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;</code>下方。将代码里的<code>https//your-url</code> 换成自己的git主页。</p></blockquote></li></ul><h1 id="4-修改超链接css样式"><a href="#4-修改超链接css样式" class="headerlink" title="4.修改超链接css样式"></a>4.修改超链接css样式</h1><p><code>themes/next/source/css/_common/components/post/post.styl</code>末尾添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3; &#x2F;&#x2F;原始链接颜色</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3; &#x2F;&#x2F;底部分割线颜色</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423; &#x2F;&#x2F;鼠标经过颜色</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423; &#x2F;&#x2F;底部分割线颜色</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-设置头像以及动画"><a href="#5-设置头像以及动画" class="headerlink" title="5.设置头像以及动画"></a>5.设置头像以及动画</h1><p>主题目录<code>_config.yml</code>中添加（找<code>Sidebar Avatar</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;添加头像地址</span><br><span class="line">avatar: [ http:&#x2F;&#x2F;....]</span><br></pre></td></tr></table></figure><p>头像圆角旋转<code>/themes/next/source/css/_common/components/sidebar/sidebar-author.styl</code>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  &#x2F;* 头像圆形 *&#x2F;</span><br><span class="line">  border-radius: 80px;</span><br><span class="line">  -webkit-border-radius: 80px;</span><br><span class="line">  -moz-border-radius: 80px;</span><br><span class="line">  box-shadow: inset 0 -1px 0 #333sf;</span><br><span class="line">  &#x2F;* 设置循环动画 [animation: (play)动画名称 (2s)动画播放时长单位秒或微秒 (ase-out)动画播放的速度曲线为以低速结束 </span><br><span class="line">    (1s)等待1秒然后开始动画 (1)动画播放次数(infinite为循环播放) ]*&#x2F;</span><br><span class="line"> </span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transition: -webkit-transform 1.0s ease-out;</span><br><span class="line">  -moz-transition: -moz-transform 1.0s ease-out;</span><br><span class="line">  transition: transform 1.0s ease-out;</span><br><span class="line">&#125;</span><br><span class="line">img:hover &#123;</span><br><span class="line">  &#x2F;* 鼠标经过停止头像旋转 </span><br><span class="line">  -webkit-animation-play-state:paused;</span><br><span class="line">  animation-play-state:paused;*&#x2F;</span><br><span class="line">  &#x2F;* 鼠标经过头像旋转360度 *&#x2F;</span><br><span class="line">  -webkit-transform: rotateZ(360deg);</span><br><span class="line">  -moz-transform: rotateZ(360deg);</span><br><span class="line">  transform: rotateZ(360deg);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* Z 轴旋转动画 *&#x2F;</span><br><span class="line">@-webkit-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -webkit-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@-moz-keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    -moz-transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    -moz-transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">@keyframes play &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    transform: rotateZ(0deg);</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    transform: rotateZ(-360deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-代码块样式"><a href="#6-代码块样式" class="headerlink" title="6.代码块样式"></a>6.代码块样式</h1><p><code>themes\next\source\css\_custom\custom.styl</code>添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 大代码块的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="7-社交网站图标"><a href="#7-社交网站图标" class="headerlink" title="7.社交网站图标"></a>7.社交网站图标</h1><p><code>next/_config.yml</code>的<code>Social</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[社交平台名]: [社交地址] || [图标名称]</span><br><span class="line">&#x2F;&#x2F;github 、heartbeat(心)、spinner(圈)...（图标）</span><br></pre></td></tr></table></figure><p>图标在<a href="https://links.jianshu.com/go?to=http%3A%2F%2Ffontawesome.io%2Ficons%2F" target="_blank" rel="noopener">Font Awesome Icon</a></p><h1 id="8-RSS"><a href="#8-RSS" class="headerlink" title="8.RSS"></a>8.RSS</h1><ol><li>根目录下<br><code>npm install --save hexo-generator-feed</code></li><li>全局<code>_config.yml</code>末尾添加<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http:&#x2F;&#x2F;hexo.io&#x2F;plugins&#x2F;</span><br><span class="line">plugins: hexo-generate-feed</span><br></pre></td></tr></table></figure>打开Next的<code>_config.yml</code>中的<code>rss:</code><br>配置<code>rss: /atom.xml</code></li></ol><h1 id="9-搜索功能"><a href="#9-搜索功能" class="headerlink" title="9.搜索功能"></a>9.搜索功能</h1><ol><li>根目录下<code>npm install hexo-generator-search --save</code></li><li>根目录<code>_config.yml</code>中</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Search </span><br><span class="line">search:</span><br><span class="line">  path: .&#x2F;public&#x2F;search.xml</span><br><span class="line">  field: post #搜索那个文件夹(page、all)</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000 #限制条数</span><br></pre></td></tr></table></figure><p>next<code>_config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true #改为true</span><br><span class="line">  trigger: auto</span><br><span class="line">  top_n_per_article: 1 #字段表示在每篇文章中显示的搜索结果数量，设成 -1 会显示每篇文章的所有搜索结果数量。</span><br></pre></td></tr></table></figure><h1 id="首页隐藏部分（点击显示更多）"><a href="#首页隐藏部分（点击显示更多）" class="headerlink" title="首页隐藏部分（点击显示更多）"></a>首页隐藏部分（点击显示更多）</h1><p>next配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Automatically Excerpt. Not recommand.</span><br><span class="line"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: false</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><h1 id="简易化搭建"><a href="#简易化搭建" class="headerlink" title="简易化搭建"></a>简易化搭建</h1><p><code>HEXO Portable</code>一分钟搭建博客</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>head标签内元素使用</title>
      <link href="/2022/03/20/head%E6%A0%87%E7%AD%BE%E5%86%85%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/head%E6%A0%87%E7%AD%BE%E5%86%85%E5%85%83%E7%B4%A0%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：395,阅读全文大约需要1分钟</p><blockquote><p>head标签里的元素一般为不显示，或者有特殊用途的。</p></blockquote><h1 id="viewport"><a href="#viewport" class="headerlink" title="viewport"></a>viewport</h1><p>一般用来控制移动端访问效果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width,initial-scale&#x3D;1,minimum-scale&#x3D;1,maximum-scale&#x3D;1,user-scalable&#x3D;no&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><ul><li>width : 控制viewport的大小，可以指定一个值，如600， 或者特殊的值，如device-width为设备的宽度（单位为缩放为100%的CSS的像素）</li><li>height : 和width相对应，指定高度</li><li>initial-scale : 初始缩放比例，页面第一次加载时的缩放比例</li><li>maximum-scale : 允许用户缩放到的最大比例，范围从0到10.0</li><li>minimum-scale : 允许用户缩放到的最小比例，范围从0到10.0</li><li>user-scalable : 用户是否可以手动缩放，值可以是：①yes、 true允许用户缩放；②no、false不允许用户缩放</li></ul><h1 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta  name&#x3D;&quot;Generator&quot;  content&#x3D;&quot;&quot;&gt;     </span><br><span class="line"> &lt;!--向搜索引擎说明你的网页的关键词--&gt;</span><br><span class="line">&lt;meta  name&#x3D;&quot;Keywords&quot;    content&#x3D;&quot;&quot;&gt; </span><br><span class="line">&lt;!-- 告诉搜索引擎你的站点的主要内容--&gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;Description&quot;  content&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;!-- 网站logo图片--&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;icon&quot; type&#x3D;&quot;image&#x2F;ico&quot; href&#x3D;&quot;&#x2F;favicon.ico&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate三级缓存</title>
      <link href="/2022/03/20/hibernate%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
      <url>/2022/03/20/hibernate%E4%B8%89%E7%BA%A7%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>文章字数：420,阅读全文大约需要1分钟</p><h1 id="一级缓存"><a href="#一级缓存" class="headerlink" title="一级缓存"></a>一级缓存</h1><p>session级别，同一个session生命周期通样的查询最多一次请求。<br>就是一个管理对象的Map</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;原理</span><br><span class="line">1. 生成key&#x3D;&#x3D;类权限名#id值</span><br><span class="line">2. 从一级缓存找到key</span><br><span class="line">3. 没找到从数据库找，存入map</span><br><span class="line">session.clear();&#x2F;&#x2F;清空一级缓存</span><br><span class="line">session.evict(A);&#x2F;&#x2F;清空一个数据</span><br></pre></td></tr></table></figure><h1 id="二级缓存"><a href="#二级缓存" class="headerlink" title="二级缓存"></a>二级缓存</h1><p><code>sessionFactory</code>级别的缓存，使用第三方缓存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得二级缓存对象</span></span><br><span class="line">Cache cache=sessionFactory.getCache();</span><br><span class="line"><span class="comment">//剔除一个实例对象</span></span><br><span class="line">cache.evictEntity(<span class="class"><span class="keyword">class</span>,<span class="title">Long</span>)</span>;</span><br><span class="line"><span class="comment">//剔除一个类的所有实例</span></span><br><span class="line">cache.evictEntityRegion(<span class="class"><span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="comment">//剔除所有二级缓存中的实例</span></span><br><span class="line">cache.evictEntityRegions();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hibernate.cache.use_second_level_cache&#x3D;ture  &#x2F;&#x2F;使用二级缓存</span><br><span class="line">hibernate.cache.region.factory_class&#x3D;EhCacheRegionFactory的全限名  &#x2F;&#x2F;二级缓存是第三方,这儿选的是EhCache</span><br></pre></td></tr></table></figure><h1 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h1><p>查询缓存，query语句缓存。<br>但是存储使用List,有一个元素变了其他的都要变，所以一般只用于不变的List.</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 调优 </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>https加密过程</title>
      <link href="/2022/03/20/https%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/03/20/https%E5%8A%A0%E5%AF%86%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：201,阅读全文大约需要1分钟</p><h1 id="http和https"><a href="#http和https" class="headerlink" title="http和https"></a>http和https</h1><ol><li>二者都是网络传输协议(应用层)，https是在http基础上进行加密的</li><li>https是符合http协议的，在http协议之下，tpc之上又建立了一层加密机制。</li></ol><h1 id="https加密过程"><a href="#https加密过程" class="headerlink" title="https加密过程"></a>https加密过程</h1><ol><li>客户端访问服务端请求证书</li><li>拿到证书后通过证书的公钥加密一个随机生成的密码（还要通过CA检验证书的有效性）</li><li>服务器通过私钥解密随机密码</li><li>之后的通讯都可以通过这个共有的密码进行对称加密通讯。</li><li>通讯的报文之后还会追加数据的数字签名（hash）用于对方判断数据的完整性以及是否被篡改过。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 安全 </tag>
            
            <tag> 网络 </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hibernate持久层</title>
      <link href="/2022/03/20/hibernate%E6%8C%81%E4%B9%85%E5%B1%82/"/>
      <url>/2022/03/20/hibernate%E6%8C%81%E4%B9%85%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<p>文章字数：420,阅读全文大约需要1分钟</p><blockquote><p>save()方法传入了id，但是识别成了新增</p></blockquote><p>新建了model并且调用save()导致识别成了新增</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model model&#x3D;new Model ();</span><br><span class="line">copyItem2Model(Item,model);&#x2F;&#x2F;转换</span><br><span class="line">modelDao.save(visWatchList);</span><br></pre></td></tr></table></figure><p>修改后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model model&#x3D;modelDao.findById(id);</span><br><span class="line">copyItem2Model(Item,model);&#x2F;&#x2F;转换</span><br><span class="line">modelDao.save(visWatchList);</span><br></pre></td></tr></table></figure><h1 id="hibernate持久层三种状态"><a href="#hibernate持久层三种状态" class="headerlink" title="hibernate持久层三种状态"></a>hibernate持久层三种状态</h1><ul><li><p>瞬时状态 (Transient) </p><blockquote><p>new了一个对象，但是没有被hibernate缓存管理，数据库中没有一条记录和其对应，不与session关联</p></blockquote></li><li><p>持久状态 (Persistent)</p></li></ul><ol><li>save() 和 saveOrUpdate()使对象转换成持久态</li><li>find(),get()等方法查询的对象也是持久态<blockquote><p>对象被持久化对象管理，对象的改变会同步带数据库(这就是原因)同步不会马上进行，在Transaction之后，也就是commit()后提交。未提交的叫脏数据</p></blockquote></li></ol><ul><li>游离状态 (Detached)</li></ul><ol><li>close() 或 clear(),evict() 之后，持久对象会变为脱管对象</li><li>就是脱离管理状态<blockquote><p>脱管对象和瞬时状态差不多，只是数据库内可能存在一样的记录，但是并不关联。</p></blockquote></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http及https握手复用</title>
      <link href="/2022/03/20/http%E5%8F%8Ahttps%E6%8F%A1%E6%89%8B%E5%A4%8D%E7%94%A8/"/>
      <url>/2022/03/20/http%E5%8F%8Ahttps%E6%8F%A1%E6%89%8B%E5%A4%8D%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：261,阅读全文大约需要1分钟</p><h1 id="http长链接"><a href="#http长链接" class="headerlink" title="http长链接"></a>http长链接</h1><ol><li>http是一问一答的形式，本身没有长短的概念</li><li>http是基于tcp协议的，tcp是长链接</li><li>HTTP/1.1起浏览器默认支持<code>connection:keep-alive</code>即tcp连接不中断，每次http请求都复用一条tcp连接</li><li><code>keep-alive</code>时间可以在服务器上设置</li></ol><h1 id="https复用ssl握手"><a href="#https复用ssl握手" class="headerlink" title="https复用ssl握手"></a>https复用ssl握手</h1><ol><li>客户端获取证书，的到服务器公钥</li><li>客户端利用公钥给服务器发送一个<code>PMS(Pre-Master Secret)</code>前主秘钥。</li><li>双方共享了PMS之后利用特定算法导出之后对话需要使用的对称秘钥（开销很大）</li><li>为了避免每次通讯都要进行以上SSL握手环节，双方都会根据<code>SessionID</code>保存对称加密秘钥。下次通讯直接从缓存获取就可以了。</li><li>SSL是面向连接的，逻辑上独立于传输层。是传输层之上，应用层之下的安全层。即兼容了老的http，有不影响tcp。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 安全 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http返回值和请求方法</title>
      <link href="/2022/03/20/http%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/20/http%E8%BF%94%E5%9B%9E%E5%80%BC%E5%92%8C%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1139,阅读全文大约需要4分钟</p><h1 id="一、返回值"><a href="#一、返回值" class="headerlink" title="一、返回值"></a>一、返回值</h1><p><strong>1.该类型状态码表示接收到请求并且继续处理</strong></p><ul><li><code>100</code>: 客户端必须继续发出请求。</li><li><code>101</code>: 客户端要求服务器根据请求转换HTTP协议版本。</li></ul><p><strong>2.该类型状态码表示动作被成功接收、理解和接受</strong></p><ul><li><code>200</code>: 表明该请求被成功地完成，所请求的资源发送到客户端。</li><li><code>201</code>: 提示知道新文件的URL。</li><li><code>202</code>: 接受并处理，但处理未完成。</li><li><code>203</code>: 返回信息不确定或不完整。</li><li><code>204</code>: 收到请求，但返回信息为空。</li><li><code>205</code>: 服务器完成了请求，用户必须复位当前已经浏览过的文件。</li><li><code>206</code>: 服务器已经完成了部分用户的GET请求。</li></ul><p><strong>3.该类型状态码表示为了完成指定的动作，必须接受进一步处理。</strong></p><ul><li><code>300</code>: 请求的资源可在多处获得。</li><li><code>301</code>: 本网页被永久性转移到另一个URL。</li><li><code>302</code>: 请求的网页被重定向到新的地址。</li><li><code>303</code>: 建议用户访问其他URL或访问方式。</li><li><code>304</code>: 自从上次请求后，请求的网页未修改过。</li><li><code>305</code>: 请求的资源必须从服务器指定的地址获得。</li><li><code>306</code>: 前一版本HTTP中使用的代码，现已不再使用。</li><li><code>307</code>: 声明请求的资源临时性删除。</li></ul><p><strong>4.该类型状态码表示请求包含错误语法或不能正确执行。</strong></p><ul><li><code>400</code>: 客户端请求有语法错误。</li><li><code>401</code>: 请求未经授权。</li><li><code>402</code>: 保留有效ChargeTo头响应。</li><li><code>403</code>: 禁止访问，服务器收到请求，但拒绝提供服务。</li><li><code>404</code>: 可连接服务器，但服务器无法取得所请求的网页，请求资源不存在。</li><li><code>405</code>: 用户在Request-Line字段定义的方法不被允许。</li><li><code>406</code>: 根据用户发送的Accept，请求资源不可访问。</li><li><code>407</code>: 类似401，用户必须首先在代理服务器上取得授权。</li><li><code>408</code>: 客户端没有在用户指定的时间内完成请求。</li><li><code>409</code>: 对当前资源状态，请求不能完成。</li><li><code>410</code>: 服务器上不再有此资源。</li><li><code>411</code>: 服务器拒绝用户定义的Content-Length属性请求。</li><li><code>412</code>: 一个或多个请求头字段在当前请求中错误。</li><li><code>413</code>: 请求的资源大于服务器允许的大小。</li><li><code>414</code>: 请求的资源URL长于服务器允许的长度。</li><li><code>415</code>: 请求资源不支持请求项目格式。</li><li><code>416</code>: 请求中包含Range请求头字段，在当前请求资源范围内没有range指示值。</li><li><code>417</code>: 服务器不满足请求Expect头字段指定的期望值。</li></ul><p><strong>5.该类型状态码表示服务器或网关错误。</strong></p><ul><li><code>500</code>: 服务器错误。</li><li><code>501</code>: 服务器不支持请求的功能。</li><li><code>502</code>: 网关错误。</li><li><code>503</code>: 无法获得服务。</li><li><code>504</code>: 网关超时。</li><li><code>505</code>: 不支持的http版本。</li></ul><h1 id="二、http请求方法"><a href="#二、http请求方法" class="headerlink" title="二、http请求方法"></a>二、http请求方法</h1><ul><li><code>OPTIONS</code>: 返回服务器针对特定资源所支持的HTTP请求方法。</li><li><code>HEAD</code>: 与GET请求一致，只不过不会返回响应体。</li><li><code>GET</code>: 请求指定的资源。</li><li><code>POST</code>: 向指定资源提交数据进行处理请求，数据包含在请求体中，可能会导致新资源的创建或已有资源的修改。</li><li><code>PUT</code>: 向指定资源位置上传最新内容。</li><li><code>DELETE</code>: 请求服务器删除所标识的资源。</li></ul><h1 id="三、get和post区别"><a href="#三、get和post区别" class="headerlink" title="三、get和post区别"></a>三、get和post区别</h1><ul><li><code>get</code>数据放在url后，<code>post</code>把数据放在body中</li><li><code>get</code>最多提交1024字节数据，<code>post</code>没有限制</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea-dtd路径注册</title>
      <link href="/2022/03/20/idea-dtd%E8%B7%AF%E5%BE%84%E6%B3%A8%E5%86%8C/"/>
      <url>/2022/03/20/idea-dtd%E8%B7%AF%E5%BE%84%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：33,阅读全文大约需要1分钟</p><blockquote><p>URI is not registered (Settings | Languages)  即url没有注册，需要在编辑器注册一下。</p></blockquote><p>dtd,xml的规则文件。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p><code>setting</code>-&gt;search <code>Schemas and DTDs</code>-&gt;Ignored Schemas and DTDs 添加</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea快捷键</title>
      <link href="/2022/03/20/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/03/20/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>文章字数：675,阅读全文大约需要2分钟</p><h2 id="1、进入-返回方法快捷键"><a href="#1、进入-返回方法快捷键" class="headerlink" title="1、进入/返回方法快捷键"></a>1、进入/返回方法快捷键</h2><p><strong><em>Ctrl+B</em></strong>   进入光标所在方法定义的地方或返回该方法被使用的地方（代替Ctrl+鼠标点击方法进入方式，避免了手指在键盘和鼠标之间切换，非常好用的快捷键）</p><p><strong><em>Ctrl+Alt+B</em></strong>   进入子类或子方法定义的地方，</p><p><strong><em>Ctrl+U</em></strong> 子类跳转到接口方法</p><p><strong><em>Ctrl+F12</em></strong>   查看当前类的所有方法</p><p><strong><em>Ctrl+H</em></strong>   显示该类继承关系结构图</p><p><strong><em>Ctrl+Q</em></strong>   显示类/方法/变量上的doc注释说明</p><h2 id="2、光标定位及选中快捷键"><a href="#2、光标定位及选中快捷键" class="headerlink" title="2、光标定位及选中快捷键"></a>2、光标定位及选中快捷键</h2><p><strong><em>Ctrl+Alt+Left/Right</em></strong>   光标定位到上一个/下一个浏览位置处</p><p><strong><em>Ctrl+Shift+Backspace</em></strong>   光标定位到上次修改的地方</p><p> <strong><em>Alt+Up/Down</em></strong>   移动光标到上一个/下一个方法开始处</p><p><strong><em>Ctrl+Left/Right</em></strong>   移动光标到前一个/后一个单词处，加Shift键，产生选中效果</p><p><strong><em>Ctrl+[/]</em></strong>   移动光标到前/后代码块，加Shift键，产生选中效果</p><p> <strong><em>Ctrl+W</em></strong>   按语法选中代码，连续按会有其他效果，加Shift键，产生反向选中效果</p><p><strong><em>F2</em></strong>   快速定位到下一个错误和警告处，加Shift键，定位到上一个错误处</p><p><strong><em>Ctrl+”+/-“</em></strong>   当前方法展开/折叠，加Shift键，全部方法展开/折叠</p><p><strong><em>Ctrl+Alt+T</em></strong> 在选中代码情况下，Surround With(if/else/try catch…) 快速包裹代码</p><p><strong><em>Ctrl+Alt+V</em></strong> 提出选中内容为局部变量</p><p><strong><em>home</em></strong> 快速移动到行头</p><p><strong><em>end</em></strong> 快速移动到行尾</p><h2 id="3、删除-插入相关快捷键"><a href="#3、删除-插入相关快捷键" class="headerlink" title="3、删除/插入相关快捷键"></a>3、删除/插入相关快捷键</h2><p><strong><em>Ctrl+Backspace</em></strong>   按单词删除</p><p><strong><em>Ctrl+D</em></strong>   复制行</p><p><strong><em>Ctrl+Y</em></strong>   删除当前行</p><p><strong><em>Ctr+Shift+U</em></strong>   大小写转化</p><p> <strong><em>Shift+Enter</em></strong>   向下插入新行，配合Ctrl键，先代码补全再插入新行</p><p><strong><em>Ctrl+Alt+Enter</em></strong>   向上插入新行</p><p> <strong><em>Ctrl+Shift+Up/Down</em></strong>   整体向上/下移动语句块/方法</p><p><strong><em>Alt+Shift+Up/Down</em></strong>   单行向上/下移一行</p><p><strong><em>Ctrl+Alt+M</em></strong> 复制代码并生成一个调用函数</p><h2 id="4、文件之间定位相关快捷"><a href="#4、文件之间定位相关快捷" class="headerlink" title="4、文件之间定位相关快捷"></a>4、文件之间定位相关快捷</h2><p><strong><em>Ctrl+E/Ctrl+Tab</em></strong>   查看/切换最近打开过的文件（通过方向键上下选择后，按Enter键进入）</p><p><strong><em>ALT+Left/Right</em></strong>   打开的代码编辑窗口中左右切换</p><h2 id="5、查找相关快捷键"><a href="#5、查找相关快捷键" class="headerlink" title="5、查找相关快捷键"></a>5、查找相关快捷键</h2><p><strong><em>Ctrl+F/R</em></strong>   当前文件下查找/替换文本，加Shift键，当前工程路径下查找/替换文本</p><p><strong><em>Ctrl+N</em></strong>   查找类</p><p><strong><em>Ctrl+Shift+N</em></strong>   查找文件</p><p><strong><em>Ctrl+Shift+Alt+N</em></strong>   查找类中的方法或变量</p><p> <strong><em>Shift+Shift</em></strong>   全局查找</p><p><strong><em>alt+7</em></strong>  查找当前类的所有方法</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea报错PersistentEnumerator-storage-corrupted</title>
      <link href="/2022/03/20/idea%E6%8A%A5%E9%94%99PersistentEnumerator-storage-corrupted/"/>
      <url>/2022/03/20/idea%E6%8A%A5%E9%94%99PersistentEnumerator-storage-corrupted/</url>
      
        <content type="html"><![CDATA[<p>文章字数：64,阅读全文大约需要1分钟<br>idea编译程序时报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">error: (com.intellij.util.io.PersistentEnumeratorBase$CorruptedException) PersistentEnumerator storage corrupted </span><br><span class="line">C:\Users\Administrator\.IntelliJIdea2017.2\system\compile-server\packmes_f0d28b04\targets\artifact\packmes_war_exploded\out-src\data</span><br><span class="line">com.intellij.util.io.PersistentEnumeratorBase$CorruptedException: PersistentEnumerator storage corrupted </span><br><span class="line">C:\Users\Administrator\.IntelliJIdea2017.2\system\compile-server\packmes_f0d28b04\targets\artifact\packmes_war_exploded\out-src\data</span><br><span class="line">    at com.intellij.util.io.PersistentEnumeratorBase.&lt;init&gt;(PersistentEnumeratorBase.java:222)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>清空以下文件夹内的文件<br><code>C:\Users\Administrator.IntelliJIdea2017.2\system\compile-server\packmes_f0d28b04\targets\artifact\packmes_war_exploded\out-src/data</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea重构快捷键</title>
      <link href="/2022/03/20/idea%E9%87%8D%E6%9E%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/03/20/idea%E9%87%8D%E6%9E%84%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>文章字数：124,阅读全文大约需要1分钟</p><blockquote><p><a href="https://blog.csdn.net/wangmeng951011/java/article/details/62221376" target="_blank" rel="noopener">原文</a> </p></blockquote><p>重命名文件、方法、属性等（rename）：SHIFT+F6<br>提取当前选择为变量（extract variable）：CTRL+ALT+V<br>提取当前选择为属性（extract field）：CTRL+ALT+F<br>提取当前选择为常量（extract constant）：CTRL+ALT+C<br>提取当前选择为方法（extract method）：CTRL+ALT+M<br>提取当前选择为方法参数（extract parameter）：CTRL+ALT+P<br>重构类、方法（change signarture）：CTRL+F6<br>提取代码块至if、try等结构中（surround with）：CTRL+ALT+T<br>创建模块文件等（new）：CTRL+ALT+N<br>创建测试用例（test）：CTRL+SHIFT+T<br>重构菜单（refactor for this）：CTRL+T</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>input输入框图片转base64</title>
      <link href="/2022/03/20/input%E8%BE%93%E5%85%A5%E6%A1%86%E5%9B%BE%E7%89%87%E8%BD%ACbase64/"/>
      <url>/2022/03/20/input%E8%BE%93%E5%85%A5%E6%A1%86%E5%9B%BE%E7%89%87%E8%BD%ACbase64/</url>
      
        <content type="html"><![CDATA[<p>文章字数：290,阅读全文大约需要1分钟</p><blockquote><p>封装了几个方法，主要是传入input对象，将对象选中的文件转程base64形式。可以用于图片上传，图片选中后马上显示等功能</p></blockquote><p><strong>1.读取input对象图片，并调用2执行压缩</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * input对象内的图片转Base64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>inputOb input对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>outputFun 转换后执行的函数，有一个base64的形参</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inputImgToBase64</span>(<span class="params">inputOb,outputFun</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> file=inputOb.files[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="regexp">/image\/\w+/</span>.test(file.type))<span class="comment">//判断获取的是否为图片文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        alert(<span class="string">"请确保文件为图像文件"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> reader=<span class="keyword">new</span> FileReader();</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.onload=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> image = <span class="keyword">new</span> Image();</span><br><span class="line">        <span class="comment">//文件类型</span></span><br><span class="line">        image.imgType = file.type;</span><br><span class="line">        <span class="comment">//保存后缀</span></span><br><span class="line">        <span class="keyword">var</span> fileNameList = file.name.split(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">var</span> fileType = fileNameList[fileNameList.length<span class="number">-1</span>];</span><br><span class="line">        $(<span class="string">'#photoType'</span>).attr(<span class="string">'value'</span>,fileType);</span><br><span class="line"></span><br><span class="line">        image.src = e.target.result;</span><br><span class="line">        image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> expectWidth = <span class="number">480</span>;</span><br><span class="line">            <span class="keyword">var</span> expectHeight = <span class="number">640</span>;</span><br><span class="line">            <span class="keyword">var</span> base64 = compress(<span class="keyword">this</span>,expectWidth,expectHeight,<span class="number">1</span>);</span><br><span class="line">            outputFun(base64);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.图片转base64</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片转base64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>img img对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">width</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">height</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param </span>ratio 比例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns <span class="variable">base64Img</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compress</span>(<span class="params">img, width, height, ratio</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas, ctx, img64;</span><br><span class="line">    canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">    canvas.width = width;</span><br><span class="line">    canvas.height = height;</span><br><span class="line">    ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">    img64 = canvas.toDataURL(img.imgType, ratio);</span><br><span class="line">    <span class="keyword">return</span> img64;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用方式</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//input对象，函数</span></span><br><span class="line">inputImgToBase64($(<span class="string">'#inputPhoto'</span>)[<span class="number">0</span>],<span class="function"><span class="keyword">function</span> (<span class="params">base64</span>) </span>&#123;<span class="comment">//base64为转换后图像的base64编码</span></span><br><span class="line">            $(<span class="string">'#output'</span>)[<span class="number">0</span>].src=base64</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea骚操作</title>
      <link href="/2022/03/20/idea%E9%AA%9A%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/20/idea%E9%AA%9A%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：637,阅读全文大约需要2分钟</p><blockquote><p><a href="https://blog.csdn.net/huaidandaidai1/article/details/99576175" target="_blank" rel="noopener">原文</a></p></blockquote><p>一、搜索</p><ol><li><code>Ctrl + N</code> :按类名进行搜索</li><li><code>Ctrl + F</code>: 当前文件内搜索</li><li><code>Ctrl + Shift + F</code>： 全局搜索</li><li><code>Ctrl + Shift + Alt + N</code>：模糊搜索方法名</li><li><code>Ctrl + Shift + N</code>：模糊搜索目录</li><li><code>Ctrl + E</code> :打开 曾打开过的文件的记录；</li><li><code>Ctrl + Shift + E</code> : 6的增强版</li></ol><p>二、代码生成<br>1.<code>Ctrl + O</code> :选择重写父类方法；</p><ol><li><code>Ctrl + Shift + Enter</code>：收尾操作，自动补全大括号和分号等；</li><li><code>Alt + Insert</code> : 自动生成get/set和构造方法；</li></ol><p>三、代码自动补全</p><ol><li><code>var</code>声明：如输入“aaa”.var 自动补全为 string  a =“aaa”；</li><li><code>for/fori</code>遍历：如list.for/fori 自动补全为for(Obejct  o:list){…} 或for(int i=0;i&lt;list.size();i++){…};</li><li><code>null</code>或<code>notnull</code>判断：<code>person.nul</code>l/<code>notnull</code> 自动补全为<code>if(person == null){...}</code>或<code>if(person != null){...}</code>；</li><li><code>nn</code>判非空:如person.nn 自动补全为 if(person !=null)；</li><li><code>if</code>条件判断：xx&gt;0.if 自动补全为：if(xx &gt; 0){…}；</li><li><code>cast</code>强转： Object a=“aa”，输入a.cast自动补全为(String)a;</li><li><code>return</code> 返回值：“aa”.return 自动补全为return “aa”;</li><li><code>sout</code>：生成System.out.println()</li><li><code>psvm</code>：生成main方法；</li><li><code>sout</code>：生成System.out.println()</li><li><code>CTRL+ALT+T</code>或者<code>CTRL+ALT+Win+T</code>: 代码被模板包围，<code>try</code> <code>if</code>之类的可选<br>四、其他</li><li><code>Ctrl + Shift + 方向键↑和↓</code> ：向上或向下移动代码</li><li><code>Ctrl + Alt + B(或鼠标左键)</code>：进入该接口方法的实现方法；</li><li><code>Ctrl + Alt + U</code>：显示该类的继承关系图</li><li><code>Ctrl + Alt + 方向键←和→</code>：前进或后退</li><li><code>Ctrl + G</code> :跳转到某行</li><li><code>Ctrl + Shift + U</code> ：大小写转换</li></ol><p>五、运行调试</p><ol><li><code>Ctrl + F10</code>：热部署tomcat项目；</li><li><code>F7</code>：单步调试，进入方法内部；</li><li><code>F8</code>：单步调试，不进入方法内部；</li><li><code>F9</code> 继续执行，进入下一个断点或执行完程序</li><li><code>Shift+F7</code>：选择要进入的方法；</li><li><code>Shift+F8</code>：跳出方法；</li><li><code>Alt+F8</code>：执行表达式查看结果；</li><li><code>Alt+F9</code>：运行到断点；</li><li><code>Ctrl+F8</code> 设置/取消当前行断点；</li><li><code>Ctrl+Shift+F8</code> 查看断点；</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jasypt加密SpringBoot配置文件</title>
      <link href="/2022/03/20/jasypt%E5%8A%A0%E5%AF%86SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/20/jasypt%E5%8A%A0%E5%AF%86SpringBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：290,阅读全文大约需要1分钟</p><blockquote><p><code>application.properties</code>中经常会放账户密码数据库连接地址等敏感信息，可能会造成信息的泄露。使用<code>jasypt</code>可以加密解密配置文件。</p></blockquote><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ulisesbocchio&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jasypt-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>通过密钥生成密文</li></ol><ul><li>下载<code>jasypt-1.9.2.jar</code>生成</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp jasypt-1.9.2.jar org.jasypt.intf.cli.JasyptPBEStringEncryptionCLI password&#x3D;G0CvDz7oJn6 algorithm&#x3D;PBEWithMD5AndDES input&#x3D;root</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">----ENVIRONMENT-----------------</span><br><span class="line">Runtime: Oracle Corporation Java HotSpot(TM) 64-Bit Server VM 25.171-b11</span><br><span class="line"></span><br><span class="line">----ARGUMENTS-------------------</span><br><span class="line">input: root</span><br><span class="line">algorithm: PBEWithMD5AndDES</span><br><span class="line">password: G0CvDz7oJn6</span><br><span class="line"></span><br><span class="line">----OUTPUT----------------------</span><br><span class="line">Gvkoz+sbFWiRe3ECtizV1A&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><ul><li>代码生成</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.jasypt.util.text.BasicTextEncryptor;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">testTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        testTest t = <span class="keyword">new</span> testTest();</span><br><span class="line">        t.getPass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密解密</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getPass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BasicTextEncryptor stringEncryptor = <span class="keyword">new</span> BasicTextEncryptor();</span><br><span class="line">        <span class="comment">//设置密钥</span></span><br><span class="line">        stringEncryptor.setPassword(<span class="string">"tfa46e505nh4565e5o8adjg4a8e01by"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加密数据</span></span><br><span class="line">        String url = stringEncryptor.encrypt(<span class="string">"url"</span>);</span><br><span class="line">        String name = stringEncryptor.encrypt(<span class="string">"username"</span>);</span><br><span class="line">        String password = stringEncryptor.encrypt(<span class="string">"pwd"</span>);</span><br><span class="line">        <span class="comment">//结果</span></span><br><span class="line">        System.out.println(<span class="string">"-----------------url------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ENC("</span>+url+<span class="string">")"</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------------name------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ENC("</span>+name+<span class="string">")"</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------------pwd------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"ENC("</span>+password+<span class="string">")"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//手动密文解密</span></span><br><span class="line">        password = password.replace(<span class="string">"ENC("</span>,<span class="string">""</span>);</span><br><span class="line">        password = password.replace(<span class="string">")"</span>,<span class="string">""</span>);</span><br><span class="line">        String decrypted = stringEncryptor.decrypt(password);</span><br><span class="line">        System.out.println(<span class="string">"-----------------decrypt------------------"</span>);</span><br><span class="line">        System.out.println(decrypted);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自动生成密钥</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------------uuid------------------"</span>);</span><br><span class="line">        System.out.println(uuid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 加密所需的salt(盐),和生成密文时使用的要一样</span><br><span class="line">jasypt.encryptor.password&#x3D;tfa46e505nh4565e5o8adjg4a8e01by</span><br><span class="line"># 加密后的密文，使用ENC(...)包裹</span><br><span class="line">spring.datasource.username&#x3D;ENC(6eaMh&#x2F;RX5oXUVca9ignvtg&#x3D;&#x3D;)</span><br><span class="line">spring.datasource.password&#x3D;ENC(6eaMh&#x2F;RX5oXUVca9ignvtg&#x3D;&#x3D;)</span><br></pre></td></tr></table></figure><ol start="3"><li>开启加密</li></ol><p>项目里没有使用@SpringBootApplication或者@EnableAutoConfiguration，可以手动在Configuration类上添加注解@EnableEncryptableProperties，来在整个环境的属性启用属性加密。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-IO</title>
      <link href="/2022/03/20/java-IO/"/>
      <url>/2022/03/20/java-IO/</url>
      
        <content type="html"><![CDATA[<p>文章字数：840,阅读全文大约需要3分钟</p><h1 id="IO分类"><a href="#IO分类" class="headerlink" title="IO分类"></a>IO分类</h1><p>从操作对象上可分为</p><ol><li>文件流(file)：<code>FileInputStream</code> <code>FileOutputStream</code> <code>FileReader</code> <code>FileWriter</code></li><li>字节数组(byte[])：<code>ByteArrayInputStream</code> <code>ByteArrayOutputStream</code></li><li>字符数组(char[])：<code>CharArrayReader</code> <code>CharArrayWriter</code></li><li>管道操作：<code>PipedInputStream</code> <code>PipedOutputStream</code> <code>PipedReader</code> <code>PipedWriter</code></li><li>基本数据类型：<code>DataInputStream</code> <code>DataOutputStream</code></li><li>缓冲操作：<code>BufferedInputStream</code> <code>BufferedOutputStream</code> <code>BufferedReader</code> <code>BufferedWriter</code></li><li>打印：<code>PrintStream</code> <code>PrintWriter</code></li><li>对象序列化反序列化：<code>ObjectInputStream</code> <code>ObjectOutputStream</code></li><li>转换：<code>InputStreamReader</code> <code>OutputStreWriter</code></li></ol><p>从传输方式上可以分为</p><ul><li>字节流 <code>InputStream</code> <code>OutputStream</code></li><li>字符流 <code>Reader</code> <code>Writer</code><br>字节流采用的是单个字节传输，可以用于处理二进制。字符则是根据编码由数个字节组成的，人可以阅读文字、符号。字符流用来处理文本文件。</li></ul><h1 id="抽象类InputStream"><a href="#抽象类InputStream" class="headerlink" title="抽象类InputStream"></a>抽象类InputStream</h1><table><thead><tr><th>方法</th><th>方法介绍</th></tr></thead><tbody><tr><td>int read()</td><td>读取数据,返回一个字节。返回-1是读到文件末尾，正数强转就是相应的数据。</td></tr><tr><td>int read(byte b[])</td><td>将读取到的数据放入<code>byte</code>数组b中,调用下一个方法实现的</td></tr><tr><td>int read(byte b[],int off,int len)</td><td>从off位置读取len字节长度放到byte数组中。返回-1是读取结束，正数则是读取字符数。</td></tr><tr><td>long skip(long n)</td><td>跳过指定个数的字节不读取</td></tr><tr><td>int available()</td><td>返回可读的字节数量</td></tr><tr><td>void close()</td><td>关闭流，释放资源</td></tr><tr><td>synchronized void mark(int readlimit)</td><td>标记读取位置，下次还可以从这里读取。通过markSupported()查看是否支持。</td></tr><tr><td>synchronized void reset()</td><td>重置读取位置为上次标记的位置</td></tr><tr><td>boolean markSupported()</td><td>判断当前流是否支持标记流。</td></tr></tbody></table><h1 id="抽象类OutputStream"><a href="#抽象类OutputStream" class="headerlink" title="抽象类OutputStream"></a>抽象类OutputStream</h1><table><thead><tr><th>方法</th><th>方法介绍</th></tr></thead><tbody><tr><td>void write(int b)</td><td>写入一个字节，对应上面read的int。int的32个位中低8位才会写入，其它舍弃。</td></tr><tr><td>void write(byte b[])</td><td>调用下面的方法，把数组中所有数据写入</td></tr><tr><td>void write(byte b[],int off,int len)</td><td>将byte数组从off位置开始，写入len长度。(读多少写多少的话就是read的返回值)</td></tr><tr><td>void flush()</td><td>强制刷新，将缓冲区数据写入。有缓冲在close前执行一下</td></tr><tr><td>public void close()</td><td>关闭输出流，流关闭后不能再输出数据了</td></tr></tbody></table><h1 id="抽象类Reader"><a href="#抽象类Reader" class="headerlink" title="抽象类Reader"></a>抽象类Reader</h1><table><thead><tr><th>方法</th><th>方法介绍</th></tr></thead><tbody><tr><td>int read(java.nio.CharBuffer target)</td><td>读取字节到字符缓存中</td></tr><tr><td>int read()</td><td>读取单个字符</td></tr><tr><td>int read(char cbuf[])</td><td>读取字符到指定的char数组中</td></tr><tr><td>int read(char cbuff[],int off,int len)</td><td>从off位置读取len长度的字符到char数组中</td></tr><tr><td>long skip(long n)</td><td>跳过指定长度的字符数量</td></tr><tr><td>boolean ready()</td><td>判断当前流是否可读</td></tr><tr><td>boolean markSupported()</td><td>判断当前流是否支持标记流</td></tr><tr><td>void mark(int readAheadLimit)</td><td>标记读取位置，下次可以返回这里从新开始读取。需要判断是否支持</td></tr><tr><td>void reset()</td><td>重置读取位置为上次mark标记的位置</td></tr><tr><td>void close()</td><td>关闭流释放相关资源</td></tr></tbody></table><h1 id="抽象类Writer"><a href="#抽象类Writer" class="headerlink" title="抽象类Writer"></a>抽象类Writer</h1><table><thead><tr><th>方法</th><th>方法介绍</th></tr></thead><tbody><tr><td>void write(int c)</td><td>写人一个字符</td></tr><tr><td>void write(char cbuf[])</td><td>写入一个字符数组</td></tr><tr><td>void write(char cbuf[],int off,int len)</td><td>从字符数组的off位置写入len数量的字符</td></tr><tr><td>void write(String str)</td><td>写入一个字符串</td></tr><tr><td>void write(String str,int off,int len)</td><td>从字符串的off位置写入len数量的字符</td></tr><tr><td>Writer append(CharSequence csq)</td><td>追加吸入一个字符序列</td></tr><tr><td>Writer append(CharSequence csq,int start,int end)</td><td>追加写入一个16位的字符</td></tr><tr><td>void flush()</td><td>强制刷新，将缓冲区中数据写入</td></tr><tr><td>void close()</td><td>关闭输出流，流关闭后不能再输出数据</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 图片操作工具类</title>
      <link href="/2022/03/20/java%20%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/03/20/java%20%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：108,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.img;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-01-14 19:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BufferedImage bufferedImage;</span><br><span class="line">    <span class="keyword">private</span> Graphics graphics;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Font defaultFont = <span class="keyword">new</span> Font(<span class="keyword">null</span>, Font.BOLD, <span class="number">28</span>);</span><br><span class="line">    <span class="keyword">private</span> Color defaultColor = <span class="keyword">new</span> Color(<span class="number">120</span>, <span class="number">120</span>, <span class="number">120</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageBuilder</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(width, height, BufferedImage.TYPE_INT_BGR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageBuilder</span><span class="params">(File img)</span> <span class="keyword">throws</span> FileNotFoundException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (<span class="keyword">final</span> FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(img)) &#123;</span><br><span class="line">            init(ImageIO.read(inputStream));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageBuilder</span><span class="params">(BufferedImage bufferedImage)</span> </span>&#123;</span><br><span class="line">        init(bufferedImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageBuilder</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height, <span class="keyword">int</span> imageType)</span> </span>&#123;</span><br><span class="line">        init(<span class="keyword">new</span> BufferedImage(width, height, imageType));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(BufferedImage bufferedImage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bufferedImage = bufferedImage;</span><br><span class="line">        graphics = bufferedImage.getGraphics();</span><br><span class="line">        graphics.setColor(<span class="keyword">this</span>.defaultColor);</span><br><span class="line">        graphics.setFont(<span class="keyword">this</span>.defaultFont);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawText</span><span class="params">(String content, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        graphics.drawString(content, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fillRect</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        graphics.fillRect(x, y, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawImg</span><span class="params">(BufferedImage img, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        graphics.drawImage(img, x, y, w, h, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageBuilder <span class="title">cut</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> BufferedImage subImage = bufferedImage.getSubimage(x, y, w, h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ImageBuilder(subImage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BufferedImage <span class="title">toImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.bufferedImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">writeToFile</span><span class="params">(File file, String imgType)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ImageIO.write(<span class="keyword">this</span>.bufferedImage, imgType, file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFont</span><span class="params">(Font font)</span> </span>&#123;</span><br><span class="line">        graphics.setFont(font);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(Color color)</span> </span>&#123;</span><br><span class="line">        graphics.setColor(color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bufferedImage.getWidth();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bufferedImage.getHeight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>视频截取关键帧</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.img;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-01-17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageBuilder <span class="title">getComicStrip</span><span class="params">(BufferedImage[] imgArray, <span class="keyword">int</span> outHeight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> showW = outHeight, showH = outHeight;</span><br><span class="line">        <span class="keyword">final</span> ImageBuilder imageBuilder = <span class="keyword">new</span> ImageBuilder(showW * imgArray.length, showH, Color.BLACK);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imgArray.length; i++) &#123;</span><br><span class="line">            BufferedImage image = imgArray[i];</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> height = image.getHeight();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> width = image.getWidth();</span><br><span class="line">            <span class="keyword">if</span> (height == width) &#123;</span><br><span class="line">                imageBuilder.drawImg(image, i * showW, <span class="number">0</span>, showW, showH);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(height &gt; width) &#123;</span><br><span class="line">                    <span class="keyword">double</span> n = (<span class="keyword">double</span>) height / showH;</span><br><span class="line">                    <span class="keyword">double</span> w = width / n;</span><br><span class="line">                    imageBuilder.drawImg(image, (<span class="keyword">int</span>)(showW * i + (showH - w) / <span class="number">2</span>), <span class="number">0</span>, (<span class="keyword">int</span>)w, showH);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">double</span> n = (<span class="keyword">double</span>) width / showW;</span><br><span class="line">                    <span class="keyword">double</span> h = height / n;</span><br><span class="line">                    imageBuilder.drawImg(image, showW * i, (<span class="keyword">int</span>)((showW - h) / <span class="number">2</span>), showW, (<span class="keyword">int</span>)h);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imageBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageBuilder <span class="title">addComicStripIndex</span><span class="params">(BufferedImage comicStrip, <span class="keyword">float</span> transparency, <span class="keyword">int</span> strokeWidth)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> width = comicStrip.getWidth(), height = comicStrip.getHeight(), offset = height;</span><br><span class="line">        <span class="keyword">int</span> length = width / height;</span><br><span class="line">        <span class="keyword">final</span> ImageBuilder imageBuilder = <span class="keyword">new</span> ImageBuilder(width + offset, height);</span><br><span class="line">        BufferedImage banner = ImageBuilder.cut(comicStrip, <span class="number">0</span>, <span class="number">0</span>, height, height);</span><br><span class="line">        imageBuilder.drawImg(banner, <span class="number">0</span>, <span class="number">0</span>, height, height);</span><br><span class="line">        imageBuilder.drawImg(comicStrip, offset, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> w = height - strokeWidth, base = width / w, h = height / base;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> x = height * i + offset + strokeWidth / <span class="number">2</span>, y = (<span class="keyword">int</span>)(height - h);</span><br><span class="line">            imageBuilder.drawTranslucentImage(comicStrip, x, y, (<span class="keyword">int</span>)w, (<span class="keyword">int</span>)h, transparency);</span><br><span class="line">            <span class="comment">// 画框</span></span><br><span class="line">            <span class="keyword">if</span>(strokeWidth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                imageBuilder.setColor(Color.BLACK);</span><br><span class="line">                imageBuilder.drawRect(x + (i * (<span class="keyword">int</span>)h), y, (<span class="keyword">int</span>)h, (<span class="keyword">int</span>)h, strokeWidth);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前所在的关键帧变清晰</span></span><br><span class="line">            <span class="keyword">if</span>(transparency &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                BufferedImage frame = ImageBuilder.cut(comicStrip, height * i, <span class="number">0</span>, height, height);</span><br><span class="line">                imageBuilder.drawImg(frame, x + (i * (<span class="keyword">int</span>)h), y, (<span class="keyword">int</span>)h, (<span class="keyword">int</span>)h);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imageBuilder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java+Tesseract实现ocr图片文字识别</title>
      <link href="/2022/03/20/java+Tesseract%E5%AE%9E%E7%8E%B0ocr%E5%9B%BE%E7%89%87%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2022/03/20/java+Tesseract%E5%AE%9E%E7%8E%B0ocr%E5%9B%BE%E7%89%87%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：69,阅读全文大约需要1分钟</p><blockquote><p><a href="https://github.com/tesseract-ocr/tessdata" target="_blank" rel="noopener">语言包下载</a></p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tesseract-platform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1-1.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><ul><li>只测试了简体中文<code>chi_sim</code>和英文<code>eng</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.img;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacpp.BytePointer;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.leptonica.PIX;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.leptonica.global.lept;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.tesseract.TessBaseAPI;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-01-17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ocr</span><span class="params">(String imagePath, OcrLanguage language)</span> </span>&#123;</span><br><span class="line">        TessBaseAPI api=<span class="keyword">new</span> TessBaseAPI();</span><br><span class="line">        <span class="keyword">if</span> (api.Init(language.getPath(), language.getLangName()) != <span class="number">0</span>) &#123;</span><br><span class="line">            api.End();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        PIX image = lept.pixRead(imagePath);</span><br><span class="line">        <span class="keyword">if</span> (image == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        api.SetImage(image);</span><br><span class="line">        BytePointer outText=api.GetUTF8Text();</span><br><span class="line">        String result=outText.getString();</span><br><span class="line">        api.End();</span><br><span class="line">        outText.deallocate();</span><br><span class="line">        lept.pixDestroy(image);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String text = ocr(<span class="string">"F:\\test\\img\\0.jpg"</span>, OcrLanguage.ZH_CN);</span><br><span class="line">        System.out.println(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> OcrLanguage &#123;</span><br><span class="line">        <span class="comment">/** 简体中文 */</span></span><br><span class="line">        ZH_CN(<span class="string">"chi_sim"</span>, <span class="string">"F:\\test\\img\\traineddata"</span>),</span><br><span class="line">        <span class="comment">/** 英文 */</span></span><br><span class="line">        EN(<span class="string">"eng"</span>, <span class="string">"F:\\test\\img\\traineddata"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** 文件名 */</span></span><br><span class="line">        <span class="keyword">private</span> String langName;</span><br><span class="line">        <span class="comment">/** 所在文件夹 */</span></span><br><span class="line">        <span class="keyword">private</span> String path;</span><br><span class="line"></span><br><span class="line">        OcrLanguage(String langName, String path) &#123;</span><br><span class="line">            <span class="keyword">this</span>.langName = langName;</span><br><span class="line">            <span class="keyword">this</span>.path = path;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getLangName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> langName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> path;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
            <tag> ocr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-JIT</title>
      <link href="/2022/03/20/java-JIT/"/>
      <url>/2022/03/20/java-JIT/</url>
      
        <content type="html"><![CDATA[<p>文章字数：812,阅读全文大约需要3分钟</p><blockquote><p>JIT(Just in time compilation)及时编译，能够让java程序执行速度提升</p></blockquote><h1 id="优化手段"><a href="#优化手段" class="headerlink" title="优化手段"></a>优化手段</h1><ol><li><code>cpu编译优化</code>:针对特定的处理器型号指令集编译热点代码，提升性能</li><li><code>减少查表次数</code>:调用<code>Object.equals()</code>方法，在运行时发现一直是在调用<code>String</code>的<code>equals()</code>编译后直接调用<code>String.equals()</code></li><li><code>逃逸分析</code>:变量默认分配在主存上，但是方法中变量未逃出使用的生命周期则可以考虑在栈上分配内存。如果是对象则可以标量替换（对象替换成相应字段的变量）</li><li><code>寄存器分配</code>:部分变量可以分配在寄存器中，相对主存，读取性能提升。</li><li><code>热点代码机器码缓存</code>:缓存热点代码的机器码，但是缓存空间有固定大小,到达上限就不能缓存了</li><li><code>方法内联</code>:热点方法的内部调用的方法会被复制到调用方法里，减少调用开销。</li></ol><h1 id="方法内联"><a href="#方法内联" class="headerlink" title="方法内联"></a>方法内联</h1><ol><li>条件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;次数限制</span><br><span class="line">client编译器时到达1500此执行会标记热点方法，执行内联</span><br><span class="line">server编译器时到达10000此执行会标记热点方法，执行内联</span><br><span class="line">值可以由 -XX:CompileThreshold 设置</span><br><span class="line">&#x2F;&#x2F;大小限制</span><br><span class="line">如果方法是经常执行的，默认情况下，方法大小小于325字节的都会进行内联（可以通过** -XX:MaxFreqInlineSize&#x3D;N**来设置这个大小）</span><br><span class="line">如果方法不是经常执行的，默认情况下，方法大小小于35字节才会进行内联（可以通过** -XX:MaxInlineSize&#x3D;N **来设置这个大小）</span><br></pre></td></tr></table></figure><ol start="2"><li>建议</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.更小的方法体，JVM总是偏好更小的方法。</span><br><span class="line">2.尽量使用final、private、static修饰符</span><br><span class="line">3.使用+PrintInlining参数校验效果</span><br></pre></td></tr></table></figure><h1 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h1><p>变量在HotSpot VM中逃逸分析的类别分为</p><ol><li><code>NoEscape</code>:未逃逸，可以进行标量替换（用局部变量替换对象字段）</li><li><code>ArgEscape</code>:作为参数被传入其它方法中，此情况下如果被调用的方法和调用方法产生方法内联，也可以进行标量替换。</li><li><code>GlobalEscape</code>:无法标量替换</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> JIT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-asm前置知识</title>
      <link href="/2022/03/20/java-asm%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/03/20/java-asm%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：737,阅读全文大约需要2分钟</p><h1 id="一、jdk自带的javap工具"><a href="#一、jdk自带的javap工具" class="headerlink" title="一、jdk自带的javap工具"></a>一、jdk自带的<code>javap</code>工具</h1><blockquote><p>avap是JDK提供的一个命令行工具,javap能对给定的class文件提供的字节代码进行反编译。相对于<code>jd</code>, <code>javap</code>能够查看java编译器为我们生成的字节码，有利于程序调优。</p></blockquote><p><strong>使用方式：</strong>（命令行状态下）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">javap &lt;选项&gt; &lt;类名&gt;</span><br><span class="line">   常用: javap -c -v 类名</span><br></pre></td></tr></table></figure><p><strong>部分常用命令</strong>（1.8）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-l  打印行和本地变量表</span><br><span class="line"> -public 只显示公共类和成员变量</span><br><span class="line"> -protected  只显示公共的、受保护的类和变量</span><br><span class="line"> -private  显示所有的类和成员变量</span><br><span class="line"> -p  显示所有的类和成员变量</span><br><span class="line"> -Joption   给jvm指定参数,例如:</span><br><span class="line"> javap -J-version</span><br><span class="line"> javap -J-Djava.security.manager -J-Djava.security.policy&#x3D;MyPolicy </span><br><span class="line"> -s 打印内部类型签名(用于泛型)</span><br><span class="line"> -sysinfo 打印被处理类的系统信息(路径,大小,日志,md5哈希)</span><br><span class="line"> -constants 显示static final常量</span><br><span class="line"> -c 输出分解后的代码。例如，类中每一个方法内，包含java字节码的指令</span><br><span class="line"> -verbose  输出栈大小，变量（locals）和方法参数的个数</span><br><span class="line"> -classpath path 指定查询类的路径.如果设置该值,则会覆盖默认值和CLASSPATH环境变量。</span><br><span class="line"> -bootclasspath path 指定启动类的路径,默认值是jre&#x2F;lib&#x2F;rt.jar 和 其他少数的jar.</span><br><span class="line"> -extdir dirs  覆盖 java.ext.dirs路径</span><br></pre></td></tr></table></figure><h1 id="Fernflower-jar"><a href="#Fernflower-jar" class="headerlink" title="Fernflower.jar"></a><code>Fernflower.jar</code></h1><blockquote><p>批量反编译java字节码，idea使用的就是这种方法。、<br><strong>使用</strong></p></blockquote><ul><li>首先把工程的所有class 压缩成zip</li><li>执行命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 二、java -jar fernflower.jar  &lt;目标&gt;.jar &lt;文件夹名&gt;&#x2F;</span><br><span class="line">java -jar fernflower.jar classes.zip demo&#x2F;</span><br></pre></td></tr></table></figure></li></ul><h1 id="三、java-lang-instrument-Instrumentation"><a href="#三、java-lang-instrument-Instrumentation" class="headerlink" title="三、java.lang.instrument.Instrumentation"></a>三、java.lang.instrument.Instrumentation</h1><blockquote><p>java Instrumentation指的是可以用独立于应用程序之外的代理（agent）程序来监测和协助运行在JVM上的应用程序。这种监测和协助包括但不限于获取JVM运行时状态，替换和修改类定义等。<br>能够使加载的类与物理保存的.class文件不同，热部署的实现支持之一。常用于累的监控。<br>就是使用代理类，类加载前会执行代理类的指定方法处理字节码。</p></blockquote><h1 id="四、三种工具和asm的关系"><a href="#四、三种工具和asm的关系" class="headerlink" title="四、三种工具和asm的关系"></a>四、三种工具和asm的关系</h1><ul><li>asm是用来解析，保存，修改，创建二进制class文件的工具</li><li><code>javap</code>和<code>Fernflower.jar</code>是反编译java class文件的工具，只是各有特点。</li><li><code>Instrumentation</code>可以代理类，在加载前使用asm修改类。(JavaAgent java探针、代理)的实现<blockquote><p><code>Instrumentation</code>可以编写代码使用javaagent代理执行其它java文件，在代码里使用上面的asm库动态修改代码。也可以直接将所有字节保存，并加载其它class文件。</p></blockquote></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 字节码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java-lang-NullPointerException-at-org-hibernate-type-LongType-next(Lon</title>
      <link href="/2022/03/20/java-lang-NullPointerException-at-org-hibernate-type-LongType-next(Lon/"/>
      <url>/2022/03/20/java-lang-NullPointerException-at-org-hibernate-type-LongType-next(Lon/</url>
      
        <content type="html"><![CDATA[<p>文章字数：125,阅读全文大约需要1分钟</p><blockquote><p>用<code>sql</code>的脚本生成了数据，再使用<code>jpa</code>修改数据时出现报错。</p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li><p>看提示发现是<code>Integer</code>报了空指针的异常。查看出错位置<br><code>IntegetType.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">next</span><span class="params">(Integer current, SessionImplementor session)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> current + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>查看调用栈，大致定位到<code>jpa</code>在进行<code>CAS</code>修改操作时旧版本号的数据没找到。<br><code>Versioning.class</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">increment</span><span class="params">(Object version, VersionType versionType, SessionImplementor session)</span> </span>&#123;</span><br><span class="line">    Object next = versionType.next(version, session);</span><br><span class="line">    <span class="keyword">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class="line">        LOG.tracef(<span class="string">"Incrementing: %s to %s"</span>, versionType.toLoggableString(version, session.getFactory()), versionType.toLoggableString(next, session.getFactory()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看<code>Model</code>的定义，发现有一个被<code>@version</code>注解的字段没有被赋值。</p></li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>在脚本中添加上版本字段的值</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaDUMP</title>
      <link href="/2022/03/20/javaDUMP/"/>
      <url>/2022/03/20/javaDUMP/</url>
      
        <content type="html"><![CDATA[<p>文章字数：225,阅读全文大约需要1分钟</p><blockquote><p><code>dump</code>是将虚拟机运行时的快照，将运行时信息保存到文件。分为线程<code>dump</code>纯文本、堆<code>dump</code>包含线程<code>dump</code>和堆对象，二进制。</p></blockquote><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><code>jdk</code>的<code>bin</code>目录下，包含<code>java</code>命令及常用工具</p><ol><li><code>jps</code>: 查看本机的<code>java</code>中进程信息</li><li><code>jstack</code>: 打印线程的栈信息，制作线程<code>dump</code></li><li><code>jmap</code>: 打印内存映射，制作堆<code>dump</code></li><li><code>jstat</code>: 性能监控工具</li><li><code>jhat</code>: 内存分析工具</li><li><code>jconsole</code>: 简易的可视化控制台</li><li><code>jvisualvm</code>: 功能强大的控制台</li></ol><h1 id="制作java-dump"><a href="#制作java-dump" class="headerlink" title="制作java dump"></a>制作java dump</h1><ol><li>虚拟机发送内存不足错误时，自动生成堆<code>dump</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:+HeapDumpOnOutOfMemoryError</span><br></pre></td></tr></table></figure><ol start="2"><li><p>图形化工具制作<code>dump</code><br>使用<code>jdk</code>自带的工具<code>Java VisualVM</code></p></li><li><p>命令行制作</p></li></ol><ul><li><code>jstack</code>: 打印线程的栈信息，制作线程<code>dump</code></li><li><code>jmap</code>: 打印内存映射，制作堆<code>dump</code></li></ul><h1 id="查看进程pid"><a href="#查看进程pid" class="headerlink" title="查看进程pid"></a>查看进程pid</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep java</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaWeb程序前端发起请求后端一直无响应</title>
      <link href="/2022/03/20/javaWeb%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E4%B8%80%E7%9B%B4%E6%97%A0%E5%93%8D%E5%BA%94/"/>
      <url>/2022/03/20/javaWeb%E7%A8%8B%E5%BA%8F%E5%89%8D%E7%AB%AF%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82%E5%90%8E%E7%AB%AF%E4%B8%80%E7%9B%B4%E6%97%A0%E5%93%8D%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>文章字数：476,阅读全文大约需要1分钟</p><blockquote><p>浏览器访问<code>java</code>后端的页面，然后一直在转圈圈。很久了也没有反应</p></blockquote><h1 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h1><ol><li>首先一直转圈圈肯定是<code>http</code>连接没有设置超时</li><li>查看<code>java</code>的日志，发现没有任何日志输出。</li><li>平常即使什么都不做也会有一下定时任务偶尔输出一些信息，但是这次却异常平静</li><li>看了一下最新写的代码是获取<code>redis</code>信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.getConnectionFactory().getConnection().info()</span><br></pre></td></tr></table></figure><ol start="5"><li>刚写的功能是定时访问这个接口获取<code>redis</code>信息，并且输出信息到前端。</li><li>这里从<code>connectionFactory</code>获取了连接，但是会不会自动释放。看了一下源代码，似乎没有释放的环节。</li><li>查看<code>redisTemplate</code>代码，看看执行其他命令的时候是怎么获取到连接的</li></ol><p><code>execute</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">execute</span><span class="params">(RedisCallback&lt;T&gt; action, <span class="keyword">boolean</span> exposeConnection, <span class="keyword">boolean</span> pipeline)</span> </span>&#123;</span><br><span class="line">        Assert.isTrue(<span class="keyword">this</span>.initialized, <span class="string">"template not initialized; call afterPropertiesSet() before using it"</span>);</span><br><span class="line">        Assert.notNull(action, <span class="string">"Callback object must not be null"</span>);</span><br><span class="line">        RedisConnectionFactory factory = <span class="keyword">this</span>.getConnectionFactory();</span><br><span class="line">        RedisConnection conn = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        Object var11;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.enableTransactionSupport) &#123;</span><br><span class="line">                conn = RedisConnectionUtils.bindConnection(factory, <span class="keyword">this</span>.enableTransactionSupport);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                conn = RedisConnectionUtils.getConnection(factory);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">boolean</span> existingConnection = TransactionSynchronizationManager.hasResource(factory);</span><br><span class="line">            RedisConnection connToUse = <span class="keyword">this</span>.preProcessConnection(conn, existingConnection);</span><br><span class="line">            <span class="keyword">boolean</span> pipelineStatus = connToUse.isPipelined();</span><br><span class="line">            <span class="keyword">if</span> (pipeline &amp;&amp; !pipelineStatus) &#123;</span><br><span class="line">                connToUse.openPipeline();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            RedisConnection connToExpose = exposeConnection ? connToUse : <span class="keyword">this</span>.createRedisConnectionProxy(connToUse);</span><br><span class="line">            T result = action.doInRedis(connToExpose);</span><br><span class="line">            <span class="keyword">if</span> (pipeline &amp;&amp; !pipelineStatus) &#123;</span><br><span class="line">                connToUse.closePipeline();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var11 = <span class="keyword">this</span>.postProcessResult(result, connToUse, existingConnection);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RedisConnectionUtils.releaseConnection(conn, factory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var11;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>RedisConnectionUtils.getConnection(factory);</code>的内部实现也是<code>getConnectionFactory().getConnection()</code>，所以可以知道确是没有自动释放，需要手动释放一下</p><ol start="8"><li>于是模仿源代码的形式获取连接，然后执行，释放</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">RedisConnectionFactory factory = redisTemplate.getConnectionFactory();</span><br><span class="line">        RedisConnection conn = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = RedisConnectionUtils.getConnection(factory);</span><br><span class="line">            redisInfo = conn.info();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RedisConnectionUtils.releaseConnection(conn, factory);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>再次进行之前的操作，发现无响应的问题解决了。</li></ol><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>现在看来无响应应该就是获取<code>redis</code>连接的代码堵塞了，循环导致被占用的连接数越来越多，直到连接池被沾满。这也解释了为什么后台无信息输出，因为很多的线程也是依赖<code>redis</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java乐观锁悲观锁</title>
      <link href="/2022/03/20/java%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81/"/>
      <url>/2022/03/20/java%E4%B9%90%E8%A7%82%E9%94%81%E6%82%B2%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：106,阅读全文大约需要1分钟</p><blockquote><p><strong>乐观锁</strong>默认读之后不会有修改，于是不上锁。但是更新的时候会判断期间有没有修改数据。<strong>悲观锁</strong>总是设想最坏的情况，读之后都会有人修改数据，于是拿数据的时候就会上锁。</p></blockquote><h1 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h1><ol><li><code>synchronized</code>cpu级别的锁机制</li><li>sql<code>lock tables</code></li></ol><h1 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h1><ol><li><code>CAS</code>(Compare and Swap 比较并交换)</li><li><code>jpa</code>的<code>@Version</code></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java事件驱动框架</title>
      <link href="/2022/03/20/java%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/03/20/java%E4%BA%8B%E4%BB%B6%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：103,阅读全文大约需要1分钟</p><ol><li><p><code>Vert.x</code>是一款依托于<code>Netty</code>的事件驱动的框架，相对于传统的服务器架构，更加轻量级，高性能。</p></li><li><p><code>springWebFlux</code>是随着<code>Spring 5</code>推出的响应式web框架。基于<code>HTTP/Reactive Streams</code>，运行环境需要支持异步运行的环境，如<code>Netty</code>、<code>Undertow</code>。开发模式上支持<code>Spring WebMVC</code>风格的注解<code>@Controller</code> <code>RequestMapping</code>和java8的<code>lambda</code>风格函数。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 事件驱动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java使用UDP</title>
      <link href="/2022/03/20/java%E4%BD%BF%E7%94%A8UDP/"/>
      <url>/2022/03/20/java%E4%BD%BF%E7%94%A8UDP/</url>
      
        <content type="html"><![CDATA[<p>文章字数：149,阅读全文大约需要1分钟</p><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//B应用为服务端：将udp监听放到一个线程中，当有客户端请求时就会进行响应</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * udp连接，用于动态ip, pos向255.255.255.255：5060发送请求即可</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpServer</span> <span class="keyword">extends</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_LENGTH = <span class="number">1024</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">5060</span>;</span><br><span class="line">    <span class="keyword">private</span> DatagramSocket datagramSocket;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            init();</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[MAX_LENGTH];</span><br><span class="line">                    DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, buffer.length);</span><br><span class="line">                    receive(packet);</span><br><span class="line">                    String receStr = <span class="keyword">new</span> String(packet.getData(), <span class="number">0</span> , packet.getLength());</span><br><span class="line">                    System.out.println(<span class="string">"接收数据包"</span> + receStr);</span><br><span class="line">                    <span class="keyword">byte</span>[] bt = <span class="keyword">new</span> <span class="keyword">byte</span>[packet.getLength()];</span><br><span class="line">                    </span><br><span class="line">                    System.arraycopy(packet.getData(), <span class="number">0</span>, bt, <span class="number">0</span>, packet.getLength());</span><br><span class="line">                    System.out.println(packet.getAddress().getHostAddress() + <span class="string">"："</span> + packet.getPort() + <span class="string">"："</span> + Arrays.toString(bt));</span><br><span class="line">                    packet.setData(bt);</span><br><span class="line">                    response(packet);</span><br><span class="line">                    </span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    LoggerUtil.error(<span class="string">"udp线程出现异常："</span> + e.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(DatagramPacket packet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        datagramSocket.receive(packet);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">response</span><span class="params">(DatagramPacket packet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        datagramSocket.send(packet);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            datagramSocket = <span class="keyword">new</span> DatagramSocket(PORT);</span><br><span class="line">            System.out.println(<span class="string">"udp服务端已经启动！"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            datagramSocket = <span class="keyword">null</span>;</span><br><span class="line">            System.out.println(<span class="string">"udp服务端启动失败！"</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * UDP Client端</span></span><br><span class="line"><span class="comment"> ***/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClient</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> String sendStr = <span class="string">"hello"</span>;</span><br><span class="line">    <span class="keyword">private</span> String netAddress = <span class="string">"255.255.255.255"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> PORT = <span class="number">5060</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> DatagramSocket datagramSocket;</span><br><span class="line">    <span class="keyword">private</span> DatagramPacket datagramPacket;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UdpClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; </span><br><span class="line">            datagramSocket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            <span class="keyword">byte</span>[] buf = sendStr.getBytes();</span><br><span class="line">            InetAddress address = InetAddress.getByName(netAddress);</span><br><span class="line">            datagramPacket = <span class="keyword">new</span> DatagramPacket(buf, buf.length, address, PORT);</span><br><span class="line">            datagramSocket.send(datagramPacket);</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">byte</span>[] receBuf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket recePacket = <span class="keyword">new</span> DatagramPacket(receBuf, receBuf.length);</span><br><span class="line">            datagramSocket.receive(recePacket);</span><br><span class="line">           </span><br><span class="line">            String receStr = <span class="keyword">new</span> String(recePacket.getData(), <span class="number">0</span> , recePacket.getLength());</span><br><span class="line">            </span><br><span class="line">　　　　　　　<span class="comment">//获取服务端ip</span></span><br><span class="line">            String serverIp = recePacket.getAdress();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SocketException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭socket</span></span><br><span class="line">            <span class="keyword">if</span>(datagramSocket != <span class="keyword">null</span>)&#123;</span><br><span class="line">                datagramSocket.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    UdpClient udpClient = <span class="keyword">new</span> UdpClient();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 网络 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java使用TCP</title>
      <link href="/2022/03/20/java%E4%BD%BF%E7%94%A8TCP/"/>
      <url>/2022/03/20/java%E4%BD%BF%E7%94%A8TCP/</url>
      
        <content type="html"><![CDATA[<p>文章字数：340,阅读全文大约需要1分钟</p><blockquote><p><code>java,net</code>提供了两个<code>TCP</code>通信的<code>Socet</code>类，分别代表客户端和服务端</p></blockquote><h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Socket(InetAddress address, <span class="keyword">int</span> port);</span><br><span class="line">Socket(InetAddress address, <span class="keyword">int</span> port, <span class="keyword">boolean</span> stream);</span><br><span class="line">Socket(String host, <span class="keyword">int</span> prot);</span><br><span class="line">Socket(String host, <span class="keyword">int</span> prot, <span class="keyword">boolean</span> stream);</span><br><span class="line">Socket(SocketImpl impl)</span><br><span class="line">Socket(String host, <span class="keyword">int</span> port, InetAddress localAddr, <span class="keyword">int</span> localPort)</span><br><span class="line">Socket(InetAddress address, <span class="keyword">int</span> port, InetAddress localAddr, <span class="keyword">int</span> localPort)</span><br><span class="line">ServerSocket(<span class="keyword">int</span> port);</span><br><span class="line">ServerSocket(<span class="keyword">int</span> port, <span class="keyword">int</span> backlog);</span><br><span class="line">ServerSocket(<span class="keyword">int</span> port, <span class="keyword">int</span> backlog, InetAddress bindAddr)</span><br></pre></td></tr></table></figure><h1 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> port = <span class="number">8080</span>;   </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String host = <span class="string">"localhost"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        System.out.println(<span class="string">"Client Start..."</span>);    </span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;    </span><br><span class="line">            Socket socket = <span class="keyword">null</span>;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="comment">//创建一个流套接字并将其连接到指定主机上的指定端口号  </span></span><br><span class="line">                socket = <span class="keyword">new</span> Socket(host,port);    </span><br><span class="line"> </span><br><span class="line">                <span class="comment">//读取服务器端数据    </span></span><br><span class="line">                BufferedReader input = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));    </span><br><span class="line">                <span class="comment">//向服务器端发送数据    </span></span><br><span class="line">                PrintStream out = <span class="keyword">new</span> PrintStream(socket.getOutputStream());    </span><br><span class="line">                System.out.print(<span class="string">"请输入: \t"</span>);    </span><br><span class="line">                String str = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)).readLine();    </span><br><span class="line">                out.println(str);    </span><br><span class="line"> </span><br><span class="line">                String ret = input.readLine();     </span><br><span class="line">                System.out.println(<span class="string">"服务器端返回过来的是: "</span> + ret);    </span><br><span class="line">                <span class="comment">// 如接收到 "OK" 则断开连接    </span></span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"OK"</span>.equals(ret)) &#123;    </span><br><span class="line">                    System.out.println(<span class="string">"客户端将关闭连接"</span>);    </span><br><span class="line">                    Thread.sleep(<span class="number">500</span>);    </span><br><span class="line">                    <span class="keyword">break</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line"> </span><br><span class="line">                out.close();  </span><br><span class="line">                input.close();  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                System.out.println(<span class="string">"客户端异常:"</span> + e.getMessage());   </span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;  </span><br><span class="line">                    <span class="keyword">try</span> &#123;  </span><br><span class="line">                        socket.close();  </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                        socket = <span class="keyword">null</span>;   </span><br><span class="line">                        System.out.println(<span class="string">"客户端 finally 异常:"</span> + e.getMessage());   </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> port = <span class="number">8080</span>;<span class="comment">//监听的端口号     </span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">        System.out.println(<span class="string">"Server...\n"</span>);    </span><br><span class="line">        Server server = <span class="keyword">new</span> Server();    </span><br><span class="line">        server.init();    </span><br><span class="line">    &#125;    </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            <span class="comment">//创建一个ServerSocket，这里可以指定连接请求的队列长度  </span></span><br><span class="line">            <span class="comment">//new ServerSocket(port,3);意味着当队列中有3个连接请求是，如果Client再请求连接，就会被Server拒绝 </span></span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(port);    </span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;    </span><br><span class="line">                <span class="comment">//从请求队列中取出一个连接</span></span><br><span class="line">                Socket client = serverSocket.accept();    </span><br><span class="line">                <span class="comment">// 处理这次连接    </span></span><br><span class="line">                <span class="keyword">new</span> HandlerThread(client);    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;    </span><br><span class="line">            System.out.println(<span class="string">"服务器异常: "</span> + e.getMessage());    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">private</span> Socket socket;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HandlerThread</span><span class="params">(Socket client)</span> </span>&#123;    </span><br><span class="line">            socket = client;    </span><br><span class="line">            <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();    </span><br><span class="line">        &#125;    </span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">try</span> &#123;    </span><br><span class="line">                <span class="comment">// 读取客户端数据    </span></span><br><span class="line">                BufferedReader input = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(socket.getInputStream()));    </span><br><span class="line">                String clientInputStr = input.readLine();<span class="comment">//这里要注意和客户端输出流的写方法对应,否则会抛 EOFException  </span></span><br><span class="line">                <span class="comment">// 处理客户端数据    </span></span><br><span class="line">                System.out.println(<span class="string">"客户端发过来的内容:"</span> + clientInputStr);    </span><br><span class="line"> </span><br><span class="line">                <span class="comment">// 向客户端回复信息    </span></span><br><span class="line">                PrintStream out = <span class="keyword">new</span> PrintStream(socket.getOutputStream());    </span><br><span class="line">                System.out.print(<span class="string">"请输入:\t"</span>);    </span><br><span class="line">                <span class="comment">// 发送键盘输入的一行    </span></span><br><span class="line">                String s = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)).readLine();    </span><br><span class="line">                out.println(s);    </span><br><span class="line"> </span><br><span class="line">                out.close();    </span><br><span class="line">                input.close();    </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;    </span><br><span class="line">                System.out.println(<span class="string">"服务器 run 异常: "</span> + e.getMessage());    </span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;    </span><br><span class="line">                <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;    </span><br><span class="line">                    <span class="keyword">try</span> &#123;    </span><br><span class="line">                        socket.close();    </span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;    </span><br><span class="line">                        socket = <span class="keyword">null</span>;    </span><br><span class="line">                        System.out.println(<span class="string">"服务端 finally 异常:"</span> + e.getMessage());    </span><br><span class="line">                    &#125;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;   </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 网络 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java使用正则</title>
      <link href="/2022/03/20/java%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99/"/>
      <url>/2022/03/20/java%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：611,阅读全文大约需要2分钟</p><h1 id="正则规则"><a href="#正则规则" class="headerlink" title="正则规则"></a>正则规则</h1><ol><li>任意字符可以表示匹配自身</li><li><code>[]</code>代表匹配其中之一，如<code>[abc]</code>。意思是a,b,c任意一个都能满足。</li><li><code>[1-9]/[a-z]</code>是简写，代表1-9个数字，a-z的字母。</li><li><code>^</code>在括号外代表开头，如<code>^a</code>，代表a开头的。括号内代表非，如<code>[^abc]</code>代表除了abc的任意字符</li><li><code>.</code>表示任意字符</li><li><code>\d</code>数字</li><li><code>\D</code>非数字</li><li><code>\s</code>空字符，等于<code>[\t\n\r\x\f]</code></li><li><code>\S</code>非空字符，等于<code>[^\s]</code></li><li><code>\w</code>字母，数字，下划线，等于<code>[a-zA-Z0-9_]</code></li><li><code>\W</code>非字母，数字，下划线</li><li><code>?</code>表示前一个元素出现0次或1次</li><li><code>+</code>表示前一个元素出现1次以上</li><li><code>*</code>表示前一个元素出现任意次</li><li><code>{n}</code>表示前一个元素出现n次</li><li><code>{n,m}</code>表示前一个元素出现n-m次</li><li><code>{n,}</code>表示前一个元素出现n或n以上</li><li>正则的两个元素的排列就是需要匹配的顺序，比如<code>\d\s</code>就是数字后面必须跟着非数字</li><li><code>a|b</code>匹配a或者b</li><li><code>(子表达式)</code>将内部当成一个原子整体。比如<code>([1-9][a-z])+</code>，代表数字和小写字母的组合出现一次以上。</li></ol><h1 id="检测字符串是否匹配正则"><a href="#检测字符串是否匹配正则" class="headerlink" title="检测字符串是否匹配正则"></a>检测字符串是否匹配正则</h1><ol><li><p>基本用法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源字符串</span></span><br><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line"><span class="comment">// 正则表达式</span></span><br><span class="line">String regex = <span class="string">"^[1-9]+"</span>;</span><br><span class="line"><span class="comment">// 用正则创建Pattern对象，此对象就是正则表达式的对象，如果需要对此匹配，可以将此对象保存，避免重复创建。</span></span><br><span class="line">Pattern p = Pattern.compile(regex);</span><br><span class="line"><span class="comment">// 检测字符串是否符合正则规则</span></span><br><span class="line">Matcher m = p.matcher(str);</span><br><span class="line"><span class="comment">// 返回结果</span></span><br><span class="line"><span class="keyword">boolean</span> res = m.matches();</span><br></pre></td></tr></table></figure></li><li><p>使用Pattern类封装好的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line">String regex = <span class="string">"^[1-9]+"</span>;</span><br><span class="line"><span class="keyword">boolean</span> res = Pattern.matches(regex, str);</span><br></pre></td></tr></table></figure></li><li><p>使用String类封装好的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"123"</span>;</span><br><span class="line">String regex = <span class="string">"^[1-9]+"</span>;</span><br><span class="line"><span class="keyword">boolean</span> res = str.matches(regex);</span><br></pre></td></tr></table></figure></li></ol><h1 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a>正则替换</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"123abc"</span>;</span><br><span class="line">String regex = <span class="string">"^[1-9]+"</span>;</span><br><span class="line">System.out.println(str.replaceAll(regex, <span class="string">"&amp;"</span>));</span><br><span class="line">System.out.println(str);</span><br><span class="line"><span class="comment">// 结果输出 &amp;abc 和 123abc，代表替换结果不会对源字符串产生影响</span></span><br></pre></td></tr></table></figure><h1 id="正则切割"><a href="#正则切割" class="headerlink" title="正则切割"></a>正则切割</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"123a33b55h"</span>;</span><br><span class="line">        String regex = <span class="string">"[a-z]+"</span>;</span><br><span class="line">        String[] strs = str.split(regex);</span><br><span class="line">        <span class="comment">// 输出</span></span><br><span class="line">        Arrays.stream(strs).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h1 id="正则查找"><a href="#正则查找" class="headerlink" title="正则查找"></a>正则查找</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegexMatches</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 按指定模式在字符串查找</span></span><br><span class="line">      String line = <span class="string">"This order was placed for QT3000! OK?"</span>;</span><br><span class="line">      String pattern = <span class="string">"(\\D*)(\\d+)(.*)"</span>;</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 创建 Pattern 对象</span></span><br><span class="line">      Pattern r = Pattern.compile(pattern);</span><br><span class="line"> </span><br><span class="line">      <span class="comment">// 现在创建 matcher 对象</span></span><br><span class="line">      Matcher m = r.matcher(line);</span><br><span class="line">      <span class="keyword">if</span> (m.find( )) &#123;</span><br><span class="line">         System.out.println(<span class="string">"Found value: "</span> + m.group(<span class="number">0</span>) );</span><br><span class="line">         System.out.println(<span class="string">"Found value: "</span> + m.group(<span class="number">1</span>) );</span><br><span class="line">         System.out.println(<span class="string">"Found value: "</span> + m.group(<span class="number">2</span>) );</span><br><span class="line">         System.out.println(<span class="string">"Found value: "</span> + m.group(<span class="number">3</span>) ); </span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">"NO MATCH"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java分布式处理技术</title>
      <link href="/2022/03/20/java%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF/"/>
      <url>/2022/03/20/java%E5%88%86%E5%B8%83%E5%BC%8F%E5%A4%84%E7%90%86%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1159,阅读全文大约需要4分钟</p><blockquote><p><code>RMI</code>和<code>JNDI</code>是分布式处理的基础，<code>RMI</code>远程方法调用，负责分布式方法调用；<code>JNDI</code>java命名和目录接口，用于更方便查找本地和远程对象</p></blockquote><h1 id="RMI概述"><a href="#RMI概述" class="headerlink" title="RMI概述"></a>RMI概述</h1><ul><li><strong>是什么</strong></li></ul><ol><li>RMI(Remote Method Invocation) 远程方法调用，是一种计算机直接对象互相调用对方函数，启动对方进程的机制。</li><li>通过RMI，调用其它计算机上的方法用到的语法和规则和本地对象间调用一样</li></ol><ul><li><strong>怎么用</strong></li></ul><ol><li>分布式计算，利用多个系统的组合算力，或者多端公用一个中央资源时用到（云计算时代，设备的算力可以向电一样统计和出售）</li><li>分布式对象编程，通过<code>RMI</code>远程调用可以忽略通讯方面的细节</li></ol><ul><li><strong>程序分类</strong></li></ul><ol><li>服务器程序：创建多个远程对象，并使对象可以被引用。等待客户端调用</li><li>客户端程序：从服务端程序中的到一个或多个远程对象的引用</li><li>对等计算程序：双方互为对方的服务器和客户端</li></ol><h1 id="创建RMI程序"><a href="#创建RMI程序" class="headerlink" title="创建RMI程序"></a>创建RMI程序</h1><ul><li><strong>大致步骤</strong></li></ul><ol><li>定义远程接口<br>利用远程接口调用方法，隐藏基类实施细节（接口实现<code>java.rmi.Remote</code>，方法抛出<code>java.rmi.RemoteException</code>）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.rmi.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RmiSample</span> <span class="keyword">extends</span>  <span class="title">Remote</span></span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> RemoteException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现远程接口</li></ol><ul><li>必须继承<code>java.rmi.UnicastRemoteObject</code>，并实现远程接口</li><li>可以添加其它方法，但是客户端只能调用接口有的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.rmi.*;</span><br><span class="line"><span class="keyword">import</span>  java.rmi.server.*;</span><br><span class="line"><span class="keyword">import</span>  com.itjob.RmiSample ;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">远程接口实现类，继承了UnicastRemoteObject并实现了RmiSample远程接口</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">RmiSampleImpl</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">RmiSample</span></span>&#123;</span><br><span class="line">    <span class="comment">//覆盖默认构造函数并抛出RemoteException</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">RmiSampleImpl</span><span class="params">()</span> <span class="keyword">throws</span>  RemoteException</span>&#123;</span><br><span class="line">              <span class="keyword">super</span>();</span><br><span class="line">       &#125;</span><br><span class="line">    <span class="comment">//所有远程实现方法必须抛出RemoteException</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="keyword">throws</span>  RemoteException</span>&#123;</span><br><span class="line">              <span class="keyword">return</span> a+b;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写服务器类</li></ol><ul><li><p>直接<code>Registry</code>实现（本地构建RMI服务器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 本地主机上的远程对象注册表Registry的实例,默认端口1099</span></span><br><span class="line">            Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            <span class="comment">// 创建一个远程对象</span></span><br><span class="line">            HelloRegistryFacade hello = <span class="keyword">new</span> HelloRegistryFacadeImpl();</span><br><span class="line">            <span class="comment">// 把远程对象注册到RMI注册服务器上，并命名为HelloRegistry</span></span><br><span class="line">            registry.rebind(<span class="string">"HelloRegistry"</span>, hello);</span><br><span class="line">            System.out.println(<span class="string">"======= 启动RMI服务成功! ======="</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Naming</code>注册到指定服务器</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamingService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 本地主机上的远程对象注册表Registry的实例</span></span><br><span class="line">            LocateRegistry.createRegistry(<span class="number">1100</span>);</span><br><span class="line">            <span class="comment">// 创建一个远程对象</span></span><br><span class="line">            HelloNamingFacade hello = <span class="keyword">new</span> HelloNamingFacadeImpl();</span><br><span class="line">            <span class="comment">// 把远程对象注册到RMI注册服务器上，并命名为Hello </span></span><br><span class="line">            <span class="comment">//绑定的URL标准格式为：rmi://host:port/name</span></span><br><span class="line">            Naming.bind(<span class="string">"rmi://localhost:1100/HelloNaming"</span>, hello);</span><br><span class="line">            System.out.println(<span class="string">"======= 启动RMI服务成功! ======="</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemoteException | MalformedURLException | AlreadyBoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>编写使用远程服务的客户机类</li></ol><ul><li>使用<code>Registry</code>获取指定端口的客户机<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Registry registry = LocateRegistry.getRegistry(<span class="number">1099</span>);</span><br><span class="line">            HelloRegistryFacade hello = (HelloRegistryFacade) registry.lookup(<span class="string">"HelloRegistry"</span>);</span><br><span class="line">            String response = hello.helloWorld(<span class="string">"ZhenJin"</span>);</span><br><span class="line">            System.out.println(<span class="string">"=======&gt; "</span> + response + <span class="string">" &lt;======="</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NotBoundException | RemoteException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="跟和干"><a href="#跟和干" class="headerlink" title="跟和干"></a>跟和干</h1><ul><li><code>stub</code>客户端辅助对象</li><li><code>skeleton</code>服务端辅助对象<br>具体作用</li><li>客户端对象调用服务端辅助对象上的方法</li><li>服务端福追寻将客户端辅助对象发来的信息解包，找出需要被调用的方法所在对象</li><li>调用对象方法，返回给服务端辅助对象</li><li>服务端辅助对象将结果打包，发给客户端辅助对象</li><li>客户端辅助对象将返回值解包，返回给客户对象</li></ul><h1 id="RMI和RPC"><a href="#RMI和RPC" class="headerlink" title="RMI和RPC"></a>RMI和RPC</h1><table><thead><tr><th align="left">区别点</th><th align="left">RMI</th><th align="left">RPC</th></tr></thead><tbody><tr><td align="left">适用语言</td><td align="left">java</td><td align="left">网络服务协议，和语言无关。通用</td></tr><tr><td align="left">调用形式</td><td align="left">通过客户端的<code>Stub</code>对象作为远程接口进行远程方法调用，每个远程方法有方法签名。如果方法签名没有匹配到远程接口（stub）就不能被调用</td><td align="left"><code>RPC</code>通过网络服务协议先远程主机发送请求，发送<code>classname.methodname(args)</code>形式，远程主机就去搜索匹配的类和方法，找到后执行方法，把结果编码并用网络返回</td></tr><tr><td align="left">返回类型</td><td align="left">返回对象或者基本数据类型</td><td align="left">结果是外部数据表示语言（External Data Representation, XDR）表示，抽象了类和数据结构的差异。</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java动态追踪</title>
      <link href="/2022/03/20/java%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/"/>
      <url>/2022/03/20/java%E5%8A%A8%E6%80%81%E8%BF%BD%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：478,阅读全文大约需要1分钟</p><h1 id="开发流程环境"><a href="#开发流程环境" class="headerlink" title="开发流程环境"></a>开发流程环境</h1><p><img src="https://upload-images.jianshu.io/upload_images/17243965-f2f8f28eb5e231d2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="环境流程"></p><p><img src="https://upload-images.jianshu.io/upload_images/17243965-d30601d9a14dfe17.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="UAT环境和灰度环境"></p><h1 id="Instrumentation接口"><a href="#Instrumentation接口" class="headerlink" title="Instrumentation接口"></a>Instrumentation接口</h1><blockquote><p>独立于应用程序之外的代理（agent）监控目标类</p></blockquote><ol><li>构造agent类</li><li>设置MANNIFEST.MF</li><li>打包成JAR</li><li>通过Attach API绑定到目标VM（SUN公司才有的API）</li><li>运行</li></ol><h1 id="btrace"><a href="#btrace" class="headerlink" title="btrace"></a>btrace</h1><blockquote><p>开源的ASM + Java Attach API + Instrument开发的<br><img src="https://upload-images.jianshu.io/upload_images/17243965-b5771e1740f4d005.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"><br><img src="https://upload-images.jianshu.io/upload_images/17243965-97ab7a65f914aff8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p></blockquote><ol><li>jps查看当前机器上面有哪些java程序</li><li>btrace xxxx Test.java</li></ol><h1 id="查看运行时间，是否执行过"><a href="#查看运行时间，是否执行过" class="headerlink" title="查看运行时间，是否执行过"></a>查看运行时间，是否执行过</h1><p><img src="https://upload-images.jianshu.io/upload_images/17243965-6b4697410e57a6b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/17243965-87ba8cf3d0af1cad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h1 id="Arthas"><a href="#Arthas" class="headerlink" title="Arthas"></a>Arthas</h1><p>阿里巴巴开源的Java诊断工具</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java压缩文件无法打开</title>
      <link href="/2022/03/20/java%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/"/>
      <url>/2022/03/20/java%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<p>文章字数：60,阅读全文大约需要1分钟</p><blockquote><p>压缩过程无错误，压缩后的文件打开不了<code>这个压缩文件格式未知或者数据已经被损坏</code></p></blockquote><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p><code>ZipOutputStream</code>这个流未关闭，代码上加上<code>zipOutputStream.close()</code>就可以了</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java压缩解压缩</title>
      <link href="/2022/03/20/java%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
      <url>/2022/03/20/java%E5%8E%8B%E7%BC%A9%E8%A7%A3%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<p>文章字数：268,阅读全文大约需要1分钟</p><blockquote><p>封装了两个小功能，传入文件输出流，压缩一个/多个文件到压缩文件。传入压缩文件地址和解压缩的文件夹，解压（文件夹会被覆盖）</p></blockquote><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipEntry;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipInputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.zip.ZipOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">zipTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压缩文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream</span></span><br><span class="line"><span class="comment">     *            读取的文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputStream</span></span><br><span class="line"><span class="comment">     *            输出的压缩文件流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     *            压缩进去的文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">zipFile</span><span class="params">(FileInputStream inputStream, ZipOutputStream outputStream, String fileName)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 新建一个压缩条目（相对路径）</span></span><br><span class="line">        outputStream.putNextEntry(<span class="keyword">new</span> ZipEntry(fileName));</span><br><span class="line">        <span class="comment">// 写入这个条目</span></span><br><span class="line">        <span class="keyword">try</span> (BufferedInputStream bufferedInputStream = <span class="keyword">new</span> BufferedInputStream(inputStream, <span class="number">512</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">512</span>];</span><br><span class="line">            <span class="keyword">while</span> ((index = bufferedInputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buffer, <span class="number">0</span>, index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭条目，并等待下个条目</span></span><br><span class="line">        outputStream.closeEntry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建文件父级目录</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createParentPath</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        File parentFile = file.getParentFile();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != parentFile &amp;&amp; !parentFile.exists()) &#123;</span><br><span class="line">            parentFile.mkdirs(); <span class="comment">// 创建文件夹</span></span><br><span class="line">            createParentPath(parentFile); <span class="comment">// 递归创建父级目录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解压缩</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fromZip</span></span><br><span class="line"><span class="comment">     *            目标压缩文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toPath</span></span><br><span class="line"><span class="comment">     *            解压地址（存在则覆盖此目录）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decompressionFile</span><span class="params">(String fromZip, String toPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File baseFile = <span class="keyword">new</span> File(toPath);</span><br><span class="line">        <span class="keyword">if</span> (baseFile.exists()) &#123;</span><br><span class="line">            baseFile.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        File zipFile = <span class="keyword">new</span> File(fromZip);</span><br><span class="line">        ZipInputStream inputStream = <span class="keyword">new</span> ZipInputStream(<span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(zipFile), <span class="number">255</span>));</span><br><span class="line">        ZipEntry entry;</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">255</span>];</span><br><span class="line">        <span class="keyword">while</span> ((entry = inputStream.getNextEntry()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String filePath = baseFile.toPath().toString() + <span class="string">"\\"</span> + entry.getName();</span><br><span class="line">            createParentPath(<span class="keyword">new</span> File(filePath));</span><br><span class="line">            Files.createFile(Paths.get(filePath));</span><br><span class="line">            FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(Paths.get(filePath).toFile());</span><br><span class="line">            <span class="keyword">while</span> ((length = inputStream.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                outputStream.write(buffer, <span class="number">0</span>, length);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 压缩测试</span></span><br><span class="line">            <span class="comment">// 压缩包名字</span></span><br><span class="line">            String zipPathStr =</span><br><span class="line">                <span class="string">"F:\\cache\\test.zip"</span>;</span><br><span class="line">            <span class="keyword">try</span> (ZipOutputStream zipOutputStream = <span class="keyword">new</span> ZipOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(zipPathStr)))) &#123;</span><br><span class="line">                <span class="comment">// 模拟压缩三份文件进去</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">                    String filePathStr =</span><br><span class="line">                        <span class="string">"F:\\cache\\test.xls"</span>;</span><br><span class="line">                    File file = <span class="keyword">new</span> File(filePathStr);</span><br><span class="line">                    <span class="keyword">try</span> (FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(file)) &#123;</span><br><span class="line">                        <span class="comment">// all/1test.xls all为指定的目录</span></span><br><span class="line">                        zipFile(fileInputStream, zipOutputStream, <span class="string">"all/"</span> + i + file.getName());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 解压测试</span></span><br><span class="line">            decompressionFile(</span><br><span class="line">                <span class="string">"F:\\cache\\test.zip"</span>,</span><br><span class="line">                <span class="string">"F:\\cache\\test"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elastic分布式全文搜索引擎</title>
      <link href="/2022/03/20/Elastic%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/"/>
      <url>/2022/03/20/Elastic%E5%88%86%E5%B8%83%E5%BC%8F%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1511,阅读全文大约需要6分钟</p><blockquote><p><code>ElasticSearch</code>是一款使用java开发基于<code>Lucene</code>的开箱即用的全文搜索引擎。使用<code>REST API</code>操作接口。整理自<a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">阮一峰的教程</a></p></blockquote><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ul><li><p><code>Java8</code>环境</p></li><li><p>安装<code>ElasticSearch-5.5.1</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 下载压缩包到当前目录</span><br><span class="line">$ wget https:&#x2F;&#x2F;artifacts.elastic.co&#x2F;downloads&#x2F;elasticsearch&#x2F;elasticsearch-5.5.1.zip</span><br><span class="line"># 解压缩</span><br><span class="line">$ unzip elasticsearch-5.5.1.zip</span><br><span class="line"># 进入目录</span><br><span class="line">$ cd elasticsearch-5.5.1&#x2F;</span><br></pre></td></tr></table></figure></li><li><p>中文分词插件<code>ik</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 使用elastic插件工具下载安装插件</span><br><span class="line"> .&#x2F;bin&#x2F;elasticsearch-plugin install https:&#x2F;&#x2F;github.com&#x2F;medcl&#x2F;elasticsearch-analysis-ik&#x2F;releases&#x2F;download&#x2F;v5.5.1&#x2F;elasticsearch-analysis-ik-5.5.1.zip</span><br><span class="line"># 重启Elastic即可安装</span><br></pre></td></tr></table></figure></li></ul><h1 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h1><ul><li><p>启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;bin&#x2F;elasticsearch</span><br></pre></td></tr></table></figure></li><li><p>解决<code>max virtual memory areas vm.maxmapcount [65530] is too low</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo sysctl -w vm.max_map_count&#x3D;262144</span><br></pre></td></tr></table></figure></li><li><p>查看信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 默认9200端口运行</span><br><span class="line">$ curl localhost:9200</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot; : &quot;atntrTf&quot;,</span><br><span class="line">  &quot;cluster_name&quot; : &quot;elasticsearch&quot;,</span><br><span class="line">  &quot;cluster_uuid&quot; : &quot;tf9250XhQ6ee4h7YI11anA&quot;,</span><br><span class="line">  &quot;version&quot; : &#123;</span><br><span class="line">    &quot;number&quot; : &quot;5.5.1&quot;,</span><br><span class="line">    &quot;build_hash&quot; : &quot;19c13d0&quot;,</span><br><span class="line">    &quot;build_date&quot; : &quot;2017-07-18T20:44:24.823Z&quot;,</span><br><span class="line">    &quot;build_snapshot&quot; : false,</span><br><span class="line">    &quot;lucene_version&quot; : &quot;6.6.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tagline&quot; : &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>允许非本机访问<br>修改<code>config/elasticsearch.yml</code>去除<code>network.host</code>注释，修改值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 任何人都能访问（不推荐）</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"># 指定ip</span><br><span class="line">network.host: 192.168.1.1</span><br></pre></td></tr></table></figure></li></ul><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li><code>cluster</code>集群，多个<code>Elastic</code>实例组成一个集群<code>cluster</code>。实例可以运行在多个/同一个服务器上。</li><li><code>Node</code>节点，一个<code>Elastic</code>实例就是一个节点。一组节点构成一个集群。</li><li><code>Index</code>索引，查找数据的顶层单位。<code>Elastic</code>会索引所有字段，经过处理后写入一个反向索引<code>Inverted Index</code>。<code>Index</code>可以理解成单个数据库。<br><code>Index</code><strong>名字必须是小写</strong></li><li><code>Document</code>文档，<code>Index</code>里的单条记录成为<code>Document</code>文档。许多文档构成了<code>Index</code>。文档是json类型表示，可以理解为一个json对象。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;title&quot;:&quot;Elastic分布式全文搜索引擎&quot;,</span><br><span class="line">    &quot;keyword&quot;:&quot;java,search&quot;,</span><br><span class="line">    &quot;body&quot;:&quot;这是内容&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><em>同一个文档<code>(Doucment)</code>最好结构<code>(scheme)</code>相同*</em></li><li><code>Type</code>分组、类型，<code>Document</code>可以进行分组。根据虚拟逻辑进行分组，比如<strong>技术博问</strong>和<strong>散文博文</strong>，用来过滤<code>Documeent</code>。<blockquote><p>根据规划，Elastic6 版本之循序Index中包好一个Type, 7版本将移除type。</p></blockquote></li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul><li><p>新建<code>Index</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 发送PUT请求创建Index</span><br><span class="line">curl -X PUT &#39;localhost:9200&#x2F;weather&#39;</span><br></pre></td></tr></table></figure><p>服务器返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># acknowledged表示操作成功</span><br><span class="line">&#123;</span><br><span class="line">   &quot;acknowledged&quot;:true,</span><br><span class="line">   &quot;shards_acknowledged&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除<code>Index</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 发送DELETE请求删除</span><br><span class="line">curl -X DELETE &#39;localhost:9200&#x2F;weather&#39;</span><br></pre></td></tr></table></figure></li><li><p>设置<code>Index</code>详细内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 创建叫accounts的Index</span><br><span class="line">curl -X PUT &#39;localhost:9200&#x2F;accounts&#39; -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">    &quot;mappings&quot;:&#123;</span><br><span class="line">        &#x2F;&#x2F; 有一个type叫person</span><br><span class="line">        &quot;TypePerson&quot;:&#123;</span><br><span class="line">            &quot;properties&quot;:&#123;</span><br><span class="line">                &#x2F;&#x2F;字段1 User</span><br><span class="line">                &quot;user&quot;:&#123;</span><br><span class="line">                    &quot;type&quot;:&quot;text&quot;,&#x2F;&#x2F;文本类型</span><br><span class="line">                    &quot;analyzer&quot;:&quot;ik_max_word&quot;,&#x2F;&#x2F;字段分词器使用ik提供的文本最大数量分词。</span><br><span class="line">                    &quot;search_analyzer&quot;:&quot;ik_max_word&quot;&#x2F;&#x2F;搜索分词器</span><br><span class="line">                &#125;，</span><br><span class="line">                &#x2F;&#x2F;字段2 Title</span><br><span class="line">                &quot;title&quot;:&#123;</span><br><span class="line">                    ...同上</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p>新增记录(指定id)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 向accounts的person分组插入(PUT)</span><br><span class="line"># 1为此记录的id,任意字符。</span><br><span class="line">$ curl -X PUT &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;1&#39; -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;张三&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot;:&quot;accounts&quot;,</span><br><span class="line">  &quot;_type&quot;:&quot;person&quot;,</span><br><span class="line">  &quot;_id&quot;:&quot;1&quot;,</span><br><span class="line">  &quot;_version&quot;:1,</span><br><span class="line">  &quot;result&quot;:&quot;created&quot;,</span><br><span class="line">  &quot;_shards&quot;:&#123;&quot;total&quot;:2,&quot;successful&quot;:1,&quot;failed&quot;:0&#125;,</span><br><span class="line">  &quot;created&quot;:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增记录(不指定id)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 使用POST,服务器随机生成字符串形式的id</span><br><span class="line">$ curl -X POST &#39;localhost:9200&#x2F;accounts&#x2F;person&#39; -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user&quot;: &quot;李四&quot;,</span><br><span class="line">  &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">  &quot;desc&quot;: &quot;系统管理&quot;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>如果没有创建Index直接插入会自动生成指定的Index。</p></blockquote></li><li><p>查看记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用GET &#96;Index&#x2F;Type&#x2F;Id&#96;查看，pretty表示以易读格式返回。</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;1?pretty&#x3D;true&#39;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;_index&quot; : &quot;accounts&quot;,</span><br><span class="line">  &quot;_type&quot; : &quot;person&quot;,</span><br><span class="line">  &quot;_id&quot; : &quot;1&quot;,</span><br><span class="line">  &quot;_version&quot; : 1,</span><br><span class="line">  &quot;found&quot; : true,&#x2F;&#x2F;没找到 false</span><br><span class="line">  &quot;_source&quot; : &#123;</span><br><span class="line">    &quot;user&quot; : &quot;张三&quot;,</span><br><span class="line">    &quot;title&quot; : &quot;工程师&quot;,</span><br><span class="line">    &quot;desc&quot; : &quot;数据库管理&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>删除记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># delete id</span><br><span class="line">curl -X DELETE &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;1&#39;</span><br></pre></td></tr></table></figure></li><li><p>更新记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 重新发送一次就可以了</span><br><span class="line">curl -X PUT &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;1&#39; -d </span><br><span class="line">&#39;...&#39;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;_version&quot; : 2,&#x2F;&#x2F;版本+1</span><br><span class="line">&quot;result&quot; : &quot;updated&quot;,&#x2F;&#x2F;结果从创建变成修改</span><br><span class="line">&quot;created&quot; : false&#x2F;&#x2F;created 变成 false</span><br></pre></td></tr></table></figure></li><li><p>查询所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># GET请求直接访问</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;</span><br></pre></td></tr></table></figure><p>返回</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;took&quot;:2,</span><br><span class="line">  &quot;timed_out&quot;:false,</span><br><span class="line">  &quot;_shards&quot;:&#123;&quot;total&quot;:5,&quot;successful&quot;:5,&quot;failed&quot;:0&#125;,</span><br><span class="line">  &quot;hits&quot;:&#123;</span><br><span class="line">    &quot;total&quot;:2,</span><br><span class="line">    &quot;max_score&quot;:1.0,</span><br><span class="line">    &quot;hits&quot;:[</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;:&quot;accounts&quot;,</span><br><span class="line">        &quot;_type&quot;:&quot;person&quot;,</span><br><span class="line">        &quot;_id&quot;:&quot;AV3qGfrC6jMbsbXb6k1p&quot;,</span><br><span class="line">        &quot;_score&quot;:1.0,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;user&quot;: &quot;李四&quot;,</span><br><span class="line">          &quot;title&quot;: &quot;工程师&quot;,</span><br><span class="line">          &quot;desc&quot;: &quot;系统管理&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;_index&quot;:&quot;accounts&quot;,</span><br><span class="line">        &quot;_type&quot;:&quot;person&quot;,</span><br><span class="line">        &quot;_id&quot;:&quot;1&quot;,</span><br><span class="line">        &quot;_score&quot;:1.0,</span><br><span class="line">        &quot;_source&quot;: &#123;</span><br><span class="line">          &quot;user&quot; : &quot;张三&quot;,</span><br><span class="line">          &quot;title&quot; : &quot;工程师&quot;,</span><br><span class="line">          &quot;desc&quot; : &quot;数据库管理，软件开发&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>took</code>操作耗时(毫秒)、<code>timed_out</code>是否超时、<code>hits</code>命中的记录<br><code>hits</code>字段含义</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">total：返回记录数，本例是2条。</span><br><span class="line">max_score：最高的匹配程度，本例是1.0。</span><br><span class="line">hits：返回的记录组成的数组。</span><br><span class="line">hits下_score表示匹配的程序，按照这个字段排序的</span><br></pre></td></tr></table></figure></li><li><p>全文搜索</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询desc字段中包含软件这个词的</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件&quot; &#125;&#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p>指定全文搜索结果条数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># size 1 指定返回一条结果</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;管理&quot; &#125;&#125;,</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p>位移/跳过指定数量的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;管理&quot; &#125;&#125;,</span><br><span class="line">  &quot;from&quot;: 1,&#x2F;&#x2F;跳过1条</span><br><span class="line">  &quot;size&quot;: 1</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure></li><li><p>条件或、条件且<br>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 软件或是系统</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot; : &#123; &quot;match&quot; : &#123; &quot;desc&quot; : &quot;软件 系统&quot; &#125;&#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><p>且</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># desc 拥有软件关键词同时也要拥有系统关键词</span><br><span class="line">$ curl &#39;localhost:9200&#x2F;accounts&#x2F;person&#x2F;_search&#39;  -d &#39;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: [</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;软件&quot; &#125; &#125;,</span><br><span class="line">        &#123; &quot;match&quot;: &#123; &quot;desc&quot;: &quot;系统&quot; &#125; &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#39;</span><br></pre></td></tr></table></figure><h1 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h1></li><li><p><code>linux</code>通用方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#  nohup表示不依赖终端，可以在同一个终端继续其他事情</span><br><span class="line"># &amp;不依赖于用户</span><br><span class="line">nohup bin&#x2F;elasticsearch &amp;</span><br><span class="line"># 查看日志</span><br><span class="line">tail -fn 200 nohup.out</span><br><span class="line"># 重定向输出信息 &gt;&#x2F;dev&#x2F;null-&gt;将所有正确输出都保存到null文件中(抛弃) 2&gt;&amp;1 -&gt;2即错误信息，重定向到1(正确信息中)</span><br><span class="line">nohup bin&#x2F;elasticsearch &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li><li><p><code>Elastic</code>参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># -d 代表后台运行</span><br><span class="line">bin&#x2F;elasticsearch -d</span><br></pre></td></tr></table></figure></li><li><p>关闭后台程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查找进程</span><br><span class="line">ps -ef|grep elastic</span><br><span class="line"># 杀死进程</span><br><span class="line">kill 41496</span><br></pre></td></tr></table></figure></li></ul><h1 id="模糊查询-分页"><a href="#模糊查询-分页" class="headerlink" title="模糊查询+分页"></a>模糊查询+分页</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Page&lt;User&gt; <span class="title">findByUsernameContainingOrderByCreateTimeDesc</span><span class="params">(String username,Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p>调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Pageable page = PageRequest.of(<span class="number">0</span> , <span class="number">2</span>);</span><br><span class="line">Page&lt;User&gt; list = userRepository.findByUsernameContainingOrderByCreateTimeDesc(<span class="string">"丽"</span>,page);</span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><ol><li><code>Elastic</code>数据存储在磁盘中，查询的时候会自动提取到<code>Filesystem Cache</code>中。增加<code>Filesystem Cache</code>(内存)的容量，以及预知会有大量访问的数据自己提前定时查询，使其写入内存。热数据冷数据分离，热数据不会被冷数据挤下去。</li><li>join/nested/parent-child 这些操作尽量不要做</li><li>分页默认的性能很低，越往深层越慢。使用 Scroll API，滚动刷新(不能跳页)</li><li>配合其他数据库使用，es查询会查询所有数据，但是大部分可能没用。可以将需要检索的字段和id存入ES,再用id在mysql/HBase中取出其他的。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HttpClient使用及工具类</title>
      <link href="/2022/03/20/HttpClient%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/03/20/HttpClient%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：356,阅读全文大约需要1分钟</p><h1 id="一、依赖"><a href="#一、依赖" class="headerlink" title="一、依赖"></a>一、依赖</h1><p>主要是两个包，发起连接的<code>httpclient</code>以及定义<code>http</code>请求数据类型的包<code>httpmime</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- httpmime --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpmime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- httpclient --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="二、封装工具类"><a href="#二、封装工具类" class="headerlink" title="二、封装工具类"></a>二、封装工具类</h1><p>把常用的功能封装成工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.colin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.StringEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.entity.mime.MultipartEntityBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * httpClient常用功能封装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将http请求结果的内容读取成字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">parseRespToStr</span><span class="params">(CloseableHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        response.getEntity().writeTo(outputStream);</span><br><span class="line">        <span class="keyword">return</span> outputStream.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建formData的httpPost请求</span></span><br><span class="line"><span class="comment">     * content-type 对应 multipart/form-data</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url post地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers 请求头内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params 表单内容 map，value支持 String/File/Collection&lt;File&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpPost <span class="title">createFormDataHttpPost</span><span class="params">(String url, Map&lt;String, String&gt; headers, Map&lt;String, Object&gt; params)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        MultipartEntityBuilder builder = MultipartEntityBuilder.create();</span><br><span class="line">        <span class="keyword">if</span>(params != <span class="keyword">null</span>) &#123;</span><br><span class="line">            params.forEach((k,v)-&gt;&#123;</span><br><span class="line">                <span class="keyword">if</span>(v <span class="keyword">instanceof</span> File) &#123;</span><br><span class="line">                    builder.addBinaryBody(k ,(File) v);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v <span class="keyword">instanceof</span> Collection) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (Object obj : (Collection)v) &#123;</span><br><span class="line">                        builder.addBinaryBody(k, (File)obj);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    builder.addTextBody(k, v.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        httpPost.setEntity(builder.build());</span><br><span class="line">        <span class="keyword">if</span>(headers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            headers.forEach(httpPost::addHeader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> httpPost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建纯字符串的form表单，并进行url编码</span></span><br><span class="line"><span class="comment">     * content-type 对应 application/x-www-form-urlencoded</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpPost <span class="title">createFormUrlencodedHttpPost</span><span class="params">(String url, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; params)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        List&lt;BasicNameValuePair&gt; nameValuePairs;</span><br><span class="line">        <span class="keyword">if</span>(params != <span class="keyword">null</span>) &#123;</span><br><span class="line">            nameValuePairs = params.entrySet().stream().map(entry -&gt; <span class="keyword">new</span> BasicNameValuePair(entry.getKey(), entry.getValue()))</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nameValuePairs = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        HttpEntity entity = <span class="keyword">new</span> UrlEncodedFormEntity(nameValuePairs);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        <span class="keyword">if</span>(headers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            headers.forEach(httpPost::addHeader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> httpPost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建json格式的httpPost请求</span></span><br><span class="line"><span class="comment">     * content-type 对应 application/json</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpPost <span class="title">createJsonHttpPost</span><span class="params">(String url, Map&lt;String, String&gt; headers, String jsonStr)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">        httpPost.setEntity(<span class="keyword">new</span> StringEntity(jsonStr));</span><br><span class="line">        <span class="keyword">if</span>(headers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            headers.forEach(httpPost::addHeader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> httpPost;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建httpGet请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpGet <span class="title">createHttpGet</span><span class="params">(String url, Map&lt;String, String&gt; headers)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpGet httpGet = <span class="keyword">new</span> HttpGet(url);</span><br><span class="line">        <span class="keyword">if</span>(headers != <span class="keyword">null</span>) &#123;</span><br><span class="line">            headers.forEach(httpGet::addHeader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> httpGet;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpClientBuilder <span class="title">getHttpClientBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> HttpClientBuilder.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpClientBuilder <span class="title">getHttpsClientBuilder</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException, KeyManagementException </span>&#123;</span><br><span class="line">        SSLContext ctx = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">        X509TrustManager tm = <span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ctx.init(<span class="keyword">null</span>, <span class="keyword">new</span> TrustManager[]&#123;tm&#125;, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> HttpClientBuilder.create().setSSLContext(ctx);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、测试类"><a href="#三、测试类" class="headerlink" title="三、测试类"></a>三、测试类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">        HttpClientUtil app = <span class="keyword">new</span> HttpClientUtil();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String url = <span class="string">"http://127.0.0.1:8098/test"</span>;</span><br><span class="line">            <span class="comment">// 复用一个httpClient</span></span><br><span class="line">            CloseableHttpClient client = HttpClientBuilder.create().build();</span><br><span class="line">            <span class="comment">// 1. get请求测试</span></span><br><span class="line">            HttpGet get = app.createHttpGet(url + <span class="string">"?name=111&amp;age=333"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. post请求测试 application/x-www-form-urlencoded</span></span><br><span class="line">            Map&lt;String, String&gt; param = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            param.put(<span class="string">"name"</span>, <span class="string">"321"</span>);</span><br><span class="line">            param.put(<span class="string">"age"</span>, <span class="string">"10"</span>);</span><br><span class="line">            HttpPost postStr = app.createFormUrlencodedHttpPost(url, param, param);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. post请求测试，多文件上传 multipart/form-data</span></span><br><span class="line">            Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            params.put(<span class="string">"name"</span>, <span class="string">"123"</span>);</span><br><span class="line">            params.put(<span class="string">"age"</span>, <span class="string">"10"</span>);</span><br><span class="line">            LinkedList&lt;Object&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            list.add(<span class="keyword">new</span> File(<span class="string">"E:\\321.png"</span>));</span><br><span class="line">            list.add(<span class="keyword">new</span> File(<span class="string">"E:\\123.png"</span>));</span><br><span class="line">            params.put(<span class="string">"photo"</span>, list);</span><br><span class="line">            HttpPost postFormData1 = app.createFormDataHttpPost(url, <span class="keyword">null</span>, params);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 4. post请求测试，单文件上传 multipart/form-data</span></span><br><span class="line">            params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            params.put(<span class="string">"name"</span>, <span class="string">"123"</span>);</span><br><span class="line">            params.put(<span class="string">"age"</span>, <span class="string">"10"</span>);</span><br><span class="line">            params.put(<span class="string">"photo"</span>, <span class="keyword">new</span> File(<span class="string">"E:\\321.png"</span>));</span><br><span class="line">            HttpPost postFormData2 = app.createFormDataHttpPost(url, <span class="keyword">null</span>, params);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. post请求测试，json格式 application/json</span></span><br><span class="line">            HashMap&lt;String, String&gt; head = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            HttpPost postJson = app.createJsonHttpPost(<span class="string">"http://127.0.0.1:8098/jsonTest"</span>, head, <span class="string">"&#123;'name':'123', 'age':'333'&#125;"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 发起请求</span></span><br><span class="line">            CloseableHttpResponse response;</span><br><span class="line">            response = client.execute(get);</span><br><span class="line">            System.out.println(<span class="string">"-------get---------"</span>);</span><br><span class="line">            System.out.println(HttpClientUtil.parseRespToStr(response));</span><br><span class="line"></span><br><span class="line">            response = client.execute(postStr);</span><br><span class="line">            System.out.println(<span class="string">"---------post str----------"</span>);</span><br><span class="line">            System.out.println(HttpClientUtil.parseRespToStr(response));</span><br><span class="line"></span><br><span class="line">            response = client.execute(postFormData1);</span><br><span class="line">            System.out.println(<span class="string">"---------post formData1----------"</span>);</span><br><span class="line">            System.out.println(HttpClientUtil.parseRespToStr(response));</span><br><span class="line"></span><br><span class="line">            response = client.execute(postFormData2);</span><br><span class="line">            System.out.println(<span class="string">"---------post formData2----------"</span>);</span><br><span class="line">            System.out.println(HttpClientUtil.parseRespToStr(response));</span><br><span class="line"></span><br><span class="line">            response = client.execute(postJson);</span><br><span class="line">            System.out.println(<span class="string">"---------post json----------"</span>);</span><br><span class="line">            System.out.println(HttpClientUtil.parseRespToStr(response));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、服务器接受的代码"><a href="#四、服务器接受的代码" class="headerlink" title="四、服务器接受的代码"></a>四、服务器接受的代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function">String <span class="title">getTest</span><span class="params">(String name, String age)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"name = "</span> + name);</span><br><span class="line">    System.out.println(<span class="string">"age = "</span> + age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"getOk"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 兼容接收多个文件，或者一个</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function">String <span class="title">postTest</span><span class="params">(String name, String age, @RequestParam(value = <span class="string">"photo"</span>, required = <span class="keyword">false</span>)</span> MultipartFile[] photo) </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"name = "</span> + name);</span><br><span class="line">    System.out.println(<span class="string">"age = "</span> + age);</span><br><span class="line">    <span class="keyword">if</span>(photo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : photo) &#123;</span><br><span class="line">            System.out.println(<span class="string">"photo.getSize() = "</span> + file.getSize());</span><br><span class="line">            System.out.println(<span class="string">"photo.getName() = "</span> + file.getOriginalFilename());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"postOk"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/jsonTest"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function">String <span class="title">jsonTest</span><span class="params">(@RequestBody String json)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"json = "</span> + json);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"postOk"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> http </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate-Validator后端参数校验</title>
      <link href="/2022/03/20/Hibernate-Validator%E5%90%8E%E7%AB%AF%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/"/>
      <url>/2022/03/20/Hibernate-Validator%E5%90%8E%E7%AB%AF%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：809,阅读全文大约需要3分钟</p><blockquote><p>整理自<a href="https://www.jianshu.com/p/0bfe2318814f" target="_blank" rel="noopener">原文</a></p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.hibernate&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;hibernate-validator&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;6.0.9.Final&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>如果使用的是<code>SpringBoot</code>，这个依赖是自带的。</p><h1 id="校验Controller入参的对象"><a href="#校验Controller入参的对象" class="headerlink" title="校验Controller入参的对象"></a>校验Controller入参的对象</h1><ol><li>添加校验</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span> <span class="comment">// get set</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">// 创建有所有参数的构造方法</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">// 创建无参构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Length</span>(max = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"[A-Z][a-z][0-9]"</span>)</span><br><span class="line">    <span class="keyword">private</span> String passWord;</span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyy-MM-dd"</span>) <span class="comment">// String转换成时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> String alias;</span><br><span class="line">    <span class="meta">@Max</span>(<span class="number">10</span>)</span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer level;</span><br><span class="line">    <span class="keyword">private</span> Integer vip;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要加 @Valid 才会校验，错误直接抛出异常</span></span><br><span class="line"> <span class="meta">@PostMapping</span>(<span class="string">"/saveAccount"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">saveAccount</span><span class="params">(@RequestBody @Valid Account account)</span></span>&#123;</span><br><span class="line">        accountService.saveAccount(account);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"保存成功"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Controller方法上直接校验"><a href="#Controller方法上直接校验" class="headerlink" title="Controller方法上直接校验"></a>Controller方法上直接校验</h1><p>在类上需要添加注解<code>@Validated</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/validation"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**如果只有少数对象，直接把参数写到Controller层，然后在Controller层进行验证就可以了。*/</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/demo3"</span>, method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demo3</span><span class="params">(@Range(min = <span class="number">1</span>, max = <span class="number">9</span>, message = <span class="string">"年级只能从1-9"</span>)</span></span></span><br><span class="line"><span class="function">                      @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"grade"</span>, required = <span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">                      <span class="keyword">int</span> grade,</span></span><br><span class="line"><span class="function">                      @<span class="title">Min</span><span class="params">(value = <span class="number">1</span>, message = <span class="string">"班级最小只能1"</span>)</span></span></span><br><span class="line"><span class="function">                      @<span class="title">Max</span><span class="params">(value = <span class="number">99</span>, message = <span class="string">"班级最大只能99"</span>)</span></span></span><br><span class="line"><span class="function">                      @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"classroom"</span>, required = <span class="keyword">true</span>)</span></span></span><br><span class="line"><span class="function">                      <span class="keyword">int</span> classroom) </span>&#123;</span><br><span class="line">        System.out.println(grade + <span class="string">","</span> + classroom);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用工具类校验"><a href="#使用工具类校验" class="headerlink" title="使用工具类校验"></a>使用工具类校验</h1><ol><li><p>工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Validator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.HibernateValidator;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidationUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开启快速结束模式 failFast (true)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator = Validation.byProvider(HibernateValidator<span class="class">.<span class="keyword">class</span>).<span class="title">configure</span>().<span class="title">failFast</span>(<span class="title">false</span>).<span class="title">buildValidatorFactory</span>().<span class="title">getValidator</span>()</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groups 校验组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ValidResult</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ValidResult <span class="title">validateBean</span><span class="params">(T t,Class&lt;?&gt;...groups)</span> </span>&#123;</span><br><span class="line">        ValidResult result = <span class="keyword">new</span> ValidationUtil().<span class="keyword">new</span> ValidResult();</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; violationSet = validator.validate(t,groups);</span><br><span class="line">        <span class="keyword">boolean</span> hasError = violationSet != <span class="keyword">null</span> &amp;&amp; violationSet.size() &gt; <span class="number">0</span>;</span><br><span class="line">        result.setHasErrors(hasError);</span><br><span class="line">        <span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ConstraintViolation&lt;T&gt; violation : violationSet) &#123;</span><br><span class="line">                result.addError(violation.getPropertyPath().toString(), violation.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验bean的某一个属性</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj          bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> propertyName 属性名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> ValidResult</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">ValidResult <span class="title">validateProperty</span><span class="params">(T obj, String propertyName)</span> </span>&#123;</span><br><span class="line">        ValidResult result = <span class="keyword">new</span> ValidationUtil().<span class="keyword">new</span> ValidResult();</span><br><span class="line">        Set&lt;ConstraintViolation&lt;T&gt;&gt; violationSet = validator.validateProperty(obj, propertyName);</span><br><span class="line">        <span class="keyword">boolean</span> hasError = violationSet != <span class="keyword">null</span> &amp;&amp; violationSet.size() &gt; <span class="number">0</span>;</span><br><span class="line">        result.setHasErrors(hasError);</span><br><span class="line">        <span class="keyword">if</span> (hasError) &#123;</span><br><span class="line">            <span class="keyword">for</span> (ConstraintViolation&lt;T&gt; violation : violationSet) &#123;</span><br><span class="line">                result.addError(propertyName, violation.getMessage());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验结果类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 是否有错误</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> hasErrors;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 错误信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> List&lt;ErrorMessage&gt; errors;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ValidResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.errors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasErrors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> hasErrors;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHasErrors</span><span class="params">(<span class="keyword">boolean</span> hasErrors)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.hasErrors = hasErrors;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取所有验证信息</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 集合形式</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;ErrorMessage&gt; <span class="title">getAllErrors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> errors;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取所有验证信息</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 字符串形式</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getErrors</span><span class="params">()</span></span>&#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (ErrorMessage error : errors) &#123;</span><br><span class="line">                sb.append(error.getPropertyPath()).append(<span class="string">":"</span>).append(error.getMessage()).append(<span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addError</span><span class="params">(String propertyName, String message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.errors.add(<span class="keyword">new</span> ErrorMessage(propertyName, message));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorMessage</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String propertyPath;</span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ErrorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ErrorMessage</span><span class="params">(String propertyPath, String message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.propertyPath = propertyPath;</span><br><span class="line">            <span class="keyword">this</span>.message = message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">     Account account = <span class="keyword">new</span> Account();</span><br><span class="line">     account.setAlias(<span class="string">"kalakala"</span>);</span><br><span class="line">     account.setUserName(<span class="string">"wokalakala"</span>);</span><br><span class="line">     account.setPassWord(<span class="string">"密码"</span>);</span><br><span class="line">     ValidationUtil.ValidResult validResult = ValidationUtil.validateBean(account);</span><br><span class="line">     <span class="keyword">if</span>(validResult.hasErrors())&#123;</span><br><span class="line">         String errors = validResult.getErrors();</span><br><span class="line">         System.out.println(errors);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h1><ol><li>注解上必须有 @Constraint(validatedBy = {<strong>**</strong>.class}) 注解标注，validateBy 的值就是校验逻辑的实现类，实现类必须实现接口ConstraintValidator</li><li>自定义注解 必须包含 message ,groups,payload 属性。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.time.DateUtils;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.RetentionPolicy.RUNTIME;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by hu on 2018/3/12.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;FIELD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = &#123;DateValidator.DateValidatorInner<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">DateValidator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 必须的属性</span></span><br><span class="line"><span class="comment">     * 显示 校验信息</span></span><br><span class="line"><span class="comment">     * 利用 &#123;&#125; 获取 属性值，参考了官方的message编写方式</span></span><br><span class="line"><span class="comment">     *<span class="doctag">@see</span> org.hibernate.validator 静态资源包里面 message 编写方式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "日期格式不匹配</span>&#123;dateFormat&#125;<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * 必须的属性</span></span><br><span class="line"><span class="string">     * 用于分组校验</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * 非必须</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    String dateFormat() default "</span>yyyy-MM-dd HH:mm:ss<span class="string">";</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    /**</span></span><br><span class="line"><span class="string">     * 必须实现 ConstraintValidator接口</span></span><br><span class="line"><span class="string">     */</span></span><br><span class="line"><span class="string">    class DateValidatorInner implements ConstraintValidator&lt;DateValidator, String&gt; &#123;</span></span><br><span class="line"><span class="string">        private String dateFormat;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        @Override</span></span><br><span class="line"><span class="string">        public void initialize(DateValidator constraintAnnotation) &#123;</span></span><br><span class="line"><span class="string">            this.dateFormat = constraintAnnotation.dateFormat();</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        /**</span></span><br><span class="line"><span class="string">         * 校验逻辑的实现</span></span><br><span class="line"><span class="string">         * @param value 需要校验的 值</span></span><br><span class="line"><span class="string">         * @return 布尔值结果</span></span><br><span class="line"><span class="string">         */</span></span><br><span class="line"><span class="string">        @Override</span></span><br><span class="line"><span class="string">        public boolean isValid(String value, ConstraintValidatorContext context) &#123;</span></span><br><span class="line"><span class="string">            if (value == null) &#123;</span></span><br><span class="line"><span class="string">                return true;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            if("</span><span class="string">".equals(value))&#123;</span></span><br><span class="line"><span class="string">                return true;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">            try &#123;</span></span><br><span class="line"><span class="string">                Date date = DateUtils.parseDate(value, dateFormat);</span></span><br><span class="line"><span class="string">                return date != null;</span></span><br><span class="line"><span class="string">            &#125; catch (ParseException e) &#123;</span></span><br><span class="line"><span class="string">                return false;</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateValidator</span>(dateFormat = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line"><span class="keyword">private</span> String day;</span><br></pre></td></tr></table></figure><h1 id="分组校验"><a href="#分组校验" class="headerlink" title="分组校验"></a>分组校验</h1><p>同一个对象在不同业务下验证规则可能不一样</p><ol><li>声明规则时指定分组（不写默认是Default.class分组）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DateValidator</span>(dateFormat = <span class="string">"yyyy-MM-dd"</span>,groups = &#123;AccountService<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">  <span class="title">private</span> <span class="title">String</span> <span class="title">birthday</span></span>;</span><br></pre></td></tr></table></figure></li><li>验证规则时加入分组<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ValidationUtil.ValidResult validResult = ValidationUtil.validateBean(account, AccountService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">       <span class="keyword">if</span>(validResult.hasErrors())&#123;</span><br><span class="line">           String errors = validResult.getErrors();</span><br><span class="line">           System.out.println(errors);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="其它常用规则"><a href="#其它常用规则" class="headerlink" title="其它常用规则"></a>其它常用规则</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@AssertFalse @AssertTrue  检验boolean类型的值</span><br><span class="line"></span><br><span class="line">@DecimalMax @DecimalMin  限定被标注的属性的值的大小</span><br><span class="line"></span><br><span class="line">@Digits(intege&#x3D;,fraction&#x3D;) 限定被标注的属性的整数位数和小数位数</span><br><span class="line"></span><br><span class="line">@Future检验给定的日期是否比现在晚</span><br><span class="line"></span><br><span class="line">@Past    校验给定的日期是否比现在早</span><br><span class="line"></span><br><span class="line">@Max检查被标注的属性的值是否小于等于给定的值</span><br><span class="line"></span><br><span class="line">@Min检查被标注的属性的值是否大于等于给定的值</span><br><span class="line"></span><br><span class="line">@NotNull检验被标注的值不为空</span><br><span class="line"></span><br><span class="line">@Null     检验被标注的值为空</span><br><span class="line"></span><br><span class="line">@Pattern(regex&#x3D;,flag&#x3D;)  检查该字符串是否能够在match指定的情况下被regex定义的正则表达式匹配</span><br><span class="line"></span><br><span class="line">@Size(min&#x3D;,max&#x3D;)  检查被标注元素的长度</span><br><span class="line"></span><br><span class="line">@Valid递归的对关联的对象进行校验</span><br></pre></td></tr></table></figure><h1 id="配合使用的全局异常处理"><a href="#配合使用的全局异常处理" class="headerlink" title="配合使用的全局异常处理"></a>配合使用的全局异常处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">MethodArgumentNotValidExceptionHandler</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 然后提取错误提示信息进行返回</span></span><br><span class="line">        <span class="keyword">return</span> objectError.getDefaultMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="不抛异常，手动判断"><a href="#不抛异常，手动判断" class="headerlink" title="不抛异常，手动判断"></a>不抛异常，手动判断</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/addUser"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(@RequestBody @Valid User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果有参数校验失败，会将错误信息封装成对象组装在BindingResult里</span></span><br><span class="line">        <span class="keyword">for</span> (ObjectError error : bindingResult.getAllErrors()) &#123;</span><br><span class="line">            <span class="keyword">return</span> error.getDefaultMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> userService.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty简单使用</title>
      <link href="/2022/03/20/Netty%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/Netty%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：659,阅读全文大约需要2分钟</p><blockquote><p>一个基于socket的Netty客户端和服务端相互通讯</p></blockquote><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><p>服务类，用于创建Netty服务绑定端口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.ServerBootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioServerSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Netty服务器类，用于接收请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 13:50 2019/8/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动服务 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port 启动时绑定的端口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Reactor线程组，一个用来处理连接，一个用来处理网络读写</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        EventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//启动NIO服务端的辅助启动类</span></span><br><span class="line">            ServerBootstrap serverBootstrap = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            <span class="comment">//绑定线程组</span></span><br><span class="line">            serverBootstrap.group(bossGroup,workGroup)</span><br><span class="line">                    <span class="comment">//指定通道类型（服务端是NioServerSocketChannel）</span></span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    //设置通道的处理器</span></span><br><span class="line"><span class="class">                    .<span class="title">option</span>(<span class="title">ChannelOption</span>.<span class="title">SO_BACKLOG</span>,1024)</span></span><br><span class="line"><span class="class">                    //子通道</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChildChannelHandler</span>())</span>;</span><br><span class="line">            <span class="comment">//绑定并监听端口</span></span><br><span class="line">            ChannelFuture future = serverBootstrap.bind(port).sync();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"，启动成功，等待请求中"</span>);</span><br><span class="line">            <span class="comment">//future.channel()获取程序的channel,等待结束(closeFuthre),阻塞(sync)</span></span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//退出，释放资源</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            workGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChildChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel arg0)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="comment">//ChannelPipeline是一个链式的处理请求的流程</span></span><br><span class="line">            arg0.pipeline().addLast(<span class="keyword">new</span> NettyServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>处理请求的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.server;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 14:31 2019/8/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收客户端消息，自动触发</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换msg成Netty的ByteBuf对象，类似ByteBuffer（缓冲区）</span></span><br><span class="line">        ByteBuf buf = (ByteBuf) msg;</span><br><span class="line">        <span class="comment">//创建缓冲区内信息大小的byte类型数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] reg = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        <span class="comment">//读取缓冲区的信息并转换成字符串</span></span><br><span class="line">        buf.readBytes(reg);</span><br><span class="line">        String mess = <span class="keyword">new</span> String(reg,<span class="string">"UTF-8"</span>);</span><br><span class="line">        System.out.println(<span class="string">"mess = "</span> + mess);</span><br><span class="line">        <span class="comment">//回复消息</span></span><br><span class="line">        String respMess = <span class="string">"收到"</span>;</span><br><span class="line">        ByteBuf respByteBuf = Unpooled.copiedBuffer(respMess.getBytes());</span><br><span class="line">        ctx.write(respByteBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *当Channel上的一个读操作完成时被调用( channelRead是进行拆包和粘包之后的请求，channelReadComplete则是具体的每一次发送请求)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//读完后刷新缓冲区，发送</span></span><br><span class="line">        ctx.flush();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常发生</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cause</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//发送异常关闭context,释放相关资源</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>建立连接请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelOption;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.EventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.nio.NioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.socket.nio.NioSocketChannel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**客户端，发起连接请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 15:19 2019/8/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接目标服务器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(String host,<span class="keyword">int</span> port)</span></span>&#123;</span><br><span class="line">        <span class="comment">//NIO线程组</span></span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">            bootstrap.group(group).channel(NioSocketChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">option</span>(<span class="title">ChannelOption</span>.<span class="title">TCP_NODELAY</span>,<span class="title">true</span>)</span></span><br><span class="line"><span class="class">                    .<span class="title">handler</span>(<span class="title">new</span> <span class="title">ChileHandler</span>())</span>;</span><br><span class="line">            ChannelFuture channelFuture = bootstrap.connect(host,port).sync();</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">",发起连接请求"</span>);</span><br><span class="line">            <span class="comment">//等待客户端链路关闭</span></span><br><span class="line">            channelFuture.channel().closeFuture().sync();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ChileHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel socketChannel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            socketChannel.pipeline().addLast(<span class="keyword">new</span> NettyClientHanlder());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体处理事件的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.client;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.Unpooled;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInboundHandlerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**处理请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 16:32 2019/8/14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHanlder</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接成功之后执行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String sendMess = <span class="string">"我是客户端："</span>+Thread.currentThread().getName();</span><br><span class="line">        <span class="keyword">byte</span>[] sendMesByte = sendMess.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">        ByteBuf sendByteBuf = Unpooled.buffer(sendMesByte.length);</span><br><span class="line">        sendByteBuf.writeBytes(sendMesByte);</span><br><span class="line">        ctx.writeAndFlush(sendByteBuf);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收返回的消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ctx</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ByteBuf buf = (ByteBuf)msg;</span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[buf.readableBytes()];</span><br><span class="line">        buf.readBytes(req);</span><br><span class="line">        String mess = <span class="keyword">new</span> String(req,<span class="string">"UTF-8"</span>);</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"接收到返回的消息："</span>+mess);</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.greatcolin.client.NettyClient;</span><br><span class="line"><span class="keyword">import</span> io.greatcolin.server.NettyServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hello world!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//开启服务，服务会阻塞，所以使用一个线程开启</span></span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                NettyServer server = <span class="keyword">new</span> NettyServer();</span><br><span class="line">                server.bind(<span class="number">7777</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        NettyClient client = <span class="keyword">new</span> NettyClient();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">            App.sleep();</span><br><span class="line">            client.connect(<span class="string">"127.0.0.1"</span>,<span class="number">7777</span>);</span><br><span class="line">            System.out.println(<span class="string">"------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//休眠3秒</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Thread-<span class="number">0</span>，启动成功，等待请求中</span><br><span class="line">main,发起连接请求</span><br><span class="line">mess = 我是客户端：nioEventLoopGroup-<span class="number">4</span>-<span class="number">1</span></span><br><span class="line">nioEventLoopGroup-<span class="number">4</span>-<span class="number">1</span>接收到返回的消息：收到</span><br><span class="line">------</span><br><span class="line">main,发起连接请求</span><br><span class="line">mess = 我是客户端：nioEventLoopGroup-<span class="number">5</span>-<span class="number">1</span></span><br><span class="line">nioEventLoopGroup-<span class="number">5</span>-<span class="number">1</span>接收到返回的消息：收到</span><br><span class="line">------</span><br><span class="line">main,发起连接请求</span><br><span class="line">mess = 我是客户端：nioEventLoopGroup-<span class="number">6</span>-<span class="number">1</span></span><br><span class="line">nioEventLoopGroup-<span class="number">6</span>-<span class="number">1</span>接收到返回的消息：收到</span><br><span class="line">------</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> http </tag>
            
            <tag> 网络 </tag>
            
            <tag> socket </tag>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSHI查看cpu信息</title>
      <link href="/2022/03/20/OSHI%E6%9F%A5%E7%9C%8Bcpu%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/03/20/OSHI%E6%9F%A5%E7%9C%8Bcpu%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：794,阅读全文大约需要3分钟</p><blockquote><p>OSHI可以跨平台查看服务器信息，其中cpu负载信息为当前占用CPU的时间。需要在一段时间内获取两次，然后相减得出这段时间内所占用的时间。这段时间除以总占用时间就是占用百分比。</p></blockquote><p>环境<code>java1.8</code></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.github.oshi&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;oshi-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;3.12.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> io.greatcolin.jvmMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> oshi.SystemInfo;</span><br><span class="line"><span class="keyword">import</span> oshi.hardware.CentralProcessor;</span><br><span class="line"><span class="keyword">import</span> oshi.hardware.GlobalMemory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 16:04 2019/8/16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OshiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                OshiTest.printlnCpuInfo();</span><br><span class="line">                OshiTest.MemInfo();</span><br><span class="line">                OshiTest.getThread();</span><br><span class="line">                OshiTest.setSysInfo();</span><br><span class="line">                OshiTest.setJvmInfo();</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printlnCpuInfo</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println("----------------cpu信息----------------");</span></span><br><span class="line">        SystemInfo systemInfo = <span class="keyword">new</span> SystemInfo();</span><br><span class="line">        CentralProcessor processor = systemInfo.getHardware().getProcessor();</span><br><span class="line">        <span class="keyword">long</span>[] prevTicks = processor.getSystemCpuLoadTicks();</span><br><span class="line">        <span class="comment">// 睡眠1s</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">long</span>[] ticks = processor.getSystemCpuLoadTicks();</span><br><span class="line">        <span class="keyword">long</span> nice = ticks[CentralProcessor.TickType.NICE.getIndex()] - prevTicks[CentralProcessor.TickType.NICE.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> irq = ticks[CentralProcessor.TickType.IRQ.getIndex()] - prevTicks[CentralProcessor.TickType.IRQ.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> softirq = ticks[CentralProcessor.TickType.SOFTIRQ.getIndex()] - prevTicks[CentralProcessor.TickType.SOFTIRQ.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> steal = ticks[CentralProcessor.TickType.STEAL.getIndex()] - prevTicks[CentralProcessor.TickType.STEAL.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> cSys = ticks[CentralProcessor.TickType.SYSTEM.getIndex()] - prevTicks[CentralProcessor.TickType.SYSTEM.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> user = ticks[CentralProcessor.TickType.USER.getIndex()] - prevTicks[CentralProcessor.TickType.USER.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> iowait = ticks[CentralProcessor.TickType.IOWAIT.getIndex()] - prevTicks[CentralProcessor.TickType.IOWAIT.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> idle = ticks[CentralProcessor.TickType.IDLE.getIndex()] - prevTicks[CentralProcessor.TickType.IDLE.getIndex()];</span><br><span class="line">        <span class="keyword">long</span> totalCpu = user + nice + cSys + idle + iowait + irq + softirq + steal;</span><br><span class="line">        System.out.println(<span class="string">"----------------cpu信息----------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"cpu核数:"</span> + processor.getLogicalProcessorCount());</span><br><span class="line">        System.out.println(<span class="string">"cpu系统使用率:"</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format(cSys * <span class="number">1.0</span> / totalCpu));</span><br><span class="line">        System.out.println(<span class="string">"cpu用户使用率:"</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format(user * <span class="number">1.0</span> / totalCpu));</span><br><span class="line">        System.out.println(<span class="string">"cpu当前等待率:"</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format(iowait * <span class="number">1.0</span> / totalCpu));</span><br><span class="line">        System.out.println(<span class="string">"cpu当前使用率:"</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format(<span class="number">1.0</span>-(idle * <span class="number">1.0</span> / totalCpu)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MemInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------------主机内存信息----------------"</span>);</span><br><span class="line">        SystemInfo systemInfo = <span class="keyword">new</span> SystemInfo();</span><br><span class="line">        GlobalMemory memory = systemInfo.getHardware().getMemory();</span><br><span class="line">        <span class="comment">//总内存</span></span><br><span class="line">        <span class="keyword">long</span> totalByte = memory.getTotal();</span><br><span class="line">        <span class="comment">//剩余</span></span><br><span class="line">        <span class="keyword">long</span> acaliableByte = memory.getAvailable();</span><br><span class="line">        System.out.println(<span class="string">"总内存 = "</span> + formatByte(totalByte));</span><br><span class="line">        System.out.println(<span class="string">"使用"</span> + formatByte(totalByte-acaliableByte));</span><br><span class="line">        System.out.println(<span class="string">"剩余内存 = "</span> + formatByte(acaliableByte));</span><br><span class="line">        System.out.println(<span class="string">"使用率："</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format((totalByte-acaliableByte)*<span class="number">1.0</span>/totalByte));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSysInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------------操作系统信息----------------"</span>);</span><br><span class="line">        Properties props = System.getProperties();</span><br><span class="line">        <span class="comment">//系统名称</span></span><br><span class="line">        String osName = props.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">        <span class="comment">//架构名称</span></span><br><span class="line">        String osArch = props.getProperty(<span class="string">"os.arch"</span>);</span><br><span class="line">        System.out.println(<span class="string">"操作系统名 = "</span> + osName);</span><br><span class="line">        System.out.println(<span class="string">"系统架构 = "</span> + osArch);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setJvmInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------------jvm信息----------------"</span>);</span><br><span class="line">        Properties props = System.getProperties();</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        <span class="comment">//jvm总内存</span></span><br><span class="line">        <span class="keyword">long</span> jvmTotalMemoryByte = runtime.totalMemory();</span><br><span class="line">        <span class="comment">//jvm最大可申请</span></span><br><span class="line">        <span class="keyword">long</span> jvmMaxMoryByte = runtime.maxMemory();</span><br><span class="line">        <span class="comment">//空闲空间</span></span><br><span class="line">        <span class="keyword">long</span> freeMemoryByte = runtime.freeMemory();</span><br><span class="line">        <span class="comment">//jdk版本</span></span><br><span class="line">        String jdkVersion = props.getProperty(<span class="string">"java.version"</span>);</span><br><span class="line">        <span class="comment">//jdk路径</span></span><br><span class="line">        String jdkHome = props.getProperty(<span class="string">"java.home"</span>);</span><br><span class="line">        System.out.println(<span class="string">"jvm内存总量 = "</span> + formatByte(jvmTotalMemoryByte));</span><br><span class="line">        System.out.println(<span class="string">"jvm已使用内存 = "</span> + formatByte(jvmTotalMemoryByte-freeMemoryByte));</span><br><span class="line">        System.out.println(<span class="string">"jvm剩余内存 = "</span> + formatByte(freeMemoryByte));</span><br><span class="line">        System.out.println(<span class="string">"jvm内存使用率 = "</span> + <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##%"</span>).format((jvmTotalMemoryByte-freeMemoryByte)*<span class="number">1.0</span>/jvmTotalMemoryByte));</span><br><span class="line">        System.out.println(<span class="string">"java版本 = "</span> + jdkVersion);</span><br><span class="line">        <span class="comment">//System.out.println("jdkHome = " + jdkHome);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getThread</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----------------线程信息----------------"</span>);</span><br><span class="line">        ThreadGroup currentGroup =Thread.currentThread().getThreadGroup();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (currentGroup.getParent()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="comment">// 返回此线程组的父线程组</span></span><br><span class="line">          currentGroup=currentGroup.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//此线程组中活动线程的估计数</span></span><br><span class="line">        <span class="keyword">int</span> noThreads = currentGroup.activeCount();</span><br><span class="line"></span><br><span class="line">        Thread[] lstThreads = <span class="keyword">new</span> Thread[noThreads];</span><br><span class="line">        <span class="comment">//把对此线程组中的所有活动子组的引用复制到指定数组中。</span></span><br><span class="line">        currentGroup.enumerate(lstThreads);</span><br><span class="line">        <span class="keyword">for</span> (Thread thread : lstThreads) &#123;</span><br><span class="line">          System.out.println(<span class="string">"线程数量："</span>+noThreads+<span class="string">" 线程id："</span> + thread.getId() + <span class="string">" 线程名称："</span> + thread.getName() + <span class="string">" 线程状态："</span> + thread.getState());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">formatByte</span><span class="params">(<span class="keyword">long</span> byteNumber)</span></span>&#123;</span><br><span class="line">        <span class="comment">//换算单位</span></span><br><span class="line">        <span class="keyword">double</span> FORMAT = <span class="number">1024.0</span>;</span><br><span class="line">        <span class="keyword">double</span> kbNumber = byteNumber/FORMAT;</span><br><span class="line">        <span class="keyword">if</span>(kbNumber&lt;FORMAT)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##KB"</span>).format(kbNumber);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> mbNumber = kbNumber/FORMAT;</span><br><span class="line">        <span class="keyword">if</span>(mbNumber&lt;FORMAT)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##MB"</span>).format(mbNumber);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> gbNumber = mbNumber/FORMAT;</span><br><span class="line">        <span class="keyword">if</span>(gbNumber&lt;FORMAT)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##GB"</span>).format(gbNumber);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> tbNumber = gbNumber/FORMAT;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DecimalFormat(<span class="string">"#.##TB"</span>).format(tbNumber);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># 没添加slf4j的依赖，不影响</span><br><span class="line">SLF4J: Failed to load class &quot;org.slf4j.impl.StaticLoggerBinder&quot;.</span><br><span class="line">SLF4J: Defaulting to no-operation (NOP) logger implementation</span><br><span class="line">SLF4J: See http:&#x2F;&#x2F;www.slf4j.org&#x2F;codes.html#StaticLoggerBinder for further details.</span><br><span class="line">----------------cpu信息----------------</span><br><span class="line">cpu核数:4</span><br><span class="line">cpu系统使用率:1.88%</span><br><span class="line">cpu用户使用率:2.73%</span><br><span class="line">cpu当前等待率:0%</span><br><span class="line">cpu当前使用率:4.71%</span><br><span class="line">----------------主机内存信息----------------</span><br><span class="line">总内存 &#x3D; 7.88GB</span><br><span class="line">使用5.89GB</span><br><span class="line">剩余内存 &#x3D; 1.99GB</span><br><span class="line">使用率：74.72%</span><br><span class="line">----------------线程信息----------------</span><br><span class="line">线程数量：5 线程id：2 线程名称：Reference Handler 线程状态：WAITING</span><br><span class="line">线程数量：5 线程id：3 线程名称：Finalizer 线程状态：WAITING</span><br><span class="line">线程数量：5 线程id：4 线程名称：Signal Dispatcher 线程状态：RUNNABLE</span><br><span class="line">线程数量：5 线程id：5 线程名称：Attach Listener 线程状态：RUNNABLE</span><br><span class="line">线程数量：5 线程id：1 线程名称：main 线程状态：RUNNABLE</span><br><span class="line">----------------操作系统信息----------------</span><br><span class="line">操作系统名 &#x3D; Windows 7</span><br><span class="line">系统架构 &#x3D; amd64</span><br><span class="line">----------------jvm信息----------------</span><br><span class="line">jvm内存总量 &#x3D; 123MB</span><br><span class="line">jvm已使用内存 &#x3D; 20.46MB</span><br><span class="line">jvm剩余内存 &#x3D; 102.54MB</span><br><span class="line">jvm内存使用率 &#x3D; 16.64%</span><br><span class="line">java版本 &#x3D; 1.8.0_65</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA非对称加密案例</title>
      <link href="/2022/03/20/RSA%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%A1%88%E4%BE%8B/"/>
      <url>/2022/03/20/RSA%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：777,阅读全文大约需要3分钟</p><blockquote><p>封装了一个小工具</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><p><code>jdk1.8</code></p></li><li><p><code>maven</code>依赖</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;commons-codec&#x2F;commons-codec --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;commons-codec&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-codec&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.10&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li><p>私钥和公钥这两个对象都有加密和解密的动作，于是定义一个接口 <code>CryptographicProcessor</code>。私钥和公钥都继承这个接口，并实现相应加密和解密动作。</p></li><li><p>工具类<code>SecurityUtils</code>有三个功能: 随机生成秘钥对、获取私钥处理类、获取公钥处理类。</p></li><li><p>具体流程就是:</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 使用SecurityUtils的静态方法生成一个Map，里面是私钥加公钥。</span><br><span class="line">2. 使用SecurityUtils的静态方法传入私钥获取私钥处理器，这个处理器可以使用私钥加密和解密。</span><br><span class="line">3. 把密文和公钥发给其他人，再使用公钥处理器解密，使用公钥加密返回信息，再用私钥解密返回的信息。</span><br></pre></td></tr></table></figure><ol start="4"><li>无论是秘钥还是明文密文，都是<code>byte[]</code>类型。为了方便<code>base64</code>转换成了<code>String</code>，传入值是<code>String</code>的都是会自动<code>Base64</code>的</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><h2 id="操作接口"><a href="#操作接口" class="headerlink" title="操作接口"></a>操作接口</h2><p>公钥和秘钥处理器都有<strong>加密</strong>和<strong>解密</strong>的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CryptographicProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     *            原信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">encode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     *            密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 原信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">decode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>##工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.NoSuchPaddingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成的秘钥Map中公钥的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String RSA_KEY_PUBLIC = <span class="string">"public"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机生成的秘钥Map中私钥的key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String RSA_KEY_PRIVATE = <span class="string">"private"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SecurityUtils</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥处理器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rSAPublicKey</span></span><br><span class="line"><span class="comment">     *            base64公钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CryptographicProcessor <span class="title">getRSAPublicKeyProcessor</span><span class="params">(String rSAPublicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RSAPublicKeyProcessor(rSAPublicKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取公钥处理器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rSAPublicKeyBytes</span></span><br><span class="line"><span class="comment">     *            公钥byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CryptographicProcessor <span class="title">getRSAPublicKeyProcessor</span><span class="params">(<span class="keyword">byte</span>[] rSAPublicKeyBytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RSAPublicKeyProcessor(rSAPublicKeyBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取私钥处理器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rSAPrivateKey</span></span><br><span class="line"><span class="comment">     *            base64私钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CryptographicProcessor <span class="title">getRSAPrivateKeyProcessor</span><span class="params">(String rSAPrivateKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RSAPrivateKeyProcessor(rSAPrivateKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取私钥处理器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rSAPrivateKeyBytes</span></span><br><span class="line"><span class="comment">     *            私钥byte数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 处理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CryptographicProcessor <span class="title">getRSAPrivateKeyProcessor</span><span class="params">(<span class="keyword">byte</span>[] rSAPrivateKeyBytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RSAPrivateKeyProcessor(rSAPrivateKeyBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成生成base64秘钥秘钥 明文最大长度不能大于秘钥长度 默认大小512byte</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">generateRSAKeyPair</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> generateRSAKeyPair(<span class="number">512</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成base64秘钥 明文最大长度不能大于秘钥长度</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keySize</span></span><br><span class="line"><span class="comment">     *            秘钥大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, String&gt; <span class="title">generateRSAKeyPair</span><span class="params">(<span class="keyword">int</span> keySize)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; keyPairMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        KeyPair keyPair = getKeyPair(keySize);</span><br><span class="line">        keyPairMap.put(SecurityUtils.RSA_KEY_PUBLIC, Base64.encodeBase64String(keyPair.getPrivate().getEncoded()));</span><br><span class="line">        keyPairMap.put(SecurityUtils.RSA_KEY_PRIVATE, Base64.encodeBase64String(keyPair.getPrivate().getEncoded()));</span><br><span class="line">        <span class="keyword">return</span> keyPairMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成秘钥 明文最大长度不能大于秘钥长度</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keySize</span></span><br><span class="line"><span class="comment">     *            秘钥大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, <span class="keyword">byte</span>[]&gt; generateRSAKeyBytePair(<span class="keyword">int</span> keySize) <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        Map&lt;String, <span class="keyword">byte</span>[]&gt; keyPairMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        KeyPair keyPair = getKeyPair(keySize);</span><br><span class="line">        keyPairMap.put(SecurityUtils.RSA_KEY_PUBLIC, keyPair.getPublic().getEncoded());</span><br><span class="line">        keyPairMap.put(SecurityUtils.RSA_KEY_PRIVATE, keyPair.getPrivate().getEncoded());</span><br><span class="line">        <span class="keyword">return</span> keyPairMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> KeyPair <span class="title">getKeyPair</span><span class="params">(<span class="keyword">int</span> keySize)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        keyPairGenerator.initialize(keySize);</span><br><span class="line">        <span class="keyword">return</span> keyPairGenerator.generateKeyPair();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// -------------class----------------</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAPublicKeyProcessor</span> <span class="keyword">implements</span> <span class="title">CryptographicProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> X509EncodedKeySpec x509EncodedKeySpec;</span><br><span class="line">        <span class="keyword">private</span> KeyFactory keyFactory;</span><br><span class="line">        <span class="keyword">private</span> PublicKey publicKey;</span><br><span class="line">        <span class="keyword">private</span> Cipher cipher;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">RSAPublicKeyProcessor</span><span class="params">(String rSAPublicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(Base64.decodeBase64(rSAPublicKey));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">RSAPublicKeyProcessor</span><span class="params">(<span class="keyword">byte</span>[] rSAPublicKeyBytes)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x509EncodedKeySpec = <span class="keyword">new</span> X509EncodedKeySpec(rSAPublicKeyBytes);</span><br><span class="line">            <span class="keyword">this</span>.keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="keyword">this</span>.cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="keyword">this</span>.publicKey = keyFactory.generatePublic(x509EncodedKeySpec);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = encode(str.getBytes());</span><br><span class="line">            <span class="keyword">return</span> Base64.encodeBase64String(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">            <span class="keyword">return</span> cipher.doFinal(strs);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = decode(Base64.decodeBase64(str));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, publicKey);</span><br><span class="line">            <span class="keyword">return</span> cipher.doFinal(strs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RSAPrivateKeyProcessor</span> <span class="keyword">implements</span> <span class="title">CryptographicProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> PKCS8EncodedKeySpec pkcs8EncodedKeySpec;</span><br><span class="line">        <span class="keyword">private</span> KeyFactory keyFactory;</span><br><span class="line">        <span class="keyword">private</span> PrivateKey privateKey;</span><br><span class="line">        <span class="keyword">private</span> Cipher cipher;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">RSAPrivateKeyProcessor</span><span class="params">(String rSAPrivate)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>(Base64.decodeBase64(rSAPrivate));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">RSAPrivateKeyProcessor</span><span class="params">(<span class="keyword">byte</span>[] rSAPrivateBytes)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeySpecException </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.pkcs8EncodedKeySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(rSAPrivateBytes);</span><br><span class="line">            <span class="keyword">this</span>.keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="keyword">this</span>.privateKey = keyFactory.generatePrivate(pkcs8EncodedKeySpec);</span><br><span class="line">            <span class="keyword">this</span>.cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] encode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, privateKey);</span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(strs);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = encode(str.getBytes());</span><br><span class="line">            <span class="keyword">return</span> Base64.encodeBase64String(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] decode(<span class="keyword">byte</span>[] strs) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">            <span class="keyword">byte</span>[] result = cipher.doFinal(strs);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(String str)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = decode(Base64.decodeBase64(str));</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">security</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String mess = <span class="string">"哈哈哈"</span>;</span><br><span class="line">            <span class="comment">//秘钥对</span></span><br><span class="line">            Map&lt;String, <span class="keyword">byte</span>[]&gt; keyPair = SecurityUtils.generateRSAKeyBytePair(<span class="number">512</span>);</span><br><span class="line">            <span class="comment">//私钥处理器</span></span><br><span class="line">            CryptographicProcessor privateProcessor =</span><br><span class="line">               SecurityUtils.getRSAPrivateKeyProcessor(keyPair.get(SecurityUtils.RSA_KEY_PRIVATE));</span><br><span class="line">            <span class="comment">//加密的到密文</span></span><br><span class="line">            String cipherText = privateProcessor.encode(mess);</span><br><span class="line">            <span class="comment">//假装发给别人</span></span><br><span class="line">            String res = sendMess(cipherText, keyPair.get(SecurityUtils.RSA_KEY_PUBLIC));</span><br><span class="line">            <span class="comment">//私钥解密公钥加密的密文</span></span><br><span class="line">            System.out.println(<span class="string">"客户端收到回复:"</span>+privateProcessor.decode(res));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 创建失败</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sendMess</span><span class="params">(String mess, <span class="keyword">byte</span>[] publicKey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//根据拿到的公钥生成公钥处理器，网络传输可以生成string类型的秘钥。</span></span><br><span class="line">        CryptographicProcessor publicProce = SecurityUtils.getRSAPublicKeyProcessor(publicKey);</span><br><span class="line">        <span class="comment">//解密</span></span><br><span class="line">        System.out.println(<span class="string">"服务端收到:"</span> + publicProce.decode(mess));</span><br><span class="line">        <span class="comment">//加密一个返回值</span></span><br><span class="line">        <span class="keyword">return</span> publicProce.encode(<span class="string">"200"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">服务端收到:哈哈哈</span><br><span class="line">客户端收到回复:200</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot-RestTemplate</title>
      <link href="/2022/03/20/SpringBoot-RestTemplate/"/>
      <url>/2022/03/20/SpringBoot-RestTemplate/</url>
      
        <content type="html"><![CDATA[<p>文章字数：448,阅读全文大约需要1分钟</p><blockquote><p><code>RestTemplate</code>是spring提供的访问Rest服务的客户端，默认使用jdk的http连接工具（HttpURLConnection）。可以通过<code>setRequestFactory</code>属性切换到其它http源， <code>Apache</code> <code>HttpComponents</code> 、<code>Netty</code> 、<code>OkHttp</code>等。</p></blockquote><h1 id="一、入口"><a href="#一、入口" class="headerlink" title="一、入口"></a>一、入口</h1><p>入口方法主要根据HTP的六个方法制定的：</p><table><thead><tr><th align="center">HTTP method</th><th align="center">RestTempalte methods</th></tr></thead><tbody><tr><td align="center">GET</td><td align="center">getForObject</td></tr><tr><td align="center">-</td><td align="center">getForENtity</td></tr><tr><td align="center">POST</td><td align="center">poetForLocation</td></tr><tr><td align="center">-</td><td align="center">postForObject</td></tr><tr><td align="center">DELETE</td><td align="center">delete</td></tr><tr><td align="center">PUT</td><td align="center">put</td></tr><tr><td align="center">HEAD</td><td align="center">headForHeaders</td></tr><tr><td align="center">OPTIONS</td><td align="center">optionsForAllow</td></tr><tr><td align="center">通用方法</td><td align="center">exchange</td></tr><tr><td align="center">-</td><td align="center">execute</td></tr></tbody></table><p>注：默认使用<code>HttpMessageConverter</code>实例完成<code>POJP</code>和<code>HTTP</code>的转换，也可以通过<code>setMessageConverters</code>注册其它的转换器。（<code>@ResponseBody</code>使用的也是<code>HttpMessageConverter</code>）</p><h1 id="二、GET"><a href="#二、GET" class="headerlink" title="二、GET"></a>二、GET</h1><blockquote><p><code>getForObject()</code>和<code>getForEntity()</code> 解析类写String.class获取的就是字符串形式的数据</p></blockquote><h2 id="getForObject-方法"><a href="#getForObject-方法" class="headerlink" title="getForObject()方法"></a>getForObject()方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Object... uriVariables)&#123;&#125;</span><br><span class="line">public &lt;T&gt; T getForObject(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span><br><span class="line">public &lt;T&gt; T getForObject(URI url, Class&lt;T&gt; responseType)</span><br></pre></td></tr></table></figure><p>注：getForObject()比getForEntity()多了<code>HTTP</code>转换成<code>POJO</code>，但是省略了<code>response</code>信息。</p><h2 id="getForObject-方法实例"><a href="#getForObject-方法实例" class="headerlink" title="getForObject()方法实例"></a>getForObject()方法实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public void restTemplateGetTest()&#123;</span><br><span class="line">  RestTemplate restTemplate &#x3D; new RestTemplate();</span><br><span class="line">&#x2F;&#x2F;无参</span><br><span class="line">  MessObj messObj1 &#x3D; restTemplate.getForObject(&quot;http:&#x2F;&#x2F;xxx.com&#x2F;test&quot;,MessObj .class);</span><br><span class="line">&#x2F;&#x2F;占位符传参</span><br><span class="line">  MessObj messObj2 &#x3D; restTemplate.getForObject(&quot;http:&#x2F;&#x2F;xxx.com&#x2F;test&#x2F;&#123;1&#125;&#x2F;&#123;2&#125;&quot;,MessObj .class,&quot;参数1&quot;,&quot;参数2&quot;);</span><br><span class="line">&#x2F;&#x2F;map传参</span><br><span class="line">  Map&lt;String,String&gt; map &#x3D; new HashMap();</span><br><span class="line">  map.put(&quot;id&quot;,&quot;1&quot;);</span><br><span class="line">  map.put(&quot;name&quot;,&quot;zs&quot;)</span><br><span class="line">  MessObj messObj1 &#x3D; restTemplate.getForObject(&quot;http:&#x2F;&#x2F;xxx.com&#x2F;test&quot;,MessObj .class,map);</span><br><span class="line">&#x2F;&#x2F;结果：messObj&#123;status&#x3D;200,data&#x3D;[&#123;a&#x3D;1&#125;...]...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getForEntity-方法"><a href="#getForEntity-方法" class="headerlink" title="getForEntity()方法"></a>getForEntity()方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Object... uriVariables)&#123;&#125;</span><br><span class="line">public &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)&#123;&#125;</span><br><span class="line">public &lt;T&gt; ResponseEntity&lt;T&gt; getForEntity(URI url, Class&lt;T&gt; responseType)&#123;&#125;</span><br></pre></td></tr></table></figure><p>注：返回的是<code>ResponseEntity</code>对象，需要<code>json</code>工具解析成<code>pojo</code>。<code>ResponseEntity</code>有<code>HttpStatus getStatusCode()</code>、<code>BodyBuilder</code>、<code>created(URI location)</code>等方法，方便查看更多信息。</p><p>ResponseEntity.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public HttpStatus getStatusCode()&#123;&#125;</span><br><span class="line">public int getStatusCodeValue()&#123;&#125;</span><br><span class="line">public boolean equals(@Nullable Object other) &#123;&#125;</span><br><span class="line">public String toString() &#123;&#125;</span><br><span class="line">public static BodyBuilder status(HttpStatus status) &#123;&#125;</span><br><span class="line">public static BodyBuilder ok() &#123;&#125;</span><br><span class="line">public static &lt;T&gt; ResponseEntity&lt;T&gt; ok(T body) &#123;&#125;</span><br><span class="line">public static BodyBuilder created(URI location) &#123;&#125;</span><br></pre></td></tr></table></figure><p>HttpStatus.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public enum HttpStatus &#123;</span><br><span class="line">public boolean is1xxInformational() &#123;&#125;</span><br><span class="line">public boolean is2xxSuccessful() &#123;&#125;</span><br><span class="line">public boolean is3xxRedirection() &#123;&#125;</span><br><span class="line">public boolean is4xxClientError() &#123;&#125;</span><br><span class="line">public boolean is5xxServerError() &#123;&#125;</span><br><span class="line">public boolean isError() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>BodyBuilder.java</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public interface BodyBuilder extends HeadersBuilder&lt;BodyBuilder&gt; &#123;</span><br><span class="line">    &#x2F;&#x2F;设置正文的长度，以字节为单位，由Content-Length标头</span><br><span class="line">      BodyBuilder contentLength(long contentLength);</span><br><span class="line">    &#x2F;&#x2F;设置body的MediaType 类型</span><br><span class="line">      BodyBuilder contentType(MediaType contentType);</span><br><span class="line">    &#x2F;&#x2F;设置响应实体(ResponseEntity)的主体(内容)并返回它。</span><br><span class="line">      &lt;T&gt; ResponseEntity&lt;T&gt; body(@Nullable T body);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><p>getForEntity()方法实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void gettTest()&#123;</span><br><span class="line">    RestTemplate resTemplate &#x3D; new RestTemplate();</span><br><span class="line">    ResponseEntity&lt;MessObj&gt; entity &#x3D; restTemplate.getForEntity(&quot;http:&#x2F;&#x2F;xx.com&#x2F;test&quot;,MessObj.class);</span><br><span class="line">    HttpStatus hsc &#x3D; entity.getStatusCode();</span><br><span class="line">    MessObj msObj &#x3D; entity.getBody();</span><br><span class="line">    ResponseEntity.BodyBuilder status &#x3D; ResponseEntity.status(hsc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、POST"><a href="#三、POST" class="headerlink" title="三、POST"></a>三、POST</h1><blockquote><p><code>postForObject()</code>和<code>postForEntity()</code></p></blockquote><h2 id="postForObject方法"><a href="#postForObject方法" class="headerlink" title="postForObject方法"></a>postForObject方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Object... uriVariables)</span><br><span class="line">            throws RestClientException &#123;&#125;</span><br><span class="line">public &lt;T&gt; T postForObject(String url, @Nullable Object request, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span><br><span class="line">            throws RestClientException &#123;&#125;</span><br><span class="line">public &lt;T&gt; T postForObject(URI url, @Nullable Object request, Class&lt;T&gt; responseType) throws RestClientException &#123;&#125;</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    <span class="comment">//第一个参数url</span></span><br><span class="line">    String url = <span class="string">"http://xxx.com/test"</span>;</span><br><span class="line">    <span class="comment">//第二个参数request(val,header)</span></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    headers.setContentType(MediaType);</span><br><span class="line">    <span class="comment">//一个key对应多个val的map</span></span><br><span class="line">    MultiValueMap&lt;String, String&gt; map= <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    map.add(<span class="string">"name"</span>, <span class="string">"zhangsan"</span>);    </span><br><span class="line">    <span class="comment">//request</span></span><br><span class="line">    HttpEntity&lt;MultiValueMap&lt;String,String&gt;&gt; request = <span class="keyword">new</span> HttpEntity&lt;&gt;(map,headers);</span><br><span class="line">    <span class="comment">//执行 url,http主</span></span><br><span class="line">    ResponseEntity&lt;String&gt; response = restTemplate.postForEntity(url,request,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//返回值&#123;"status":500,"msg":"xxx","data":null&#125;</span></span><br><span class="line">    System.out.println(response.getBody());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>头类型<br>MediaType</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">json : application&#x2F;json</span><br><span class="line">xml : application&#x2F;xml</span><br><span class="line">png : image&#x2F;png</span><br><span class="line">jpg : image&#x2F;jpeg</span><br><span class="line">gif : imge&#x2F;gif</span><br></pre></td></tr></table></figure><h2 id="excute-和exchange"><a href="#excute-和exchange" class="headerlink" title="excute()和exchange()"></a>excute()和exchange()</h2><p><code>excute()</code>返回映射对象<code>&lt;T&gt;</code>,<code>exchange()</code>返回<code>ResponseEntity&lt;T&gt;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">restTemplate.exchange(</span><br><span class="line">         String url, <span class="comment">//地址</span></span><br><span class="line">         HttpMethod method,<span class="comment">//请求类型(HttpMethod.POST/PUT/DELETE/GET)</span></span><br><span class="line">         HttpEntity requestEntity, <span class="comment">//请求主体：请求体、头、内容</span></span><br><span class="line">         Class responseType, <span class="comment">//返回实体类</span></span><br><span class="line">         Object uriVariables[]<span class="comment">//url参数</span></span><br><span class="line">     )</span><br></pre></td></tr></table></figure><h1 id="设置超时"><a href="#设置超时" class="headerlink" title="设置超时"></a>设置超时</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SimpleClientHttpRequestFactory clientHttpRequestFactory = <span class="keyword">new</span> SimpleClientHttpRequestFactory();</span><br><span class="line">        clientHttpRequestFactory.setConnectTimeout(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">        clientHttpRequestFactory.setReadTimeout(<span class="number">5</span> * <span class="number">1000</span>);</span><br><span class="line">        RestTemplate rest = <span class="keyword">new</span> RestTemplate(clientHttpRequestFactory);</span><br></pre></td></tr></table></figure><h1 id="封装工具"><a href="#封装工具" class="headerlink" title="封装工具"></a>封装工具</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取request</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> HttpEntity&lt;MultiValueMap&lt;Object, Object&gt;&gt; getRequestByParam(Object[]... params) &#123;</span><br><span class="line">    <span class="keyword">final</span> HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">    <span class="keyword">final</span> LinkedMultiValueMap&lt;Object, Object&gt; map = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (Object[] param : params) &#123;</span><br><span class="line">            map.add(param[<span class="number">0</span>], param[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    headers.setContentType(MediaType.MULTIPART_FORM_DATA);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HttpEntity&lt;&gt;(map, headers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过url发送post请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> param</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">postFromUrl</span><span class="params">(String url, Object[]... param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> HttpEntity&lt;MultiValueMap&lt;Object, Object&gt;&gt; request = getRequestByParam(param);</span><br><span class="line">    <span class="keyword">final</span> ResponseEntity&lt;String&gt; entity = restTemplate.postForEntity(url, request, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"conn error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过url发送get请求</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getFromUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ResponseEntity&lt;String&gt; entity = restTemplate.getForEntity(url, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">        <span class="keyword">return</span> entity.getBody();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"conn error"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">File image = <span class="keyword">new</span> File(<span class="string">"f://xx.jpg"</span>);</span><br><span class="line">FileSystemResource file = <span class="keyword">new</span> FileSystemResource(image);</span><br><span class="line"><span class="comment">// 上传信息及文件</span></span><br><span class="line">String res = postFromUrl(<span class="string">"http://xx.xx.xx"</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;<span class="string">"name"</span>, <span class="string">"xx.jpg"</span>&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"image"</span>, file&#125;);</span><br><span class="line">                </span><br><span class="line"><span class="comment">// 使用byte[]上传</span></span><br><span class="line"><span class="keyword">final</span> ByteArrayResource file = <span class="keyword">new</span> ByteArrayResource(image) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getFilename</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"xx.jpg"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">String res = postFromUrl(<span class="string">"http://xx.xx.xx"</span>,</span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;<span class="string">"name"</span>, <span class="string">"xx.jpg"</span>&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"image"</span>, file&#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> http </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot内置的Servlet容器</title>
      <link href="/2022/03/20/SpringBoot%E5%86%85%E7%BD%AE%E7%9A%84Servlet%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/03/20/SpringBoot%E5%86%85%E7%BD%AE%E7%9A%84Servlet%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：784,阅读全文大约需要3分钟</p><blockquote><p><code>SpringBoot</code>内置了<code>Servlet</code>容器，所以可以直接运行。而传统的<code>javaWeb</code>程序需要嵌入到<code>Tomcat</code>之类的<code>Servlet</code>容器中才能运行。方便之余却带了问题，我们不能像传统的<code>javaWeb</code>程序那样操作<code>web.xml</code>。所以<code>Spring</code>提供了自定义容器内容的途径。</p></blockquote><h1 id="自动配置"><a href="#自动配置" class="headerlink" title="自动配置"></a>自动配置</h1><h2 id="自动配置类EmbeddedServletContainerAutoConfiguration"><a href="#自动配置类EmbeddedServletContainerAutoConfiguration" class="headerlink" title="自动配置类EmbeddedServletContainerAutoConfiguration"></a>自动配置类EmbeddedServletContainerAutoConfiguration</h2><p>首先看<code>springBoot</code>如何自动配置的。<br>在<code>spring-boot-autoconfigure-xxx.jar</code>的<code>web</code>模块中可以找到</p><p><code>EmbeddedServletContainerAutoConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AutoConfigureOrder</span>(Ordered.HIGHEST_PRECEDENCE)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span></span><br><span class="line"><span class="meta">@Import</span>(BeanPostProcessorsRegistrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">EmbeddedServletContainerAutoConfiguration</span> </span>&#123;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这个类中主要作用是配置三个容器工厂的<code>bean</code><br>都是<code>EmbeddedServletContainerFactory</code>接口的</p><ol><li><code>TomcatEmbeddedServletContainerFactory</code></li><li><code>JettyEmbeddedServletContainerFactory</code></li><li><code>UndertowEmbeddedServletContainerFactory</code></li></ol><p>通过注解设置有<code>servlet</code>依赖和类对应的<code>servlet</code>容器依赖时，没有其它<code>EmbeddedServletContainerFactory</code>接口时创建。(重点1)</p><h2 id="容器工厂接口EmbeddedServletContainerFactory"><a href="#容器工厂接口EmbeddedServletContainerFactory" class="headerlink" title="容器工厂接口EmbeddedServletContainerFactory"></a>容器工厂接口EmbeddedServletContainerFactory</h2><p><code>EmbeddedServletContainerFactory</code>接口内部只有获取嵌入式<code>servlet</code>容器的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmbeddedServletContainerFactory</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function">EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ServletContextInitializer... initializers)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容器接口EmbeddedServletContainer"><a href="#容器接口EmbeddedServletContainer" class="headerlink" title="容器接口EmbeddedServletContainer"></a>容器接口EmbeddedServletContainer</h2><p><code>EmbeddedServletContainerFactory</code>获取的容器就是<code>EmbeddedServletContainer</code>返回的类型。</p><p>也对应三个实现类</p><ol><li><code>TomcatEmbeddedServletContainer</code></li><li><code>JettyEmbeddedServletContainer</code></li><li><code>UndertowEmbeddedServletContainer</code></li></ol><p>以<code>Tomcat</code>容器工厂<code>TomcatEmbeddedServletContainerFactory</code>类为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EmbeddedServletContainer <span class="title">getEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        ServletContextInitializer... initializers)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个Tomcat</span></span><br><span class="line">    Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//配置Tomcat的基本环节</span></span><br><span class="line">    File baseDir = (<span class="keyword">this</span>.baseDirectory != <span class="keyword">null</span>  <span class="keyword">this</span>.baseDirectory</span><br><span class="line">            : createTempDir(<span class="string">"tomcat"</span>));</span><br><span class="line">    tomcat.setBaseDir(baseDir.getAbsolutePath());</span><br><span class="line">    <span class="comment">// 绑定端口的连接</span></span><br><span class="line">    Connector connector = <span class="keyword">new</span> Connector(<span class="keyword">this</span>.protocol);</span><br><span class="line">    tomcat.getService().addConnector(connector);</span><br><span class="line">    customizeConnector(connector);</span><br><span class="line">    tomcat.setConnector(connector);</span><br><span class="line">    <span class="comment">// 是否设置Tomcat自动部署</span></span><br><span class="line">    tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line">    configureEngine(tomcat.getEngine());</span><br><span class="line">    <span class="keyword">for</span> (Connector additionalConnector : <span class="keyword">this</span>.additionalTomcatConnectors) &#123;</span><br><span class="line">        tomcat.getService().addConnector(additionalConnector);</span><br><span class="line">    &#125;</span><br><span class="line">    prepareContext(tomcat.getHost(), initializers);</span><br><span class="line">     </span><br><span class="line">    <span class="comment">//包装tomcat对象，返回一个嵌入式Tomcat容器，内部会启动该tomcat容器</span></span><br><span class="line">    <span class="keyword">return</span> getTomcatEmbeddedServletContainer(tomcat);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后调用的方法，主要就是创建<code>Tomcat</code>容器，启动容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> TomcatEmbeddedServletContainer <span class="title">getTomcatEmbeddedServletContainer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    Tomcat tomcat)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> TomcatEmbeddedServletContainer(tomcat, getPort() &gt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义容器参数"><a href="#自定义容器参数" class="headerlink" title="自定义容器参数"></a>自定义容器参数</h1><h2 id="EmbeddedServletContainerCustomizer定制器"><a href="#EmbeddedServletContainerCustomizer定制器" class="headerlink" title="EmbeddedServletContainerCustomizer定制器"></a>EmbeddedServletContainerCustomizer定制器</h2><p>自定义属性可以通过<code>ServerProperties</code>和<code>EmbeddedServletContainerCustomizer</code>定制器实现，<code>ServerProperties</code>是<code>EmbeddedServletContainerCustomizer</code>的子类，所以其实都是<code>EmbeddedServletContainerCustomizer</code>在起作用。</p><h2 id="BeanPostProcessorsRegistrar给容器导入组件的类"><a href="#BeanPostProcessorsRegistrar给容器导入组件的类" class="headerlink" title="BeanPostProcessorsRegistrar给容器导入组件的类"></a>BeanPostProcessorsRegistrar给容器导入组件的类</h2><p>在最顶级的自动配置类<code>EmbeddedServletContainerAutoConfiguration</code>上有个注解<code>@Import(BeanPostProcessorsRegistrar.class)</code><br>导入了<code>BeanPostProcessorsRegistrar</code>这个类成<code>Bean</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanPostProcessorsRegistrar</span></span></span><br><span class="line"><span class="class">            <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> ConfigurableListableBeanFactory beanFactory;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (beanFactory <span class="keyword">instanceof</span> ConfigurableListableBeanFactory) &#123;</span><br><span class="line">            <span class="keyword">this</span>.beanFactory = (ConfigurableListableBeanFactory) beanFactory;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 重点方法，导入了配置器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.beanFactory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//注册了一个EmbeddedServletContainerCustomizerBeanPostProcessor后置处理器的Bean</span></span><br><span class="line">        registerSyntheticBeanIfMissing(registry,</span><br><span class="line">                                       <span class="string">"embeddedServletContainerCustomizerBeanPostProcessor"</span>,</span><br><span class="line">                                       EmbeddedServletContainerCustomizerBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        registerSyntheticBeanIfMissing(registry,</span><br><span class="line">                                       <span class="string">"errorPageRegistrarBeanPostProcessor"</span>,</span><br><span class="line">                                       ErrorPageRegistrarBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerSyntheticBeanIfMissing</span><span class="params">(BeanDefinitionRegistry registry,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                String name, Class beanClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(</span><br><span class="line">            <span class="keyword">this</span>.beanFactory.getBeanNamesForType(beanClass, <span class="keyword">true</span>, <span class="keyword">false</span>))) &#123;</span><br><span class="line">            RootBeanDefinition beanDefinition = <span class="keyword">new</span> RootBeanDefinition(beanClass);</span><br><span class="line">            beanDefinition.setSynthetic(<span class="keyword">true</span>);</span><br><span class="line">            registry.registerBeanDefinition(name, beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>后置处理器：在<code>bean</code>初始化前(创建完成，还未属性赋值)，会执行初始化工作。</p></li><li><p><code>registerBeanDefinitions</code>这个方法导入了<code>EmbeddedServletContainerCustomizerBeanPostProcessor</code>的<code>Bean</code></p></li><li><p>这个<code>Bean</code>会从<code>ICO</code>容器中拿到所有<code>EmbeddedServletContainerCustomizer</code>类，也就是上面说的定制器。可以引入这个定制器来操作容器参数内容</p></li></ol><h1 id="通过容器工厂自定义参数"><a href="#通过容器工厂自定义参数" class="headerlink" title="通过容器工厂自定义参数"></a>通过容器工厂自定义参数</h1><h2 id="EmbeddedServletContainerFactory容器工厂"><a href="#EmbeddedServletContainerFactory容器工厂" class="headerlink" title="EmbeddedServletContainerFactory容器工厂"></a>EmbeddedServletContainerFactory容器工厂</h2><p>也就是上面的重点1，<code>spring</code>会根据依赖和有没有其他的工厂来判断是否要注入。我们可以自定义工厂，并加入<code>Bean</code>。</p><p>例：</p><ol><li>禁用post和get之外的方法<br>配置类中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        TomcatEmbeddedServletContainerFactory tomcat = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory() &#123;<span class="comment">// 1  </span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;  </span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();  </span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);  </span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();  </span><br><span class="line">                <span class="comment">// 对于所有的请求</span></span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);  </span><br><span class="line">                <span class="comment">// 都验证一下http方法（servlet自带的权限验证，因为没有定义用户，所有直接拦截）</span></span><br><span class="line">                collection.addMethod(<span class="string">"HEAD"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"PUT"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"DELETE"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"OPTIONS"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"TRACE"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"COPY"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"SEARCH"</span>);  </span><br><span class="line">                collection.addMethod(<span class="string">"PROPFIND"</span>);  </span><br><span class="line">                securityConstraint.addCollection(collection);  </span><br><span class="line">                context.addConstraint(securityConstraint);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        <span class="comment">//如果需要禁用TRACE请求，需添加以下代码：</span></span><br><span class="line">        tomcat.addConnectorCustomizers(connector -&gt; &#123;</span><br><span class="line">            connector.setAllowTrace(<span class="keyword">true</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> tomcat;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>同等于传统的<code>web.xml</code>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;security-constraint&gt;  </span><br><span class="line">            &lt;web-resource-collection&gt;  </span><br><span class="line">                &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;  </span><br><span class="line">                &lt;http-method&gt;HEAD&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;PUT&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;DELETE&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;OPTIONS&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;TRACE&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;COPY&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;SEARCH&lt;&#x2F;http-method&gt;  </span><br><span class="line">                &lt;http-method&gt;PROPFIND&lt;&#x2F;http-method&gt;  </span><br><span class="line">            &lt;&#x2F;web-resource-collection&gt;  </span><br><span class="line">            &lt;auth-constraint&gt;  </span><br><span class="line">            &lt;&#x2F;auth-constraint&gt;  </span><br><span class="line">&lt;&#x2F;security-constraint&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>转发端口（http转到https）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建容器工厂</span></span><br><span class="line">        TomcatEmbeddedServletContainerFactory tomcat = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory() &#123;</span><br><span class="line">            <span class="comment">// 重写方法</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 新建一个安全设置</span></span><br><span class="line">                SecurityConstraint securityConstraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                securityConstraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                <span class="comment">// 对与所有的请求</span></span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                <span class="comment">// 拦截验证这些方法的权限（即禁用）</span></span><br><span class="line">                collection.addMethod(<span class="string">"HEAD"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"PUT"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"DELETE"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"OPTIONS"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"TRACE"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"COPY"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"SEARCH"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"PROPFIND"</span>);</span><br><span class="line">                collection.addMethod(<span class="string">"BOGUS"</span>);</span><br><span class="line">                securityConstraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(securityConstraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 添加连接（除了默认的https连接，这里又监听了http的）</span></span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connector <span class="title">httpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        connector.setPort(httpPort);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 转发到https端口</span></span><br><span class="line">        connector.setRedirectPort(httpsPort);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker命令大全</title>
      <link href="/2022/03/20/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
      <url>/2022/03/20/docker%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2132,阅读全文大约需要8分钟</p><h1 id="一、容器生命周期管理"><a href="#一、容器生命周期管理" class="headerlink" title="一、容器生命周期管理"></a>一、容器生命周期管理</h1><table><thead><tr><th align="left">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">run</td><td align="left"><a href="#1.1">启动新容器</a></td></tr><tr><td align="left">start</td><td align="left"><a href="#1.2">启动一个或多个被停止的容器</a></td></tr><tr><td align="left">stop</td><td align="left"><a href="#1.3">停止容器，允许容器进行关闭前准备</a></td></tr><tr><td align="left">restart</td><td align="left"><a href="#1.4">重启容器</a></td></tr><tr><td align="left">kill</td><td align="left"><a href="#1.5">直接关闭容器</a></td></tr><tr><td align="left">rm</td><td align="left"><a href="#1.6">删除一个或多个容器</a></td></tr><tr><td align="left">pause</td><td align="left"><a href="#1.7">暂停容器中所有的进程</a></td></tr><tr><td align="left">unpause</td><td align="left"><a href="#1.8">恢复容器中所有的进程</a></td></tr><tr><td align="left">create</td><td align="left"><a href="#1.9">创建新容器，但不启动</a></td></tr><tr><td align="left">exec</td><td align="left"><a href="#1.10">在运行的容器中执行命令</a></td></tr></tbody></table><h2 id="1.1"/>## 1.1 run<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [options] imageTag [cmd] [args]</span><br></pre></td></tr></table></figure><ul><li>参数说明</li></ul><ol><li><code>-a stdin</code>指定标准输出内容类型，可选<code>stdin``stdout``stderr</code></li><li><code>-d</code>后台运行容器，返回容器ID</li><li><code>-i</code>交互式运行容器，通常搭配<code>-t</code></li><li><code>-t</code>为容器重新分配伪输入终端，通常搭配<code>-i</code></li><li><code>-P</code>随机映射端口，容器内端口随机映射到主机端口</li><li><code>-p</code>指定端口映射<code>宿主端口:容器端口</code></li><li><code>--name=&quot;name&quot;</code>指定容器名称</li><li><code>--dns 8.8.8.8</code>指定容器的<code>DNS</code>，默认和宿主机一致</li><li><code>--dns-search test.com</code>指定容器<code>DNS</code>搜索域，默认和宿主机一致</li><li><code>-h &quot;hostname&quot;</code>指定容器hostname</li><li><code>-e username=&quot;name&quot;</code>设置环境变量</li><li><code>--env-file=[]</code>从指定文件中获取环境变量</li><li><code>--cpuset=&quot;0-2&quot;</code>或者<code>--cpuset=&quot;0,1,2&quot;</code>绑定容器到指定的<code>CPU</code>上运行</li><li><code>-m</code>设置容器使用内存最大值</li><li><code>--net=&quot;bridge&quot;</code>指定容器网络连接类型，可选<code>bridge``host``none``container</code></li><li><code>--link=[]</code>添加链接到另一个容器</li><li><code>--expose=[]</code>开发一个端口或者一组端口</li><li><code>--volume``-v</code>绑定一个卷</li></ol><h2 id="1.2"/>## 1.2 start<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h2 id="1.3"/>## 1.3 stop<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h2 id="1.4"/>## 1.4 restart<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h2 id="1.5"/>## 1.5 kill<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker kill [OPTIONS] CONTAINER [CONTAINER...]</span><br><span class="line"></span><br><span class="line"># -s 向容器发送一个信号</span><br><span class="line">docker kill -s KILL mynginx</span><br></pre></td></tr></table></figure><h2 id="1.6"/>## 1.6 rm<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-f</code>通过<code>SIGKILL</code>信号强制删除运行中的容器</li><li><code>-l</code>移除容器间的网络连接，而不是容器本身</li><li><code>-v</code>删除容器关联的卷</li></ol><h2 id="1.7"/>## 1.7 pause<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h2 id="1.8"/>## 1.8 unpause<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h2 id="1.9"/>## 1.9 create<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker create [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><h2 id="1.10"/>## 1.10 exec<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]</span><br></pre></td></tr></table></figure><h1 id="二、容器操作"><a href="#二、容器操作" class="headerlink" title="二、容器操作"></a>二、容器操作</h1><table><thead><tr><th align="left">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">ps</td><td align="left"><a href="#2.1">列出所有容器</a></td></tr><tr><td align="left">inspect</td><td align="left"><a href="#2.2">获取容器/镜像的元数据</a></td></tr><tr><td align="left">top</td><td align="left"><a href="#2.3">查看容器中运行的进程信息，支持ps命令参数</a></td></tr><tr><td align="left">attach</td><td align="left"><a href="#2.4">连接到正在运行中的容器</a></td></tr><tr><td align="left">events</td><td align="left"><a href="#2.5">从服务器获取实时事件</a></td></tr><tr><td align="left">logs</td><td align="left"><a href="#2.6">获取容器的日志</a></td></tr><tr><td align="left">wait</td><td align="left"><a href="#2.7">阻塞运行，直到容器停止。然后打印容器退出代码</a></td></tr><tr><td align="left">export</td><td align="left"><a href="#2.8">将文件系统当做tar归档文件，导出到指定输出</a></td></tr><tr><td align="left">port</td><td align="left"><a href="#2.9">列出容器端口映射</a></td></tr></tbody></table><h2 id="2.1"/>## 2.1 ps<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-a</code>显示所有的容器，包括未运行的</li><li><code>-f</code>根据条件过滤</li><li><code>--format</code>指定返回内容的模板</li><li><code>-l</code>显示最近创建的容器</li><li><code>-n</code>列出最近创建的n个容器</li><li><code>--no-trunc</code>不阶段输出</li><li><code>-q</code>静默模式，只显示容器编号</li><li><code>-s</code>显示总的文件大小</li></ol><h2 id="2.2"/>## 2.2 inspect<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect [OPTIONS] NAME|ID [NAME|ID...]</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-f</code>指定返回值的模板文件</li><li><code>-s</code>显示总的文件大小</li><li><code>--type</code>为指定类型返回<code>JSON</code></li></ol><h2 id="2.3"/>## 2.3 top<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top [OPTIONS] CONTAINER [ps OPTIONS]</span><br></pre></td></tr></table></figure><ul><li><code>相当于在容器内部执行top命令</code></li></ul><h2 id="2.4"/>## 2.4 attach<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker attach [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><ul><li><code>--sig-proxy=false</code>参数可以使<code>ctrl-d</code>和<code>ctrl-c</code>不会退出容器，仅退出连接</li></ul><h2 id="2.5"/>## 2.5 events<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker events [OPTIONS]</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-f</code>根据条件过滤</li><li><code>--since</code>从指定的时间戳后显示所有事件</li><li><code>--until</code>流水时间显示到指定时间为止</li></ol><h2 id="2.6"/>## 2.6 logs<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-f</code>跟着日志输出</li><li><code>--since</code>显示某个开始时间的所有日志</li><li><code>-t</code>显示时间戳</li><li><code>--tail</code>仅列出最新<code>N</code>条容器日志</li></ol><h2 id="2.7"/>## 2.7 wait<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker wait [OPTIONS] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><h2 id="2.8"/>## 2.8 export<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker export [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-o</code>将输出内容写到文件</li></ol><h2 id="2.9"/>## 2.9 port<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker port [OPTIONS] CONTAINER [PRIVATE_PORT[&#x2F;PROTO]]</span><br><span class="line"># docker port mymysql</span><br></pre></td></tr></table></figure><h1 id="三、容器rootfs命令"><a href="#三、容器rootfs命令" class="headerlink" title="三、容器rootfs命令"></a>三、容器rootfs命令</h1><table><thead><tr><th align="left">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">commit</td><td align="left"><a href="#3.1">从容器创建一个新的镜像，将容器保存成新镜像</a></td></tr><tr><td align="left">cp</td><td align="left"><a href="#3.2">容器和主机直接数据拷贝</a></td></tr><tr><td align="left">diff</td><td align="left"><a href="#3.3">检查容器里文件结构的更改</a></td></tr></tbody></table><h2 id="3.1"/>## 3.1 commit<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-a</code>镜像作者</li><li><code>-c</code>使用<code>Dockerfile</code>来创建镜像</li><li><code>-m</code>镜像说明</li><li><code>-p</code>提交时将容器暂停</li></ol><h2 id="3.2"/>## 3.2 cp<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker cp [OPTIONS] 容器:地址 主机地址</span><br><span class="line">docker cp [OPTIONS] 主机地址 容器:地址</span><br></pre></td></tr></table></figure><ul><li><code>-L</code>保持源目标中的链接</li></ul><h2 id="3.3"/>## 3.3 diff<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker diff [OPTIONS] CONTAINER</span><br></pre></td></tr></table></figure><h1 id="四、镜像仓库"><a href="#四、镜像仓库" class="headerlink" title="四、镜像仓库"></a>四、镜像仓库</h1><table><thead><tr><th align="left">命令</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">login/loginout</td><td align="left"><a href="#4.1">登录/退出镜像仓库</a></td></tr><tr><td align="left">pull</td><td align="left"><a href="#4.2">从镜像仓库中拉取或者更新指定镜像</a></td></tr><tr><td align="left">push</td><td align="left"><a href="#4.3">本地镜像上传到镜像仓库</a></td></tr><tr><td align="left">search</td><td align="left"><a href="#4.4">从Docker Hub查找镜像</a></td></tr></tbody></table><h2 id="4.1"/>## 4.1 login<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># -u 用户名 -p 密码 不指定仓库地址，默认是Docker Hub</span><br><span class="line">docker login [OPTIONS] [SERVER]</span><br><span class="line">docker logout [OPTIONS] [SERVER]</span><br></pre></td></tr></table></figure><h2 id="4.2"/>## 4.2 pull<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull [OPTIONS] NAME[:TAG|@DIGEST]</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-a</code>拉取所有<code>tagged</code>镜像</li><li><code>--disable-content-trust</code>忽略镜像校验，默认开启</li></ol><h2 id="4.3"/>## 4.3 push<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># --disable-content-trust :忽略镜像的校验,默认开启</span><br><span class="line">docker push [OPTIONS] NAME[:TAG]</span><br></pre></td></tr></table></figure><h2 id="4.4"/>## 4.4 search<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search [OPTIONS] TERM</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>--automated</code>只列出<code>automated build</code>类型的镜像</li><li><code>--no-trunc</code>显示完整镜像描述</li><li><code>-f stars=10</code>列出收藏数不小于指定数的镜像</li></ol><h1 id="五、本地仓库"><a href="#五、本地仓库" class="headerlink" title="五、本地仓库"></a>五、本地仓库</h1><table><thead><tr><th align="left">命令</th><th align="left">示例</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">images</td><td align="left"><a href="#5.1">列出本地镜像</a></td><td align="left"></td></tr><tr><td align="left">rmi</td><td align="left"><a href="#5.2">删除本地一个或多个镜像</a></td><td align="left"></td></tr><tr><td align="left">tag</td><td align="left"><a href="#5.3">标记本地镜像，将其归入某一仓库</a></td><td align="left"></td></tr><tr><td align="left">build</td><td align="left"><a href="#5.4">使用Dockerfile创建镜像</a></td><td align="left"></td></tr><tr><td align="left">history</td><td align="left"><a href="#5.5">查看指定镜像的创建历史</a></td><td align="left"></td></tr><tr><td align="left">save</td><td align="left"><a href="#5.6">和export类似，生产的文件是多层，可以回滚到上个版本</a></td><td align="left"></td></tr><tr><td align="left">load</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">import</td><td align="left"></td><td align="left"></td></tr></tbody></table><h2 id="5.1"/>## 5.1 images<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images [OPTIONS] [REPOSITORY[:TAG]]</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-a</code>列出本地所有镜像（含中间影响层，默认没有）</li><li><code>--digests</code>显示镜像摘要</li><li><code>-f</code>显示满足条件的镜像</li><li><code>--format</code>指定返回值的模板文件</li><li><code>--no-trunc</code>显示完整的镜像信息</li><li><code>-q</code>只显示镜像<code>ID</code></li></ol><h2 id="5.2"/>## 5.2 rmi<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi [OPTIONS] IMAGE [IMAGE...]</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-f</code>强制删除</li><li><code>--no-prune</code>不移除该镜像的过程镜像，默认移除</li></ol><h2 id="5.3"/>## 5.3 tag<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag [OPTIONS] IMAGE[:TAG] [REGISTRYHOST&#x2F;][USERNAME&#x2F;]NAME[:TAG]</span><br></pre></td></tr></table></figure><h2 id="5.4"/>## 5.4 build<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker build [OPTIONS] PATH | URL | -</span><br><span class="line"># docker build -t runoob&#x2F;ubuntu:v1 .</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>--build-arg=[]</code>设置镜像创建时的变量</li><li><code>--cpu-shares</code>设置cpu使用权重</li><li><code>--cpu-period</code>限制cpu cfs周期</li><li><code>--cpu-quota</code>限制cpu cfs配额</li><li><code>--cpuset-cpus</code>指定使用的cpu id</li><li><code>--cpuset-mens</code>指定使用的内存id</li><li><code>--disable-content-trust</code>忽略检验，默认开启</li><li><code>-f</code>指定使用的<code>Dockerfile</code>路径，<code>.</code>为本目录下的<code>dockerfile</code></li><li><code>--force-rm</code>设置镜像过程中删除中间容器</li><li><code>--isolation</code>使用容器隔离技术</li><li><code>--label=[]</code>设置镜像使用的元数据</li><li><code>-m</code>设置内存最大值</li><li><code>--memory-swap</code>设置<code>swap</code>最大值为内存+swap,<code>-1</code>表示不限制<code>swap</code></li><li><code>--no-cache</code>创建镜像的过程中不适用缓存</li><li><code>--pull</code>尝试更新镜像的新版本</li><li><code>--quiet,-q</code>安静模式，成功后只输出镜像<code>ID</code></li><li><code>--rm</code>设置镜像成功后删除中间容器</li><li><code>--shm-size</code>设置<code>/dev/shm</code>的大小，默认<code>64m</code></li><li><code>--ulimit</code>设置<code>Ulimit</code>配置</li><li><code>--squash</code>将<code>Dockerfile</code>中所有操作压缩为一层</li><li><code>--tag,-t</code>设置镜像名字及标签，通常<code>name:tag</code>或<code>name</code>，可以在一次构建中为一个镜像设置多个标签</li><li><code>--network</code>默认<code>default</code>在构建期间设置<code>RUN</code>指令的网络模式</li></ol><h2 id="5.5"/>## 5.5 history<ul><li>示例</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker history [OPTIONS] IMAGE</span><br></pre></td></tr></table></figure><ul><li>参数</li></ul><ol><li><code>-H</code>以可读的格式打印镜像大小和日期，默认<code>true</code></li><li><code>--no-trunc</code>显示完整提交记录</li><li><code>-q</code>仅列出提交记录<code>ID</code></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><table><thead><tr><th align="left">命令</th><th align="left">示例</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">info</td><td align="left"><code>docker info [OPTIONS]</code></td><td align="left">查看docker系统、镜像、容器数等信息</td></tr><tr><td align="left">version</td><td align="left"><code>docker version</code></td><td align="left">显示docker版本信息</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8</title>
      <link href="/2022/03/20/java8/"/>
      <url>/2022/03/20/java8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1377,阅读全文大约需要5分钟</p><blockquote><p>2014年3月发布，主要增加了lambda表达式，stream，新Date类</p></blockquote><h1 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h1><ol><li><p>含义：将函数作为参数传入方法，方法内可以在适当的时候执行此函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;Lambda函数对应一个@FunctionalInterface注解的接口，本质是实现此接口的方法。接口只能有一个对外方法。</span><br></pre></td></tr></table></figure></li><li><p>Lambda表达式</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">map.forEach((k,v)-&gt;&#123;</span><br><span class="line">  System.out.println(k);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="3"><li>简写</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.forEach((k,v)-&gt;System.out.println(k));</span><br></pre></td></tr></table></figure><h1 id="StreamAPI"><a href="#StreamAPI" class="headerlink" title="StreamAPI"></a>StreamAPI</h1><blockquote><p>list.stream()将数据转换成流的形式，然后就可以对于流进行链式操作，其中操作分为中间操作和结束操作，结束操作只能有一个。</p></blockquote><ol><li>流有原始流（IntStream…）boxed流(Stream<Interger>)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IntStream.boxed();<span class="comment">//转换</span></span><br><span class="line">Stream.mapToInt()...<span class="comment">//转换</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>原始流没有数据收集的方法（.collect(Collectors.toList())）可以转换成boxed流然后收集</p></li><li><p>除了通过数据生成流，也可以随机生成</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream.range(<span class="number">1</span>, <span class="number">100</span>).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th align="left">中间操作</th><th>结束操作</th></tr></thead><tbody><tr><td>1</td><td align="left">filter</td><td>foreach</td></tr><tr><td>2</td><td align="left">map、mapToInt、mapToDouble、mapToLong</td><td>collect</td></tr><tr><td>3</td><td align="left">flatMap、flatMapToInt、flatMapToLong、flatMapToDouble</td><td>anyMatch</td></tr><tr><td>4</td><td align="left">distinct</td><td>allMatch</td></tr><tr><td>5</td><td align="left">sorted</td><td>noneMatch</td></tr><tr><td>6</td><td align="left">skip</td><td>reduce</td></tr><tr><td>7</td><td align="left">peek</td><td>min</td></tr><tr><td>8</td><td align="left">limit</td><td>max</td></tr><tr><td>9</td><td align="left">of</td><td>count</td></tr><tr><td>10</td><td align="left">iterate</td><td>toArray</td></tr><tr><td>11</td><td align="left">generate</td><td>forEachOrdered</td></tr><tr><td>12</td><td align="left">empty</td><td>findFirst</td></tr><tr><td>13</td><td align="left">concat</td><td>findAny</td></tr></tbody></table><h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><ol><li><code>filter</code>过滤</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回true的方向，否则拦截</span></span><br><span class="line">list.stream().filter(e-&gt;e.equals(<span class="string">"1"</span>)).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>map</code>转换集合<br>同类有：<code>mapToInt</code>、<code>mapToDouble</code>、<code>mapToLong</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int类型的id转换成string，即方法接收值之后可以返回其它类型的值并传递下去</span></span><br><span class="line">idList.stream().map(Student::getName).collect(Collectors.toList())</span><br><span class="line">.forEach(System.out::println);</span><br></pre></td></tr></table></figure><p>mapToInt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IntStream intStream = list.stream().mapToInt(Student::getAge);</span><br></pre></td></tr></table></figure><ol start="3"><li><code>flatMap</code>将流中的元素也转换成流，加入到流中<br>同类有：<code>flatMapToInt</code>、<code>flatMapToLong</code>、<code>flatMapToDouble</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list2.add(<span class="string">"aaa bbb ccc"</span>);</span><br><span class="line">    list2.add(<span class="string">"ddd eee fff"</span>);</span><br><span class="line">    list2.add(<span class="string">"ggg hhh iii"</span>);</span><br><span class="line">    list2 = list2.stream().map(s -&gt; s.split(<span class="string">" "</span>)).flatMap(Arrays::stream).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ol start="4"><li><code>distinct</code>去重</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"1"</span>);</span><br><span class="line">list.add(<span class="string">"2"</span>);</span><br><span class="line">list.stream().distinct().forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="5"><li><code>sorted</code>排序</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//asc排序</span></span><br><span class="line">   list.stream().sorted(Comparator.comparingInt(Student::getAge)).forEach(System.out::println);</span><br><span class="line">   System.out.println(<span class="string">"------------------------------------------------------------------"</span>);</span><br><span class="line">   <span class="comment">//desc排序</span></span><br><span class="line">   list.stream().sorted(Comparator.comparingInt(Student::getAge).reversed()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="6"><li><code>skip</code>跳过前n个</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().skip(<span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="7"><li><code>peek</code>生成副本</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和forEach类似,只是不影响源数据，并且是中间操作</span></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"123"</span>);</span><br><span class="line">        list.add(<span class="string">"456"</span>);</span><br><span class="line">        List l = list.stream().peek(v-&gt; &#123;</span><br><span class="line">            v =  v + <span class="string">"zzz"</span>;</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        l.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="8"><li><code>limit</code>截取前n个</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.stream().limit(<span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="9"><li><p><code>of</code>生成流</p></li><li><p><code>iterate</code>生成流</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"f"</span>, <span class="string">"a"</span>);</span><br><span class="line"><span class="comment">//从0开始，每次加1，生成list长度的流</span></span><br><span class="line">    Stream.iterate(<span class="number">0</span>, i -&gt; i + <span class="number">1</span>).limit(list.size()).forEach(i -&gt; &#123;</span><br><span class="line">        System.out.println(String.valueOf(i) + list.get(i));</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><ol start="11"><li><code>generate</code>生成指定流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;String&gt; stream = Stream.generate(()-&gt;<span class="string">"user"</span>).limit(<span class="number">20</span>);</span><br><span class="line">stream.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="12"><li><p><code>empty</code>生成空流</p></li><li><p><code>concat</code>连接两个流</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"f"</span>, <span class="string">"a"</span>);</span><br><span class="line">        Stream.concat(list.stream(),list.stream()).forEach(System.out::println);</span><br></pre></td></tr></table></figure><h2 id="结束操作"><a href="#结束操作" class="headerlink" title="结束操作"></a>结束操作</h2><ol><li><code>foreach</code> 遍历</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;直接将值作为函数的输入值可以使用 类::方法 的形式</span><br><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></table></figure><ol start="2"><li><code>collect</code>转换成集合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过滤空元素</span></span><br><span class="line">list.filter(StringUtil::isNotBlank).collect(Collectors.toList());</span><br></pre></td></tr></table></figure><ol start="3"><li><code>anyMatch</code>是否有一个满足条件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isHave = list.stream().anyMatch(student -&gt; student.getAge() == <span class="number">16</span>);</span><br></pre></td></tr></table></figure><ol start="4"><li><code>allMatch</code>是否全部满足</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isHave = list.stream().allMatch(student -&gt; student.getAge() == <span class="number">16</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li><code>noneMatch</code>都不符合</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isHave = list.stream().noneMatch(student -&gt; student.getAge() == <span class="number">16</span>);</span><br></pre></td></tr></table></figure><ol start="6"><li><code>reduce</code>每个元素的返回值传入下个元素中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 计算总和，count是每次返回的数，都会传入下一个元素里。</span></span><br><span class="line">        <span class="comment">// v是当前元素的值。0是count的初始值，没有初始化值返回的是Optional</span></span><br><span class="line">        <span class="keyword">int</span> total = list.stream().reduce(<span class="number">0</span>,(count,v)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> count+v;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><ol start="7"><li><p><code>min</code>最小的</p></li><li><p><code>max</code>最大的</p></li><li><p><code>count</code>计数</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> count = list.stream().count();</span><br></pre></td></tr></table></figure><ol start="10"><li><code>toArray</code>转换成数组</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toArray(Integer[] :: <span class="keyword">new</span>)<span class="comment">//转换成Interger[]</span></span><br><span class="line">toArray(person[] ::  <span class="keyword">new</span>)<span class="comment">//对象数组</span></span><br></pre></td></tr></table></figure><ol start="11"><li><code>forEachOrdered</code>遍历，顺序一定和元素顺序一样</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//和forEach一样，遍历流，不过这个执行顺序一定和流顺序一样</span></span><br><span class="line">list.forEachOrdered();</span><br></pre></td></tr></table></figure><ol start="12"><li><code>findFirst</code> 找到第一个元素</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Student&gt; student = list.stream().findFirst();</span><br></pre></td></tr></table></figure><ol start="13"><li><code>findAny</code> 找到其中一个元素 （使用 stream() 时找到的是第一个元素；使用 parallelStream() 并行时找到的是其中一个元素）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optional&lt;Student&gt; student = list.stream().findAny();</span><br></pre></td></tr></table></figure><h1 id="新增了时间类型"><a href="#新增了时间类型" class="headerlink" title="新增了时间类型"></a>新增了时间类型</h1><ol><li>新增的<code>api</code></li></ol><ul><li><p>本地日期和时间<code>LocalDateTime</code> <code>LocalDate</code> <code>LocalTime</code><br>本地时间指的是经过时区偏移量计算过的时间，其本身不带时区内容。<br>比如<code>12:00</code>，无法分辨是那个时区的<code>12:00</code>.</p></li><li><p>带有时区的日期时间<code>ZonedDateTime</code><br>本地时间通过设置时区或偏移可以换算成这个。<br>时间戳设置时区或偏移量也可以转换。</p></li><li><p>时刻（时间戳）<code>Instant</code></p></li><li><p>时区<code>ZoneId</code> <code>ZoneOffset</code></p></li><li><p>时间间隔<code>Duration</code></p></li><li><p>线程安全的格式化工具<code>DateTimeFormatter</code></p></li></ul><ol start="2"><li>新API修正了旧API不合理的常量设计：</li></ol><ul><li>Month的范围用1~12表示1月到12月；</li><li>Week的范围用1~7表示周一到周日。</li></ul><h1 id="时间类应用"><a href="#时间类应用" class="headerlink" title="时间类应用"></a>时间类应用</h1><ol start="0"><li>毫秒数转时间</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 声明可复用的时间格式化工具</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 毫秒转时间戳，时间戳设置时区成为带时区的时间类型（使用默认时区），带时区的时间类型转换成本地时间</span></span><br><span class="line">LocalDate localDate = Instant.ofEpochMilli(millisecond).atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 格式化本地时间</span></span><br><span class="line">formatter.format(localDate)</span><br></pre></td></tr></table></figure><ol><li>获取当天时间(自带格式化)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 现在的本地时间是 : 2019-01-05</span></span><br><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"现在的本地时间是 : "</span> + today);</span><br></pre></td></tr></table></figure><ol start="2"><li>直接获取当前</li></ol><ul><li><p>年月日</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line"><span class="keyword">int</span> year = today.getYear();</span><br><span class="line"><span class="keyword">int</span> month = today.getMonthValue();</span><br><span class="line"><span class="keyword">int</span> day = today.getDayOfMonth();</span><br><span class="line">System.out.printf(<span class="string">"年: %d 月 : %d 日 : %d "</span>, year, month, day);</span><br></pre></td></tr></table></figure></li><li><p>时间</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.now();</span><br><span class="line">System.out.println(<span class="string">"当前时间是 : "</span> + time);</span><br></pre></td></tr></table></figure><ol start="3"><li>构造指定日期</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LocalDate dateOfBirth = LocalDate.of(<span class="number">2018</span>, <span class="number">04</span>, <span class="number">01</span>);</span><br><span class="line">System.out.println(<span class="string">"你的生日是 : "</span> + dateOfBirth);</span><br></pre></td></tr></table></figure><ol start="4"><li>日期比较</li></ol><ul><li><p>比较年月日都是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate date1 = LocalDate.of(<span class="number">2018</span>, <span class="number">04</span>, <span class="number">01</span>);</span><br><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">System.out.println(<span class="string">"date1和今天是同一天吗？："</span>+ date1.equals(today));</span><br></pre></td></tr></table></figure></li><li><p>忽略年</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate dateOfBirth = LocalDate.of(<span class="number">2018</span>, <span class="number">04</span>, <span class="number">01</span>);</span><br><span class="line">MonthDay birthday = MonthDay.of(dateOfBirth.getMonth(), dateOfBirth.getDayOfMonth());</span><br><span class="line">MonthDay currentMonthDay = MonthDay.from(today);</span><br><span class="line">System.out.println(<span class="string">"今天是4月1日吗？"</span> + currentMonthDay.equals(birthday));</span><br></pre></td></tr></table></figure><ul><li>大小比较</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate tomorrow = LocalDate.of(<span class="number">2018</span>, <span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"2018-04-02是未来的时间吗？"</span> + tommorow.isAfter(today));</span><br><span class="line">LocalDate yesterday = today.minus(<span class="number">1</span>, DAYS);</span><br><span class="line">System.out.println(<span class="string">"2018-03-31是过去的时间吗？"</span> + yesterday.isBefore(today));</span><br></pre></td></tr></table></figure><ol start="5"><li>日期增加/减少</li></ol><ul><li>加小时</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalTime time = LocalTime.now();</span><br><span class="line">LocalTime newTime = time.plusHours(<span class="number">2</span>); <span class="comment">// 加2个小时</span></span><br><span class="line">System.out.println(<span class="string">"两个小时后是 : "</span> + newTime);</span><br></pre></td></tr></table></figure><ul><li>加一周</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">LocalDate nextWeek = today.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</span><br><span class="line">System.out.println(<span class="string">"一星期后 : "</span> + nextWeek);</span><br></pre></td></tr></table></figure><ul><li>加一年</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">today.minus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br></pre></td></tr></table></figure><ol start="6"><li>获取时区</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZoneId zId = ZoneId.of(<span class="string">"GMT+8"</span>);</span><br><span class="line">LocalDateTime localtDateAndTime = LocalDateTime.now();</span><br><span class="line">ZonedDateTime bj = ZonedDateTime.of(localtDateAndTime, zId );</span><br></pre></td></tr></table></figure><ol start="7"><li>是否是闰年</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">"今年2019是闰年？"</span> + today.isLeapYear());</span><br></pre></td></tr></table></figure><ol start="8"><li>两个日期直接有多少天和月</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LocalDate day = LocalDate.of(<span class="number">2018</span>, Month.APRIL, <span class="number">1</span>);</span><br><span class="line">LocalDate today = LocalDate.now();</span><br><span class="line">Period period = Period.between(day , today);</span><br><span class="line">System.out.println(<span class="string">"2018年4月1日距离今天过去了多少个月: "</span> + period.getMonths());</span><br></pre></td></tr></table></figure><ol start="9"><li>时区偏移量的日期时间</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LocalDateTime datetime = LocalDateTime.of(<span class="number">2018</span>, Month.JANUARY, <span class="number">14</span>, <span class="number">19</span>, <span class="number">30</span>);</span><br><span class="line">ZoneOffset offset = ZoneOffset.of(<span class="string">"+05:30"</span>);</span><br><span class="line"><span class="comment">// 给机器看的</span></span><br><span class="line">OffsetDateTime date = OffsetDateTime.of(datetime, offset);</span><br><span class="line">System.out.println(<span class="string">"带时区的日期和时间 : "</span> + date);</span><br><span class="line"><span class="comment">// 这个是格式化之后给人看的</span></span><br><span class="line">ZoneDateTime date = ZoneDateTime.of(datetime, offset);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java反射</title>
      <link href="/2022/03/20/java%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/03/20/java%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<p>文章字数：147,阅读全文大约需要1分钟</p><blockquote><p>反射是在软件运行时可以获取类信息的一种java机制</p></blockquote><h1 id="获取类信息的方式"><a href="#获取类信息的方式" class="headerlink" title="获取类信息的方式"></a>获取类信息的方式</h1><p>有两种：</p><ol><li><code>RTTI</code>，编译器在编译时打开和检查.class文件</li><li>反射，运行时打开和检查.class文件</li></ol><h1 id="反射获取信息的代码"><a href="#反射获取信息的代码" class="headerlink" title="反射获取信息的代码"></a>反射获取信息的代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInvoke</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class clazz = Main<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Object object = clazz.newInstance();</span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        Method method = clazz.getDeclaredMethod(<span class="string">"sayHello"</span>, String<span class="class">.<span class="keyword">class</span>, <span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        method.invoke(object,<span class="string">"324"</span>,<span class="string">"345"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>method.setAccessible(true)</code>在反射对象中设置 accessible 标志允许具有足够特权的复杂应用程序（比如 Java Object Serialization 或其他持久性机制）以某种通常禁止使用的方式来操作对象。私有方法不用开启。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基本数据类型占用内存</title>
      <link href="/2022/03/20/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98/"/>
      <url>/2022/03/20/java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>文章字数：28,阅读全文大约需要1分钟<br>数据类型| 占用空间(byte)<br>:—|:—<br>boolean|1<br>byte|1<br>short|2<br>char|2<br>int|4<br>float|4<br>long|8<br>double|8</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java常见垃圾收集器</title>
      <link href="/2022/03/20/java%E5%B8%B8%E8%A7%81%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>/2022/03/20/java%E5%B8%B8%E8%A7%81%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：508,阅读全文大约需要2分钟</p><blockquote><p>常见的有<code>Serial GC</code>、<code>ParNew GC</code>、<code>CMS GC</code>、<code>Parallel GC</code>、<code>G1 GC</code></p></blockquote><h1 id="Serial-GC"><a href="#Serial-GC" class="headerlink" title="Serial GC"></a>Serial GC</h1><p>最古老的<code>GC</code>，单线程。<code>client</code>模式下默认选项，采用复制算法</p><ol><li>优点</li></ol><ul><li>结构简单，初始化简单</li></ul><ol start="2"><li>缺点</li></ol><ul><li><code>Stop-The World</code>时间较长</li></ul><h1 id="ParNew-GC"><a href="#ParNew-GC" class="headerlink" title="ParNew GC"></a>ParNew GC</h1><p><code>SerialGC</code>的多线程版本，新生代<code>GC</code>的实现<br>最常见的是配合老年代<code>CMS GC</code>工作</p><h1 id="Parrallel-GC"><a href="#Parrallel-GC" class="headerlink" title="Parrallel GC"></a>Parrallel GC</h1><p>Parallel Scavenge (新生代) + Parallel Old (老年代)<br> 在JDK8等版本中，是server模式JVM的默认GC选择，也被称为吞吐量优先的GC，算法和Serial GC相似，特点是老生代和新生代GC并行进行，更加高效。</p><h1 id="CMS（Concurrent-Mark-Sweep）GC"><a href="#CMS（Concurrent-Mark-Sweep）GC" class="headerlink" title="CMS（Concurrent Mark Sweep）GC"></a>CMS（Concurrent Mark Sweep）GC</h1><p>基于标记-清除（Mark-Sweep）算法，尽量减少停顿时间</p><p>优点： 基于标记-清除（Mark-Sweep）算法，尽量减少停顿时间。<br>缺点： 存在碎片化问题，在长时间运行的情况下会发生full GC，导致恶劣停顿。会占用更多的CPU资源，和用户争抢线程。在JDK 9中被标记为废弃。</p><h1 id="G1-GC"><a href="#G1-GC" class="headerlink" title="G1 GC"></a>G1 GC</h1><p>兼顾了吞吐量和停顿时间的GC实现，是Oracle JDK 9后默认的GC<br> 可以直观的设值停顿时间，相对于CMS GC ，G1未必能做到CMS最好情况下的延时停顿，但比最差情况要好得多<br>G1 仍存在年代的概念，使用了Region棋盘算法，实际上是标记-整理（Mark-Compact）算法，可以避免内存碎片，尤其是堆非常大的时候，G1优势更明显。<br>G1 吞吐量和停顿表现都非常不错。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java启动命令参数</title>
      <link href="/2022/03/20/java%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/"/>
      <url>/2022/03/20/java%E5%90%AF%E5%8A%A8%E5%91%BD%E4%BB%A4%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：937,阅读全文大约需要3分钟</p><blockquote><p>java程序通过<code>java -option</code>启动，其中java程序为jdk安装目录下<code>bin</code>文件夹中的<code>java</code>可执行程序，<code>-option</code>为虚拟机参数。</p></blockquote><p><code>java</code>运行参数分为三大类</p><ol><li>基本参数: <code>-</code>所有虚拟机都需要具备的功能，并且向后兼容</li><li>非标准参数: <code>-X</code>默认jvm都实现这些功能但是不保证所有的jvm都能满足，且不保证向后兼容</li><li>非Stable参数: <code>-XX</code>不稳定参数，各个jvm实现会不相同，未来随时会取消。慎重使用</li></ol><h1 id="标准参数"><a href="#标准参数" class="headerlink" title="标准参数"></a>标准参数</h1><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-client</td><td>设置虚拟机使用client模式启动，运行速度快，但是性能和内存管理效率不如server。</td></tr><tr><td>-server</td><td>设置虚拟机使用server模式启动，64位下默认启动，忽略-client</td></tr><tr><td>-classpath或-cp</td><td>告知虚拟机搜索的目录、jar文件、zip文档名，用<code>;</code>隔开。注1</td></tr><tr><td>-D<propertyName>=value</td><td>在虚拟机系统属性中设置属性名/值的键值对，可在运行时<code>System.getProperty(&quot;propertyName&quot;)</code>获取值，有空格需要使用双引号-Dname=”space string”</td></tr><tr><td>-verbose/-verbose:class</td><td>输出虚拟机装入的类的信息，显示格式注2</td></tr><tr><td>-verbose:gc</td><td>虚拟机内存回收时在输出设备显示信息，格式注3</td></tr><tr><td>-verbose:jni</td><td>虚拟机调用native方法时输出信息，格式注4</td></tr><tr><td>-version</td><td>显示可运行虚拟机版本信息然后退出</td></tr><tr><td>-showversion</td><td>显示产品版本并继续</td></tr><tr><td>-ea</td><td>开启断言，同下</td></tr><tr><td>-enableassertions[:<packagename>…</td><td>:<classname>]</td></tr><tr><td>-da/disableassertions</td><td>关闭断言，其它同上</td></tr><tr><td>-esa/enablesystemassertions</td><td>设置虚拟机显示系统类的断言</td></tr><tr><td>-dsa/disablesystemassertions</td><td>关闭系统类的断言</td></tr><tr><td>-agentlib:<libname>[=<options>]</td><td>虚拟机装载本地代理库，参数未name=xx=1,yy=2这样的格式。windows下找libname.dll，unix下找libname.so文件。搜索路径不同系统不一样。注5</td></tr><tr><td>-agentpath:<pathname>[=<options>]</td><td>设置虚拟机本地库路径，其它和上面一样</td></tr><tr><td>-javaagent:<pathname>[=<options>]</td><td>设置启动时装入java语言的设备代理，注6</td></tr></tbody></table><p>注：</p><ol><li><p><code>-classpath</code>:虚拟机在运行一个类时，需要将其装入内存虚拟机搜索的顺序为<code>Bootstrap classes</code>-<code>Extension classes</code>-<code>User classes</code>。其中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. &#96;Bootstrap classes&#96;是虚拟机自带的 &#96;jar&#96;或者&#96;zip&#96;文件，虚拟机搜索这些包的文件，使用&#96;System.getProperty(&quot;sun.boot.class.path&quot;)&#96;可以得到虚拟机所搜的包名。</span><br><span class="line">2. &#96;Extension classes&#96;是位于&#96;jre&#96; &#96;lib&#96; &#96;ext&#96;下的jar文件，使用&#96;System.getProperty(&quot;java.ext.dirs&quot;)&#96;可获得&#96;Extension&#96;搜索路径</span><br><span class="line">3. &#96;User classes&#96;搜索的顺序为当前目录，环境变量CLASSPATH、-classpath</span><br><span class="line">使用&#96;-classpath&#96;后虚拟机不再使用环境变量&#96;CLASSPATH&#96;作为搜索路径。</span><br></pre></td></tr></table></figure></li><li><p><code>-verbose:class</code>:展示类信息为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Loaded java.io.FilePermission$1 from shared objects file]</span><br><span class="line">当虚拟机报告类找不到或类冲突时可用此参数来诊断来查看虚拟机从装入类的情况</span><br></pre></td></tr></table></figure></li><li><p><code>-verbose:gc</code>:显示gc格式如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Full GC 268K-&gt;168K(1984K), 0.0187390 secs]</span><br><span class="line">该参数用来监视虚拟机内存回收的情况。</span><br></pre></td></tr></table></figure></li><li><p><code>-verbose:jni</code>:显示jvm调用<code>native</code>方法时输出信息格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[Dynamic-linking native method HelloNative.sum ... JNI]</span><br><span class="line">该参数用来监视虚拟机调用本地方法的情况，在发生jni错误时可为诊断提供便利。</span><br></pre></td></tr></table></figure></li><li><p><code>-agentlib:&lt;libname&gt;[=&lt;options&gt;]</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如可使用-agentlib:hprof来获取虚拟机的运行情况，包括CPU、内存、线程等的运行数据，并可输出到指定文件中，可用-agentlib:hprof&#x3D;help来得到使用帮助列表。在jre&quot;bin目录下可发现hprof.dll文件。</span><br></pre></td></tr></table></figure></li><li><p><code>-javaagent:&lt;jarpath&gt;[=&lt;options&gt;]</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">虚拟机启动时装入java语言设备代理。Jarpath文件中的mainfest 文件必须有Agent-Class属性。代理类要实现public static void premain(String agentArgs, Instrumentation inst)方法。当虚拟机初始化时，将按代理类的说明顺序调用premain方法。</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java多线程基础部分</title>
      <link href="/2022/03/20/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/"/>
      <url>/2022/03/20/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1413,阅读全文大约需要5分钟</p><h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><ul><li>进程:进程拥有独立的代码和数据空间，是资源分配的最小单位。一个进程可以包含一个或多个线程。</li><li>线程:同一类的线程共享代码和数据空间，每个线程都拥有独立的运行栈和程序计数器。线程是cpu调度的最小单位。</li><li>进程/线程 的五个状态:<strong>创建</strong>、<strong>就绪</strong>、<strong>运行</strong>、<strong>阻塞</strong>、<strong>终止</strong></li><li>多进程代表操作系统可运行多程序，线程代表程序里运行多个顺序流</li></ul><h1 id="创建java线程"><a href="#创建java线程" class="headerlink" title="创建java线程"></a>创建java线程</h1><p>java创建线程有三种方法</p><ul><li>基础Thread类</li><li>实现Runable接口</li><li>实现Callable接口，配合Future、线程池</li></ul><p>继承<code>Thread</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">threadLearn</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadLearn learn = <span class="keyword">new</span> ThreadLearn ();</span><br><span class="line">        learn.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现<code>java.lang.Runnable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadLearn</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ThreadLearn learn = <span class="keyword">new</span> ThreadLearn ();</span><br><span class="line">        learn.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>start()</code>方法使线程变成可运行状态<code>Runnable</code>,操作系统决定何时调用运行。</li><li><code>start()</code>方法重复调用会抛出<code>java.lang.IllegalThreadStateException</code>异常</li><li><code>run()</code>方法是多线程程序的一个约定，所有的多线程代码都要写在里面。</li></ol><p><strong><code>Thread</code>和<code>Runnable</code>比较</strong></p><ol><li><code>Thread</code>本质上是实现了<code>Runnable</code>接口。</li><li><code>Thread</code>类实现了<code>Runnable</code>并在其之上进行了拓展。</li></ol><h1 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h1><p><img src="https://upload-images.jianshu.io/upload_images/17243965-bbb604a692d140fb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="线程状态转换"></p><table><thead><tr><th>线程状态</th><th>状态分类</th><th>描述</th></tr></thead><tbody><tr><td>新建状态<code>New</code></td><td>-</td><td>新创建了一个线程对象</td></tr><tr><td>就绪状态<code>Runnable</code></td><td>-</td><td>其它线程调用了该线程的<code>start()</code>方法，线程变为可运行</td></tr><tr><td>运行状态<code>Running</code></td><td>-</td><td>就绪状态的线程被系统调用。</td></tr><tr><td>阻塞状态<code>Blocked</code></td><td>-</td><td>分为三种情况</td></tr><tr><td>阻塞状态</td><td>等待阻塞</td><td>运行的线程执行<code>wait()</code>方法</td></tr><tr><td>阻塞状态</td><td>同步阻塞</td><td>获取同步锁时锁被其它线程占用，jvm会把该线程放入锁池之中</td></tr><tr><td>阻塞状态</td><td>其它阻塞</td><td>线程运行<code>sleep()</code>或<code>join()</code>的线程结束或发出I/O请求。<code>sleep</code>不会释放锁</td></tr><tr><td>死亡状态</td><td>-</td><td>线程执行完毕或异常退出</td></tr></tbody></table><h1 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h1><ol><li><strong>线程优先级</strong></li></ol><ul><li>Thread的<code>setPriortity()</code>和<code>getPriortity()</code>管理优先级</li><li>优先级取值1~10整数，推荐使用常量，这三个级别的<strong>可移植性</strong>好。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static int MAX_PRIORITY&#x3D;10;</span><br><span class="line">static int NORM_PRIORITY&#x3D;5;&#x2F;&#x2F;默认</span><br><span class="line">static int MIN_PRIORITY&#x3D;1;</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><p><strong>线程睡眠</strong><br><code>Thread.sleep(long millis)</code>:设定线程阻塞时间，阻塞结束后进入就绪状态。</p></li><li><p><strong>线程等待</strong><br><code>Object</code>类中的<code>wait()</code>方法，导致当前线程等待，直到其它线程调用此对象的<code>notify()</code>方法或者<code>notifyAll()</code>唤醒，等价于<code>wait(0)</code></p></li><li><p><strong>线程让步</strong><br><code>Thread.yield()</code>暂停当前正在执行的线程对象，把执行的机会让给优先级相同或更高的线程。</p></li><li><p><strong>线程加入</strong><br><code>join()</code>当前线程进入阻塞态，调用其它线程，该线程运行完毕后当前线程再进入就绪态。</p></li><li><p><strong>线程唤醒</strong><br><code>Object</code>类的<code>notify()</code>方法，唤醒对象监听器上一个线程，如果有多个线程在此对象上等待，则唤醒随机一个。<code>notifyAll()</code>唤醒所有该对象上等待的线程。<br><code>wait()</code>和<code>sleep()</code>都可以通过<code>interrupt()</code>方法 打断线程的暂停状态 ，从而使线程立刻抛出<code>InterruptedException</code>。</p></li></ol><blockquote><p><code>sleep</code>方法不会释放锁，<code>wait</code>会<br> <code>wait</code>，<code>notify</code>和<code>notifyAll</code>只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用 </p></blockquote><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><ul><li><code>sleep()</code>: 强迫一个线程睡眠Ｎ毫秒。 </li><li><code>isAlive()</code>: 判断一个线程是否存活。 </li><li><code>join()</code>: 等待线程终止。 </li><li><code>activeCount()</code>: 程序中活跃的线程数。 </li><li><code>enumerate()</code>: 枚举程序中的线程。 </li><li><code>currentThread()</code>: 得到当前线程。 </li><li><code>isDaemon()</code>: 一个线程是否为守护线程。 </li><li><code>setDaemon()</code>: 设置一个线程为守护线程。(用户线程和守护线程的区别在于没有用户线程后守护线程终止) </li><li><code>setName()</code>: 为线程设置一个名称。 </li><li><code>wait()</code>: 强迫一个线程等待。 </li><li><code>notify()</code>: 通知一个线程继续运行。 </li><li><code>setPriority()</code>: 设置一个线程的优先级。</li></ul><h1 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h1><blockquote><p><code>synchronized</code><strong>[ˈsɪŋkrənaɪzd]</strong>是系统级的锁，一旦锁死除了线程自行释放没有其它方法。juc的lock锁是编码级别的，可以代码解锁。juc(<code>java.util.concurrent</code>)下次讨论</p></blockquote><ul><li><code>synchronized</code>在对象里:标记于方法或是代码块都是对对象加锁。只要对象中出发了锁，整个对象都无法进入。</li><li><code>synchronized</code>标记于静态方法，则是对于类加锁，和对象锁不冲突</li></ul><h1 id="线程数据传递"><a href="#线程数据传递" class="headerlink" title="线程数据传递"></a>线程数据传递</h1><blockquote><p>同步情况下使用参数传入，return返回的形式，多线程下运行和结束是不可预料的，所以无法和同步一样传参。</p></blockquote><ol><li><p><strong>使用构造方法传参</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//线程使用构造函数就收这个参数</span></span><br><span class="line">Thread thread = <span class="keyword">new</span> MyThread1(<span class="string">"hello world"</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>set方法</strong><br>线程里先设置set方法接受参数（不用多说了吧）<br>然后start()之前设置参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MyThread2 myThread = <span class="keyword">new</span> MyThread2();   </span><br><span class="line">myThread.setName(<span class="string">"hello world"</span>);   </span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(myThread);   </span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure></li><li><p>回调函数</p><blockquote><p>将对象传入线程，线程在某一时间调用对象的函数。主线程通过传入的对象获取线程操作后的值。(还有静态类)</p></blockquote></li><li><p>声明lambda函数的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ICallback</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callback</span><span class="params">(Map&lt;String, Object&gt; params)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>线程调用接口返回数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doStm</span><span class="params">(<span class="keyword">final</span> ICallback callback)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// 初始化一个线程  </span></span><br><span class="line">        Thread t = <span class="keyword">new</span> Thread() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 这里是业务逻辑处理  </span></span><br><span class="line">                System.out.println(<span class="string">"子线任务执行:"</span>+Thread.currentThread().getId());</span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 为了能看出效果 ，让当前线程阻塞5秒  </span></span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">  </span><br><span class="line">                <span class="comment">// 处理完业务逻辑，  </span></span><br><span class="line">                Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">                params.put(<span class="string">"a1"</span>, <span class="string">"这是我返回的参数字符串..."</span>);</span><br><span class="line">                callback.callback(params);</span><br><span class="line">            &#125;;  </span><br><span class="line">        &#125;;  </span><br><span class="line">  </span><br><span class="line">        es.execute(t);</span><br><span class="line">        <span class="comment">//一定要调用这个方法，不然executorService.isTerminated()永远不为true</span></span><br><span class="line">        es.shutdown();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">doStm((params)-&gt;&#123;</span><br><span class="line">           System.out.println(<span class="string">"单个线程也已经处理完毕了，返回参数a1="</span> + params.get(<span class="string">"a1"</span>));</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现开机自启（快捷方式）</title>
      <link href="/2022/03/20/java%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%EF%BC%88%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%EF%BC%89/"/>
      <url>/2022/03/20/java%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%EF%BC%88%E5%BF%AB%E6%8D%B7%E6%96%B9%E5%BC%8F%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：200,阅读全文大约需要1分钟</p><blockquote><p>主要思路是将快捷方式放入windows的开机自启目录中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写入快捷方式 是否自启动，快捷方式的名称，注意后缀是lnk</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setAutoStart</span><span class="params">(<span class="keyword">boolean</span> yesAutoStart, String lnk)</span> </span>&#123;</span><br><span class="line">File f = <span class="keyword">new</span> File(lnk);</span><br><span class="line">String p = f.getAbsolutePath();</span><br><span class="line">String startFolder = <span class="string">""</span>;</span><br><span class="line">String osName = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">String str = System.getProperty(<span class="string">"user.home"</span>);</span><br><span class="line"><span class="keyword">if</span> (osName.equals(<span class="string">"Windows 7"</span>) || osName.equals(<span class="string">"Windows 8"</span>) || osName.equals(<span class="string">"Windows 10"</span>)</span><br><span class="line">|| osName.equals(<span class="string">"Windows Server 2012 R2"</span>) || osName.equals(<span class="string">"Windows Server 2014 R2"</span>)</span><br><span class="line">|| osName.equals(<span class="string">"Windows Server 2016"</span>)) &#123;</span><br><span class="line">startFolder = System.getProperty(<span class="string">"user.home"</span>)</span><br><span class="line">+ <span class="string">"\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (osName.endsWith(<span class="string">"Windows XP"</span>)) &#123;</span><br><span class="line">startFolder = System.getProperty(<span class="string">"user.home"</span>) + <span class="string">"\\「开始」菜单\\程序\\启动"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (setRunBySys(yesAutoStart, p, startFolder, lnk)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 设置是否随系统启动</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setRunBySys</span><span class="params">(<span class="keyword">boolean</span> b, String path, String path2, String lnk)</span> </span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(path2 + <span class="string">"\\"</span> + lnk);</span><br><span class="line">Runtime run = Runtime.getRuntime();</span><br><span class="line">File f = <span class="keyword">new</span> File(lnk);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 复制</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (b) &#123;</span><br><span class="line"><span class="comment">// 写入</span></span><br><span class="line"><span class="comment">// 判断是否隐藏，注意用系统copy布置为何隐藏文件不生效</span></span><br><span class="line"><span class="keyword">if</span> (f.isHidden()) &#123;</span><br><span class="line"><span class="comment">// 取消隐藏</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Runtime.getRuntime().exec(<span class="string">"attrib -H \""</span> + path + <span class="string">"\""</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">run.exec(<span class="string">"cmd /c copy "</span> + formatPath(path) + <span class="string">" "</span> + formatPath(path2));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 延迟0.5秒防止复制需要时间</span></span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line"><span class="keyword">if</span> (file.isHidden()) &#123;</span><br><span class="line"><span class="comment">// 取消隐藏</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Runtime.getRuntime().exec(<span class="string">"attrib -H \""</span> + file.getAbsolutePath() + <span class="string">"\""</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line">run.exec(<span class="string">"cmd /c del "</span> + formatPath(file.getAbsolutePath()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 解决路径中空格问题</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">formatPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (path == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> path.replaceAll(<span class="string">" "</span>, <span class="string">"\" \""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java异或实现数据加密</title>
      <link href="/2022/03/20/java%E5%BC%82%E6%88%96%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/"/>
      <url>/2022/03/20/java%E5%BC%82%E6%88%96%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：306,阅读全文大约需要1分钟</p><blockquote><p>异或(xor)两次之后的数据是相同的，根据这个原理可以加密数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加密解密工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XORUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密、解密byte数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 数据（密文/明文）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回解密/加密后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] data, <span class="keyword">byte</span>[] key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.length == <span class="number">0</span> || key == <span class="keyword">null</span> || key.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">new</span> <span class="keyword">byte</span>[data.length];</span><br><span class="line">        <span class="comment">// 使用密钥字节数组循环加密或解密</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 数据与密钥异或, 再与循环变量的低8位异或（增加复杂度）</span></span><br><span class="line">            result[i] = (<span class="keyword">byte</span>) (data[i] ^ key[i % key.length] ^ (i &amp; <span class="number">0xFF</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密、解密文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inFile 输入文件（密文/明文）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outFile 结果输出文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encryptFile</span><span class="params">(File inFile, File outFile, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件输入流</span></span><br><span class="line">            in = <span class="keyword">new</span> FileInputStream(inFile);</span><br><span class="line">            <span class="comment">// 结果输出流, 异或运算时, 字节是一个一个读取和写入, 这里必须使用缓冲流包装,</span></span><br><span class="line">            <span class="comment">// 等缓冲到一定数量的字节（10240字节）后再写入磁盘（否则写磁盘次数太多, 速度会非常慢）</span></span><br><span class="line">            out = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(outFile), <span class="number">10240</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> b = -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每次循环读取文件的一个字节, 使用密钥字节数组循环加密或解密</span></span><br><span class="line">            <span class="keyword">while</span> ((b = in.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// 数据与密钥异或, 再与循环变量的低8位异或（增加复杂度）</span></span><br><span class="line">                b = (b ^ key[(<span class="keyword">int</span>) (i % key.length)] ^ (<span class="keyword">int</span>) (i &amp; <span class="number">0xFF</span>));</span><br><span class="line">                <span class="comment">// 写入一个加密/解密后的字节</span></span><br><span class="line">                out.write(b);</span><br><span class="line">                <span class="comment">// 循环变量递增</span></span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            close(in);</span><br><span class="line">            close(out);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(Closeable c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        XORUtils.encryptFile(<span class="keyword">new</span> File(<span class="string">"demo.jpg"</span>), <span class="keyword">new</span> File(<span class="string">"demo.jpg_cipher"</span>), key.getBytes());       </span><br><span class="line">        XORUtils.encryptFile(<span class="keyword">new</span> File(<span class="string">"demo.jpg_cipher"</span>), <span class="keyword">new</span> File(<span class="string">"demo.jpg_plain"</span>), key.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java控制剪贴板</title>
      <link href="/2022/03/20/java%E6%8E%A7%E5%88%B6%E5%89%AA%E8%B4%B4%E6%9D%BF/"/>
      <url>/2022/03/20/java%E6%8E%A7%E5%88%B6%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：110,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test.jvm.oom.design;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Image;</span><br><span class="line"><span class="keyword">import</span> java.awt.Toolkit;</span><br><span class="line"><span class="keyword">import</span> java.awt.datatransfer.Clipboard;</span><br><span class="line"><span class="keyword">import</span> java.awt.datatransfer.DataFlavor;</span><br><span class="line"><span class="keyword">import</span> java.awt.datatransfer.StringSelection;</span><br><span class="line"><span class="keyword">import</span> java.awt.datatransfer.Transferable;</span><br><span class="line"><span class="keyword">import</span> java.awt.datatransfer.UnsupportedFlavorException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *1. 从剪切板获得文字。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getSysClipboardText</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String ret = <span class="string">""</span>;</span><br><span class="line">        Clipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();</span><br><span class="line">        <span class="comment">// 获取剪切板中的内容</span></span><br><span class="line">        Transferable clipTf = sysClip.getContents(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clipTf != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 检查内容是否是文本类型</span></span><br><span class="line">            <span class="keyword">if</span> (clipTf.isDataFlavorSupported(DataFlavor.stringFlavor)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ret = (String) clipTf</span><br><span class="line">                            .getTransferData(DataFlavor.stringFlavor);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 2.将字符串复制到剪切板。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setSysClipboardText</span><span class="params">(String writeMe)</span> </span>&#123;</span><br><span class="line">        Clipboard clip = Toolkit.getDefaultToolkit().getSystemClipboard();</span><br><span class="line">        Transferable tText = <span class="keyword">new</span> StringSelection(writeMe);</span><br><span class="line">        clip.setContents(tText, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *3. 从剪切板获得图片。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Image <span class="title">getImageFromClipboard</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Clipboard sysc = Toolkit.getDefaultToolkit().getSystemClipboard();</span><br><span class="line">        Transferable cc = sysc.getContents(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (cc == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cc.isDataFlavorSupported(DataFlavor.imageFlavor))</span><br><span class="line">            <span class="keyword">return</span> (Image) cc.getTransferData(DataFlavor.imageFlavor);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 4.复制图片到剪切板。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setClipboardImage</span><span class="params">(<span class="keyword">final</span> Image image)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Transferable trans = <span class="keyword">new</span> Transferable() &#123;</span><br><span class="line">            <span class="keyword">public</span> DataFlavor[] getTransferDataFlavors() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> DataFlavor[] &#123; DataFlavor.imageFlavor &#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDataFlavorSupported</span><span class="params">(DataFlavor flavor)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> DataFlavor.imageFlavor.equals(flavor);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">getTransferData</span><span class="params">(DataFlavor flavor)</span></span></span><br><span class="line"><span class="function">                    <span class="keyword">throws</span> UnsupportedFlavorException, IOException </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (isDataFlavorSupported(flavor))</span><br><span class="line">                    <span class="keyword">return</span> image;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedFlavorException(flavor);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(trans,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 5.通过流获取，可读取图文混合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getImageAndTextFromClipboard</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Clipboard sysClip = Toolkit.getDefaultToolkit().getSystemClipboard();</span><br><span class="line">        Transferable clipTf = sysClip.getContents(<span class="keyword">null</span>);</span><br><span class="line">        DataFlavor[] dataList = clipTf.getTransferDataFlavors();</span><br><span class="line">        <span class="keyword">int</span> wholeLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dataList.length; i++) &#123;</span><br><span class="line">            DataFlavor data = dataList[i];</span><br><span class="line">            <span class="keyword">if</span> (data.getSubType().equals(<span class="string">"rtf"</span>)) &#123;</span><br><span class="line">                Reader reader = data.getReaderForText(clipTf);</span><br><span class="line">                OutputStreamWriter osw = <span class="keyword">new</span> OutputStreamWriter(</span><br><span class="line">                        <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\test.rtf"</span>));</span><br><span class="line">                <span class="keyword">char</span>[] c = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> leng = -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span> ((leng = reader.read(c)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    osw.write(c, wholeLength, leng);</span><br><span class="line">                &#125;</span><br><span class="line">                osw.flush();</span><br><span class="line">                osw.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java操作excel工具</title>
      <link href="/2022/03/20/java%E6%93%8D%E4%BD%9Cexcel%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/java%E6%93%8D%E4%BD%9Cexcel%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：119,阅读全文大约需要1分钟</p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.poi.ss.usermodel.CellType;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFCell;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFRow;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFSheet;</span><br><span class="line"><span class="keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * excel操作工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelWriter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XSSFWorkbook workbook;</span><br><span class="line">    <span class="keyword">private</span> XSSFSheet sheet;</span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 打开或者创建一个excel</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 文件位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sheetName excel表格名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExcelWriter</span><span class="params">(String filePath, String sheetName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Files.exists(Paths.get(filePath))) &#123;</span><br><span class="line">            <span class="keyword">try</span> (FileInputStream fileInputStream = <span class="keyword">new</span> FileInputStream(filePath))&#123;</span><br><span class="line">                workbook = <span class="keyword">new</span> XSSFWorkbook(fileInputStream);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            workbook = <span class="keyword">new</span> XSSFWorkbook();</span><br><span class="line">        &#125;</span><br><span class="line">        sheet = workbook.getSheet(sheetName);</span><br><span class="line">        <span class="keyword">if</span>(sheet == <span class="keyword">null</span>) &#123;</span><br><span class="line">            sheet = workbook.createSheet(sheetName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据行和列的索引写入单元格的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row 行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> column 列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> column, String val)</span> </span>&#123;</span><br><span class="line">        XSSFRow xssRow = sheet.getRow(row);</span><br><span class="line">        <span class="keyword">if</span>(xssRow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            xssRow = sheet.createRow(row);</span><br><span class="line">        &#125;</span><br><span class="line">        XSSFCell cell = xssRow.getCell(column);</span><br><span class="line">        <span class="keyword">if</span>(cell == <span class="keyword">null</span>) &#123;</span><br><span class="line">            cell = xssRow.createCell(column);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(val != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cell.setCellType(CellType.STRING);</span><br><span class="line">            cell.setCellValue(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cell.setCellType(CellType.BLANK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据行和列的索引获取单元格的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row 行</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> column 列</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">(<span class="keyword">int</span> row,<span class="keyword">int</span> column)</span></span>&#123;</span><br><span class="line">        XSSFRow xssRow = sheet.getRow(row);</span><br><span class="line">        <span class="keyword">if</span>(xssRow == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        XSSFCell cell = xssRow.getCell(column);</span><br><span class="line">        <span class="keyword">return</span> cell == <span class="keyword">null</span> ? <span class="keyword">null</span> : cell.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭文件，并保存修改内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveAndClose</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(filePath)) &#123;</span><br><span class="line">            workbook.write(fos);</span><br><span class="line">        &#125;</span><br><span class="line">        workbook.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭文件，不保存修改</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        workbook.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java文件删除</title>
      <link href="/2022/03/20/java%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4/"/>
      <url>/2022/03/20/java%E6%96%87%E4%BB%B6%E5%88%A0%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：24,阅读全文大约需要1分钟</p><blockquote><p>封装了一个删除文件的方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteFile</span><span class="params">(String fileName)</span> </span>&#123;<span class="comment">//传入绝对路径</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(fileName);</span><br><span class="line">    <span class="keyword">if</span> (file.exists() &amp;&amp; file.isFile() || file.exists() &amp;&amp; file.isDirectory()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (file.delete()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java文件搜索工具</title>
      <link href="/2022/03/20/java%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/java%E6%96%87%E4%BB%B6%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：149,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件搜索流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSearchStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File[] root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> parallel;</span><br><span class="line">    <span class="keyword">private</span> Consumer&lt;File&gt; afterConsumer;</span><br><span class="line">    <span class="keyword">private</span> Function&lt;File, Boolean&gt; filter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> deep = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FileSearchStream</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSearchStream</span><span class="params">(File... root)</span> </span>&#123;</span><br><span class="line">        init(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个查询对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileSearchStream <span class="title">of</span><span class="params">(File... root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileSearchStream(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDeep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果是文件夹，是否遍历 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileSearchStream <span class="title">setDeep</span><span class="params">(<span class="keyword">boolean</span> deep)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deep = deep;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取本地所有盘符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> File[] getSystemRoot() &#123;</span><br><span class="line">        <span class="keyword">return</span> File.listRoots();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤条件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileSearchStream <span class="title">filter</span><span class="params">(Function&lt;File, Boolean&gt; filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filter = filter;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到之后如何处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> afterConsumer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;File&gt; afterConsumer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.afterConsumer = afterConsumer;</span><br><span class="line">        searchRoot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换成list</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listFunction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toList</span><span class="params">(Function&lt;File, T&gt; listFunction)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.afterConsumer = file -&gt; list.add(listFunction.apply(file));</span><br><span class="line">        searchRoot();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyFunction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valFunction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; Map&lt;T, List&lt;R&gt;&gt; groupingBy(Function&lt;File, T&gt; keyFunction, Function&lt;File, R&gt; valFunction) &#123;</span><br><span class="line">        Map&lt;T, List&lt;R&gt;&gt; res = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.afterConsumer = file -&gt; &#123;</span><br><span class="line">            T key = keyFunction.apply(file);</span><br><span class="line">            R val = valFunction.apply(file);</span><br><span class="line">            <span class="keyword">if</span> (res.containsKey(key)) &#123;</span><br><span class="line">                res.get(key).add(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;R&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                list.add(val);</span><br><span class="line">                res.put(key, list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        searchRoot();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父级文件夹分组</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; groupingByPath() &#123;</span><br><span class="line">        <span class="keyword">return</span> groupingBy(File::getParent, File::getName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileSearchStream <span class="title">reset</span><span class="params">(File... root)</span> </span>&#123;</span><br><span class="line">        init(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(File... root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">        <span class="keyword">this</span>.parallel = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.afterConsumer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.filter = (file) -&gt; <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始搜索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">searchRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Stream&lt;File&gt; fileStream = Arrays.stream(root);</span><br><span class="line">        <span class="keyword">if</span> (parallel) &#123;</span><br><span class="line">            fileStream.parallel().forEach(<span class="keyword">this</span>::search);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fileStream.forEach(<span class="keyword">this</span>::search);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应盘符下符合要求的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        File[] f = file.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (File files : f) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(deep) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (files.isDirectory()) &#123;</span><br><span class="line">                            search(files);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (filter.apply(files)) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (afterConsumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    afterConsumer.accept(files);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (filter.apply(files)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (afterConsumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                afterConsumer.accept(files);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> FileSuffix &#123;</span><br><span class="line">        <span class="comment">/** 图片 */</span></span><br><span class="line">        IMG(<span class="string">"psd"</span>, <span class="string">"pdd"</span>, <span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>),</span><br><span class="line">        <span class="comment">/** 文档 */</span></span><br><span class="line">        DOCUMENT(<span class="string">"doc"</span>, <span class="string">"docx"</span>, <span class="string">"xls"</span>, <span class="string">"xlsx"</span>, <span class="string">"csv"</span>, <span class="string">"ppt"</span>, <span class="string">"pptx"</span>, <span class="string">"txt"</span>),</span><br><span class="line">        <span class="comment">/** 程序 */</span></span><br><span class="line">        APPLICATION(<span class="string">"exe"</span>, <span class="string">"bat"</span>, <span class="string">"cmd"</span>, <span class="string">"sh"</span>, <span class="string">"ink"</span>, <span class="string">"py"</span>, <span class="string">"class"</span>, <span class="string">"java"</span>),</span><br><span class="line">        <span class="comment">/** 音频 */</span></span><br><span class="line">        AUDIO(<span class="string">"mp3"</span>, <span class="string">"flac"</span>, <span class="string">"ape"</span>, <span class="string">"cd"</span>, <span class="string">"wave"</span>, <span class="string">"aiff"</span>),</span><br><span class="line">        <span class="comment">/** 视频 */</span></span><br><span class="line">        VIDEO(</span><br><span class="line">            <span class="string">"avi"</span>, <span class="string">"mov"</span>, <span class="string">"qt"</span>, <span class="string">"asf"</span>, <span class="string">"rm"</span>, <span class="string">"navi"</span>, <span class="string">"divX"</span>, <span class="string">"mpeg"</span>, <span class="string">"mpg"</span>, <span class="string">"ogg"</span>, <span class="string">"mod"</span>, <span class="string">"rmvb"</span>, <span class="string">"flv"</span>, <span class="string">"mp4"</span>, <span class="string">"3gp"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String[] suffix;</span><br><span class="line"></span><br><span class="line">        FileSuffix(String... suffix) &#123;</span><br><span class="line">            <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (fileName.contains(<span class="string">"."</span>)) &#123;</span><br><span class="line">                String fileSuffix = fileName.split(<span class="string">"\\."</span>)[<span class="number">1</span>];</span><br><span class="line">                fileSuffix = fileSuffix.toLowerCase();</span><br><span class="line">                <span class="keyword">for</span> (String s : suffix) &#123;</span><br><span class="line">                    String b = s.toLowerCase();</span><br><span class="line">                    <span class="keyword">if</span> (fileSuffix.equals(b)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String[] getSuffix() &#123;</span><br><span class="line">            <span class="keyword">return</span> suffix;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java日期</title>
      <link href="/2022/03/20/java%E6%97%A5%E6%9C%9F/"/>
      <url>/2022/03/20/java%E6%97%A5%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：439,阅读全文大约需要1分钟</p><blockquote><p>java8也新加入了功能更强大的日期，但是本次主要是记录常用的日期格式化，所以讨论的是<code>java.util.Date</code></p></blockquote><h1 id="获取日期"><a href="#获取日期" class="headerlink" title="获取日期"></a>获取日期</h1><ul><li><code>Date()</code>获取当前时间</li><li><code>Date(long millisec)</code>距离格林威治时间1970年1月1日millisec毫秒的时间</li><li><code>date.getTime()&gt;date2.getTime()</code>判断时间的前后<h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Date now = <span class="keyword">new</span> Date( );</span><br><span class="line">SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat (<span class="string">"E yyyy.MM.dd 'at' hh:mm:ss a zzz"</span>);</span><br><span class="line">System.out.println(<span class="string">"Current Date: "</span> + ft.format(now));</span><br></pre></td></tr></table></figure></li></ul><h1 id="解析格式"><a href="#解析格式" class="headerlink" title="解析格式"></a>解析格式</h1><table><thead><tr><th>字母</th><th>日期</th><th>示例</th></tr></thead><tbody><tr><td>G</td><td>era标志</td><td>AD</td></tr><tr><td>y</td><td>年</td><td>1996 或 96</td></tr><tr><td>M</td><td>月</td><td>July Jul 07</td></tr><tr><td>w</td><td>年中的第几周</td><td>27</td></tr><tr><td>W</td><td>月份中的第几周</td><td>2</td></tr><tr><td>D</td><td>年中的第几天</td><td>189</td></tr><tr><td>d</td><td>月中的第几天</td><td>10</td></tr><tr><td>F</td><td>月中的第几星期</td><td>2</td></tr><tr><td>E</td><td>星期中的第几天</td><td>Tuesday Tue</td></tr><tr><td>a</td><td>Am/Pm 上下午</td><td>PM</td></tr><tr><td>H</td><td>今天的第几小时0-23</td><td>0</td></tr><tr><td>k</td><td>今天的第几小时1-24</td><td>24</td></tr><tr><td>K</td><td>上下午几点0-11</td><td>11</td></tr><tr><td>h</td><td>上下午几点1-12</td><td>12</td></tr><tr><td>m</td><td>小时中的分钟</td><td>30</td></tr><tr><td>s</td><td>分钟中的秒数</td><td>30</td></tr><tr><td>S</td><td>毫秒</td><td>978</td></tr><tr><td>z</td><td>时区</td><td>Pacific standard Time;PST;GMT-08:00</td></tr><tr><td>Z</td><td>时区</td><td>-0800</td></tr></tbody></table><h1 id="日期格式化成字符串"><a href="#日期格式化成字符串" class="headerlink" title="日期格式化成字符串"></a>日期格式化成字符串</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">       System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure><h1 id="字符串转日期"><a href="#字符串转日期" class="headerlink" title="字符串转日期"></a>字符串转日期</h1><p>把对应格式的字符串转解析成为日期，如果字符串不匹配规则（比指定的规则数据少）则报错。<br>并且需要捕获ParseException</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.text.ParseException: Unparseable date: &quot;2019-10-24&quot;</span><br></pre></td></tr></table></figure><p>解析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="string">"2016-10-24 21:59:06"</span>;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">        System.out.println(sdf.parse(string));</span><br></pre></td></tr></table></figure><blockquote><p>总结，1.先创建SimpleDateFormat(“规则”);2.format转换，parse解析。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java死锁排查</title>
      <link href="/2022/03/20/java%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5/"/>
      <url>/2022/03/20/java%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：185,阅读全文大约需要1分钟</p><blockquote><p>多个线程在竞争锁的过程中彼此之间形成堵塞的现象</p></blockquote><h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><ol><li><code>jstack</code>查看线程以及堆栈信息</li><li><code>jconsole</code>可视化工具，点击线程-检查死锁</li><li><code>VisualVM</code>强大的排查问题工具，可以查看<code>jvm</code>配置、堆快照、线程堆栈信息等</li></ol><h1 id="避免死锁"><a href="#避免死锁" class="headerlink" title="避免死锁"></a>避免死锁</h1><ol><li><p>修正获取锁的顺序<br>死锁的根本原因就是获取锁的顺序混乱，将获取锁的代码从业务逻辑中抽离，在公共的方法里获取锁</p></li><li><p>超时放弃<br><code>synchronized</code>没有获取到锁就不会放弃，但是<code>Lock</code>接口提供了<code>boolean tryLock(long time, TimeUnit unit) throws InterruptedException</code>的方法，可以按照固定时长等待锁</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> 锁 </tag>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java模拟键盘鼠标工具类</title>
      <link href="/2022/03/20/java%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E9%BC%A0%E6%A0%87%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/03/20/java%E6%A8%A1%E6%8B%9F%E9%94%AE%E7%9B%98%E9%BC%A0%E6%A0%87%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：370,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.InputEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 双击间隔 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> doubleClickInterval = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">/** 基础操作间隔 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> operationInterval = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">/** 随机操作间隔（0-?） 操作间隔 = 基础操作间隔 + 随机操作间隔 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> randomInterval = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Robot robot;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;Character, Integer&gt; shiftKeys = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mock</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            robot = <span class="keyword">new</span> Robot();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AWTException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否启用随机间隔</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">enableRandomInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> randomInterval &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 键盘</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入字符，支持大小写字母，特殊字符。需要保证输入法处于小写状态下。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputByStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">            <span class="keyword">if</span>(shiftKeys.containsKey(c)) &#123;</span><br><span class="line">                inputKeyCombination(KeyEvent.VK_SHIFT, shiftKeys.get(c));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Pattern.matches(<span class="string">"[A-Z]"</span>, c + <span class="string">""</span>))&#123;</span><br><span class="line">                String s = (<span class="string">""</span> + c).toLowerCase();</span><br><span class="line">                inputKeyCombination(KeyEvent.VK_SHIFT, getCode(s.charAt(<span class="number">0</span>)));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                inputByCode(getCode(c));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入按键对应的KeyEventCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keycode KeyEvent</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputByCode</span><span class="params">(<span class="keyword">int</span> keycode)</span> </span>&#123;</span><br><span class="line">        robot.keyPress(keycode);</span><br><span class="line">        robot.keyRelease(keycode);</span><br><span class="line">        robot.delay(getOperationInterval());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取f1-f12的code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFXCode</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0x70</span> + num - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输入组合键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keycodes KeyEvent.VK_xxx</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inputKeyCombination</span><span class="params">(<span class="keyword">int</span>... keycodes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> keycode : keycodes) &#123;</span><br><span class="line">            robot.keyPress(keycode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> keycode : keycodes) &#123;</span><br><span class="line">            robot.keyRelease(keycode);</span><br><span class="line">        &#125;</span><br><span class="line">        robot.delay(getOperationInterval());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 鼠标</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置单击左键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x x轴位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y y轴位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">        robot.mouseMove(x, y);</span><br><span class="line">        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.delay(getOperationInterval());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置单击右键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x x轴位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y y轴位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clickRight</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">        robot.mouseMove(x, y);</span><br><span class="line">        robot.mousePress(InputEvent.BUTTON3_DOWN_MASK);</span><br><span class="line">        robot.mouseRelease(InputEvent.BUTTON3_DOWN_MASK);</span><br><span class="line">        robot.delay(getOperationInterval());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在指定位置双击左键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x x轴位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y y轴位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doubleClick</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">        robot.mouseMove(x, y);</span><br><span class="line">        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.delay(doubleClickInterval);</span><br><span class="line">        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.delay(getOperationInterval());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 鼠标移动到指定位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> x x轴位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> y y轴位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">        robot.mouseMove(x, y);</span><br><span class="line">        robot.delay(getOperationInterval());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其它</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算单次操作休眠时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getOperationInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(enableRandomInterval()) &#123;</span><br><span class="line">            <span class="keyword">double</span> random = randomInterval * Math.random();</span><br><span class="line">            <span class="keyword">return</span> operationInterval + (<span class="keyword">int</span>)random;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> operationInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDoubleClickInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doubleClickInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDoubleClickInterval</span><span class="params">(<span class="keyword">int</span> doubleClickInterval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doubleClickInterval = doubleClickInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOperationInterval</span><span class="params">(<span class="keyword">int</span> operationInterval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.operationInterval = operationInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRandomInterval</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> randomInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRandomInterval</span><span class="params">(<span class="keyword">int</span> randomInterval)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.randomInterval = randomInterval;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过字符查找keyEventCode</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">(<span class="keyword">char</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> KeyEvent.getExtendedKeyCodeForChar(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 特殊字符转换</span></span><br><span class="line">        shiftKeys.put(<span class="string">'~'</span>, getCode(<span class="string">'`'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'!'</span>, getCode(<span class="string">'1'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'@'</span>, getCode(<span class="string">'2'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'#'</span>, getCode(<span class="string">'3'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'$'</span>, getCode(<span class="string">'4'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'%'</span>, getCode(<span class="string">'5'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'^'</span>, getCode(<span class="string">'6'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'&amp;'</span>, getCode(<span class="string">'7'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'*'</span>, getCode(<span class="string">'8'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'('</span>, getCode(<span class="string">'9'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">')'</span>, getCode(<span class="string">'0'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'_'</span>, getCode(<span class="string">'-'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'+'</span>, getCode(<span class="string">'='</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'&#123;'</span>, getCode(<span class="string">'['</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'&#125;'</span>, getCode(<span class="string">']'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'|'</span>, getCode(<span class="string">'\\'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">':'</span>, getCode(<span class="string">';'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'"'</span>, getCode(<span class="string">'\''</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'&lt;'</span>, getCode(<span class="string">','</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'&gt;'</span>, getCode(<span class="string">'.'</span>));</span><br><span class="line">        shiftKeys.put(<span class="string">'?'</span>, getCode(<span class="string">'/'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h1><ul><li>自动抢票，循环点击抢票和取消弹窗。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次操作间隔200-300毫秒，增加随机值，以防被屏蔽</span></span><br><span class="line">    <span class="keyword">final</span> Mock mock = <span class="keyword">new</span> Mock().setOperationInterval(<span class="number">200</span>).setRandomInterval(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MockTest t = <span class="keyword">new</span> MockTest();</span><br><span class="line">        <span class="comment">// 五秒后开始执行，给用户切换窗口的时间</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                System.out.println(i);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 循环点击 (380,181) 和 (790,641) 总共循环5秒</span></span><br><span class="line">        t.clickAndCancel(<span class="number">380</span>,<span class="number">181</span>,<span class="number">790</span>,<span class="number">641</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">clickAndCancel</span><span class="params">(<span class="keyword">int</span> clickX, <span class="keyword">int</span> clickY, <span class="keyword">int</span> cancelX, <span class="keyword">int</span> cancelY, <span class="keyword">int</span> times)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"start at ["</span> + <span class="keyword">new</span> Date() + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">long</span> begin = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> current;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            current = System.currentTimeMillis();</span><br><span class="line">            mock.click(clickX, clickY);</span><br><span class="line">            mock.click(cancelX, cancelY);</span><br><span class="line">        &#125; <span class="keyword">while</span> (current - begin &lt; TimeUnit.SECONDS.toMillis(times));</span><br><span class="line">        System.out.println(<span class="string">"end at ["</span> + <span class="keyword">new</span> Date() + <span class="string">"]"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java注解合并，继承</title>
      <link href="/2022/03/20/java%E6%B3%A8%E8%A7%A3%E5%90%88%E5%B9%B6%EF%BC%8C%E7%BB%A7%E6%89%BF/"/>
      <url>/2022/03/20/java%E6%B3%A8%E8%A7%A3%E5%90%88%E5%B9%B6%EF%BC%8C%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：125,阅读全文大约需要1分钟</p><blockquote><p>将多个注解合并到一起，这样不用每次都要写若干个重复的注解。</p></blockquote><h1 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h1><p><code>SpringMVC</code>中的注解</p><ul><li><code>@RestController</code></li><li><code>@RequestMapping(&quot;/user&quot;)</code></li></ul><p>可以合并成<code>@PathRestController(&quot;/user&quot;)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PathRestController &#123;</span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"path"</span>)</span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">String[] path() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="AliasFor"><a href="#AliasFor" class="headerlink" title="@AliasFor"></a>@AliasFor</h1><p>这是<code>Spring</code>提供的注解，用来为其它属性赋值。<br>比如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@AliasFor(&quot;path&quot;)</span><br><span class="line">String[] value() default &#123;&#125;;</span><br></pre></td></tr></table></figure><p>就是把value的值也给path赋值。以此实现value和path的值保持一致。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java监听键盘事件</title>
      <link href="/2022/03/20/java%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/"/>
      <url>/2022/03/20/java%E7%9B%91%E5%90%AC%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：57,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyListener;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 14:51 2019/9/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">KeyListener</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> pressTime=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> releasedTime=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> keyEnable=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        demo ket = <span class="keyword">new</span> demo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">demo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="keyword">this</span>.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.setTitle(<span class="string">"KeyEventTest"</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        addKeyListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (keyEnable ==<span class="keyword">true</span>) &#123;</span><br><span class="line">            pressTime = System.currentTimeMillis();</span><br><span class="line">            keyEnable=<span class="keyword">false</span>;</span><br><span class="line">            System.out.println(<span class="string">"按下"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">        releasedTime=System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">long</span> afterTime=releasedTime-pressTime;</span><br><span class="line">        System.out.println(<span class="string">"总时间"</span>+afterTime+<span class="string">"毫秒"</span>);</span><br><span class="line">        keyEnable=<span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyTyped</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java的引用类型以及值传递</title>
      <link href="/2022/03/20/java%E7%9A%84%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%80%BC%E4%BC%A0%E9%80%92/"/>
      <url>/2022/03/20/java%E7%9A%84%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%BB%A5%E5%8F%8A%E5%80%BC%E4%BC%A0%E9%80%92/</url>
      
        <content type="html"><![CDATA[<p>文章字数：446,阅读全文大约需要1分钟</p><h1 id="值传递引用传递"><a href="#值传递引用传递" class="headerlink" title="值传递引用传递"></a>值传递引用传递</h1><ul><li><strong>函数内传递是值传递</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String test=<span class="string">"test1"</span>;</span><br><span class="line">       Ob that=<span class="keyword">new</span> Ob();</span><br><span class="line">       that.changeTest(test);</span><br><span class="line">       System.out.println(<span class="string">"test = "</span> + test);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeTest</span><span class="params">(String test)</span></span>&#123;</span><br><span class="line">        test=<span class="string">"test2"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果：函数内的改变对外部变量无影响</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test &#x3D; test1</span><br></pre></td></tr></table></figure><p>函数内实参是值传递，即不会对原有对象造成影响<br>但是，如果传递的是一个对象（本质上是对象的引用地址）就会改变对象，因为即使是值传递，但是传递的地址指向是同一个对象。</p><ul><li><code>=</code><strong>符号是引用传递</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">            te a =<span class="keyword">new</span> te();</span><br><span class="line">            te b = a;</span><br><span class="line">            <span class="comment">//仅修改内容</span></span><br><span class="line">            a.setName(<span class="string">"aaa"</span>);</span><br><span class="line">            b.setName(<span class="string">"bbb"</span>);</span><br><span class="line">            <span class="comment">//发现a也修改了</span></span><br><span class="line">            System.out.println(<span class="string">"a.getName() = "</span> + a.getName());</span><br><span class="line">            <span class="comment">// == 符号是判断对象地址是否相同，结果是相同</span></span><br><span class="line">            System.out.print(<span class="string">"a==b? "</span>);</span><br><span class="line">            System.out.println(a==b);</span><br><span class="line">            <span class="comment">//输出一下对象的地址，发现果然一样</span></span><br><span class="line">            System.out.println(<span class="string">"a = "</span> + a);</span><br><span class="line">            System.out.println(<span class="string">"b = "</span> + b);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">te</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.getName() &#x3D; bbb</span><br><span class="line">a&#x3D;&#x3D;b? true</span><br><span class="line">a &#x3D; te@3f91beef</span><br><span class="line">b &#x3D; te@3f91beef</span><br></pre></td></tr></table></figure><h1 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h1><blockquote><p>这让我想起了之前看到的一个知识点，<code>==</code>和<code>Object.equals()</code>的区别。</p></blockquote><ul><li><code>==</code>判断的是地址是否相同</li><li><code>Object.equals()</code>是用来判断对象是否相同的方法，内部默认调用的是<code>==</code>来判断。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Ob a = <span class="keyword">new</span> Ob ();</span><br><span class="line">        Ob b = <span class="keyword">new</span> Ob ();</span><br><span class="line">        System.out.println(<span class="string">"a.equals(b) = "</span> + a.equals(b));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.equals(b) &#x3D; false</span><br></pre></td></tr></table></figure><p>如果没有重写<code>equals()</code>，即使使用同一个类的构造方法也显示不同。<br>重写<code>equals()</code>代码的同时也要重写<code>hashCode()</code>方法，因为要保证<code>equals</code>相等，<code>hashCode</code>一定相等。避免重写<code>equlas()</code>后达到一定条件对象相等，但是<code>hashCode()</code>没变。</p><blockquote><p><code>hashCode()</code>:hash-&gt;简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。hashMap也是将key转换成hash存储，如果hashCode相同，则会在同一个节点用链表存储。通过hashCode找到位置，equals获取两个之一。</p></blockquote><p>附 String类重写<code>equals()</code>和<code>hashCode()</code>的源码(1.8)</p><ul><li><code>equals()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public boolean equals(Object anObject) &#123;</span><br><span class="line">        if (this &#x3D;&#x3D; anObject) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        if (anObject instanceof String) &#123;</span><br><span class="line">            String anotherString &#x3D; (String)anObject;</span><br><span class="line">            int n &#x3D; value.length;</span><br><span class="line">            if (n &#x3D;&#x3D; anotherString.value.length) &#123;</span><br><span class="line">                char v1[] &#x3D; value;</span><br><span class="line">                char v2[] &#x3D; anotherString.value;</span><br><span class="line">                int i &#x3D; 0;</span><br><span class="line">                while (n-- !&#x3D; 0) &#123;</span><br><span class="line">                    if (v1[i] !&#x3D; v2[i])</span><br><span class="line">                        return false;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><code>hashCode()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public int hashCode() &#123;</span><br><span class="line">        int h &#x3D; hash;</span><br><span class="line">        if (h &#x3D;&#x3D; 0 &amp;&amp; value.length &gt; 0) &#123;</span><br><span class="line">            char val[] &#x3D; value;</span><br><span class="line"></span><br><span class="line">            for (int i &#x3D; 0; i &lt; value.length; i++) &#123;</span><br><span class="line">                h &#x3D; 31 * h + val[i];</span><br><span class="line">            &#125;</span><br><span class="line">            hash &#x3D; h;</span><br><span class="line">        &#125;</span><br><span class="line">        return h;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java终结器</title>
      <link href="/2022/03/20/java%E7%BB%88%E7%BB%93%E5%99%A8/"/>
      <url>/2022/03/20/java%E7%BB%88%E7%BB%93%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：97,阅读全文大约需要1分钟</p><blockquote><p>java.lang.Object里有一个finalize()方法，是空的。一旦重写这个方法对象的声明周期就会产生变化。</p></blockquote><ol><li><p><code>java.lang.ref.Finalizer.ReferenceQueue</code>:实现<code>finalize()</code>方法的对象都会被加入到<code>ReferenceQueue</code>队列中，因为对象一直被引用，所以无法被GC</p></li><li><p><code>finalize()</code>:调用对象的终结器方法即可将对象从队列中删除</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
            <tag> 终结器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java短路与位运算</title>
      <link href="/2022/03/20/java%E7%9F%AD%E8%B7%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>/2022/03/20/java%E7%9F%AD%E8%B7%AF%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p>文章字数：114,阅读全文大约需要1分钟</p><blockquote><p>运算分为逻辑运算与位运算</p></blockquote><h1 id="逻辑运算与位运算"><a href="#逻辑运算与位运算" class="headerlink" title="逻辑运算与位运算"></a>逻辑运算与位运算</h1><ul><li><code>＆＆</code>逻辑和<code>｜｜</code>逻辑或<strong><em>逻辑运算符</em></strong></li><li><code>＆</code>　按位和<code>｜</code>按位或<strong><em>位运算符</em></strong></li></ul><h1 id="逻辑运算与短路"><a href="#逻辑运算与短路" class="headerlink" title="逻辑运算与短路"></a>逻辑运算与短路</h1><ul><li><code>＆＆</code>逻辑与:也叫做短路与,当前项为假，它就不往后判断了，直接认为表达式为假</li><li><code>｜｜</code>逻辑或:也叫做短路或,当前项为真，它也不往后判断了，直接认为表达式为真</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java自定义注解</title>
      <link href="/2022/03/20/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/03/20/java%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>文章字数：630,阅读全文大约需要2分钟</p><h1 id="一、元注解-用于修饰注解"><a href="#一、元注解-用于修饰注解" class="headerlink" title="一、元注解(用于修饰注解)"></a>一、元注解(用于修饰注解)</h1><ol><li><p><code>@Retention</code>指定annotation指定标记注解的存储方式<br>值有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* &#96;RetentionPolicy.SOURCE&#96; 标记的注释仅保留在源级别中，并由编译器忽略。</span><br><span class="line">* &#96;RetentionPolicy.CLASS&#96; 标记的注释在编译时由编译器保留，但Java虚拟机&#96;JVM&#96;会忽略。</span><br><span class="line">* &#96;RetentionPolicy.RUNTIME&#96; 标记的注释由&#96;JVM&#96;保留，因此运行时环境可以使用它。</span><br></pre></td></tr></table></figure></li><li><p><code>@Documented</code>注释表明，无论何时使用指定的注释，都应使用Javadoc工具记录这些元素。(默认情况下，注释不包含在Javadoc)</p></li><li><p><code>@Target</code>注释标记另一个注释，以限制可以应用注释的Java元素类型。目标注释指定以下元素类型之一作为其值<br>可选值有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">* &#96;ElementType.TYPE&#96; 可以应用于类的任何元素。</span><br><span class="line">* &#96;ElementType.FIELD&#96; 可以应用于字段或属性。</span><br><span class="line">* &#96;ElementType.METHOD&#96; 可以应用于方法级注释。</span><br><span class="line">* &#96;ElementType.PARAMETER&#96; 可以应用于方法的参数。</span><br><span class="line">* &#96;ElementType.CONSTRUCTOR&#96; 可以应用于构造函数。</span><br><span class="line">* &#96;ElementType.LOCAL_VARIABLE&#96; 可以应用于局部变量。</span><br><span class="line">* &#96;ElementType.ANNOTATION_TYPE&#96; 可以应用于注释类型。</span><br><span class="line">* &#96;ElementType.PACKAGE&#96; 可以应用于包声明。</span><br><span class="line">* &#96;ElementType.TYPE_PARAMETER&#96;</span><br><span class="line">* &#96;ElementType.TYPE_USE&#96;</span><br></pre></td></tr></table></figure></li><li><p><code>@Inherited</code>注释表明注释类型可以从超类继承。当用户查询注释类型并且该类没有此类型的注释时，将查询类的超类以获取注释类型（默认情况下不是这样）。此注释仅适用于类声明。</p></li><li><p><code>@Repeatable</code>Java SE 8中引入的，<code>@Repeatable</code>注释表明标记的注释可以多次应用于相同的声明或类型使用(即可以重复在同一个类、方法、属性等上使用)。</p></li></ol><h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span> <span class="comment">//javaDoc记录</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//运行环境可用</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;) <span class="comment">//可用于任何元素</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnn &#123;<span class="comment">//自定义一个@Myann(value="")注解</span></span><br><span class="line">  <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通过反射获取注解信息"><a href="#通过反射获取注解信息" class="headerlink" title="通过反射获取注解信息"></a>通过反射获取注解信息</h1><ul><li>判断是否应用的某个注解<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span></span></span><br></pre></td></tr></table></figure></li><li>获取指定类型的注解信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;A extends Annotation&gt; <span class="function">A <span class="title">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span></span></span><br></pre></td></tr></table></figure></li><li>获取所有注解的信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Annotation[] getAnnotations()</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式(创建型5种)</title>
      <link href="/2022/03/20/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%88%9B%E5%BB%BA%E5%9E%8B5%E7%A7%8D)/"/>
      <url>/2022/03/20/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E5%88%9B%E5%BB%BA%E5%9E%8B5%E7%A7%8D)/</url>
      
        <content type="html"><![CDATA[<p>文章字数：630,阅读全文大约需要2分钟</p><h1 id="工厂模式Factory-Pattern"><a href="#工厂模式Factory-Pattern" class="headerlink" title="工厂模式Factory Pattern"></a>工厂模式<code>Factory Pattern</code></h1><ul><li>意图：定义一个创建对象的接口，让子类界定实例化那个工厂类。创建过程在子类执行。</li><li>解决问题：接口的子类实现各不相同，但是需要同一个实例化入口</li></ul><h1 id="抽象工厂Abstract-Factory-Pattern"><a href="#抽象工厂Abstract-Factory-Pattern" class="headerlink" title="抽象工厂Abstract Factory Pattern"></a>抽象工厂<code>Abstract Factory Pattern</code></h1><ul><li>意图：将同类产品的工厂类组合起来，形成一个抽象工厂接口。</li><li>使用步骤：1.通过抽象工厂的实现类获取工厂类（同类工厂在一起） 2.通过工厂类获取对象实体</li></ul><h1 id="单例模式Singleton-Pattern"><a href="#单例模式Singleton-Pattern" class="headerlink" title="单例模式Singleton Pattern"></a>单例模式<code>Singleton Pattern</code></h1><ul><li>意图：保证类只有一个实例，并且提供全局访问点</li><li>实现：判断是否存在实例，存在返回。不存在创建，并用静态变量保存。私有化构造函数，使只有一个入口用于生产实例</li></ul><h1 id="建造者模式Builder-Pattern"><a href="#建造者模式Builder-Pattern" class="headerlink" title="建造者模式Builder Pattern"></a>建造者模式<code>Builder Pattern</code></h1><ul><li>意图：将由多个步骤/节点，组成。每个步骤/节点的内容一样，但是需要不同顺序，数量等组合生成新产品。</li><li>实现：1.拥有不同细节实现类 2.按规则生成并保存细节（List）3.将细节拼接成为一个新的对象</li><li>例子：StringBuilder</li></ul><h1 id="原型模式Prototype-Pattern"><a href="#原型模式Prototype-Pattern" class="headerlink" title="原型模式Prototype Pattern"></a>原型模式<code>Prototype Pattern</code></h1><ul><li>意图：作为创建模式，和工厂模式不同的是该模式的思想是创建一个对象的原型，原型对象可以复制、克隆为新的对象</li><li>实现：原型模式有两种实现</li></ul><ol><li><p><code>浅复制</code>：使用<code>Cloneable.clone()</code>，原型继承<code>Cloneable</code>，然后调用<code>super.clone()</code>进行类型转换。浅复制基本数据类型的变量会创建，其它的对象引用指向原型对象。</p></li><li><p><code>深复制</code>：基本类型和引用类型都重新创建</p></li></ol><p>原型<code>implements Cloneable, Serializable</code></p><p>克隆方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">deepClone</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 写入当前对象的二进制流 */</span></span><br><span class="line">ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(bos);</span><br><span class="line">oos.writeObject(<span class="keyword">this</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 读出二进制流产生的新对象 */</span></span><br><span class="line">ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(bos.toByteArray());</span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(bis);</span><br><span class="line"><span class="keyword">return</span> ois.readObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式概述</title>
      <link href="/2022/03/20/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/03/20/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：792,阅读全文大约需要3分钟</p><blockquote><p>设计模式（Design pattern）是一套被反复使用、多数人知晓的、经过分类编目的、<strong>代码设计经验的总结</strong>。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。</p></blockquote><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>设计模式大致分为三类（23种）：</p><ul><li><p>创建型模式（5种）：工厂方法模式，抽象工厂模式，单例模式，建造者模式，原型模式。</p><blockquote><p>这些设计模式提供了一种创建对象时隐藏创建逻辑的方式，而不是使用<code>new</code>直接实例化。使创建实例更加灵活，创建对象的方式更有引导性。</p></blockquote></li><li><p>结构型模式（7种）：适配器模式，装饰器模式，代理模式，外观模式，桥接模式，组合模式，享元模式。</p></li></ul><ul><li>行为型模式（11种）：策略模式、模板方法模式、观察者模式、迭代器模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</li></ul><h1 id="遵守原则"><a href="#遵守原则" class="headerlink" title="遵守原则"></a>遵守原则</h1><ul><li><p>开闭原则<code>Open Close Principle</code><br>　　对扩展开放，对修改关闭。（程序拓展的时候不能修改原有的代码）</p></li><li><p>里氏代换原则<code>Liskov Substitution Principle</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)子类的能力必须大于等于父类，父类可以使用的方法子类都可以使用</span><br><span class="line">(2)返回值的类型也一样，如父类返回List，子类则可以返回ArrayList</span><br><span class="line">(3)子类只能抛出父类有的异常</span><br></pre></td></tr></table></figure></li><li><p>依赖倒转原则<code>Dependence Inversion Principle</code><br>面向接口编程，依赖抽象而不是依赖具体。</p></li><li><p>接口隔离原则<code>Interface Segregation Principle</code><br>多个隔离的接口比单接口好，降低依赖，降低耦合。</p></li><li><p>迪米特法则（最少知道原则）<code>Demeter Principle</code><br>实体尽量少的与其它实体之间发生相互作用，系统功能相互独立。</p></li><li><p>合成复用原则<code>Composite Reuse Principle</code><br>尽量使用合成/聚合的方法，而不是使用继承。<br>即原本是父类属性的值剥离出来，比如颜色，专门写一个Color类，其中实现相应的方法。在父类和子类中调用这个类。</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式（结构型7种）</title>
      <link href="/2022/03/20/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%BB%93%E6%9E%84%E5%9E%8B7%E7%A7%8D%EF%BC%89/"/>
      <url>/2022/03/20/java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%88%E7%BB%93%E6%9E%84%E5%9E%8B7%E7%A7%8D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1118,阅读全文大约需要4分钟</p><h1 id="适配器模式（Adapter-Pattern）"><a href="#适配器模式（Adapter-Pattern）" class="headerlink" title="适配器模式（Adapter Pattern）"></a>适配器模式（Adapter Pattern）</h1><p>意图：当一个已经在运行的接口因不兼容而不适应新的接口，把一个接口转换成另一个接口。（解决现有对象不满足新环境的需求）</p><p>关键实现：</p><ol><li>新建一个拥有满足新环境需求的接口 </li><li>实现此接口，原有的功能引入原接口实现，然后再实现新功能</li></ol><p>例子： <code>springSession</code>: 实现了<code>HttpSession</code>接口，内部实现使用的是<code>ExpiringSession</code>，并拓展了其它没有的功能。即<code>session</code>信息都保存在<code>ExpiringSession</code>中（老接口），但是需要实现<code>HttpSession</code>（新接口）的功能。</p><h1 id="桥接模式（Bridge-Pattern）"><a href="#桥接模式（Bridge-Pattern）" class="headerlink" title="桥接模式（Bridge Pattern）"></a>桥接模式（Bridge Pattern）</h1><p>意图：创建一段代码时为了保证可拓展性，将抽象部分和实现部分分离，使他们可以单独变换。即一个抽象类，有部分实现了的方法，这些方法组成一个接口，分别不同实现。另外一部分抽象方法留给实现类去实现。</p><p>实现：</p><ol><li>创建已经实现的方法的接口，并分别实现</li><li>创建桥接抽象方法，里面提供构造方法选则不同的已实现接口的实现类</li><li>实现抽象方法，使用内置的接口实现定制内容</li></ol><p>和视频器模式区别：适配器是现有接口改造成新接口，这个是全新的接口为了方便拓展<br>相同：都是接口内置其它的实现类，使用接口操作内置的实现类。</p><h1 id="组合模式-Composite-Pattern"><a href="#组合模式-Composite-Pattern" class="headerlink" title="组合模式(Composite Pattern)"></a>组合模式(Composite Pattern)</h1><p>意图：对象中包含该对象的集合，主要表示对象的一对多关系。总体组成树形结构，可以表示例如董事长-&gt;总经理-&gt;一堆副总-&gt;各部门员工 这样的结构</p><p>实现： 创建一个节点对象，其中包含List,list类型为自身类型。并提供增删改查的方法。</p><h1 id="装饰器模式-Decorator-Pattern"><a href="#装饰器模式-Decorator-Pattern" class="headerlink" title="装饰器模式(Decorator Pattern)"></a>装饰器模式(Decorator Pattern)</h1><p>意图：现有对象添加新的功能，并且不改变原有对象的方法。</p><p>实现：</p><ol><li>继承原有对象的接口，保证创建的新对象符合原有接口的方法规则</li><li>内置原有对象，并调用其基本功能，保证功能的一致</li><li>在原有功能上添加自定义的新功能</li></ol><p>例子：<code>HttpServletRequestWrapper</code>使用装饰模式增强<code>request</code>的功能(参数拦截之类的)</p><h1 id="外观模式-Facade-Pattern"><a href="#外观模式-Facade-Pattern" class="headerlink" title="外观模式(Facade Pattern)"></a>外观模式(Facade Pattern)</h1><p>意图：隐藏系统的复杂性，提供一个接口直接完成复杂操作。</p><p>实现：将一系列一起使用的接口按照使用顺序调用，再放回唯一值。简而言之就是封装</p><h1 id="享元模式-Flyweight-Pattern"><a href="#享元模式-Flyweight-Pattern" class="headerlink" title="享元模式(Flyweight Pattern)"></a>享元模式(Flyweight Pattern)</h1><p>意图：减少对象创建的数量，减少内存占用，提高效率。对象复用。</p><p>实现：创建存储使用过的对象的列表，当需要时从列表中取对象而不是自己重新创建。当然，有很多细节，比如初始对象数量，最大数量，空闲对象存活时间，对象不够用的策略等。</p><p>例子：线程池，连接池</p><h1 id="代理模式-Proxy-Pattern"><a href="#代理模式-Proxy-Pattern" class="headerlink" title="代理模式(Proxy Pattern)"></a>代理模式(Proxy Pattern)</h1><p>意图：当对象直接访问有问题（对象在远程机器上、安全控制、进程外访问、创建开销大）等情况下，提供一个中间层看似和原有类一样，其实做了中间的转换操作。</p><p>实现：</p><ol><li>创建一个新的类，继承需要代理的类的接口，即保持一样的对外方法结构。</li><li>新的类完成中间操作，并访问被代理的类。（远程访问，权限控制，单例等）</li></ol><hr><p>不属于7种，也是结构型</p><h1 id="过滤器模式-Filter-标准模式-Criteria"><a href="#过滤器模式-Filter-标准模式-Criteria" class="headerlink" title="过滤器模式(Filter)/标准模式(Criteria)"></a>过滤器模式(Filter)/标准模式(Criteria)</h1><p>意图：将挑选规则和挑选动作分离，使一个挑选的动作可以选择不同的规则。</p><p>实现：</p><ol><li>定义规则接口，里面有选择规则的函数</li><li>创建类使用规则接口挑选出符合规则的元素</li><li>创建不同的规则（实现规则接口）</li></ol><p>例子：<code>java8</code>的<code>stream.filter(StringUtil::notBlack)</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java调用执行外部程序</title>
      <link href="/2022/03/20/java%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/"/>
      <url>/2022/03/20/java%E8%B0%83%E7%94%A8%E6%89%A7%E8%A1%8C%E5%A4%96%E9%83%A8%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：89,阅读全文大约需要1分钟</p><blockquote><p>java调用外部程序可以使用<code>Runtime.getRuntime().exec()</code>，他会调用一个新的进程去执行。</p></blockquote><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">    　　String cmd = <span class="string">"cmd /c dir c:\\windows"</span>;</span><br><span class="line">    　　<span class="keyword">final</span> Process process = Runtime.getRuntime().exec(cmd);</span><br><span class="line">    　　printMessage(process.getInputStream());</span><br><span class="line">    　　printMessage(process.getErrorStream());</span><br><span class="line">    　　<span class="keyword">int</span> value = process.waitFor();</span><br><span class="line">    　　System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//防止输出流缓存不够导致堵塞，所以开启新的线程读取输出流。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(<span class="keyword">final</span> InputStream input)</span> </span>&#123;</span><br><span class="line">    　　<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">       　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        　　　　Reader reader = <span class="keyword">new</span> InputStreamReader(input);</span><br><span class="line">        　　　　BufferedReader bf = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">        　　　　String line = <span class="keyword">null</span>;</span><br><span class="line">        　　　  <span class="keyword">try</span> &#123;</span><br><span class="line">            　　　　<span class="keyword">while</span>((line=bf.readLine())!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                　　　　System.out.println(line);</span><br><span class="line">            　　　　&#125;</span><br><span class="line">         　　　　&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            　　　　e.printStackTrace();</span><br><span class="line">         　　　 &#125;</span><br><span class="line">        　&#125;</span><br><span class="line">    　　&#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java读取配置文件</title>
      <link href="/2022/03/20/java%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/20/java%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1,阅读全文大约需要1分钟</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">URL resource = Test.class.getClassLoader().getResource("application.properties");</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jpa主键生成策略</title>
      <link href="/2022/03/20/jpa%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5/"/>
      <url>/2022/03/20/jpa%E4%B8%BB%E9%94%AE%E7%94%9F%E6%88%90%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：286,阅读全文大约需要1分钟</p><blockquote><p>主键除了自己设置，还有很多种方法可以让数据库自动生成。将注解写在实体类属性上就可以获得相应功能</p></blockquote><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul><li><code>@GeneratorValue</code>注解—-JPA通用策略生成器</li></ul><ol><li>参数GenerationType<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public enum GenerationType&#123;    </span><br><span class="line"> </span><br><span class="line">    TABLE,    &#x2F;&#x2F;特定表生成 见3</span><br><span class="line"> </span><br><span class="line">    SEQUENCE,    &#x2F;&#x2F;数据库底层 见4</span><br><span class="line"> </span><br><span class="line">    IDENTITY,    &#x2F;&#x2F;自增序列生成</span><br><span class="line"> </span><br><span class="line">    AUTO   &#x2F;&#x2F;默认，自动选择</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>参数generator:其它生成器的名字，配合<code>@GenericGenerator</code>使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@GeneratedValue(generator&#x3D;&quot;system-uuid&quot;)&#x2F;&#x2F;关联system-uuid</span><br><span class="line">@GenericGenerator(name&#x3D;&quot;system-uuid&quot;, strategy &#x3D; &quot;uuid&quot;)</span><br><span class="line">&#x2F;&#x2F;system-uuid策略是uuid 还可以是uuid.hex（16进制）共12种策略</span><br></pre></td></tr></table></figure></li><li>TABLE生成策略使用<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Id</span><br><span class="line">@Column(name&#x3D;&quot;id&quot;)</span><br><span class="line">@GeneratedValue(strategy&#x3D;GenerationType.TABLE,generator&#x3D;&quot;table_gen&quot;)</span><br><span class="line">@TableGenerator(</span><br><span class="line">name &#x3D; &quot;table_gen&quot;,  </span><br><span class="line">table&#x3D;&quot;fendo_generator&quot;,  </span><br><span class="line">pkColumnName&#x3D;&quot;seq_name&quot;,     &#x2F;&#x2F;指定主键的名字</span><br><span class="line">pkColumnValue&#x3D;&quot;fendos&quot;,      &#x2F;&#x2F;指定下次插入主键时使用默认的值</span><br><span class="line">valueColumnName&#x3D;&quot;seq_id&quot;,    &#x2F;&#x2F;该主键当前所生成的值，它的值将会随着每次创建累加</span><br><span class="line">initialValue &#x3D; 1,            &#x2F;&#x2F;初始化值</span><br><span class="line">allocationSize&#x3D;1             &#x2F;&#x2F;累加值</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>SEQUENCE使用<blockquote><p>部分数据库(Oracle,PostgreSQL,DB2)支持序列对象,因为其不支持主键自增，所以这是自增的补充方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Id  </span><br><span class="line">@GeneratedValue(strategy &#x3D; GenerationType.SEQUENCE,generator&#x3D;&quot;fendo_seq&quot;)  </span><br><span class="line">@SequenceGenerator(name&#x3D;&quot;fendo_seq&quot;, sequenceName&#x3D;&quot;seq_name&quot;)</span><br></pre></td></tr></table></figure></li></ol><ul><li><code>@GenericGenerator</code>注解—-自定义主键生成策略<br>可选部分<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">GENERATORS.put(&quot;uuid&quot;, UUIDHexGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;hilo&quot;, TableHiLoGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;assigned&quot;, Assigned.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;identity&quot;, IdentityGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;select&quot;, SelectGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;sequence&quot;, SequenceGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;seqhilo&quot;, SequenceHiLoGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;increment&quot;, IncrementGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;foreign&quot;, ForeignGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;guid&quot;, GUIDGenerator.class);  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;uuid.hex&quot;, UUIDHexGenerator.class); &#x2F;&#x2F;uuid.hex is deprecated  </span><br><span class="line"></span><br><span class="line"> GENERATORS.put(&quot;sequence-identity&quot;, SequenceIdentityGenerator.class);</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java自动化测试</title>
      <link href="/2022/03/20/java%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/03/20/java%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：474,阅读全文大约需要1分钟</p><blockquote><p>java.awt.Robot 提供模拟点击，模拟用户输入等操作</p></blockquote><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.InputEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.KeyEvent;</span><br></pre></td></tr></table></figure><h1 id="键盘操作"><a href="#键盘操作" class="headerlink" title="键盘操作"></a>键盘操作</h1><ol><li>按下按键</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * keycode:KeyEvent.VK_PAGE_UP</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">pressSingleKeyByNumber</span><span class="params">(<span class="keyword">int</span> keycode)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/** 创建自动化测试对象  */</span></span><br><span class="line">        Robot robot = <span class="keyword">new</span> Robot();</span><br><span class="line">        <span class="comment">/**按下按键*/</span></span><br><span class="line">        robot.keyPress(keycode);</span><br><span class="line">        <span class="comment">/**松开按键*/</span></span><br><span class="line">        robot.keyRelease(keycode);</span><br><span class="line">        <span class="comment">/**可以稍作延时处理*/</span></span><br><span class="line">        robot.delay(<span class="number">500</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AWTException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>组合键<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先按下control再按下其它，松开其它再松开control</span></span><br><span class="line">        Robot robot = <span class="keyword">new</span> Robot();</span><br><span class="line">        robot.keyPress(KeyEvent.VK_CONTROL);</span><br><span class="line">        robot.keyPress(keycode);</span><br><span class="line">        robot.keyRelease(keycode);</span><br><span class="line">        robot.keyRelease(KeyEvent.VK_CONTROL);</span><br><span class="line">        robot.delay(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li></ol><h1 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h1><ol><li>点击</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟用户单击屏幕指定区域,默认单击屏幕最中央</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x：x坐标</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y：y坐标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clickScreenByXY</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**创建工具包对象*/</span></span><br><span class="line">        Toolkit toolkit = Toolkit.getDefaultToolkit();</span><br><span class="line">        <span class="comment">/**创建自动化对象*/</span></span><br><span class="line">        Robot robot = <span class="keyword">new</span> Robot();</span><br><span class="line">        <span class="comment">/**利用工具包对象获取屏幕分辨率*/</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x = toolkit.getScreenSize().width / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = toolkit.getScreenSize().height / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 移动鼠标到指定位置</span></span><br><span class="line"><span class="comment">         * 然后按下鼠标左键，再松开，模拟单击操作</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        robot.mouseMove(x, y);</span><br><span class="line">        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);</span><br><span class="line">        robot.delay(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AWTException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>移动鼠标</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自动将鼠标移动到指定的位置</span></span><br><span class="line"><span class="comment"> * 如果参数x与y为null,则默认将鼠标放在屏幕右侧中间隐藏</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x：x坐标 ,左上角 为0----设定值超过屏幕分辨率也没关系</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> y：y坐标 ,左上角 为0----设定值超过屏幕分辨率也没关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">mouseMoveToXY</span><span class="params">(Integer x, Integer y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/**创建工具包对象*/</span></span><br><span class="line">        Toolkit toolkit = Toolkit.getDefaultToolkit();</span><br><span class="line">        <span class="comment">/**创建自动化对象*/</span></span><br><span class="line">        Robot robot = <span class="keyword">new</span> Robot();</span><br><span class="line">        <span class="comment">/**利用工具包对象获取屏幕分辨率*/</span></span><br><span class="line">        <span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">            x = toolkit.getScreenSize().width;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (y == <span class="keyword">null</span>) &#123;</span><br><span class="line">            y = toolkit.getScreenSize().height / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 移动鼠标到指定位置</span></span><br><span class="line"><span class="comment">         *  robot.delay(100);延时100毫秒</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        robot.mouseMove(x, y);</span><br><span class="line">        robot.delay(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AWTException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用按键"><a href="#常用按键" class="headerlink" title="常用按键"></a>常用按键</h1><blockquote><p>按键都在 KeyEvent类中，和键盘对应</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java高效编码</title>
      <link href="/2022/03/20/java%E9%AB%98%E6%95%88%E7%BC%96%E7%A0%81/"/>
      <url>/2022/03/20/java%E9%AB%98%E6%95%88%E7%BC%96%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：846,阅读全文大约需要3分钟</p><h1 id="构造器参数太多"><a href="#构造器参数太多" class="headerlink" title="构造器参数太多"></a>构造器参数太多</h1><ol><li>需要解决成员变量太多，使用多个构造方法不直观的问题</li><li>直接使用get set无法限制bean中那些数据是必要的</li></ol><ul><li>解决方法：<code>Builder</code>模式</li><li>内部使用一个子类作为构造器</li><li>构造器的get set返回本身，这样可以链式调用</li><li>最终的构造方法里检测必要的字段是否有值</li></ul><h1 id="不需要实例化的对象，构造器私有"><a href="#不需要实例化的对象，构造器私有" class="headerlink" title="不需要实例化的对象，构造器私有"></a>不需要实例化的对象，构造器私有</h1><ul><li><code>xxxUtil</code> <code>xxTools</code> 内部都是<code>static</code>方法，不需要实例化</li><li>防止使用者实例该对象</li></ul><h1 id="不要创建多余对象"><a href="#不要创建多余对象" class="headerlink" title="不要创建多余对象"></a>不要创建多余对象</h1><ul><li>自动装箱导致的多余对象<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Long sum = <span class="number">0L</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">long</span> i = <span class="number">0</span>; i&lt;xx; i++) &#123;</span><br><span class="line">  sum = sum + i; <span class="comment">// sum是包装类型，i是基本类型，所以这里会先自动装箱成对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用static</li></ul><h1 id="避免使用终结方法"><a href="#避免使用终结方法" class="headerlink" title="避免使用终结方法"></a>避免使用终结方法</h1><ul><li>finaliza()方法虚拟机不保证此方法会被按时执行或是执行</li><li>释放资源必须显式释放，不能依赖此方法</li></ul><h1 id="类和成员变量可访问性最小化"><a href="#类和成员变量可访问性最小化" class="headerlink" title="类和成员变量可访问性最小化"></a>类和成员变量可访问性最小化</h1><ul><li>主要作用是为了解耦</li><li>只向外暴露接口，实体间调用只依赖与接口，具体实现解耦</li></ul><h1 id="可变性最小化"><a href="#可变性最小化" class="headerlink" title="可变性最小化"></a>可变性最小化</h1><ul><li>类尽量做成不可变类</li><li>类不可变就线程安全了</li><li>类成员变量私有，不提供成员变量设置，返回对象时返回复制的值等</li></ul><h1 id="优先使用复合，而不是继承"><a href="#优先使用复合，而不是继承" class="headerlink" title="优先使用复合，而不是继承"></a>优先使用复合，而不是继承</h1><ul><li>使用父类的方法会破坏父类的包装性</li><li>例如父类实现类内部相互调用，重写一个方法都可能影响其他方法</li><li>复合就是内部包含一个类，使用这个类完成具体方法</li></ul><h1 id="接口优于抽象类"><a href="#接口优于抽象类" class="headerlink" title="接口优于抽象类"></a>接口优于抽象类</h1><ul><li>一般来说，接口只能定义类将会有的行为，抽象类里可以具体实现</li><li>接口更为纯粹，不依赖于具体实现，而抽象类可以有实现。并且支持多实现</li><li>可以先定义一个接口，再声明一个抽象类，实现类继承这两个（jdk的set等都是这么实现的）</li></ul><h1 id="可变参数的使用"><a href="#可变参数的使用" class="headerlink" title="可变参数的使用"></a>可变参数的使用</h1><ul><li>如果可变参数中至少要一个参数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>... args)</span></span></span><br></pre></td></tr></table></figure><h1 id="返回零长度的数组和集合，而不是null"><a href="#返回零长度的数组和集合，而不是null" class="headerlink" title="返回零长度的数组和集合，而不是null"></a>返回零长度的数组和集合，而不是null</h1><ul><li>客户端可以用判空</li></ul><h1 id="优先使用标准异常"><a href="#优先使用标准异常" class="headerlink" title="优先使用标准异常"></a>优先使用标准异常</h1><ul><li>代码重用，使用jdk已经提供的</li><li><code>IlegalAraumentException</code> 参数异常</li></ul><h1 id="使用枚举而不-是常量"><a href="#使用枚举而不-是常量" class="headerlink" title="使用枚举而不 是常量"></a>使用枚举而不 是常量</h1><ul><li>还可以枚举内使用另一个内部枚举当作构造方法参数，以使枚举有不同的性质</li><li>即策略枚举</li></ul><h1 id="局部变量作用域最小化"><a href="#局部变量作用域最小化" class="headerlink" title="局部变量作用域最小化"></a>局部变量作用域最小化</h1><ul><li>即不要一开始就声明局部变量，要到使用的时候再使用</li><li>防止不应该使用局部变量的地方能够修改局部变量</li></ul><h1 id="精确计算不适用float和double"><a href="#精确计算不适用float和double" class="headerlink" title="精确计算不适用float和double"></a>精确计算不适用float和double</h1><ul><li>使用 int long BigDecimal</li></ul><h1 id="当心字符串连接的性能"><a href="#当心字符串连接的性能" class="headerlink" title="当心字符串连接的性能"></a>当心字符串连接的性能</h1><ul><li>每一次拼接都需要将字符串复制一遍 </li></ul><h1 id="控制方法的大小"><a href="#控制方法的大小" class="headerlink" title="控制方法的大小"></a>控制方法的大小</h1><ul><li>方法尽量再50-80行 </li></ul><h1 id="常用性能指标"><a href="#常用性能指标" class="headerlink" title="常用性能指标"></a>常用性能指标</h1><ul><li>并发数约等于在线人数的5%-15% </li><li>吞吐量 每分钟、没秒钟处理数量</li><li>一般平均响应时间短，吞吐量就大，反之小。但是吞吐量大，响应时间未必短</li></ul><h1 id="常见性能优化"><a href="#常见性能优化" class="headerlink" title="常见性能优化"></a>常见性能优化</h1><ul><li>避免过早优化</li><li>性能测试，定位性能瓶颈</li><li>分而治之，逐步优化</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa刷新模式</title>
      <link href="/2022/03/20/jpa%E5%88%B7%E6%96%B0%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/03/20/jpa%E5%88%B7%E6%96%B0%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：94,阅读全文大约需要1分钟</p><blockquote><p>FlushMode提供了4种缓存模式：MANUAL、COMMIT、AUTO和ALWAYS。使用<code>setFlushModel</code>切换</p></blockquote><ul><li><code>MANUAL</code> 必须手动调用<code>flush()</code></li><li><code>COMMIT</code> 事物提交才会</li><li><code>AUTO</code> 事务提交或者手动刷新，都能将脏数据同步到数据库。除此之外，某些查询出现的时候也会导致缓存刷新。（不过不是很智能）</li><li><code>ALWAYS</code>总是，一般不用</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa基本原理</title>
      <link href="/2022/03/20/jpa%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
      <url>/2022/03/20/jpa%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：95,阅读全文大约需要1分钟</p><ol><li><code>spring</code>在创建时会搜索所有的<code>JpaRepository</code>，并使用<code>SimpleJpaRepository</code>作为其实现类</li><li><code>SimpleJpaRepository</code>的构造方法接收一个<code>EntityManager</code>，是<code>spring</code>在创建初期就注入了<code>EntityManagerFactory</code>，并生成了一个<code>EntityManager</code>并传入</li><li><code>EntityManager</code>创建<code>Query</code>对象</li><li><code>Query</code>对象<code>getResultList()</code>获取结果（获取一次就关闭了，所以需要及时保存结果）</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa分页</title>
      <link href="/2022/03/20/jpa%E5%88%86%E9%A1%B5/"/>
      <url>/2022/03/20/jpa%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：204,阅读全文大约需要1分钟</p><blockquote><p><code>jpa</code>提供了分页查询的接口，之前使用<code>limit</code>进行分页，但是某些数据库（<code>SQLServer</code>）不支持<code>limit</code>语句，为了兼容于是想到<code>jpa</code>自带的方法</p></blockquote><h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//排序方式，根据id升序</span></span><br><span class="line">Sort sort = <span class="keyword">new</span> Sort(Sort.Direction.ASC,<span class="string">"id"</span>);</span><br><span class="line"><span class="comment">//从第0页，每页数据10条，按照sort指定的方式排序</span></span><br><span class="line">Pageable pageable= <span class="keyword">new</span> PageRequest(<span class="number">0</span>,<span class="number">10</span>,sort );</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line">Page&lt;Model&gt; modelPage = modelDao.findAll(pageable);</span><br></pre></td></tr></table></figure><h1 id="结果使用"><a href="#结果使用" class="headerlink" title="结果使用"></a>结果使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getTotalPages()  总共有多少页</span><br><span class="line">getTotalElements()   总共有多少条数据</span><br><span class="line">getNumber() 获取当前页码</span><br><span class="line">getSize() 每页指定有多少元素</span><br><span class="line">getNumberOfElements() 当前页实际有多少元素</span><br><span class="line">hasContent() 当前页是否有数据</span><br><span class="line">getContent() 获取当前页中所有数据（List&lt;T&gt;）</span><br><span class="line">getSort() 获取分页查询排序规则</span><br><span class="line">isFirst() 当前页是否是第一页</span><br><span class="line">isLast() 当前页是否是最后一页</span><br><span class="line">hasPrevious() 是否有上一页</span><br><span class="line">hasNext() 是否有下一页</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa实体关联</title>
      <link href="/2022/03/20/jpa%E5%AE%9E%E4%BD%93%E5%85%B3%E8%81%94/"/>
      <url>/2022/03/20/jpa%E5%AE%9E%E4%BD%93%E5%85%B3%E8%81%94/</url>
      
        <content type="html"><![CDATA[<p>文章字数：691,阅读全文大约需要2分钟</p><blockquote><p>实体间关联有<code>@OneToOne</code>、<code>@OneToMany</code> or <code>@ManyToOne</code>、<code>ManyToMany</code>三种关系。其中，联机操作时只能One端操作Many端，代码层面则是<code>cascade = CascadeType.ALL</code>只能写在One端。One端删除，修改可以影响到Many端。反之则不允许。</p></blockquote><h1 id="一、-OneToOne关系映射"><a href="#一、-OneToOne关系映射" class="headerlink" title="一、@OneToOne关系映射"></a>一、@OneToOne关系映射</h1><blockquote><p>一个人有一个地址，就是一对一关系。其中people表的<strong>地址id</strong>对应<strong>地址表的id</strong></p></blockquote><p><strong>1.1 通过外键关联一对一关系</strong></p><p>people（id,name,<strong>addressId</strong>）<br>address(<strong>id</strong>,phone,city,address)</p><p><code>People.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//People是关系的维护端，当删除 people，会级联删除 address。默认不联级。</span></span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade=CascadeType.ALL)</span><br><span class="line">    <span class="comment">//加入表中的字段(name)addressId,参考对应Address的id(referencedColumnName )</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"addressId"</span>, referencedColumnName = <span class="string">"id"</span>)</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Address.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"phone"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">11</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"city"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">6</span>)</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"address"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">100</span>)</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1.2 通过关联表保持</strong><br>People(<strong>id</strong>,name)<br>Address(<strong>id</strong>,address)<br>PeopleAddr(<strong>PeopleId</strong>,<strong>addrId</strong>)关联表</p><p><code>People.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">true</span>, length = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@OneToOne</span>(cascade=CascadeType.ALL)<span class="comment">//People是关系的维护端</span></span><br><span class="line">    <span class="meta">@JoinTable</span>(name = <span class="string">"PeopleAddr"</span>,<span class="comment">//关系表名</span></span><br><span class="line">            joinColumns = <span class="meta">@JoinColumn</span>(name=<span class="string">"PeopleId"</span>),<span class="comment">//对应当前主键的</span></span><br><span class="line">            inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"addressId"</span>))<span class="comment">//对应关联表的id的字段</span></span><br><span class="line">    <span class="keyword">private</span> Address address;<span class="comment">//关联表-地址实体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、-OneToMany-和-ManyToOne"><a href="#二、-OneToMany-和-ManyToOne" class="headerlink" title="二、@OneToMany 和 @ManyToOne"></a>二、@OneToMany 和 @ManyToOne</h1><blockquote><p>一个班级有很多同学（一对多），班级被删除班上的同学的数据也没了（联级删除，默认没有）。删除同学的数据不会影响到班级（many不能影响one）</p></blockquote><p><code>myClass.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">// 主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY) <span class="comment">// 自增长策略</span></span><br><span class="line">    <span class="keyword">private</span> Long id; <span class="comment">//id</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@NotEmpty</span>(message = <span class="string">"姓名不能为空"</span>)</span><br><span class="line">    <span class="meta">@Column</span>(nullable = <span class="keyword">false</span>, length = <span class="number">20</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//指定Article的author字段关联id,mappedBy还代表放弃维护关系。即当自身修改删除时不会触发关联对象的相应操作。对应的，由对方维护。即文章修改了，作者对象下的文章列表也会相应修改。</span></span><br><span class="line">    <span class="comment">//fetch=FetchType.LAZY 懒加载，不会马上加载。对于马上要用的可以设置马上加载</span></span><br><span class="line">    <span class="comment">//mappendBy和JoinColumn相比一个放弃维护，另一个是建立联系（一端放弃，另一端建立）</span></span><br><span class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"author"</span>,cascade=CascadeType.ALL,fetch=FetchType.LAZY)</span><br><span class="line">    <span class="keyword">private</span> List&lt;Article&gt; articleList;<span class="comment">//文章列表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Article.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Article</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ManyToOne</span>(cascade=&#123;CascadeType.MERGE,CascadeType.REFRESH&#125;,optional=<span class="keyword">false</span>)<span class="comment">//可选属性optional=false,表示author不能为空。删除文章，不影响用户</span></span><br><span class="line">    <span class="meta">@JoinColumn</span>(name=<span class="string">"author_id"</span>)<span class="comment">//设置在article表中的关联字段(外键)</span></span><br><span class="line">    <span class="keyword">private</span> Author author;<span class="comment">//所属作者</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、-ManyToMany"><a href="#三、-ManyToMany" class="headerlink" title="三、@ManyToMany"></a>三、@ManyToMany</h1><ul><li>由其中一端维护关系</li><li>被维护的一端无法直接删除，需要解除关系后才能删除。或者直接删除维护的一端，关系自动解除。</li><li><code>User.getAuthority().remove(authority)</code>解除关系</li><li><code>User.setAuthorities(authorities)</code>绑定关系</li><li>多对多一般不设置联级操作</li></ul><p>用户和权限组的例子就是多对多<br><code>User.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToMany</span></span><br><span class="line"><span class="meta">@JoinTable</span>(name = <span class="string">"user_authority"</span>,joinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"user_id"</span>),</span><br><span class="line">inverseJoinColumns = <span class="meta">@JoinColumn</span>(name = <span class="string">"authority_id"</span>))</span><br><span class="line"><span class="keyword">private</span> List&lt;Authority&gt; authorityList;</span><br></pre></td></tr></table></figure><ul><li>不使用@JoinTable注解，默认生成的关联表名称为主表表名+下划线+从表表名<code>user_authority</code></li><li>关联到主表的外键名：主表名+下划线+主表中的主键列名<code>user_id</code></li><li>关联到从表的外键名：主表中用于关联的属性名+下划线+从表的主键列名<code>authority_id</code></li><li>主表就是关系维护端对应的表，从表就是关系被维护端对应的表</li></ul><p><code>Authority.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ManyToMany</span>(mappedBy = <span class="string">"authorityList"</span>)</span><br><span class="line"><span class="keyword">private</span> List&lt;User&gt; userList;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa实体类字段转换</title>
      <link href="/2022/03/20/jpa%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%AD%97%E6%AE%B5%E8%BD%AC%E6%8D%A2/"/>
      <url>/2022/03/20/jpa%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%AD%97%E6%AE%B5%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>文章字数：107,阅读全文大约需要1分钟</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><pre><code>用于数据库属性和java实体类直接转换，例如枚举，在数据库中存储或者读取都需要转换，此方法就是自动转换的方法。</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>实现一个<code>AttributeConverter&lt;X, Y&gt;</code>接口的类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AttributeConverter</span>&lt;<span class="title">X</span>,<span class="title">Y</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  转换需要存入数据库的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Y <span class="title">convertToDatabaseColumn</span> <span class="params">(X attribute)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库读出，写入实体类的数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> X <span class="title">convertToEntityAttribute</span> <span class="params">(Y dbData)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在<code>jpa</code>实体类字段上使用<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="meta">@Convert</span>(converter = XxxConverter<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">private</span> <span class="title">myEnum</span> <span class="title">test</span></span>;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa环境搭建</title>
      <link href="/2022/03/20/jpa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/03/20/jpa%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：249,阅读全文大约需要1分钟</p><blockquote><p>搭建一个基础的jpa</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p><code>pom.xml</code>中加入依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="model层"><a href="#model层" class="headerlink" title="model层"></a>model层</h1><p>主要作用是和数据库映射的实体类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;用lombok或者自己写get和set</span><br><span class="line">@Getter</span><br><span class="line">@Setter</span><br><span class="line">@Entity &#x2F;&#x2F;标注给spring</span><br><span class="line">public class User&#123;</span><br><span class="line">  @Id      </span><br><span class="line">  @GeneratedValue(strategy&#x3D;GenerationType.AUTO)</span><br><span class="line">  private String id;&#x2F;&#x2F;id,自增</span><br><span class="line">  private String name;&#x2F;&#x2F;其它属性自动关联</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h1><p>数据库操作，一个model对应一个Dao</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;&lt;实体类model,id类型&gt;</span><br><span class="line">public interface UserDao extends JpaRepository&lt;User, String&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承之后基本的增删改查功能都具备了</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>application.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;123456</span><br><span class="line">spring.datasource.driver-class-name&#x3D;com.mysql.jdbc.Driver</span><br><span class="line"># 每次运行创建新的表</span><br><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto&#x3D;create</span><br><span class="line"># validate 每次运行时验证表结构</span><br><span class="line"># create 每次新建</span><br><span class="line"># create-drop 加载创建，退出删除</span><br><span class="line"># update 追加更新</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa规则</title>
      <link href="/2022/03/20/jpa%E8%A7%84%E5%88%99/"/>
      <url>/2022/03/20/jpa%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：236,阅读全文大约需要1分钟</p><h1 id="常用规则"><a href="#常用规则" class="headerlink" title="常用规则"></a>常用规则</h1><table><thead><tr><th align="center">NO</th><th align="center">关键词</th><th>实例</th><th>sql</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">And</td><td>findByNameAndAge</td><td>where name=?1 and age=?2</td></tr><tr><td align="center">2</td><td align="center">Or</td><td>findByLastnameOrFirstname</td><td>where lastname=?1 or firstname=2?</td></tr><tr><td align="center">3</td><td align="center">Is,Equals</td><td>findByFirstnameIs;等于findByFirstname</td><td>where name=?1</td></tr><tr><td align="center">4</td><td align="center">Between</td><td>findByStartDateBetween</td><td>where startDate between ?1 and ?2</td></tr><tr><td align="center">5</td><td align="center">LessThan</td><td>findByAgeLessThan</td><td>where age &lt; ?1</td></tr><tr><td align="center">6</td><td align="center">LessThanEqual</td><td>findByAgeLessThanEqual</td><td>where age&lt;= ?1</td></tr><tr><td align="center">7</td><td align="center">GreaterThan</td><td>findByAgeGreaterThan</td><td>where age &gt;?1</td></tr><tr><td align="center">8</td><td align="center">GreaterThanEqual</td><td>findByAgeGreaterThanEqual</td><td>where age &gt;= ?1</td></tr><tr><td align="center">9</td><td align="center">After</td><td>findByStartDateAfter</td><td>where startDate &gt; ?1</td></tr><tr><td align="center">10</td><td align="center">Before</td><td>findByStartDateBefore</td><td>where startDate &lt; ?1</td></tr><tr><td align="center">11</td><td align="center">IsNull</td><td>findByAgeIsNull</td><td>where age is null</td></tr><tr><td align="center">12</td><td align="center">IsNotNull/NotNull</td><td>findByAge(Is)NotNull</td><td>where age not null</td></tr><tr><td align="center">13</td><td align="center">Like</td><td>findByFirstnameLike</td><td>where firstname like ?1</td></tr><tr><td align="center">14</td><td align="center">NotLike</td><td>findByFirstnameNotLike</td><td>where firstname not like ?1</td></tr><tr><td align="center">15</td><td align="center">StartingWith</td><td>findByFirstnameStartingWith</td><td>where firstname like ?1(参数前加上%)</td></tr><tr><td align="center">16</td><td align="center">EndingWith</td><td>findByFirstnameEndingWith</td><td>where firstname like ?1(参数后加%)</td></tr><tr><td align="center">17</td><td align="center">Containing</td><td>findByFirstnameContaining</td><td>where first like ?1(参数前后%)</td></tr><tr><td align="center">18</td><td align="center">OrderBy</td><td>findByAgeOrderByLastNameDesc</td><td>where age = ?1 order by lastname desc</td></tr><tr><td align="center">19</td><td align="center">Not</td><td>findByLastnameNot</td><td>where lastname != ?1</td></tr><tr><td align="center">20</td><td align="center">In</td><td>findByAgeIn(Collection<Age> ages)</td><td>where age in ?1</td></tr><tr><td align="center">21</td><td align="center">NotIn</td><td>findByAgeNotIn(Collection<Age> age)</td><td>where age not in ?1</td></tr><tr><td align="center">22</td><td align="center">TRUE</td><td>findByActiveTrue()</td><td>where active = true</td></tr><tr><td align="center">23</td><td align="center">FALSE</td><td>findByActiveFalse()</td><td>where active=false</td></tr><tr><td align="center">24</td><td align="center">IgnoreCase(忽略大小写)</td><td>findByFirsrnameIgnoreCase</td><td>where UPPER(firstname) = UPPER(?1)//转为大写</td></tr><tr><td align="center">25</td><td align="center">existsBy</td><td>existsByUserId(long userId)</td><td>where exists(..where userid=?1)</td></tr></tbody></table><h1 id="排序分页"><a href="#排序分页" class="headerlink" title="排序分页"></a>排序分页</h1><p>方法最后一个参数是<code>Sort</code>或者<code>Pageable</code>会提取信息进行排序或分页</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Page <span class="title">findAll</span><span class="params">(new PageRequest(pageNo,pageSize)</span>)</span></span><br></pre></td></tr></table></figure><ul><li><strong>排序</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Cus&gt; <span class="title">findBySexOrderByName</span><span class="params">(String sex)</span></span>; <span class="comment">//名称正序（正序时，推荐此方式，简单）</span></span><br><span class="line"><span class="function">List&lt;Cus&gt; <span class="title">findBySexOrderByNameAsc</span><span class="params">(String sex)</span></span>; <span class="comment">//名称正序（效果同上）</span></span><br><span class="line"><span class="function">List&lt;Cus&gt; <span class="title">findBySexOrderByNameDesc</span><span class="params">(String sex)</span></span>; <span class="comment">//名称倒序</span></span><br></pre></td></tr></table></figure></li><li><strong>条数限制</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Resource <span class="title">findFirstByFather_idOrderByOrderNumDesc</span><span class="params">(Long fatherId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">findFirstByOrderByLastnameAsc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">User <span class="title">findTopByOrderByAgeDesc</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Page&lt;User&gt; <span class="title">queryFirst10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Slice&lt;User&gt; <span class="title">findTop3ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findFirst10ByLastname</span><span class="params">(String lastname, Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">findTop10ByLastname</span><span class="params">(String lastname, Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure></li><li><strong>计数</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Long <span class="title">countByLastname</span><span class="params">(String lastname)</span></span>;</span><br></pre></td></tr></table></figure></li><li><strong>删除</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteByProject_Id</span><span class="params">(Long id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteByProject_Cus_id</span><span class="params">(Long id)</span></span>;</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JPA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jquery-validate表单验证</title>
      <link href="/2022/03/20/jquery-validate%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/"/>
      <url>/2022/03/20/jquery-validate%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：515,阅读全文大约需要2分钟</p><blockquote><p>jquery.validate.min.js 是一款基于jq的表单验证工具。找到的教程大部分都是同步提交下的使用，以下是我找到的ajax提交方式下的使用。</p></blockquote><h1 id="使用内置验证规则"><a href="#使用内置验证规则" class="headerlink" title="使用内置验证规则"></a>使用内置验证规则</h1><ol><li><p>为表单添加表单验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#cForm&quot;).validate();</span><br></pre></td></tr></table></figure><p>表单验证错误信息输出位置自定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- input是表单的输入框 --&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;inputMain&quot;&gt;用户名：&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; &#x2F;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- for和input的name绑定 --&gt;</span><br><span class="line">&lt;div style&#x3D;&quot;height:20px;&quot;&gt;&lt;label id&#x3D;&quot;user-error&quot; class&#x3D;&quot;error&quot; for&#x3D;&quot;user&quot;&gt;&lt;&#x2F;label&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li><li><p>添加规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#cForm input[name&#x3D;&#39;name&#39;]&quot;).rules(&quot;add&quot;,&#123;required: true&#125;) &#x2F;&#x2F;规则的意思是必填</span><br></pre></td></tr></table></figure></li></ol><p>3.ajax前验证</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if($(&quot;#categoryForm&quot;).valid())&#123;&#x2F;&#x2F;验证并返回结果</span><br><span class="line">    &#x2F;&#x2F;ajax...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>规则和验证信息自定义可以自己百度，信息不写会有默认规则。</p></blockquote><p>附较为详细的规则及自定义提示信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">$().ready(function() &#123;</span><br><span class="line">&#x2F;&#x2F; 在键盘按下并释放及提交后验证提交表单</span><br><span class="line">  $(&quot;#signupForm&quot;).validate(&#123;</span><br><span class="line">    rules: &#123;</span><br><span class="line">      firstname: &quot;required&quot;,</span><br><span class="line">      lastname: &quot;required&quot;,</span><br><span class="line">      username: &#123;</span><br><span class="line">        required: true,</span><br><span class="line">        minlength: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      password: &#123;</span><br><span class="line">        required: true,</span><br><span class="line">        minlength: 5</span><br><span class="line">      &#125;,</span><br><span class="line">      confirm_password: &#123;</span><br><span class="line">        required: true,</span><br><span class="line">        minlength: 5,</span><br><span class="line">        equalTo: &quot;#password&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      email: &#123;</span><br><span class="line">        required: true,</span><br><span class="line">        email: true</span><br><span class="line">      &#125;,</span><br><span class="line">      topic: &#123;</span><br><span class="line">        required: &quot;#newsletter:checked&quot;,</span><br><span class="line">        minlength: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      agree: &quot;required&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    messages: &#123;</span><br><span class="line">      firstname: &quot;请输入您的名字&quot;,</span><br><span class="line">      lastname: &quot;请输入您的姓氏&quot;,</span><br><span class="line">      username: &#123;</span><br><span class="line">        required: &quot;请输入用户名&quot;,</span><br><span class="line">        minlength: &quot;用户名必需由两个字母组成&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      password: &#123;</span><br><span class="line">        required: &quot;请输入密码&quot;,</span><br><span class="line">        minlength: &quot;密码长度不能小于 5 个字母&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      confirm_password: &#123;</span><br><span class="line">        required: &quot;请输入密码&quot;,</span><br><span class="line">        minlength: &quot;密码长度不能小于 5 个字母&quot;,</span><br><span class="line">        equalTo: &quot;两次密码输入不一致&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      email: &quot;请输入一个正确的邮箱&quot;,</span><br><span class="line">      agree: &quot;请接受我们的声明&quot;,</span><br><span class="line">      topic: &quot;请选择两个主题&quot;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="自定义验证规则"><a href="#自定义验证规则" class="headerlink" title="自定义验证规则"></a>自定义验证规则</h1><blockquote><p>其他操作参考上面</p></blockquote><ol><li>添加规则<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jQuery.validator.addMethod(&quot;validName&quot;, function(value, element)&#123;</span><br><span class="line">    var obValue&#x3D;value;&#x2F;&#x2F;对象的值</span><br><span class="line">    var ob&#x3D;element;&#x2F;&#x2F;需要处理的对象</span><br><span class="line">    return true;</span><br><span class="line">&#125;, &quot;提示信息&quot;);</span><br></pre></td></tr></table></figure></li></ol><p>2.为表单元素添加规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#nameInput&quot;).rules(&quot;add&quot;,&#123;</span><br><span class="line">      validName:true; &#x2F;&#x2F;规则名：期望值（未达到期望值提示自定义的错误信息）</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>3.传参</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$.validator.addMethod(&quot;af&quot;,function(value,element,params)&#123;  </span><br><span class="line">    if(value.length&gt;1)&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">    if(value&gt;&#x3D;params[0] &amp;&amp; value&lt;&#x3D;params[1])&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,&quot;必须是一个字母,且a-f&quot;);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username:&#123;</span><br><span class="line">   af:[&quot;a&quot;,&quot;f&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其它方式提交表单"><a href="#其它方式提交表单" class="headerlink" title="其它方式提交表单"></a>其它方式提交表单</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">".selector"</span>).validate(&#123;     </span><br><span class="line">submitHandler: <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span></span><br><span class="line"><span class="function">  </span>&#123;      </span><br><span class="line">     $(form).ajaxSubmit();     </span><br><span class="line">  &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="其他功能"><a href="#其他功能" class="headerlink" title="其他功能"></a>其他功能</h1><ol><li><p>只验证不提交</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$().ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//只验证不提交</span></span><br><span class="line"> $(<span class="string">"#signupForm"</span>).validate(&#123;</span><br><span class="line">        debug:<span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>默认参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置默认参数，使用其它方式提交</span></span><br><span class="line">$.validator.setDefaults(&#123;</span><br><span class="line">  submitHandler: <span class="function"><span class="keyword">function</span>(<span class="params">form</span>) </span>&#123; alert(<span class="string">"提交事件!"</span>);form.submit(); &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>错误显示位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认是追加到元素后面</span></span><br><span class="line">errorPlacement: <span class="function"><span class="keyword">function</span>(<span class="params">error, element</span>) </span>&#123;  </span><br><span class="line">    error.appendTo(element.parent());  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>远程校验</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">remote: &#123;</span><br><span class="line">    url: <span class="string">"check-email.php"</span>,     <span class="comment">//后台处理程序</span></span><br><span class="line">    type: <span class="string">"post"</span>,               <span class="comment">//数据发送方式</span></span><br><span class="line">    dataType: <span class="string">"json"</span>,           <span class="comment">//接受数据格式   </span></span><br><span class="line">    data: &#123;                     <span class="comment">//要传递的数据</span></span><br><span class="line">        username: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> $(<span class="string">"#username"</span>).val();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jpa锁</title>
      <link href="/2022/03/20/jpa%E9%94%81/"/>
      <url>/2022/03/20/jpa%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：331,阅读全文大约需要1分钟</p><blockquote><p>对数据库进行操作的时候有时需要加锁，数据库操作往往是线程操作的重合部分。<code>jpa</code>提供了对于数据库锁的支持</p></blockquote><h1 id="Version"><a href="#Version" class="headerlink" title="@Version"></a>@Version</h1><p><code>jpa</code>提供的乐观锁，指定实体的字段/属性作为乐观锁的<code>version</code>。每次<code>insert</code>和<code>update</code>操作都会带上<code>version</code>，进行<code>CAS</code>操作。</p><ul><li>字段支持类型：int, Integer, short, Short, long, Long, java.sql.Timestamp</li><li>失败会抛出异常<code>org.springframework.orm.ObjectOptimisticLockingFailureException</code><br>需要自己处理异常</li><li>具体代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">user</span></span>&#123;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> Integer version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Lock"><a href="#Lock" class="headerlink" title="@Lock"></a>@Lock</h1><ul><li><code>@Lock</code>注解只有一个<code>value</code>的属性，是<code>LockModeType</code>的枚举类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepositoryImplementation</span>&lt;<span class="title">Account</span>,<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Lock</span>(LockModeType.PESSIMISTIC_WRITE)</span><br><span class="line">    <span class="function">Account <span class="title">findByAccountName</span><span class="params">(String accountName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>锁类型</p><ol><li><code>LockModeType.Optimistic</code>乐观锁，默认的锁类型。事务提交时检查版本</li><li><code>LockModeType.OPTIMISTIC_FORCE_INCREMENT</code>乐观锁，无论实体有没有改变都会累加版本。（这样保证读也是原子性的）</li><li><code>LockModeType.PESSIMISTIC_READ</code>悲观锁，当事务锁住实体时禁止再次写入。允许其他事务使用<code>PESSIMISTIC_READ</code>加锁</li><li><code>LockModeType.PESSIMISTIC_WRITE</code>悲观锁，<code>READ</code>的增强版，数据库禁止读取。</li><li><code>LockModeType.PESSIMISTIC_FORCE_INCREMENT</code>:悲观锁+乐观锁，乐观锁获取和比对之间如果有悲观锁加了锁，因为悲观锁不能更改版本号，所以无法阻止乐观锁覆盖其事务。此锁就是会增加版本号的悲观锁。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> 锁 </tag>
            
            <tag> jpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js下载base64形式的文件</title>
      <link href="/2022/03/20/js%E4%B8%8B%E8%BD%BDbase64%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/20/js%E4%B8%8B%E8%BD%BDbase64%E5%BD%A2%E5%BC%8F%E7%9A%84%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：73,阅读全文大约需要1分钟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* content base64格式数据</span></span><br><span class="line"><span class="comment">* fileName 文件名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">content, fileName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> base64ToBlob = <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parts = code.split(<span class="string">';base64,'</span>);</span><br><span class="line">        <span class="keyword">let</span> contentType = parts[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">let</span> raw = <span class="built_in">window</span>.atob(parts[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">let</span> rawLength = raw.length;</span><br><span class="line">        <span class="keyword">let</span> uInt8Array = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(rawLength);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; rawLength; ++i) &#123;</span><br><span class="line">            uInt8Array[i] = raw.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Blob([uInt8Array], &#123;</span><br><span class="line">            type: contentType</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">let</span> blob = base64ToBlob(content); <span class="comment">//new Blob([content]);</span></span><br><span class="line">    <span class="keyword">let</span> evt = <span class="built_in">document</span>.createEvent(<span class="string">"HTMLEvents"</span>);</span><br><span class="line">    evt.initEvent(<span class="string">"click"</span>, <span class="literal">true</span>, <span class="literal">true</span>); <span class="comment">//initEvent 不加后两个参数在FF下会报错  事件类型，是否冒泡，是否阻止浏览器的默认行为</span></span><br><span class="line">    aLink.download = fileName;</span><br><span class="line">    aLink.href = URL.createObjectURL(blob);</span><br><span class="line">    aLink.click();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js事件绑定</title>
      <link href="/2022/03/20/js%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/"/>
      <url>/2022/03/20/js%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1775,阅读全文大约需要7分钟</p><h1 id="绑定方法"><a href="#绑定方法" class="headerlink" title="绑定方法"></a>绑定方法</h1><ol><li><p><code>dom.addEventListener(&quot;click&quot;,func,false);</code><br>对dom对象绑定事件，用<code>func</code>函数处理事件，<code>false</code>代表组织冒泡</p></li><li><p><code>dom.removeEventListener(&quot;click&quot;, myFunction);</code>移除</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">passwordOb.addEventListener(<span class="string">"keyup"</span>,checkFun,<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//处理事件的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFun</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"元素："</span>+e.target+<span class="string">"触发了事件"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><strong>鼠标事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>点击对象触发</td></tr><tr><td>oncontextmenu</td><td>点击右键打开上下文菜单世触发</td></tr><tr><td>ondblclick</td><td>双击对象触发</td></tr><tr><td>onmousedown</td><td>鼠标按钮按下</td></tr><tr><td>onmouseenter</td><td>鼠标指针移动到元素上(事件不支持冒泡)</td></tr><tr><td>onmouseleave</td><td>鼠标指针移出元素(事件不支持冒泡)</td></tr><tr><td>onmousemove</td><td>元素上的指针移动时触发</td></tr><tr><td>onmouseover</td><td>鼠标移到元素上(事件支持冒泡)</td></tr><tr><td>onmouseout</td><td>鼠标从元素上移开(事件支持冒泡)</td></tr><tr><td>onmouseup</td><td>鼠标按键松开</td></tr></tbody></table><p><strong>键盘事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onkeydown</td><td>某个键盘按键被按下</td></tr><tr><td>onkeypress</td><td>键盘按键被按下并松开</td></tr><tr><td>onkeyup</td><td>按键被松开</td></tr></tbody></table><p><strong>对象事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>图像的加载被打断</td></tr><tr><td>onbeforeunload</td><td>即将离开页面(刷新或关闭)时触发</td></tr><tr><td>onerror</td><td>加载文档或图像失败时触发</td></tr><tr><td>onhashchange</td><td>当该事件在当前的URL的锚部分发生修改时触发</td></tr><tr><td>onload</td><td>一张页面或者图像完成加载</td></tr><tr><td>onpageshow</td><td>用户访问页面触发（离开后）</td></tr><tr><td>onpagehide</td><td>当用户离开当前网页跳转到另一个页面触发</td></tr><tr><td>onresize</td><td>窗口或框架被调整大小</td></tr><tr><td>onscroll</td><td>文档被滚动时发生</td></tr><tr><td>onunload</td><td>用户退出页面(beforeunload-&gt;unload-&gt;pagehide)</td></tr></tbody></table><p><strong>表单事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onblur</td><td>元素失去焦点</td></tr><tr><td>onchange</td><td>表单内容改变</td></tr><tr><td>onfocus</td><td>获取焦点</td></tr><tr><td>onfocusin</td><td>即将获取焦点触发</td></tr><tr><td>onfocusout</td><td>即将失去焦点触发</td></tr><tr><td>oninput</td><td>元素获取用户输入时触发</td></tr><tr><td>onreset</td><td>表单重置时触发</td></tr><tr><td>onsearch</td><td>用户向搜索域输入文本</td></tr><tr><td>onselect</td><td>选取文本时触发(选中一小段文字)</td></tr><tr><td>onsubmit</td><td>表单提交</td></tr></tbody></table><p><strong>剪贴板事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>oncopy</td><td>用户拷贝元素内容时触发</td></tr><tr><td>oncut</td><td>剪切元素时触发</td></tr><tr><td>onpaste</td><td>用户粘贴元素内容时触发</td></tr></tbody></table><p><strong>打印事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onafterprint</td><td>页面已经开始打印，或者打印窗口已经关闭时触发</td></tr><tr><td>onbeforeprint</td><td>页面即将开始打印时触发</td></tr></tbody></table><p><strong>拖动事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>ondrag</td><td>元素正在拖动时触发</td></tr><tr><td>ondragend</td><td>元素完成拖动时</td></tr><tr><td>ondragenter</td><td>拖动元素放入放置目标时</td></tr><tr><td>ondragleave</td><td>事件在拖动元素离开放置目标时触发</td></tr><tr><td>ondragover</td><td>元素放置在目标上触发</td></tr><tr><td>ondragstart</td><td>用户开始拖动元素</td></tr><tr><td>ondrop</td><td>拖动元素放置在目标区域时触发</td></tr></tbody></table><p><strong>多媒体</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>视频、音频终止时触发</td></tr><tr><td>oncanplay</td><td>用户可以开始播放视频、音频时触发</td></tr><tr><td>oncanplaythrough</td><td>视频、音频可以正常播放，不用停顿和缓冲时触发</td></tr><tr><td>ondurationchange</td><td>事件在视频、音频时长发生变化时触发</td></tr><tr><td>onemptied</td><td>播放列表为空时触发</td></tr><tr><td>onended</td><td>视频、音频播放结束时触发</td></tr><tr><td>onerror</td><td>视频、音频数据加载期间发生错误</td></tr><tr><td>onloadeddata</td><td>浏览器加载视频、音频时当前帧时触发</td></tr><tr><td>onloadedmetadata</td><td>指定的视频、音频元数据加载后触发</td></tr><tr><td>onloadstart</td><td>浏览器开始勋在指定视频、音频时触发</td></tr><tr><td>onpause</td><td>视频、音频暂停时触发</td></tr><tr><td>onplay</td><td>视频、音频开始时触发</td></tr><tr><td>onplaying</td><td>视频、音频暂停或者在缓冲后准备重新开始时触发</td></tr><tr><td>onprogress</td><td>浏览器下载指定视频、音频时触发</td></tr><tr><td>onratechange</td><td>视频、音频播放速度发生改变时触发</td></tr><tr><td>onseeked</td><td>重新定位视频、音频时触发</td></tr><tr><td>onseeking</td><td>重新定位视频、音频时触发</td></tr><tr><td>onstalled</td><td>浏览器获取媒体数据，但是媒体数据不可用时触发</td></tr><tr><td>onsuspend</td><td>浏览器读取媒体数据终止时触发</td></tr><tr><td>ontimeupdate</td><td>当前播放位置发送改变时触发</td></tr><tr><td>onvolumechange</td><td>当音量发送改变时触发</td></tr><tr><td>onwaiting</td><td>视频由于要播放下一帧而需要缓存时触发</td></tr></tbody></table><p><strong>动画事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>animationend</td><td>css动画结束播放时</td></tr><tr><td>animationiteration</td><td>css动画重复播放时</td></tr><tr><td>animationstart</td><td>css动画开始播放时触发</td></tr></tbody></table><p><strong>过度事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>transitionend</td><td>css完成过度后触发</td></tr></tbody></table><p><strong>其它事件</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>onmessage</td><td>从对象接收到消息时触发（如websocket）</td></tr><tr><td>ononline</td><td>浏览器开始在线工作时触发</td></tr><tr><td>onoffiline</td><td>浏览器开始离线工作时触发</td></tr><tr><td>onpopstate</td><td>浏览历史发生改变时触发</td></tr><tr><td>onshow</td><td><menu>元素在上下文菜单显示时触发</td></tr><tr><td>onstorage</td><td>web strage更新时触发</td></tr><tr><td>ontoggle</td><td>打开或关闭<details>元素时触发</td></tr><tr><td>onwheel</td><td>鼠标滚轮在元素上上下滚动时触发</td></tr></tbody></table><h1 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h1><p><strong>属性</strong></p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>bubbles</td><td>boolean 事件是否是起泡事件</td></tr><tr><td>cancelable</td><td>boolean 事件是否可取消默认动作</td></tr><tr><td>currentTarget</td><td>返回事件触发器监听的元素</td></tr><tr><td>eventPhase</td><td>事件传播的当前阶段</td></tr><tr><td>target</td><td>触发此时间的元素</td></tr><tr><td>timeStamp</td><td>时间生成的时间和日期</td></tr><tr><td>type</td><td>当前Event对象表示的时间的名称</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>initEvent()</td><td>初始化新创建的Event对象的属性</td></tr><tr><td>preventDefault()</td><td>通知浏览器不要执行事件关联的默认动作</td></tr><tr><td>stopPropagation()</td><td>不再派发事件</td></tr></tbody></table><p><strong>其它方法</strong></p><table><thead><tr><th>方法名</th><th>描述</th></tr></thead><tbody><tr><td>handleEvent()</td><td>把任意对象注册成为事件处理程序</td></tr><tr><td>createEvent()</td><td>该方法将创建一种新的事件类型，该类型由参数 eventType 指定</td></tr></tbody></table><h1 id="键盘鼠标对象属性"><a href="#键盘鼠标对象属性" class="headerlink" title="键盘鼠标对象属性"></a>键盘鼠标对象属性</h1><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>altKey</td><td>事件触发时，alt是否被按下</td></tr><tr><td>button</td><td>那个鼠标按钮被点击</td></tr><tr><td>clientX</td><td>鼠标指针水平位置(浏览器内容区域的左上角,页面滚动参照点会变)</td></tr><tr><td>clientY</td><td>鼠标指针纯质坐标</td></tr><tr><td>Location</td><td>按键在设备上的位置</td></tr><tr><td>charCode</td><td>onkeypress事件触发按键值的字母代码</td></tr><tr><td>key</td><td>按下按键时返回按键的标识符</td></tr><tr><td>keyCode</td><td>键盘字符代码</td></tr><tr><td>which</td><td>键盘字符代码</td></tr><tr><td>metaKey</td><td>meta按键是否被按下</td></tr><tr><td>relatedTarget</td><td>与事件的目标节点相关的节点</td></tr><tr><td>screenX</td><td>触发事件的水平位置，以显示器作为参照点</td></tr><tr><td>screenY</td><td>垂直左边</td></tr><tr><td>shiftKey</td><td>shift按钮是否被按下</td></tr></tbody></table><p>(pageX参照内容区域左上角，不会随滚动而变化)</p><p>initMouseEvent()//    初始化鼠标事件对象的值<br>initKeyboardEvent()//    初始化键盘事件对象的值</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AES对称加密</title>
      <link href="/2022/03/20/AES%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/"/>
      <url>/2022/03/20/AES%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：370,阅读全文大约需要1分钟</p><blockquote><p>AES对称加密安全性好，加密速度快。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Level;</span><br><span class="line"><span class="keyword">import</span> java.util.logging.Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AESUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** key长度 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEY_SIZE = <span class="number">256</span>;</span><br><span class="line">    <span class="comment">/** 算法名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_ALGORITHM = <span class="string">"AES"</span>;</span><br><span class="line">    <span class="comment">/** 默认的加密算法及模式 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CIPHER_ALGORITHM = <span class="string">"AES/ECB/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES 加密操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byteContent</span></span><br><span class="line"><span class="comment">     *            待加密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            加密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] byteContent, <span class="keyword">byte</span>[] key) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建密码器</span></span><br><span class="line">            Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">            <span class="comment">// 初始化为加密模式的密码器</span></span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, getSecretKey(key));</span><br><span class="line">            <span class="comment">// 加密</span></span><br><span class="line">            <span class="keyword">return</span> cipher.doFinal(byteContent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Logger.getLogger(AESUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES 加密操作，返回Base64字符串</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byteContent</span></span><br><span class="line"><span class="comment">     *            待加密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            加密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Base64转码后的加密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">base64Encrypt</span><span class="params">(<span class="keyword">byte</span>[] byteContent, <span class="keyword">byte</span>[] key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] encrypt = encrypt(byteContent, key);</span><br><span class="line">        <span class="keyword">if</span> (encrypt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(encrypt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES 解密操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] content, <span class="keyword">byte</span>[] key) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 实例化</span></span><br><span class="line">            Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">            <span class="comment">// 使用密钥初始化，设置为解密模式</span></span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, getSecretKey(key));</span><br><span class="line">            <span class="comment">// 执行操作</span></span><br><span class="line">            <span class="keyword">return</span> cipher.doFinal(content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            Logger.getLogger(AESUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES 解密操作</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            base64形式的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(String content, <span class="keyword">byte</span>[] key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (content != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] decode = Base64.getDecoder().decode(content);</span><br><span class="line">            <span class="keyword">return</span> decrypt(decode, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成指定算法密钥生成器的 KeyGenerator 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SecretKeySpec <span class="title">getSecretKey</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] key)</span> </span>&#123;</span><br><span class="line">        KeyGenerator kg;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            kg = KeyGenerator.getInstance(KEY_ALGORITHM);</span><br><span class="line">            kg.init(KEY_SIZE, <span class="keyword">new</span> SecureRandom(key));</span><br><span class="line">            <span class="comment">// 生成一个密钥</span></span><br><span class="line">            SecretKey secretKey = kg.generateKey();</span><br><span class="line">            <span class="comment">// 转换为AES专用密钥</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(secretKey.getEncoded(), KEY_ALGORITHM);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException ex) &#123;</span><br><span class="line">            Logger.getLogger(AESUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">log</span>(<span class="title">Level</span>.<span class="title">SEVERE</span>, <span class="title">null</span>, <span class="title">ex</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">"123在下面的文本框内输入需要处理abc"</span>;</span><br><span class="line">        String key = <span class="string">"个8ga10bg105*()_^%fag1啥干-0人48时阿嘎多沟沟壑壑ssssdca"</span>;</span><br><span class="line">        System.out.println(<span class="string">"原文:"</span> + content);</span><br><span class="line">        String s1 = AESUtil.base64Encrypt(content.getBytes(StandardCharsets.UTF_8), key.getBytes());</span><br><span class="line">        System.out.println(<span class="string">"密文:"</span> + s1);</span><br><span class="line">        System.out.println(<span class="string">"解密:"</span> + <span class="keyword">new</span> String(AESUtil.decrypt(s1, key.getBytes()), StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> keytool </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js初始化操作</title>
      <link href="/2022/03/20/js%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/20/js%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：432,阅读全文大约需要1分钟</p><blockquote><p>在页面加载完成之后我们通常要进行一下初始化js操作，比如根据默认选项调整界面，检测驱动等。除了直接在js里调用函数外，还有几种方式指定函数运行时机。</p></blockquote><h1 id="一、ready-和onload"><a href="#一、ready-和onload" class="headerlink" title="一、ready()和onload()"></a>一、ready()和onload()</h1><ul><li><code>jquery</code>的<code>ready()</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;)</span><br></pre></td></tr></table></figure><ul><li><code>javascript</code>的<code>onload()</code>方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload()=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure><p>以下是对比：<br>\  | windo.onload()  |$(document).ready<br>—|—|—<br>加载时机|图片等信息全部加载完成之后|Dom结构加载之后，不用等图片<br>执行次数|文件中有多个此函数，最后一个覆盖所有|按顺序执行<br>简写|无|$(function(){})</p><h1 id="二、立即执行函数"><a href="#二、立即执行函数" class="headerlink" title="二、立即执行函数"></a>二、立即执行函数</h1><p>创建完函数后立刻执行，和直接调用差不多。。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  ..</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h1 id="三、js定时，延时"><a href="#三、js定时，延时" class="headerlink" title="三、js定时，延时"></a>三、js定时，延时</h1><blockquote><p>这两个应该不算是初始化，延时执行在特定情况下倒是可以用作初始化。比如初始化操作的节点可能是ajax返回的…好吧，不过他们确实算是让函数在特定时间执行。</p></blockquote><ul><li>定时（多次）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数体，时间</span></span><br><span class="line"> setInterval(<span class="string">"alert('test')"</span>,<span class="number">2000</span>);</span><br><span class="line"><span class="comment">//传入函数体</span></span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; alert(<span class="string">"Hello"</span>); &#125;, <span class="number">3000</span>);</span><br><span class="line"><span class="comment">//清除定时</span></span><br><span class="line"><span class="keyword">var</span> myVar = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; myTimer() &#125;, <span class="number">1000</span>);</span><br><span class="line">clearInterval(myVar);</span><br></pre></td></tr></table></figure></li><li>延时（一次）<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(function()&#123; alert(&quot;Hello&quot;); &#125;, 3000);</span><br><span class="line">&#x2F;&#x2F;其它传参方式</span><br><span class="line">setTimeout(function, milliseconds, param1, param2, ...)</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js操作MQTT</title>
      <link href="/2022/03/20/js%E6%93%8D%E4%BD%9CMQTT/"/>
      <url>/2022/03/20/js%E6%93%8D%E4%BD%9CMQTT/</url>
      
        <content type="html"><![CDATA[<p>文章字数：225,阅读全文大约需要1分钟</p><blockquote><p><code>MQTT</code>是一个基于<strong>发布/订阅</strong>模式的消息协议，专门为硬件性能低下且网络状况糟糕情况设计的。消息轻量级，可以根据设置保证消息一定到达。实现<code>MQTT</code>的中间件有很多，本文采用<code>activeMQ</code></p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li>页面引入<code>mqttws31.min.js</code>即可</li><li>下载并开启<code>activeMQ</code>，设置好<code>MQTT</code>。</li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建连接</span></span><br><span class="line"><span class="keyword">var</span> mqttHost = <span class="string">"127.0.0.1"</span>;  <span class="comment">// mqtt服务地址</span></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">8083</span>;</span><br><span class="line"><span class="keyword">var</span> clientId = <span class="string">"test123"</span>;</span><br><span class="line">client = <span class="keyword">new</span> Paho.MQTT.Client(mqttHost, port , clientId );</span><br><span class="line">client.connect(&#123;</span><br><span class="line">        <span class="comment">//连接服务器并注册连接成功处理事件</span></span><br><span class="line">        onSuccess: onConnect,</span><br><span class="line">        cleanSession:<span class="literal">false</span>,</span><br><span class="line">        useSSL:<span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 心跳</span></span><br><span class="line">        keepAliveInterval:<span class="number">200</span>,</span><br><span class="line">        timeout:<span class="number">5</span>,</span><br><span class="line">        <span class="comment">//userName:"ss",</span></span><br><span class="line">        <span class="comment">//password:"xxx",</span></span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// 连接成功就订阅主题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onConnect</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//订阅主题</span></span><br><span class="line">        client.subscribe(<span class="string">"topic-name"</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">client.onConnectionLost = <span class="function"><span class="keyword">function</span> (<span class="params">responseObject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(responseObject.errorCode !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"连接已断开"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">client.onMessageArrived = <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ss = message.destinationName;</span><br><span class="line">        <span class="keyword">var</span> meg = message.payloadString;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"收到新消息："</span> + meg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推送信息给指定主题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMess</span>(<span class="params">messStr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(client.isConnected())&#123;</span><br><span class="line">            <span class="keyword">var</span> message = <span class="keyword">new</span> Paho.MQTT.Message(messStr);</span><br><span class="line">            <span class="comment">// 推送给主题</span></span><br><span class="line">            message.destinationName = <span class="string">"topic-name1"</span>;</span><br><span class="line">            client.send(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js构造方法</title>
      <link href="/2022/03/20/js%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/"/>
      <url>/2022/03/20/js%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：5,阅读全文大约需要1分钟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name=name;</span><br><span class="line">  <span class="keyword">this</span>.type=<span class="string">"people"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(<span class="string">"zhangsan"</span>)；</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm调优参数</title>
      <link href="/2022/03/20/jvm%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0/"/>
      <url>/2022/03/20/jvm%E8%B0%83%E4%BC%98%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：482,阅读全文大约需要1分钟</p><h1 id="内存区域"><a href="#内存区域" class="headerlink" title="内存区域"></a>内存区域</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><code>-Xss</code></p><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><p><code>-Xms</code>最小值<br><code>-Xmx</code>最大值<br><code>-Xmn</code>新生代最小<br><code>-XX:newSize</code>新生代最小值<br><code>-XX:MaxNewSize</code>新生代最大值</p><h2 id="永久代-元空间"><a href="#永久代-元空间" class="headerlink" title="永久代(元空间)"></a>永久代(元空间)</h2><p><code>-XX:PermSize</code> <code>-XX:MaxPermsize</code>1.7及之前最小值和最大值<br><code>-XX:MetaspaceSize</code> <code>-XX:MaxMetaspaceSize</code>1.8及之后<br>方法区移动至运行时常量池之外，即元空间</p><h1 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h1><ul><li>不是虚拟机运行时数据区的一部分，也不是java虚拟机规范定义的内存区域</li><li><code>NIO</code>中会频繁使用这块区域，java堆内可以使用<code>directByteBuffer</code>对象直接引用操作</li><li>此区域不受java堆大小限制，但也受本机总内存限制，可以通过<code>MaxDirectMemorySize</code>设置，默认和堆内存最大值一样，所有也会<code>OOM</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ByteBuffer b = ByteBuffer.allocateDirect(<span class="number">1024</span> * <span class="number">14</span>);</span><br></pre></td></tr></table></figure><h1 id="逃逸分析"><a href="#逃逸分析" class="headerlink" title="逃逸分析"></a>逃逸分析</h1><p><code>-server</code>使用<code>server</code>模式运行(只有这个有逃逸分析)，还有<code>client</code>模式，<code>mix</code>表示自动判断<br><code>-Xmx10M -Xms10m</code>堆大小<br><code>-XX+PrintGC</code>打印GC日志<br><code>-XX:-EliminateAllocations</code>标量替换<br><code>-XX:-UseTLAB</code>事先为每个线程分配一个私有空间ThreadLocalAllocBuffer，可以避免线程new对象时使用同一区域而加锁导致串行</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js获取java接口返回的Boolean类型解析成string</title>
      <link href="/2022/03/20/js%E8%8E%B7%E5%8F%96java%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%9A%84Boolean%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E6%88%90string/"/>
      <url>/2022/03/20/js%E8%8E%B7%E5%8F%96java%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E7%9A%84Boolean%E7%B1%BB%E5%9E%8B%E8%A7%A3%E6%9E%90%E6%88%90string/</url>
      
        <content type="html"><![CDATA[<p>文章字数：65,阅读全文大约需要1分钟</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>从java返回的boolean类型的flag直接用来if判断,结果flag是true却没有进入if语句。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>用typeof flag 发现接收到的是string类型</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>做了个判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">target = res===<span class="string">"true"</span>?<span class="literal">true</span>:res==<span class="literal">true</span>?<span class="literal">true</span>:<span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><code>Boolean(target)</code>竟然不行？？</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm调优工具VisualVM</title>
      <link href="/2022/03/20/jvm%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7VisualVM/"/>
      <url>/2022/03/20/jvm%E8%B0%83%E4%BC%98%E5%B7%A5%E5%85%B7VisualVM/</url>
      
        <content type="html"><![CDATA[<p>文章字数：540,阅读全文大约需要2分钟</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>VisualVM 是Netbeans的profile子项目，已在JDK6.0 update 7 中自带，能够监控线程，内存情况，查看方法的CPU时间和内存中的对 象，已被GC的对象，反向查看分配的堆栈(如100个String对象分别由哪几个对象分配出来的)。在JDK_HOME/bin(默认是C:\Program Files\Java\jdk1.6.0_13\bin)目录下面，有一个jvisualvm.exe文件，双击打开，从UI上来看，这个软件是基于NetBeans开发的了。<br>VisualVM 提供了一个可视界面，用于查看 Java 虚拟机 (Java Virtual Machine, JVM) 上运行的基于 Java 技术的应用程序的详细信息。VisualVM 对 Java Development Kit (JDK) 工具所检索的 JVM 软件相关数据进行组织，并通过一种使您可以快速查看有关多个 Java 应用程序的数据的方式提供该信息。您可以查看本地应用程序或远程主机上运行的应用程序的相关数据。此外，还可以捕获有关 JVM 软件实例的数据，并将该数据保存到本地系统，以供后期查看或与其他用户共享。</p><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><p>主要有：监控、线程、Visual GC这些功能，还可以使用插件增加功能</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js读取文件</title>
      <link href="/2022/03/20/js%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/20/js%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：213,阅读全文大约需要1分钟</p><blockquote><p>之前有一个文件转成base64的js操作，其中有一部分是文件的读取。以前没有看到过js的文件操作，这一次特地找了一个demo。原生的javascript好像只支持文件读取，文件的写入似乎不支持。</p></blockquote><h1 id="js读取选中的文件"><a href="#js读取选中的文件" class="headerlink" title="js读取选中的文件"></a>js读取选中的文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">var</span><br><span class="line">    fileInput &#x3D; document.getElementById(&#39;test-image-file&#39;),</span><br><span class="line">    info &#x3D; document.getElementById(&#39;test-file-info&#39;),</span><br><span class="line">    preview &#x3D; document.getElementById(&#39;test-image-preview&#39;);</span><br><span class="line"> &#x2F;&#x2F; 监听change事件:</span><br><span class="line"> fileInput.addEventListenser(&#39;change&#39;,function()&#123;</span><br><span class="line">    &#x2F;&#x2F;清除背景图片</span><br><span class="line">    preview.style.backgroundImage &#x3D; &#39;&#39;;</span><br><span class="line">    &#x2F;&#x2F;检查文件是否选择</span><br><span class="line">    if (!fileInput.value) &#123;</span><br><span class="line">        info.innerHTML &#x3D; &#39;没有选择文件&#39;;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;获取File引用</span><br><span class="line">    var file &#x3D; fileInput.files[0];</span><br><span class="line">    &#x2F;&#x2F;获取file信息</span><br><span class="line">    info.innerHTML &#x3D; &#96;</span><br><span class="line">                    文件: $&#123;file.name&#125;</span><br><span class="line">                    大小: $&#123;file.size&#125;</span><br><span class="line">                    修改: $&#123;file.lastModifiedDate&#125;</span><br><span class="line">                    &#96;;</span><br><span class="line">    if (file.type !&#x3D;&#x3D; &#39;image&#x2F;jpeg&#39; &amp;&amp; file.type !&#x3D;&#x3D; &#39;image&#x2F;png&#39; &amp;&amp; file.type !&#x3D;&#x3D; &#39;image&#x2F;gif&#39;) &#123;</span><br><span class="line">        alert(&#39;不是有效的图片文件!&#39;);</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;读取文件</span><br><span class="line">    var reader &#x3D; new FileReader();</span><br><span class="line">    reader.onload &#x3D; function(e)&#123;</span><br><span class="line">        var </span><br><span class="line">            data &#x3D; e.target.result;</span><br><span class="line">            preview.style.backgroundImage &#x3D; &#39;url(&#39; + data + &#39;)&#39;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;以dataURL的形式读取文件</span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jvm架构</title>
      <link href="/2022/03/20/jvm%E6%9E%B6%E6%9E%84/"/>
      <url>/2022/03/20/jvm%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>文章字数：806,阅读全文大约需要3分钟</p><blockquote><p>jvm分为三个主要的子系统：<br>(1)类加载系统 (2)运行时数据区 (3)执行引擎<br>数据加载进运行时数据区，执行引擎从数据区获取执行</p></blockquote><h1 id="一、类加载系统"><a href="#一、类加载系统" class="headerlink" title="一、类加载系统"></a>一、类加载系统</h1><blockquote><p>处理动态类加载功能，当<strong>运行时</strong>首次引用一个类时，它加载、链接、初始化该类文件</p></blockquote><h2 id="1-加载"><a href="#1-加载" class="headerlink" title="1.加载"></a>1.加载</h2><p>启动类加载器(BootStarp class Loader)、扩展类加载器(Extension class Loader)、应用程序类加载器(Application class Loader)三个组件完成此操作:</p><ul><li><strong>启动类加载器</strong>- 父 -从启动类路径中加载类(rt.jar,就是java基本类,javaDoc中的所有),拥有最高优先级</li><li><strong>扩展类加载器</strong>- 子 -负责加载<code>ext</code>目录的类(<code>jre\lib</code>)</li><li><strong>应用程序类加载器</strong>- 孙 -加载应用程序级别类路径。</li></ul><p><strong>加载机制:</strong></p><ul><li><strong>全盘负责</strong>:类加载器加载一个类时，默认该类依赖和引用的其它类也由该加载器负责.</li><li><strong>双亲委派</strong>: 先让父类加载试图加载的Class依次递归，父类加载不了才自己加载。</li><li><strong>缓存机制</strong>:所有加载过的类都会被缓存，程序使用类时加载器先从缓存中寻找。所以修改Class后必须重启JVM。</li></ul><p><strong>用户类加载器</strong>=&gt;<strong>应用程序类加载器</strong>=&gt;<strong>扩展类加载器</strong>=&gt;<strong>启动类加载器</strong></p><blockquote><p>双亲委派优点：1.防止重复加载 2.防止底层传入虚假的核心JavaAPI</p></blockquote><h2 id="2-链接"><a href="#2-链接" class="headerlink" title="2.链接"></a>2.链接</h2><ul><li><strong>校验</strong>-字节码校验器会校验生成的字节码是否正确，失败提示校验错误信息。</li><li><strong>准备</strong>-分配内存并初始化<strong>默认值</strong>给所有静态变量。</li><li><strong>解析</strong>-所有的符号内存引用被方法区(<code>Method Area</code>)的<strong>原始引</strong>用替代。</li></ul><h2 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h2><blockquote><p>这是类加载的最后阶段，静态变量赋值，静态代码块被执行。</p></blockquote><h1 id="二、运行时数据区"><a href="#二、运行时数据区" class="headerlink" title="二、运行时数据区"></a>二、运行时数据区</h1><p>之前的文章jmm(java内存模型)有讲到，不再赘述。</p><h1 id="三、执行引擎"><a href="#三、执行引擎" class="headerlink" title="三、执行引擎"></a>三、执行引擎</h1><p>将数据区内的字节码逐段执行。</p><h2 id="1-解释器"><a href="#1-解释器" class="headerlink" title="1.解释器"></a>1.解释器</h2><blockquote><p>能快速解析字节码，但是对于重复的方法会每次都重新解析</p></blockquote><h2 id="2-即时编译器JIT-Just-In-Time-Compiler"><a href="#2-即时编译器JIT-Just-In-Time-Compiler" class="headerlink" title="2.即时编译器JIT(Just In Time Compiler)"></a>2.即时编译器JIT(Just In Time Compiler)</h2><blockquote><p>为了解决解释器的缺点，当被判定为重复代码将使用JIT编译，并重复利用。</p></blockquote><p>其它：</p><ul><li>中间代码生成器-生成中加代码</li><li>代码优化器 -负责优化上面生成的代码</li><li>目标代码生成器-生成既期待吗或本机代码</li><li>探测器(Profiler)-负责寻找被多次调用的方法。</li></ul><h2 id="垃圾回收机制-GC"><a href="#垃圾回收机制-GC" class="headerlink" title="垃圾回收机制(GC)"></a>垃圾回收机制(GC)</h2><p>之后另起一章讲述</p><h2 id="JVM-参数"><a href="#JVM-参数" class="headerlink" title="JVM 参数"></a>JVM 参数</h2><ul><li>堆：<code>-Xms</code> <code>-Xmx</code>(一般设置一样的值，否则内存抖动)</li><li>线程：<code>-Xss</code> 线程堆栈调用深度</li><li>新生代初始大小：<code>–XX:NewSize–XX:MaxNewSize</code>指定新生代初始大小和最大大小。</li><li><code>-XX:NewRatio</code>   是年老代 新生代相对的比例</li><li><code>-XX:SurvivorRatio</code>配置的是在新生代里面<code>Eden</code>和一个<code>Servive</code>的比例</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt</title>
      <link href="/2022/03/20/jwt/"/>
      <url>/2022/03/20/jwt/</url>
      
        <content type="html"><![CDATA[<p>文章字数：583,阅读全文大约需要2分钟</p><h1 id="jwt介绍"><a href="#jwt介绍" class="headerlink" title="jwt介绍"></a>jwt介绍</h1><p>传统用户登录后会使用<code>session</code>存储用户信息，<code>session</code>依靠<code>cookie</code>来记录<code>sessionId</code>，而移动端没有<code>cookie</code>。<br><code>jwt</code>本质上是一串字符串，包含头部、内容、签名三部分。头部可以存储加密方式等信息，内容可以是用户基本信息，签名是对前面两部分的签名，用来验证真伪。使用<code>jwt</code>后服务端无需保存用户状态，每次用户请求都需要带上<code>jwt</code>的字符串，以此表明身份。不依赖<code>session</code>的存储用户信息，更适合分布式及移动端</p><h1 id="jwt结构"><a href="#jwt结构" class="headerlink" title="jwt结构"></a>jwt结构</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># base64的头部 + &quot;.&quot; + base64的内容 + &quot;.&quot; + 对于前面部分的签名</span><br><span class="line">base64(headerJson).base64(payload).HMACSHA256(base64UrlEncode(header)+&quot;.&quot;+base64UrlEncode(payload),secret);</span><br></pre></td></tr></table></figure><h1 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h1><p>一般存储以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h1><p>payload只经过base64，是可逆的，相当于明文。所以最好不要放置敏感信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 标准的jwt主体可以使用这七个默认字段</span><br><span class="line">iss：发行人</span><br><span class="line">exp：到期时间</span><br><span class="line">sub：主题</span><br><span class="line">aud：用户</span><br><span class="line">nbf：在此之前不可用</span><br><span class="line">iat：发布时间</span><br><span class="line">jti：JWT ID用于标识该JWT</span><br><span class="line"># 也可以自己定义</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;: &quot;123&quot;,</span><br><span class="line">    &quot;token&quot;: &quot;zzzzdasd&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header)+&quot;.&quot;+base64UrlEncode(payload),secret)</span><br></pre></td></tr></table></figure><p>签名算法主要有</p><ol><li><code>HMAC</code>哈希消息验证码对称算法：<code>HS256/HS384/HS512</code></li><li><code>RSASSA</code>非对称的<code>RSA</code>签名算法：<code>RS256/RS384/RS512</code></li><li><code>ECDSA</code>非对称的椭圆曲线数据签名算法: <code>ES256/ES384/ES512</code></li></ol><h1 id="java中使用"><a href="#java中使用" class="headerlink" title="java中使用"></a>java中使用</h1><ul><li><code>java-jwt</code></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>生成jwt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定token过期时间为10天</span></span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.add(Calendar.DATE, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// 生成</span></span><br><span class="line">String token = JWT.create()</span><br><span class="line">.withHeader(<span class="keyword">new</span> HashMap())<span class="comment">// header的内容</span></span><br><span class="line">.withClaim(<span class="string">"key1"</span>, <span class="string">"value"</span>)<span class="comment">// payload</span></span><br><span class="line">.withClaim(<span class="string">"key2"</span>, <span class="string">"value"</span>)</span><br><span class="line">.withExpiresAt(calender.getTime())<span class="comment">// 过期时间</span></span><br><span class="line">.sign(Algorithm.HMA256(<span class="string">"pwd"</span>));</span><br></pre></td></tr></table></figure></li><li><p>校验及获取内容</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 解析对象</span><br><span class="line">JWTVerifier jwtVerifier &#x3D; JWT.require(Algorithm.HMAC256(&quot;pwd&quot;)).build();</span><br><span class="line">&#x2F;&#x2F; 校验及解析</span><br><span class="line">DecodedJWT decodedJWT &#x3D; jwtVerifier.verify(token);</span><br><span class="line">&#x2F;&#x2F; 之后就能获取其中的内容</span><br><span class="line">Claim userId &#x3D; decodedJWT.getClaim(&quot;key1&quot;);</span><br><span class="line">Claim userName &#x3D; decodedJWT.getClaim(&quot;key2&quot;);</span><br></pre></td></tr></table></figure><ul><li>非对称加密签名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSA rsa = <span class="keyword">new</span> RSA(<span class="string">"pwd"</span>, <span class="keyword">null</span>);</span><br><span class="line">RSAPrivateKey privateKey = (RSAPrivateKey) rsa.getPrivateKey();</span><br><span class="line"><span class="comment">// 然后传入签名</span></span><br><span class="line">JWT.create().withClaim(<span class="string">"k"</span>,<span class="string">"v"</span>).sign(Algorithm.RSA256(<span class="keyword">null</span>, privateKey));</span><br></pre></td></tr></table></figure><ul><li>校验时</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RSA rsa &#x3D; new RSA(null, &quot;pwd&quot;);</span><br><span class="line">RSAPublicKey publicKey &#x3D; (RSAPublicKey) rsa.getPublicKey();</span><br><span class="line">JWTVerifier jwtVerifier &#x3D; JWT.require(Algorithm.RSA256(publicKey, null)).build();</span><br><span class="line">DecodedJWT decodedJWT &#x3D; jwtVerifier.verify(token);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>loadClass、findClass、defineClass</title>
      <link href="/2022/03/20/loadClass%E3%80%81findClass%E3%80%81defineClass/"/>
      <url>/2022/03/20/loadClass%E3%80%81findClass%E3%80%81defineClass/</url>
      
        <content type="html"><![CDATA[<p>文章字数：265,阅读全文大约需要1分钟</p><h1 id="loadClass"><a href="#loadClass" class="headerlink" title="loadClass"></a>loadClass</h1><p>加载一个类，传入名字或位置</p><ol><li>调用<code>findLoadedClass(String)</code>检测是否这个类已经被加载</li><li>没有被加载则调用父类的<code>loadClass()</code>方法，直到找到或者父类为空(说明是启动类加载器)</li><li>到了启动类加载器都没有就调用<code>findClass(String)</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="findClass"><a href="#findClass" class="headerlink" title="findClass"></a>findClass</h1><ol><li>根据名称或位置加载.class字节码,然后使用defineClass</li><li>通常由子类去实现<br><code>loadClass</code>的源码可以看到，最后如果还是找不到类就会调用<code>findClass</code>。但是<code>ClassLoader</code>的<code>findClass</code>是直接抛出异常，自定义类加载器需要实现此方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="definclass"><a href="#definclass" class="headerlink" title="definclass"></a>definclass</h1><ol><li>把字节码转化为Class</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> ClassLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetCode树和链表工具</title>
      <link href="/2022/03/20/leetCode%E6%A0%91%E5%92%8C%E9%93%BE%E8%A1%A8%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/leetCode%E6%A0%91%E5%92%8C%E9%93%BE%E8%A1%A8%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：481,阅读全文大约需要1分钟<br>网上找的<code>leetCode</code>题目字符串转树和链表的工具，来自<a href="https://blog.csdn.net/weixin_43842467/article/details/104345293" target="_blank" rel="noopener">原文</a></p><h1 id="一、工具"><a href="#一、工具" class="headerlink" title="一、工具"></a>一、工具</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LeetCode工具</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeetCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> ListNode next;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">        <span class="keyword">public</span> TreeNode left;</span><br><span class="line">        <span class="keyword">public</span> TreeNode right;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">            val = x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成连表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title">createList</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String substring = str.substring(<span class="number">1</span>, str.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (substring.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String[] split = substring.split(<span class="string">","</span>);</span><br><span class="line">        ListNode root = <span class="keyword">new</span> ListNode(-<span class="number">1</span>);</span><br><span class="line">        ListNode temp = root;</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            ListNode next = <span class="keyword">new</span> ListNode(Integer.parseInt(s));</span><br><span class="line">            temp.next = next;</span><br><span class="line">            temp = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成二叉树</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">createTree</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (str==<span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String substring = str.substring(<span class="number">1</span>, str.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (substring.length()==<span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        String[] split = substring.split(<span class="string">","</span>);</span><br><span class="line">        TreeNode root = split[<span class="number">0</span>].equals(<span class="string">"null"</span>)?<span class="keyword">null</span>:<span class="keyword">new</span> TreeNode(Integer.parseInt(split[<span class="number">0</span>]));</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;();</span><br><span class="line">        queue.add(root);</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            TreeNode cur = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (index&lt;split.length)&#123;</span><br><span class="line">                cur.left = split[index].equals(<span class="string">"null"</span>)?<span class="keyword">null</span>:<span class="keyword">new</span> TreeNode(Integer.parseInt(split[index]));</span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">if</span> (cur.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(cur.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">            <span class="keyword">if</span> (index&lt;split.length)&#123;</span><br><span class="line">                cur.right= split[index].equals(<span class="string">"null"</span>)?<span class="keyword">null</span>:<span class="keyword">new</span> TreeNode(Integer.parseInt(split[index]));</span><br><span class="line">                index++;</span><br><span class="line">                <span class="keyword">if</span> (cur.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(cur.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;<span class="keyword">break</span>;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(List&lt;TreeNode&gt; nodes)</span> </span>&#123;</span><br><span class="line">        nodes.forEach(node-&gt; System.out.print(node.val + <span class="string">","</span>));</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示二叉树的结构</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) System.out.println(<span class="string">"EMPTY!"</span>);</span><br><span class="line">        <span class="comment">// 得到树的深度</span></span><br><span class="line">        <span class="keyword">int</span> treeDepth = getTreeDepth(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后一行的宽度为2的（n - 1）次方乘3，再加1</span></span><br><span class="line">        <span class="comment">// 作为整个二维数组的宽度</span></span><br><span class="line">        <span class="keyword">int</span> arrayHeight = treeDepth * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> arrayWidth = (<span class="number">2</span> &lt;&lt; (treeDepth - <span class="number">2</span>)) * <span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 用一个字符串数组来存储每个位置应显示的元素</span></span><br><span class="line">        String[][] res = <span class="keyword">new</span> String[arrayHeight][arrayWidth];</span><br><span class="line">        <span class="comment">// 对数组进行初始化，默认为一个空格</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrayHeight; i ++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arrayWidth; j ++) &#123;</span><br><span class="line">                res[i][j] = <span class="string">" "</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从根节点开始，递归处理整个树</span></span><br><span class="line">        <span class="comment">// res[0][(arrayWidth + 1)/ 2] = (char)(root.val + '0');</span></span><br><span class="line">        writeArray(root, <span class="number">0</span>, arrayWidth/ <span class="number">2</span>, res, treeDepth);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时，已经将所有需要显示的元素储存到了二维数组中，将其拼接并打印即可</span></span><br><span class="line">        <span class="keyword">for</span> (String[] line: res) &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length; i ++) &#123;</span><br><span class="line">                sb.append(line[i]);</span><br><span class="line">                <span class="keyword">if</span> (line[i].length() &gt; <span class="number">1</span> &amp;&amp; i &lt;= line.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    i += line[i].length() &gt; <span class="number">4</span> ? <span class="number">2</span>: line[i].length() - <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(sb.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于获得树的层数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTreeDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> root == <span class="keyword">null</span> ? <span class="number">0</span> : (<span class="number">1</span> + Math.max(getTreeDepth(root.left), getTreeDepth(root.right)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">writeArray</span><span class="params">(TreeNode currNode, <span class="keyword">int</span> rowIndex, <span class="keyword">int</span> columnIndex, String[][] res, <span class="keyword">int</span> treeDepth)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 保证输入的树不为空</span></span><br><span class="line">        <span class="keyword">if</span> (currNode == <span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 先将当前节点保存到二维数组中</span></span><br><span class="line">        res[rowIndex][columnIndex] = String.valueOf(currNode.val);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算当前位于树的第几层</span></span><br><span class="line">        <span class="keyword">int</span> currLevel = ((rowIndex + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">        <span class="comment">// 若到了最后一层，则返回</span></span><br><span class="line">        <span class="keyword">if</span> (currLevel == treeDepth) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 计算当前行到下一行，每个元素之间的间隔（下一行的列索引与当前元素的列索引之间的间隔）</span></span><br><span class="line">        <span class="keyword">int</span> gap = treeDepth - currLevel - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对左儿子进行判断，若有左儿子，则记录相应的"/"与左儿子的值</span></span><br><span class="line">        <span class="keyword">if</span> (currNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            res[rowIndex + <span class="number">1</span>][columnIndex - gap] = <span class="string">"/"</span>;</span><br><span class="line">            writeArray(currNode.left, rowIndex + <span class="number">2</span>, columnIndex - gap * <span class="number">2</span>, res, treeDepth);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对右儿子进行判断，若有右儿子，则记录相应的"\"与右儿子的值</span></span><br><span class="line">        <span class="keyword">if</span> (currNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            res[rowIndex + <span class="number">1</span>][columnIndex + gap] = <span class="string">"\\"</span>;</span><br><span class="line">            writeArray(currNode.right, rowIndex + <span class="number">2</span>, columnIndex + gap * <span class="number">2</span>, res, treeDepth);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 引入TreeNode和ListNode</span><br><span class="line">import com.colin.tool.LeetCode.*;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 构造</span><br><span class="line">TreeNode root &#x3D; LeetCode.createTree(&quot;[1,null,2,null,3]&quot;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux基础命令</title>
      <link href="/2022/03/20/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/20/linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1233,阅读全文大约需要4分钟</p><blockquote><p>linux命令格式为 命令 [-选项] [参数]</p></blockquote><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><table><thead><tr><th align="center">文件名</th><th>全称</th><th>介绍</th></tr></thead><tbody><tr><td align="center">bin</td><td>binaries</td><td>存放二进制可执行文件</td></tr><tr><td align="center">sbin</td><td>super user binaries</td><td>存放二进制可执行文件，root才能访问</td></tr><tr><td align="center">etc</td><td>etcetera</td><td>存放系统配置文件</td></tr><tr><td align="center">usr</td><td>unix shared resources</td><td>存放共享的系统资源</td></tr><tr><td align="center">home</td><td>-</td><td>存放用户文件的根目录</td></tr><tr><td align="center">root</td><td>-</td><td>超级管理员目录</td></tr><tr><td align="center">dev</td><td>devices</td><td>存放设备文件</td></tr><tr><td align="center">lib</td><td>library</td><td>存放根文件系统中程序运行需要的共享库和内核模块</td></tr><tr><td align="center">mnt</td><td>mount</td><td>系统管理员安装临时文件系统的安装点</td></tr><tr><td align="center">boot</td><td>-</td><td>存放用于系统引导时使用的各种文件</td></tr><tr><td align="center">tmp</td><td>temporary</td><td>用于存放各种临时文件</td></tr><tr><td align="center">var</td><td>variable</td><td>用于存放运行时需要改变数据的文件</td></tr></tbody></table><h1 id="文件及目录命令"><a href="#文件及目录命令" class="headerlink" title="文件及目录命令"></a>文件及目录命令</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">cd</td><td align="center"></td><td>cd /</td><td>切换目录</td></tr><tr><td align="center">pwd</td><td align="center"></td><td>pwd</td><td>显示当前工作目录的目录</td></tr><tr><td align="center">touch</td><td align="center"></td><td>touch test.txt</td><td>创建空文件</td></tr><tr><td align="center">mkdir</td><td align="center"></td><td>mkdir testDir</td><td>创建目录</td></tr><tr><td align="center">-</td><td align="center">-p</td><td>mkdir -p dir1/dir2/dir3</td><td>创建多级目录，父目录不存在情况下先生存父目录</td></tr><tr><td align="center">cp</td><td align="center"></td><td>cp 1.txt newDirectort</td><td>复制文件或目录到新地方</td></tr><tr><td align="center">-</td><td align="center">-r</td><td>cp -r dir1/ xxx</td><td>递归处理，目录及目录下文件一起拷贝到xxx</td></tr><tr><td align="center">mv</td><td align="center"></td><td>mv 文件1 文件2</td><td>将文件1重命名为文件2</td></tr><tr><td align="center">mv</td><td align="center"></td><td>mv 文件 目录</td><td>移动文件到目录</td></tr><tr><td align="center">mv</td><td align="center"></td><td>mv 源目录 目标目录</td><td>存在目标目录则移动，否则重命名</td></tr><tr><td align="center">rm</td><td align="center"></td><td>rm 1.txt</td><td>删除</td></tr><tr><td align="center">-</td><td align="center">-r -f</td><td>rm -rf dir1</td><td>r删除目录下的所有文件 f强制删除</td></tr><tr><td align="center">rmdir</td><td align="center"></td><td>rmdir dir1</td><td>删除空目录</td></tr><tr><td align="center">&gt;</td><td align="center"></td><td>echo xxx &gt; 1.txt</td><td>将前面的输出定向写入到文件,没有创建，有覆盖</td></tr><tr><td align="center">&gt;:</td><td align="center"></td><td>echo xx &gt;: 1.txt</td><td>写入，文件有内容覆盖</td></tr><tr><td align="center">&gt;&gt;</td><td align="center"></td><td>echo xx &gt;&gt; 1.txt</td><td>追加到文件，文件不存在创建</td></tr><tr><td align="center">&gt;&gt;:</td><td align="center"></td><td>echo xx &gt;&gt;: 1.txt</td><td>追加写入</td></tr></tbody></table><h1 id="文件内容命令"><a href="#文件内容命令" class="headerlink" title="文件内容命令"></a>文件内容命令</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">cat</td><td align="center"></td><td>cat 1.txt</td><td>显示文件内容</td></tr><tr><td align="center">more</td><td align="center"></td><td>more 1.txt</td><td>分页显示内容，可前后翻页。空格向后，b?</td></tr><tr><td align="center">less</td><td align="center"></td><td>less 1.txt</td><td>方向键查看内容，加载速度快</td></tr><tr><td align="center">head</td><td align="center"></td><td>head 1.txt</td><td>查看文件开头，默认看十行</td></tr><tr><td align="center">-</td><td align="center">- [num]</td><td>head -20 1.txt</td><td>查看固定行数内容</td></tr><tr><td align="center">tail</td><td align="center"></td><td>tail 1.txt</td><td>查看文件结尾，默认十行</td></tr><tr><td align="center">-</td><td align="center">- [num]</td><td>tail -20 1.txt</td><td>查看结尾固定行数内容</td></tr><tr><td align="center">-</td><td align="center">-f</td><td>tail -f 1.txt</td><td>循环滚动读取文件，根据文件属性追踪</td></tr><tr><td align="center">-</td><td align="center">-F</td><td>tail -F 1.txt</td><td>循环滚动读取文件动态，文件文件名追踪</td></tr><tr><td align="center">wc</td><td align="center"></td><td>wc 1.txt</td><td>统计行数、字数、字符数</td></tr><tr><td align="center">-</td><td align="center">-m</td><td>wc -m 1.txt</td><td>字符数</td></tr><tr><td align="center">-</td><td align="center">-w</td><td>wc  -w 1.txt</td><td>文本字数</td></tr><tr><td align="center">-</td><td align="center">-l</td><td>wc -l 1.txt</td><td>文本行数</td></tr><tr><td align="center">scp</td><td align="center"></td><td>复制远程机器的文件</td><td></td></tr></tbody></table><h1 id="查找命令"><a href="#查找命令" class="headerlink" title="查找命令"></a>查找命令</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">find</td><td align="center">-name</td><td>find dir -name 1.txt</td><td>在文件系统中查找文件</td></tr><tr><td align="center">grep</td><td align="center"></td><td>grep “aaa “ 1.txt</td><td>查找1.txt中的包含aaa的行</td></tr><tr><td align="center">-</td><td align="center"></td><td>grep zz *file</td><td>查找当前目录以file结尾的文件里有zz的行</td></tr><tr><td align="center">-</td><td align="center">-r</td><td>grep -r xxx /etc</td><td>递归的形式查找目录及目录的子目录下文件有xxx的行</td></tr><tr><td align="center">-</td><td align="center">-v</td><td>grep -v test *test</td><td>反向查找，查找不包含test的行</td></tr><tr><td align="center">-</td><td align="center">-E -n</td><td>grep -E -n “^w” 1.txt</td><td>-E使用正则查看1.txt中w开头的行，-n显示行号</td></tr><tr><td align="center">In</td><td align="center"></td><td>In1.txt 1_bak.txt</td><td>建立连接文件</td></tr><tr><td align="center">-</td><td align="center">-s</td><td>In -s 1.txt 1_bak.txt</td><td>建立符号连接，软连接。</td></tr></tbody></table><h1 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">top</td><td align="center"></td><td>top</td><td>显示当前系统中耗电最多的进程</td></tr><tr><td align="center">date</td><td align="center"></td><td>date</td><td>显示系统时间</td></tr><tr><td align="center">ps</td><td align="center"></td><td></td><td>配合参数使用</td></tr><tr><td align="center">-</td><td align="center">-e</td><td>ps -e</td><td>显示所有进程，环境变量</td></tr><tr><td align="center">-</td><td align="center">-f</td><td>ps -ef</td><td>全格式显示</td></tr><tr><td align="center">-</td><td align="center">-a</td><td>ps -a</td><td>显示所有用户的所有进程(包括其他用户)</td></tr><tr><td align="center">-</td><td align="center">-u</td><td>ps -au</td><td>按照用户名和启动时间显示进程</td></tr><tr><td align="center">-</td><td align="center">-x</td><td>ps -aux</td><td>显示无控制终端的进程</td></tr><tr><td align="center">kill</td><td align="center">-15</td><td>kill -15 pid</td><td>正常退出pid程序</td></tr><tr><td align="center">-</td><td align="center">-9</td><td>kill -9 pid</td><td>立即杀死进程</td></tr><tr><td align="center">df</td><td align="center"></td><td>df</td><td>显示文件系统磁盘空间状况</td></tr><tr><td align="center"></td><td align="center">-h</td><td></td><td>df -h</td></tr><tr><td align="center">du</td><td align="center"></td><td></td><td>显示指定目录及子目录已使用磁盘空间总和</td></tr><tr><td align="center">-</td><td align="center">-s</td><td>du -s *</td><td>显示指定目录，</td></tr><tr><td align="center">-</td><td align="center">-h</td><td>du -sh *</td><td>友好显示</td></tr><tr><td align="center">free</td><td align="center"></td><td>free</td><td>显示当前内存和交换空间情况</td></tr><tr><td align="center">ifconfig</td><td align="center"></td><td>ifconfig</td><td>网卡网络配置，ip,网关等</td></tr><tr><td align="center">-</td><td align="center"></td><td>ifconfig eth0 192.168.1.1</td><td>临时修改系统ip(需要重启)</td></tr><tr><td align="center">ping</td><td align="center"></td><td>ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></td><td>测试网络连通</td></tr><tr><td align="center">hostname</td><td align="center"></td><td>hostname</td><td>查看主机名</td></tr><tr><td align="center">shutdown</td><td align="center"></td><td>关机，参数 -help</td><td></td></tr><tr><td align="center">halt</td><td align="center"></td><td>halt</td><td>关机，相当于shutdown -h</td></tr><tr><td align="center">reboot</td><td align="center"></td><td>reboot</td><td>重启，shutdown -r</td></tr><tr><td align="center">sudo</td><td align="center"></td><td>暂时切换成root，ubuntu下一般是15分钟</td><td></td></tr><tr><td align="center">su</td><td align="center"></td><td>切换成root，没时间限制</td><td></td></tr></tbody></table><h1 id="压缩解压缩"><a href="#压缩解压缩" class="headerlink" title="压缩解压缩"></a>压缩解压缩</h1><table><thead><tr><th align="center">操作</th><th align="center">参数</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td align="center">gzip</td><td align="center"></td><td>gzip 1.txt</td><td>压缩文件或文件夹</td></tr><tr><td align="center">-</td><td align="center">-d</td><td>gzip -d 1.txt gz</td><td>解压文件</td></tr><tr><td align="center">-</td><td align="center">-[num]</td><td>gzip -9 1.txt</td><td>压缩速度，越快压缩比越小</td></tr><tr><td align="center">tar</td><td align="center"></td><td>打包压缩</td><td></td></tr></tbody></table><h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><p>-<strong>rwx</strong> rw- <strong>r–</strong><br>所属用户权限 所属组权限 其它用户权限<br>- 普通文件  d目录  l链接文件</p><p>chmod 修改文件权限<br>chown  修改用户权限</p><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><p><code>i</code>写模式<br><code>esc键</code>退出写模式<br><code>:</code>命令行模式<br><code>:wq</code>命令行模式下输入，保存退出</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown基本命令</title>
      <link href="/2022/03/20/markdown%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/20/markdown%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：428,阅读全文大约需要1分钟</p><blockquote><p>回顾一下markdown命令<br>内容有：1.标题  2.字体  3.引用  4.分割线  5.图片  6.超链接  7.列表  8.表格  9.代码</p></blockquote><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 一级标题</span><br><span class="line"></span><br><span class="line">## 二级标题</span><br></pre></td></tr></table></figure><p>效果： </p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="2-字体"><a href="#2-字体" class="headerlink" title="2. 字体"></a>2. 字体</h1><p><code>**加粗**</code> <strong>加粗</strong></p><p><code>*斜体*</code><em>斜体</em></p><p><code>***斜体加粗***</code><strong><em>斜体加粗</em></strong></p><p><code>~~删除线~~</code> <del>删除线</del></p><h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3.引用"></a>3.引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;一级引用</span><br><span class="line"></span><br><span class="line">&gt;&gt;二级引用</span><br></pre></td></tr></table></figure><blockquote><p>一级引用</p></blockquote><blockquote><blockquote><p>二级引用</p></blockquote></blockquote><h1 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.分割线"></a>4.分割线</h1><p><code>三个以上--- 或者***</code></p><h1 id="5-图片"><a href="#5-图片" class="headerlink" title="5.图片"></a>5.图片</h1><figure class="highlight plain"><figcaption><span>```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 6.超链接</span><br><span class="line"></span><br><span class="line">&#96; [超链接名](超链接地址&quot;超链接title&quot;)   title可不加 &#96;</span><br><span class="line"></span><br><span class="line"># 7.列表</span><br><span class="line"></span><br><span class="line">1. 无序列表</span><br><span class="line"></span><br><span class="line">&#96; - 内容 + 内容 * 内容   三种都行 符号空格内容 &#96;</span><br></pre></td></tr></table></figure><ul><li>xxx</li><li>xxx<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- xxx</span><br><span class="line">- xxx</span><br><span class="line"></span><br><span class="line">2. 有序列表</span><br></pre></td></tr></table></figure></li></ul><ol><li>xxx</li><li>xxx<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 8.表格</span><br><span class="line"></span><br><span class="line">&gt; &#96;---&#96; 默认左对齐， &#96;:---:&#96;居中对齐，&#96;---:&#96;右对齐</span><br></pre></td></tr></table></figure></li></ol><p>表头|表头|表头</p><p>—|:—:|—:</p><p>内容|xxx|xxx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 9.代码</span><br></pre></td></tr></table></figure><p><code>单行代码</code><br>//以下是多行代码<br>三个` (```)</p><p>多行代码</p><p>多行代码</p><p>三个` (```)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#96;单行代码&#96;</span><br></pre></td></tr></table></figure><p>多行代码</p><pre><code>---</code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven-archetype</title>
      <link href="/2022/03/20/maven-archetype/"/>
      <url>/2022/03/20/maven-archetype/</url>
      
        <content type="html"><![CDATA[<p>文章字数：647,阅读全文大约需要2分钟</p><blockquote><p><code>maven archetype</code>是<code>maven</code>提供的模板工具包，可以帮助用户提供项目模板。</p></blockquote><h1 id="常用的模板"><a href="#常用的模板" class="headerlink" title="常用的模板"></a>常用的模板</h1><ol><li><p><code>cocoon-22-archetype-webapp</code>: 有<code>applicationContext.xml</code>、<code>log4j.xml</code>、<code>web.xml</code>三个</p></li><li><p><code>maven-archetype-quickstart</code>: 简单的<code>java</code>程序模板，有测试类和普通入口</p></li><li><p><code>mavne-archetype-webapp</code>: 简单的<code>jsp</code>项目模板，里面有<code>web.xml</code>和<code>index.jsp</code></p></li></ol><h1 id="41个模板"><a href="#41个模板" class="headerlink" title="41个模板"></a>41个模板</h1><ol><li><code>appfuse-basic-jsf</code> (创建一个基于Hibernate，Spring和JSF的Web应用程序的原型) </li><li><code>appfuse-basic-spring</code> (创建一个基于Hibernate，Spring和Spring MVC的Web应用程序的原型) </li><li><code>appfuse-basic-struts</code> (创建一个基于Hibernate，Spring和Struts 2的Web应用程序的原型) </li><li><code>appfuse-basic-tapestry</code> (创建一个基于Hibernate，Spring 和 Tapestry 4的Web应用程序的原型) </li><li><code>appfuse-core</code>(创建一个基于Hibernate，Spring 和 XFire的jar应用程序的原型) </li><li><code>appfuse-modular-jsf</code>(创建一个基于Hibernate，Spring和JSF的模块化应用原型) </li><li><code>appfuse-modular-spring</code> (创建一个基于Hibernate, Spring 和 Spring MVC 的模块化应用原型) </li><li><code>appfuse-modular-struts</code> (创建一个基于Hibernate, Spring 和 Struts 2 的模块化应用原型) </li><li><code>appfuse-modular-tapestry</code> (创建一个基于 Hibernate, Spring 和 Tapestry 4 的模块化应用原型) </li><li><code>maven-archetype-j2ee-simple</code> (一个简单的J2EE的Java应用程序) </li><li><code>maven-archetype-marmalade-mojo</code> (一个Maven的 插件开发项目 using marmalade) </li><li><code>maven-archetype-mojo</code> (一个Maven的Java插件开发项目) </li><li><code>maven-archetype-portlet</code> (一个简单的portlet应用程序) </li><li><code>maven-archetype-profiles</code></li><li><code>maven-archetype-quickstart</code> </li><li><code>maven-archetype-site-simple</code> (简单的网站生成项目) </li><li><code>maven-archetype-site</code> (更复杂的网站项目) </li><li><code>maven-archetype-webapp</code> (一个简单的Java Web应用程序) </li><li><code>jini-service-archetype</code> (Archetype for Jini service project creation) </li><li><code>softeu-archetype-seam</code> (JSF+Facelets+Seam Archetype) </li><li><code>softeu-archetype-seam-simple</code> (JSF+Facelets+Seam (无残留) 原型) </li><li><code>softeu-archetype-jsf</code> (JSF+Facelets 原型) </li><li><code>jpa-maven-archetype</code> (JPA 应用程序) </li><li><code>spring-osgi-bundle-archetype</code> (Spring-OSGi 原型) </li><li><code>confluence-plugin-archetype</code> (Atlassian 聚合插件原型) </li><li><code>jira-plugin-archetype</code> (Atlassian JIRA 插件原型) </li><li><code>maven-archetype-har</code> (Hibernate 存档) </li><li><code>maven-archetype-sar</code> (JBoss 服务存档) </li><li><code>wicket-archetype-quickstart</code> (一个简单的Apache Wicket的项目) </li><li><code>scala-archetype-simple</code> (一个简单的scala的项目) </li><li><code>lift-archetype-blank</code> (一个 blank/empty liftweb 项目) </li><li><code>lift-archetype-basic</code> (基本（liftweb）项目) </li><li><code>cocoon-22-archetype-block-plain</code> ([<a href="http://cocoapacorg2/maven-plugins/]" target="_blank" rel="noopener">http://cocoapacorg2/maven-plugins/]</a>) </li><li><code>cocoon-22-archetype-block</code> ([<a href="http://cocoapacorg2/maven-plugins/]" target="_blank" rel="noopener">http://cocoapacorg2/maven-plugins/]</a>) </li><li><code>cocoon-22-archetype-webapp</code> ([<a href="http://cocoapacorg2/maven-plugins/]" target="_blank" rel="noopener">http://cocoapacorg2/maven-plugins/]</a>) </li><li><code>myfaces-archetype-helloworld</code> (使用MyFaces的一个简单的原型) </li><li><code>myfaces-archetype-helloworld-facelets</code> (一个使用MyFaces和Facelets的简单原型) </li><li><code>myfaces-archetype-trinidad</code> (一个使用MyFaces和Trinidad的简单原型) </li><li><code>myfaces-archetype-jsfcomponents</code> (一种使用MyFaces创建定制JSF组件的简单的原型) </li><li><code>gmaven-archetype-basic</code> (Groovy的基本原型) </li><li><code>gmaven-archetype-mojo</code> (Groovy mojo 原型)</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven依赖冲突</title>
      <link href="/2022/03/20/maven%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/"/>
      <url>/2022/03/20/maven%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：440,阅读全文大约需要1分钟</p><blockquote><p><code>maven</code>的依赖添加并不是只添加一个依赖。添加的依赖包里如果也有依赖其他的包，则会一同被添加进来，形成依赖树。而有时这些被动添加进来的依赖并不是我们想要的版本，导致依赖冲突。</p></blockquote><h1 id="发现依赖冲突"><a href="#发现依赖冲突" class="headerlink" title="发现依赖冲突"></a>发现依赖冲突</h1><ol><li><p>程序运行中发生类未找到，方法未找到，版本不匹配等问题都可能是依赖冲突导致的。依赖了一个低版本的包，导致一些类和方法找不到。</p></li><li><p>可以通过<code>maven</code>提供的依赖树查看功能看目前依赖的是那个包，然后查看应该依赖的包，并进行对比。</p></li></ol><h1 id="解决依赖冲突"><a href="#解决依赖冲突" class="headerlink" title="解决依赖冲突"></a>解决依赖冲突</h1><ol><li><p>利用<code>maven</code>的最小依赖路径原则，在更近的路径，如本包下引入需要的依赖。</p></li><li><p>可以使用<code>exclusions</code>排除包中不需要的依赖</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;exclusions&gt;</span><br><span class="line">    &lt;exclusion&gt;</span><br><span class="line">      &lt;artifactId&gt;commons-logging&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;groupId&gt;commons-logging&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;&#x2F;exclusion&gt;</span><br><span class="line">  &lt;&#x2F;exclusions&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven打包</title>
      <link href="/2022/03/20/maven%E6%89%93%E5%8C%85/"/>
      <url>/2022/03/20/maven%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>文章字数：126,阅读全文大约需要1分钟</p><h1 id="将依赖打包进jar"><a href="#将依赖打包进jar" class="headerlink" title="将依赖打包进jar"></a>将依赖打包进jar</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定JAVA源文件目录 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>main/src<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置资源文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>*/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置资源文件插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置编译插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置Jar打包插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*/*.xml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.properties<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/Test/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置Jar打包源文件插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-source-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>attach-sources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--输出依赖的jar--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>prepare-package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置jar的入口main所在类--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>article.Article<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven打包命令</title>
      <link href="/2022/03/20/maven%E6%89%93%E5%8C%85%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/20/maven%E6%89%93%E5%8C%85%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：417,阅读全文大约需要1分钟</p><h1 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h1><p><code>mvn clean package</code>依次执行了<code>clean</code>、<code>resources</code>、<code>compile</code>、<code>testResources</code>、<code>testCompile</code>、<code>test</code>、<code>jar</code>(打包)等７个阶段。<br><code>mvn clean install</code>依次执行了<code>clean</code>、<code>resources</code>、<code>compile</code>、<code>testResources</code>、testCompile、test、jar(打包)、install等8个阶段。<br><code>mvn clean deploy</code>依次执行了clean、resources、compile、testResources、testCompile、test、jar(打包)、install、deploy等９个阶段。</p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><p>package命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库<br>install命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库<br>deploy命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mqttv3实现mqttCLient端</title>
      <link href="/2022/03/20/mqttv3%E5%AE%9E%E7%8E%B0mqttCLient%E7%AB%AF/"/>
      <url>/2022/03/20/mqttv3%E5%AE%9E%E7%8E%B0mqttCLient%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：178,阅读全文大约需要1分钟</p><blockquote><p>使用<code>org.eclipse.paho.client.mqttv3</code>包下的工具创建<code>mqtt</code>连接，并订阅和发布消息。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String topic = <span class="string">"defaultTopic"</span>;</span><br><span class="line">        String content = <span class="string">"Message from 123xxx"</span>;</span><br><span class="line">        <span class="keyword">int</span> qos = <span class="number">2</span>;</span><br><span class="line">        String broker = <span class="string">"tcp://127.0.0.1:1883"</span>;</span><br><span class="line"></span><br><span class="line">        String clientId=<span class="string">"123xxx"</span>;</span><br><span class="line">        String userName = <span class="string">"admin"</span>;</span><br><span class="line">        String pwd = <span class="string">"admin"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 不传递persistence默认使用文件保存未发送的消息，传递null使用内存保存未发送的消息</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            MqttClient mqttClient = <span class="keyword">new</span> MqttClient(broker, clientId, <span class="keyword">null</span>);</span><br><span class="line">            MqttConnectOptions connOpts = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 再次连接时是否清除上次的session，即重新连接时是否不接收未收到的消息。只有重新连接时才能够更改此参数</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            connOpts.setCleanSession(<span class="keyword">true</span>);</span><br><span class="line">            connOpts.setUserName(userName);</span><br><span class="line">            connOpts.setPassword(pwd.toCharArray());</span><br><span class="line">            <span class="comment">// 发起连接</span></span><br><span class="line">            mqttClient.connect(connOpts);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 订阅</span></span><br><span class="line">            MqttCallback callback = <span class="keyword">new</span> MessageProcess();</span><br><span class="line">            mqttClient.setCallback(callback);</span><br><span class="line">            mqttClient.subscribe(topic);</span><br><span class="line">            <span class="comment">// 发布</span></span><br><span class="line">            <span class="comment">// 1.创建需要发布的消息</span></span><br><span class="line">            MqttMessage message = <span class="keyword">new</span> MqttMessage(content.getBytes());</span><br><span class="line">            message.setQos(qos);</span><br><span class="line">            <span class="comment">// 2.循环模拟发布</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                mqttClient.publish(topic, message);</span><br><span class="line">                System.out.println(<span class="string">"Message published"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MqttException me) &#123;</span><br><span class="line">            System.out.println(<span class="string">"reasonCode "</span> + me.getReasonCode());</span><br><span class="line">            System.out.println(<span class="string">"message "</span> + me.getMessage());</span><br><span class="line">            System.out.println(<span class="string">"localizedMessage "</span> + me.getLocalizedMessage());</span><br><span class="line">            System.out.println(<span class="string">"cause "</span> + me.getCause());</span><br><span class="line">            System.out.println(<span class="string">"exception "</span> + me.getMessage());</span><br><span class="line">            me.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageProcess</span> <span class="keyword">implements</span> <span class="title">MqttCallback</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connectionLost</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 断线 手动重连</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageArrived</span><span class="params">(String topic, MqttMessage message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">byte</span>[] mess = message.getPayload();</span><br><span class="line">            System.out.println(<span class="string">"topic["</span> + topic + <span class="string">"]:"</span> + <span class="keyword">new</span> String(mess));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deliveryComplete</span><span class="params">(IMqttDeliveryToken iMqttDeliveryToken)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 确认信息已经传递完毕调用</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql输出字符到文件</title>
      <link href="/2022/03/20/mysql%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E5%88%B0%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/20/mysql%E8%BE%93%E5%87%BA%E5%AD%97%E7%AC%A6%E5%88%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：77,阅读全文大约需要1分钟</p><blockquote><p>输出固定字符串，保存字符串到文件内。</p></blockquote><ul><li>输出字符串<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> substring_index(<span class="string">'重庆,四川,北京'</span>,<span class="string">'.'</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></li><li>保存结果到文件<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//语句</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> (表名) <span class="keyword">INTO</span> <span class="keyword">OUTFILE</span> <span class="string">'/usr/local/test.txt'</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> gbk;</span><br><span class="line">//命令行</span><br><span class="line">mysql -h 127.0.0.1 -u用户名 -p密码 <span class="comment">--default-character-set=gb2312 -e "select * from 表名" 数据库名 &gt; test.txt</span></span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mqtt发布被阻塞</title>
      <link href="/2022/03/20/mqtt%E5%8F%91%E5%B8%83%E8%A2%AB%E9%98%BB%E5%A1%9E/"/>
      <url>/2022/03/20/mqtt%E5%8F%91%E5%B8%83%E8%A2%AB%E9%98%BB%E5%A1%9E/</url>
      
        <content type="html"><![CDATA[<p>文章字数：281,阅读全文大约需要1分钟</p><blockquote><p>记录一次debug的过程。</p></blockquote><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><ol><li>最初是发现<code>mqtt</code>只会接收一次订阅到的消息，然后就不会再接收消息了。</li><li>之后经过排查发现是<code>publish</code>方法被阻塞了，进去就出不来。</li></ol><h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><ol><li>最早的表现是使用<code>mqttBox</code>模拟设备向服务器发送请求，只发现服务器回应了一次。</li><li>因为是本地开发环境，所以直接打断点。发现不是回应出错，而是只接受到了一次订阅的信息。</li><li>再次跟踪程序，发现进入<code>publish</code>方法之后再也没有出来。</li><li>期初以为只是发送的方法被阻塞，后来意识到发布消息是在处理订阅的方法里以同步的形式进行的，而且还使用同一个连接。有可能是发送需要等待上个任务结束才能进行，然而上个任务需要发送结束了才能返回。于是陷入死循环。</li><li>接收到消息用新开的线程处理，问题解决。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty websocket</title>
      <link href="/2022/03/20/netty%20websocket/"/>
      <url>/2022/03/20/netty%20websocket/</url>
      
        <content type="html"><![CDATA[<p>文章字数：311,阅读全文大约需要1分钟</p><blockquote><p>使用netty构建websocket服务器</p></blockquote><h1 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> port;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line"> </span><br><span class="line">        EventLoopGroup group = <span class="keyword">new</span> NioEventLoopGroup();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap sb = <span class="keyword">new</span> ServerBootstrap();</span><br><span class="line">            sb.option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>);</span><br><span class="line">            sb.group(group, bossGroup) <span class="comment">// 绑定线程池</span></span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>) // 指定使用的<span class="title">channel</span></span></span><br><span class="line"><span class="class">                    .<span class="title">localAddress</span>(<span class="title">this</span>.<span class="title">port</span>)// 绑定监听端口</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123; <span class="comment">// 绑定客户端连接时候触发操作</span></span><br><span class="line"> </span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            System.out.println(<span class="string">"收到新连接"</span>);</span><br><span class="line">                            <span class="comment">//websocket协议本身是基于http协议的，所以这边也要使用http解编码器</span></span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line">                            <span class="comment">//以块的方式来写的处理器</span></span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> HttpObjectAggregator(<span class="number">8192</span>));</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> MyWebSocketHandler());</span><br><span class="line">                            ch.pipeline().addLast(<span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">"/ws"</span>, <span class="string">"WebSocket"</span>, <span class="keyword">true</span>, <span class="number">65536</span> * <span class="number">10</span>));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            ChannelFuture cf = sb.bind().sync(); <span class="comment">// 服务器异步创建绑定</span></span><br><span class="line">            System.out.println(NettyServer.class + " 启动正在监听： " + cf.channel().localAddress());</span><br><span class="line">            cf.channel().closeFuture().sync(); <span class="comment">// 关闭服务器通道</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully().sync(); <span class="comment">// 释放线程池资源</span></span><br><span class="line">            bossGroup.shutdownGracefully().sync();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="通道处理"><a href="#通道处理" class="headerlink" title="通道处理"></a>通道处理</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSocketHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">TextWebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"与客户端建立连接，通道开启！"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加到channelGroup通道组</span></span><br><span class="line">        MyChannelHandlerPool.channelGroup.add(ctx.channel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"与客户端断开连接，通道关闭！"</span>);</span><br><span class="line">        <span class="comment">//添加到channelGroup 通道组</span></span><br><span class="line">        MyChannelHandlerPool.channelGroup.remove(ctx.channel());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//首次连接是FullHttpRequest，处理参数 by zhengkai.blog.csdn.net</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != msg &amp;&amp; msg <span class="keyword">instanceof</span> FullHttpRequest) &#123;</span><br><span class="line">            FullHttpRequest request = (FullHttpRequest) msg;</span><br><span class="line">            String uri = request.uri();</span><br><span class="line"></span><br><span class="line">            Map paramMap=getUrlParams(uri);</span><br><span class="line">            System.out.println(<span class="string">"接收到的参数是："</span>+JSON.toJSONString(paramMap));</span><br><span class="line">            <span class="comment">//如果url包含参数，需要处理</span></span><br><span class="line">            <span class="keyword">if</span>(uri.contains(<span class="string">"?"</span>))&#123;</span><br><span class="line">                String newUri=uri.substring(<span class="number">0</span>,uri.indexOf(<span class="string">"?"</span>));</span><br><span class="line">                System.out.println(newUri);</span><br><span class="line">                request.setUri(newUri);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(msg <span class="keyword">instanceof</span> TextWebSocketFrame)&#123;</span><br><span class="line">            <span class="comment">//正常的TEXT消息类型</span></span><br><span class="line">            TextWebSocketFrame frame=(TextWebSocketFrame)msg;</span><br><span class="line">            System.out.println(<span class="string">"客户端收到服务器数据："</span> +frame.text());</span><br><span class="line">            sendAllMessage(frame.text());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">super</span>.channelRead(ctx, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, TextWebSocketFrame textWebSocketFrame)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendAllMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        <span class="comment">//收到信息后，群发给所有channel</span></span><br><span class="line">        MyChannelHandlerPool.channelGroup.writeAndFlush( <span class="keyword">new</span> TextWebSocketFrame(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Map <span class="title">getUrlParams</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        url = url.replace(<span class="string">"?"</span>,<span class="string">";"</span>);</span><br><span class="line">        <span class="keyword">if</span> (!url.contains(<span class="string">";"</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (url.split(<span class="string">";"</span>).length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            String[] arr = url.split(<span class="string">";"</span>)[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);</span><br><span class="line">            <span class="keyword">for</span> (String s : arr)&#123;</span><br><span class="line">                String key = s.split(<span class="string">"="</span>)[<span class="number">0</span>];</span><br><span class="line">                String value = s.split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line">                map.put(key,value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>  map;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><blockquote><p>后端有做参数截取，url里可以直接放参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket &#x3D; new WebSocket(&quot;ws:&#x2F;&#x2F;127.0.0.1:12345&#x2F;ws?uid&#x3D;666&amp;gid&#x3D;777&quot;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 网络 </tag>
            
            <tag> netty </tag>
            
            <tag> webSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nosql</title>
      <link href="/2022/03/20/nosql/"/>
      <url>/2022/03/20/nosql/</url>
      
        <content type="html"><![CDATA[<p>文章字数：38,阅读全文大约需要1分钟</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><ol><li><code>key-value</code>类型：<code>redis</code></li><li>列存储数据库: <code>HBase</code></li><li>文档型数据库：<code>MongoDB</code></li><li>图数据库：<code>Neo4j(使用查询语言Cypher)</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>onsubimt事件未触发</title>
      <link href="/2022/03/20/onsubimt%E4%BA%8B%E4%BB%B6%E6%9C%AA%E8%A7%A6%E5%8F%91/"/>
      <url>/2022/03/20/onsubimt%E4%BA%8B%E4%BB%B6%E6%9C%AA%E8%A7%A6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>文章字数：94,阅读全文大约需要1分钟<br>表现：表单使用<code>form.submit()</code>提交为出发点<code>onsubmit事件</code><br>原因：</p><ol><li><code>elemForm.submit()</code>不会触发表单的onsubmit事件</li><li><code>name=&quot;submit&quot;</code>的表单元素会覆盖默认的提交元素，而<code>form.submit()</code>本身就是对默认元素的引用</li><li><code>onclick=&quot;xxx&quot;</code>xxx代表着触发事件之后的执行，如果是执行某个函数需要括号<code>onclick=&quot;xxx()&quot;</code></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>oop-klass二分模型</title>
      <link href="/2022/03/20/oop-klass%E4%BA%8C%E5%88%86%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/03/20/oop-klass%E4%BA%8C%E5%88%86%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：308,阅读全文大约需要1分钟</p><blockquote><p><code>HotSpot JVM</code>中<code>java</code>的对象是用<code>OOP-Klass</code>模型来对应的。</p></blockquote><h1 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h1><p><code>Ordinary Object Pointer</code> 普通对象指针，主要职能是标识对象的实例数据（存储在堆里）。<br>根据<code>JVM</code>内部使用的对象业务类型，具有多种<code>oopDesc</code>子类，比如<code>instanceOopDesc</code>表示类的实例，<code>arrayOopDesc</code>表示数组。<br>包含：</p><ol><li><code>Mark Word</code>主要存储对象运行时记录信息，如<code>hashcode</code>、<code>GC</code>分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等；</li><li>元数据指针，<code>_metadata</code>成员，可以表示未压缩和压缩的<code>Klass</code>指针，指向<code>Klass</code>对象（存储元数据的类）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">oopDesc</span> &#123;</span></span><br><span class="line"> <span class="comment">//....</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">  <span class="keyword">volatile</span> markOop _mark;</span><br><span class="line">  <span class="keyword">union</span> _metadata &#123;</span><br><span class="line">    Klass*      _klass;</span><br><span class="line">    narrowKlass _compressed_klass;</span><br><span class="line">  &#125; _metadata;</span><br><span class="line"> <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Klass"><a href="#Klass" class="headerlink" title="Klass"></a>Klass</h1><p>包含<strong>元数据</strong>和<strong>方法信息</strong>，用来描述<code>java</code>类（存储在方法区）<br>每个已加载的<code>java</code>类都会创建一个<code>instanceKlass</code>对象，用来标识<code>java</code>内部类型的机制。<br>包含：</p><ol><li><code>ClassState</code>: 描述了类加载的状态：分配、加载、连接、初始化</li><li><code>instanceKlass</code>: 声明接口、字段、方法数组、常量池、源文件名等</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">instanceKlass</span>:</span> <span class="keyword">public</span> Klass &#123;</span><br><span class="line">  <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">VMStructs</span>;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">enum</span> ClassState &#123;</span><br><span class="line">    unparsable_by_gc = <span class="number">0</span>,               <span class="comment">// object is not yet parsable by gc. Value of _init_state at object allocation.</span></span><br><span class="line">    allocated,                          <span class="comment">// allocated (but not yet linked)</span></span><br><span class="line">    loaded,                             <span class="comment">// loaded and inserted in class hierarchy (but not linked yet)</span></span><br><span class="line">    linked,                             <span class="comment">// successfully linked/verified (but not initialized yet)</span></span><br><span class="line">    being_initialized,                  <span class="comment">// currently running class initializer</span></span><br><span class="line">    fully_initialized,                  <span class="comment">// initialized (successfull final state)</span></span><br><span class="line">    initialization_error                <span class="comment">// error happened during initialization</span></span><br><span class="line">  &#125;;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//部分内容省略</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">  <span class="comment">// Method array.  方法数组</span></span><br><span class="line">  objArrayOop     _methods; </span><br><span class="line">  <span class="comment">// Interface (klassOops) this class declares locally to implement.</span></span><br><span class="line">  objArrayOop     _local_interfaces;  <span class="comment">//该类声明要实现的接口.</span></span><br><span class="line">  <span class="comment">// Instance and static variable information</span></span><br><span class="line">  typeArrayOop    _fields; </span><br><span class="line">  <span class="comment">// Constant pool for this class.</span></span><br><span class="line">  constantPoolOop _constants;     <span class="comment">//常量池</span></span><br><span class="line">  <span class="comment">// Class loader used to load this class, NULL if VM loader used.</span></span><br><span class="line">  oop             _class_loader;  <span class="comment">//类加载器</span></span><br><span class="line">  typeArrayOop    _inner_classes;   <span class="comment">//内部类</span></span><br><span class="line">  Symbol*         _source_file_name;   <span class="comment">//源文件名</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> oop-klass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openssl</title>
      <link href="/2022/03/20/openssl/"/>
      <url>/2022/03/20/openssl/</url>
      
        <content type="html"><![CDATA[<p>文章字数：623,阅读全文大约需要2分钟</p><blockquote><p><code>openssl</code>是目前最流行的<code>SSL</code>密码库工具，提供了一组通用、健壮、完备的工具。</p></blockquote><h1 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h1><ul><li>密码算法库</li><li>秘钥和证书封装管理</li><li><code>SSL</code>通讯<code>API</code>接口</li></ul><h1 id="秘钥操作"><a href="#秘钥操作" class="headerlink" title="秘钥操作"></a>秘钥操作</h1><ol><li>生成不加密的<code>RSA</code>私钥</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out rsa_private.key 2048</span><br></pre></td></tr></table></figure><ol start="2"><li>使用不加密的<code>RSA</code>私钥生成公钥</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_private.key -pubout -out rsa_public.key</span><br></pre></td></tr></table></figure><ol start="3"><li>生成加密<code>RSA</code>私钥（使用<code>AES256</code>加密）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -aes256 -passout pass:123456 -out rsa_aes_private.key 2048</span><br></pre></td></tr></table></figure><ol start="4"><li>使用加密的<code>RSA</code>私钥生成公钥</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_aes_private.key -passin pass:123456 -pubout -out rsa_public.key</span><br></pre></td></tr></table></figure><h1 id="转换相关"><a href="#转换相关" class="headerlink" title="转换相关"></a>转换相关</h1><ol><li>加密私钥转非加密</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_aes_private.key -passin pass:123456 -out rsa_private.key</span><br></pre></td></tr></table></figure><ol start="2"><li>非加密私钥转加密</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_private.key -aes256 -passout pass:123456 -out rsa_aes_private.key</span><br></pre></td></tr></table></figure><ol start="3"><li>私钥<code>PEM</code>转<code>DER</code></li></ol><ul><li><code>-inform</code>和<code>-outform</code>参数制定输入输出格式，由<code>der</code>转<code>pem</code>格式同理</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_private.key -outform der-out rsa_aes_private.der</span><br></pre></td></tr></table></figure><ol start="4"><li>私钥<code>PKCS1</code>转<code>PKCS8</code>(加密算法填充模式)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -in rsa_private.key -passout pass:123456 -out pkcs8_private.key</span><br></pre></td></tr></table></figure><ol start="5"><li>查看私钥明细</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -in rsa_private.key -noout -text</span><br></pre></td></tr></table></figure><h1 id="生成自签证书"><a href="#生成自签证书" class="headerlink" title="生成自签证书"></a>生成自签证书</h1><ol><li>生成<code>RSA</code>私钥和自签名证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -newkey rsa:2048 -nodes -keyout rsa_private.key -x509 -days 365 -out cert.crt</span><br></pre></td></tr></table></figure><ul><li><code>req</code>证书请求的子命令</li><li><code>newkey rsa:2048 -keyout private_key.pem</code>生成私钥（<code>PKCS8</code>格式）</li><li><code>-nodes</code>秘钥不加密，无此参数则提示输入密码</li><li><code>-x509</code>输出证书</li><li><code>-days365</code>有效期</li><li><code>subj</code>证书拥有者信息，如果没有此参数，也可以根据提示输入</li></ul><ol start="2"><li>使用已有<code>RSA</code>私钥生成自签名证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -x509 -days 365 -key rsa_private.key -out cert.crt</span><br></pre></td></tr></table></figure><ul><li><code>-new</code>生成证书请求</li><li><code>-x509</code>直接输出证书</li><li><code>-key</code>指定私钥</li></ul><h1 id="生成签名请求文件及CA签名"><a href="#生成签名请求文件及CA签名" class="headerlink" title="生成签名请求文件及CA签名"></a>生成签名请求文件及CA签名</h1><ol><li>生成RSA秘钥</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -aes256 -passout pass:123456 -out server.key 2048</span><br></pre></td></tr></table></figure><ol start="2"><li>生成CSR签名请求（把秘钥生成向CA发起签发证书请求的文件）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key server.key -out server.csr -subj &quot;&#x2F;C&#x3D;CN&#x2F;ST&#x3D;FJ&#x2F;L&#x3D;XM&#x2F;O&#x3D;COL&#x2F;CN&#x3D;127.0.0.1&quot;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用CA证书及CA秘钥，对请求签发证书进行签发，生成<code>x509</code>证书</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl x509 -req -days 3650 -in server.csr -CA ca.cert -CAkey ca.key -passin pass:123456 -CAcreateserial -out server.crt</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>osi和tcp-ip</title>
      <link href="/2022/03/20/osi%E5%92%8Ctcp-ip/"/>
      <url>/2022/03/20/osi%E5%92%8Ctcp-ip/</url>
      
        <content type="html"><![CDATA[<p>文章字数：532,阅读全文大约需要2分钟</p><blockquote><p>OSI开放系统互联(open system interconnection)是由国际标准化组织(ISO)指定的七层计算机互联模型。TCP/IP则是简化版的OSI,TCP/IP是四层模型，并且淘汰了OSI,被大规模使用。</p></blockquote><h1 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h1><table><thead><tr><th align="left">位置</th><th align="left">模型层名</th><th align="left">作用</th><th align="left">常见协议</th></tr></thead><tbody><tr><td align="left">主机</td><td align="left">应用层</td><td align="left">访问网络服务的端口，应用程序协议</td><td align="left">HTTP、FTP、SMTP、TELNET、DNS</td></tr><tr><td align="left">主机</td><td align="left">表示层</td><td align="left">数据格式转换、语义关联</td><td align="left">LPP(轻量级表示协议)、NBSSN NetBIOS(会话服务协议)、XDP(外部数据表示协议)</td></tr><tr><td align="left">主机</td><td align="left">会话层</td><td align="left">建立端连接，提供访问验证会话管理</td><td align="left">SSL(安全套接字层协议)、TLS(传输层安全协议)、RPC(远程过程调用协议)、DAP(目录访问协议)、LDAP(轻量级目录访问协议)</td></tr><tr><td align="left">主机</td><td align="left">传输层</td><td align="left">端到端基础通讯</td><td align="left">TCP、UDP</td></tr><tr><td align="left">网络</td><td align="left">网络层</td><td align="left">节点，子网控制。逻辑编址、分组传输、路由选择</td><td align="left">ipv4、ipv6、icmp(报文控制协议)ping发送的就是icmp</td></tr><tr><td align="left">网络</td><td align="left">链路层</td><td align="left">物理寻址，将比特流建立逻辑传输路线</td><td align="left"></td></tr><tr><td align="left">网络</td><td align="left">物理层</td><td align="left">原始比特传输</td><td align="left">IEEE 802.2</td></tr></tbody></table><h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><table><thead><tr><th>模型层名</th><th>作用</th></tr></thead><tbody><tr><td>应用层</td><td>用户进程</td></tr><tr><td>运输层</td><td>TCP、UDP</td></tr><tr><td>网络层</td><td>ICMP、IP、IGMP</td></tr><tr><td>链路层</td><td>ARP、硬件接口、RARP</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postgreSql-json</title>
      <link href="/2022/03/20/postgreSql-json/"/>
      <url>/2022/03/20/postgreSql-json/</url>
      
        <content type="html"><![CDATA[<p>文章字数：59,阅读全文大约需要1分钟</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从data表中模糊查询data_content(json)中的code属性</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">data</span> <span class="keyword">where</span> data_content::<span class="keyword">json</span> -&gt;&gt; <span class="string">'code'</span> <span class="keyword">like</span> <span class="string">'%123%'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- ::json转成json</span></span><br><span class="line"><span class="comment">--  -&gt;&gt;接收字符串</span></span><br><span class="line"><span class="comment">-- --&gt;&gt;'code' 字符串类型的code字段</span></span><br></pre></td></tr></table></figure><h1 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-&gt; / -&gt;&gt; 取一层</span><br><span class="line"><span class="comment">#&gt; / #&gt;&gt; 可取多层：  jsonContent::json #&gt;&gt;&#123;a,b&#125;    //bbbb</span></span><br><span class="line">&#123;"a":"&#123;'b':'bbbb'&#125;"&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python线程和进程</title>
      <link href="/2022/03/20/python%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/"/>
      <url>/2022/03/20/python%E7%BA%BF%E7%A8%8B%E5%92%8C%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：185,阅读全文大约需要1分钟</p><h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><p>线程和进程都是并发操作，多个代码块并行（几乎）操作</p><h1 id="不同"><a href="#不同" class="headerlink" title="不同"></a>不同</h1><p>进程是操作系统级别的，等于打开多个程序<br>线程是进程下又开辟的多个并行代码</p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><p>线程开销小，但是<code>python</code>的线程是基于解释器的，解释器有个全局锁。实际上代码还是串行执行的。<br>进程开销大但是是并行处理，能够利用多核处理器的优势。<br>线程在io密集时可以使用，计算密集的状态下不仅并行和单线程时间一样，还要多算线程切换的消耗。计算密集的情况下还是使用多进程。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redisTemplate中使用sacn替代keys</title>
      <link href="/2022/03/20/redisTemplate%E4%B8%AD%E4%BD%BF%E7%94%A8sacn%E6%9B%BF%E4%BB%A3keys/"/>
      <url>/2022/03/20/redisTemplate%E4%B8%AD%E4%BD%BF%E7%94%A8sacn%E6%9B%BF%E4%BB%A3keys/</url>
      
        <content type="html"><![CDATA[<p>文章字数：120,阅读全文大约需要1分钟</p><blockquote><p><code>keys</code>命令是用于查找所有符合要求的<code>key</code>，但是<code>redis</code>是单线程操作，单个命令占用时间太长会降低效率。<code>scan</code>命令是通过游标的方式逐个返回匹配的对象，可以提交<code>keys</code>命令</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scan</span><span class="params">(String pattern, Consumer&lt;<span class="keyword">byte</span>[]&gt; consumer)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.stringRedisTemplate.execute((RedisConnection connection) -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> (Cursor&lt;<span class="keyword">byte</span>[]&gt; cursor =</span><br><span class="line">            connection.scan(ScanOptions.scanOptions().count(Long.MAX_VALUE).match(pattern).build())) &#123;</span><br><span class="line">            cursor.forEachRemaining(consumer);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取符合条件的key</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pattern 表达式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">keys</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">this</span>.scan(pattern, item -&gt; &#123;</span><br><span class="line">        <span class="comment">// 符合条件的key</span></span><br><span class="line">        String key = <span class="keyword">new</span> String(item, StandardCharsets.UTF_8);</span><br><span class="line">        keys.add(key);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> keys;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基本语法</title>
      <link href="/2022/03/20/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
      <url>/2022/03/20/python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：987,阅读全文大约需要3分钟</p><blockquote><p>指定字符编码 <code># -*- coding: utf-8 -*-</code></p></blockquote><h1 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h1><ol><li>输入 <code>name = input()</code></li><li>输出 <code>print(&#39;1+1=&#39;,1+1)</code></li></ol><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><ol><li><p>if</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># :后面的缩进（4个空格）都是代码块</span></span><br><span class="line">a = <span class="number">100</span></span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">0</span>:</span><br><span class="line">    print(a)</span><br><span class="line"><span class="keyword">elif</span> a = <span class="number">0</span>:</span><br><span class="line">    print(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(-a)</span><br></pre></td></tr></table></figure></li><li><p>for</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">names = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names</span><br><span class="line">    print(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    sum = sum + x</span><br></pre></td></tr></table></figure><ol start="3"><li>while</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    sum = sum + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br></pre></td></tr></table></figure><ol start="4"><li>退出</li></ol><ul><li><code>break</code>退出所有循环</li><li><code>continue</code>退出本次循环</li></ul><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><blockquote><p>变量不用声明，直接用 a=123</p></blockquote><ol><li>整数 <code>1</code></li><li>浮点数 <code>1.23</code></li><li>字符串</li></ol><ul><li><code>&#39; &#39;</code></li><li><code>&quot; &quot;</code></li><li><code>r&#39; &#39;</code> 内部不转义</li><li><code>&#39;&#39;&#39; sss &#39;&#39;&#39;</code> 多行文本</li></ul><ol start="4"><li>布尔值 <code>True</code> <code>False</code>使用<code>and</code> <code>or</code> <code>not</code>运算</li><li>空值 <code>None</code></li></ol><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ol><li><code>list</code></li></ol><ul><li>声明 <code>classmates = [&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;]</code></li><li>长度 <code>len(classmates)</code></li><li>正向下标取值<code>classmates[0]</code> 第一个</li><li>负向下标取值<code>classmates[-1]</code> 最后一个</li><li>追加到末尾<code>classmates.append(&#39;Adam&#39;)</code></li><li>插入指定位置<code>classmates.insert(1, &#39;Jack&#39;)</code></li><li>删除末尾<code>classmates.pop()</code></li><li>删除指定位置<code>classmates.pop(1)</code></li><li>切片获取 <code>r[0:3]</code>从0取到3,0可省略</li></ul><ol start="2"><li><code>tuple</code>不可变集合</li></ol><ul><li>声明<code>classmates = (&#39;Michael&#39;, &#39;Bob&#39;, &#39;Tracy&#39;)</code></li><li>声明空的<code>tuple</code> ：<code>t = ()</code></li><li>声明一个：<code>t = (1,)</code>为了和数值型区分，后面加<code>,</code></li></ul><ol start="4"><li><code>dict</code>:键值对</li></ol><ul><li>声明 <code>d = {&#39;Michael&#39;: 95, &#39;Bob&#39;: 75, &#39;Tracy&#39;: 85}</code></li><li>取出<code>d[&#39;Michael&#39;]</code>或者<code>d.get(&#39;Michael&#39;)</code></li><li>判断是否<code>key</code>在字典中<code>&#39;Thomas&#39; in d</code>返回布尔</li><li>删除<code>d.pop(&#39;Bob&#39;)</code></li></ul><ol start="5"><li><code>set</code>无序集合</li></ol><ul><li>声明<code>s = set([1, 2, 3])</code></li><li>添加<code>s.add(4)</code></li><li>删除<code>remove(key)</code></li><li>交集并集<code>s1 &amp; s2</code> <code>s1 | s2</code></li></ul><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ol><li><p>函数赋值<code>a = abs</code>指向<code>abs()</code>,然后<code>a()</code></p></li><li><p>声明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_fun</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="comment"># 返回None</span></span><br><span class="line">    <span class="keyword">return</span></span><br></pre></td></tr></table></figure></li><li><p>空函数</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nop</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 占位，也可用于循环的占位</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ol start="4"><li>返回多值</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xx</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 其实是个cuple</span></span><br><span class="line">x, y = xx()</span><br></pre></td></tr></table></figure><h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><ul><li>对象迭代</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d:</span><br><span class="line">    print(key)</span><br></pre></td></tr></table></figure><ul><li>声明</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># object代表父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cl</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="comment"># self代表本身，永远是第一个</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span></span></span><br><span class="line">        self.name = nema</span><br></pre></td></tr></table></figure><p><code>c = Cl(&#39;123&#39;)</code></p><ul><li><p>指定对象可以使用的属性<br><code>__slots__ = (&#39;name&#39;, &#39;age&#39;)</code>仅当前类有用，子类无作用</p></li><li><p>toString 写<code>__str__</code>方法</p></li><li><p>类作用于<code>len()</code>：写<code>__len__</code>方法</p></li><li><p>对象可以被遍历</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="comment"># 迭代器每次都会调用这个方法，接收返回</span></span><br><span class="line">    <span class="comment"># raise StopIteration()退出（抛出异常）</span></span><br></pre></td></tr></table></figure><ul><li>get set</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self._score</span><br><span class="line"></span><br><span class="line"><span class="meta">@score.setter</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self, value)</span>:</span></span><br></pre></td></tr></table></figure><p><code>s.score</code>:等于<code>s.get_sore()</code><br><code>s.score = 60</code>:<code>s.set_sore(60)</code></p><h1 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h1><ol><li>map/reduce<br><code>r = map(f, [1, 2, 3, 4, 5, 6, 7, 8, 9])</code>f是函数，接收一个值，map会把list的参数一个个传进去</li></ol><p><code>reduce(f, [x1, x2, x3, x4])</code>f是函数，接收两个值第一个是上一个的返回值，第二个是list的元素</p><ol start="2"><li><p>filter <code>filter(is_odd, [1, 2, 4, 5, 6, 9, 10, 15])</code>返回满足条件的集合</p></li><li><p><code>sorted([36, 5, -12, 9, -21])</code>排序</p></li><li><p>函数可以返回函数</p></li><li><p>获取函数变量的方法名<code>fun.__name__</code></p></li></ol><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><ul><li>定义<code>abc.py</code>就是<code>abc</code>模块</li><li>引入<code>import abc</code></li></ul><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><ol><li><code>range(5)</code>生成 0-5 的有序集合</li><li><code>list(range(5))</code>展示list</li><li><code>b = a.replace(&#39;a&#39;, &#39;A&#39;)</code>字符替换</li><li><code>help(abs)</code>查看函数说明</li><li><code>abs(100)</code>取整</li><li><code>int()</code>转换类型</li><li><code>max(1,2,3,)</code>取最大值</li><li><code>hex()</code>十进制转16</li><li><code>now()</code>现在的时间</li><li><code>type(&#39;abc&#39;)</code>获取类型，也可以传对象</li></ol><h1 id="io"><a href="#io" class="headerlink" title="io"></a>io</h1><ol><li>打开文件</li></ol><ul><li><code>f = open(&#39;/Users/michael/test.txt&#39;, &#39;r&#39;)</code>r只读</li><li><code>f = open(&#39;/Users/michael/gbk.txt&#39;, &#39;r&#39;, encoding=&#39;gbk&#39;)</code>指定字符编码</li><li><code>f = open(&#39;/Users/michael/gbk.txt&#39;, &#39;r&#39;, encoding=&#39;gbk&#39;, errors=&#39;ignore&#39;)</code>字符编码错误忽略</li></ul><ol start="2"><li><p>读取<code>f.read()</code></p></li><li><p>关闭<code>f.close()</code></p></li><li><p>安全打开(有异常也关闭)</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = open(<span class="string">'/Users/michael/test.txt'</span>, <span class="string">'r'</span>)</span><br><span class="line"> <span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> f:</span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><ol start="5"><li><p>自动关闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/file'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    print(f.read())</span><br></pre></td></tr></table></figure></li><li><p>其它读</p></li></ol><ul><li><code>read(size)</code>读取固定大小</li><li><code>readline()</code>读取一行</li><li><code>readlines()</code>读一行，返回所有内容的list</li></ul><ol start="7"><li>写</li></ol><ul><li>覆盖<code>w</code>追加<code>a</code></li><li><code>f.write(&#39;Hello, world!&#39;)</code></li></ul><ol start="8"><li>StringIO,BytesIO</li></ol><ul><li><code>f = StringIO(&#39;Hello!\nHi!\nGoodbye!&#39;)</code>string转成io</li><li><code>f = BytesIO()</code>然后写<code>f.write(&#39;中文&#39;.encode(&#39;utf-8&#39;))</code><br><code>f.getvalue()</code> : <code>b&#39;\xe4\xb8\xad\xe6\x96\x87&#39;</code>二进制数据</li></ul><ol start="9"><li>文件目录<br>import os</li></ol><ul><li><code>os.rename(&#39;test.txt&#39;, &#39;test.py&#39;)</code>重命名</li><li><code>os.remove(&#39;test.py&#39;)</code>删除</li><li><code>os.mkdir(&#39;/Users/michael/testdir&#39;)</code>创建目录</li><li><code>os.rmdir(&#39;/Users/michael/testdir&#39;)</code>删除目录</li></ul><ol start="10"><li>对象写入</li></ol><ul><li>转换成bytes: <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">f = open(<span class="string">'dump.txt'</span>, <span class="string">'wb'</span>)</span><br><span class="line">d = dict(name=<span class="string">'Bob'</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line">pickle.dumps(d)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li>转json<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">d = dict(name=<span class="string">'Bob'</span>, age=<span class="number">20</span>, score=<span class="number">88</span>)</span><br><span class="line">json.dumps(d)</span><br><span class="line"><span class="comment"># 解析json</span></span><br><span class="line">json.loads(json_str)</span><br></pre></td></tr></table></figure></li></ul><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><ol><li>支持多进程</li><li>多线程<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">()</span>:</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=loop, name=<span class="string">'LoopThread'</span>)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redisTemplate使用后断开连接</title>
      <link href="/2022/03/20/redisTemplate%E4%BD%BF%E7%94%A8%E5%90%8E%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/"/>
      <url>/2022/03/20/redisTemplate%E4%BD%BF%E7%94%A8%E5%90%8E%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：59,阅读全文大约需要1分钟</p><blockquote><p>使用redisTemplate来操作redis，而redisTemplate并不会自动释放连接。可以使用<code>redis.maxIdle=1000</code>增加连接池大小，但是治标不治本。</p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p>使用<code>try...finally</code>包裹操作，在finally里<br><code>RedisConnectionUtils.unbindConnection(redisTemplate.getConnectionFactory());</code><br>断开连接</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redisTemplate获取redis服务器信息</title>
      <link href="/2022/03/20/redisTemplate%E8%8E%B7%E5%8F%96redis%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/03/20/redisTemplate%E8%8E%B7%E5%8F%96redis%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1671,阅读全文大约需要6分钟</p><h1 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RedisConnectionFactory factory = redisTemplate.getConnectionFactory();</span><br><span class="line">        RedisConnection conn = <span class="keyword">null</span>;</span><br><span class="line">        Map redisInfo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn = RedisConnectionUtils.getConnection(factory);</span><br><span class="line">            redisInfo = conn.info();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RedisConnectionUtils.releaseConnection(conn, factory);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisInfo;</span><br></pre></td></tr></table></figure><h1 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; INFO</span><br><span class="line"># Server</span><br><span class="line"># Redis服务器版本</span><br><span class="line">redis_version:<span class="number">999.999</span><span class="number">.999</span></span><br><span class="line">redis_git_sha1:<span class="number">3</span>c968ff0</span><br><span class="line">redis_git_dirty:<span class="number">0</span></span><br><span class="line">redis_build_id:<span class="number">51089</span>de051945df4</span><br><span class="line">redis_mode:standalone</span><br><span class="line"># Redis 服务器的宿主操作系统</span><br><span class="line">os:Linux <span class="number">4.8</span><span class="number">.0</span>-<span class="number">1</span>-amd64 x86_64</span><br><span class="line"># 架构（32 或 64 位）</span><br><span class="line">arch_bits:<span class="number">64</span></span><br><span class="line"># Redis 所使用的事件处理机制</span><br><span class="line">multiplexing_api:epoll</span><br><span class="line">atomicvar_api:atomic-builtin</span><br><span class="line"># 编译 Redis 时所使用的 GCC 版本</span><br><span class="line">gcc_version:<span class="number">6.3</span><span class="number">.0</span></span><br><span class="line"># 服务器进程的 PID</span><br><span class="line">process_id:<span class="number">9941</span></span><br><span class="line"># Redis 服务器的随机标识符（用于 Sentinel 和集群）</span><br><span class="line">run_id:b770a8af038963f3d1b55358c2e376d0b5e00182</span><br><span class="line"># TCP/IP 监听端口</span><br><span class="line">tcp_port:<span class="number">6379</span></span><br><span class="line"># 自 Redis 服务器启动以来，经过的秒数</span><br><span class="line">uptime_in_seconds:<span class="number">1028993</span></span><br><span class="line"># 自 Redis 服务器启动以来，经过的天数</span><br><span class="line">uptime_in_days:<span class="number">11</span></span><br><span class="line">hz:<span class="number">10</span></span><br><span class="line"># 以分钟为单位进行自增的时钟，用于 LRU 管理</span><br><span class="line">lru_clock:<span class="number">10750613</span></span><br><span class="line">executable:/usr/local/bin/redis-server</span><br><span class="line">config_file:</span><br><span class="line"></span><br><span class="line"># Clients</span><br><span class="line"># 已连接客户端的数量（不包括通过从属服务器连接的客户端）</span><br><span class="line">connected_clients:<span class="number">4</span></span><br><span class="line"># 当前连接的客户端当中，最长的输出列表</span><br><span class="line">client_longest_output_list:<span class="number">0</span></span><br><span class="line"># 当前连接的客户端当中，最大输入缓存</span><br><span class="line">client_biggest_input_buf:<span class="number">0</span></span><br><span class="line"># 正在等待阻塞命令（BLPOP、BRPOP、BRPOPLPUSH）的客户端的数量</span><br><span class="line">blocked_clients:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Memory</span><br><span class="line"># 由 Redis 分配器分配的内存总量，以字节（byte）为单位</span><br><span class="line">used_memory:<span class="number">154272800</span></span><br><span class="line"># 以人类可读的格式返回 Redis 分配的内存总量</span><br><span class="line">used_memory_human:<span class="number">147.13</span>M</span><br><span class="line"># 从操作系统的角度，返回 Redis 已分配的内存总量（俗称常驻集大小）。这个值和 top 、 ps等命令的输出一致。</span><br><span class="line">used_memory_rss:<span class="number">160612352</span></span><br><span class="line"># 以人类可读的格式返回</span><br><span class="line">used_memory_rss_human:<span class="number">153.17</span>M</span><br><span class="line"># Redis 的内存消耗峰值（以字节为单位）</span><br><span class="line">used_memory_peak:<span class="number">154319968</span></span><br><span class="line"># 以人类可读的格式返回 Redis 的内存消耗峰值</span><br><span class="line">used_memory_peak_human:<span class="number">147.17</span>M</span><br><span class="line"># 使用内存达到峰值内存的百分比，即(used_memory/ used_memory_peak) *100%</span><br><span class="line">used_memory_peak_perc:<span class="number">99.97</span>%</span><br><span class="line"># Redis为了维护数据集的内部机制所需的内存开销，包括所有客户端输出缓冲区、查询缓冲区、AOF重写缓冲区和主从复制的backlog</span><br><span class="line">used_memory_overhead:<span class="number">44082040</span></span><br><span class="line"># Redis服务器启动时消耗的内存</span><br><span class="line">used_memory_startup:<span class="number">510704</span></span><br><span class="line"># 数据占用的内存大小，即used_memory-used_memory_overhead</span><br><span class="line">used_memory_dataset:<span class="number">110190760</span></span><br><span class="line"># 数据占用的内存大小的百分比，100%*(used_memory_dataset/(used_memory-used_memory_startup))</span><br><span class="line">used_memory_dataset_perc:<span class="number">71.66</span>%</span><br><span class="line">allocator_allocated:<span class="number">154256264</span></span><br><span class="line">allocator_active:<span class="number">154550272</span></span><br><span class="line">allocator_resident:<span class="number">159731712</span></span><br><span class="line"># 整个系统内存</span><br><span class="line">total_system_memory:<span class="number">1044770816</span></span><br><span class="line"># 以更直观的格式显示整个系统内存</span><br><span class="line">total_system_memory_human:<span class="number">996.37</span>M</span><br><span class="line"># Lua脚本存储占用的内存</span><br><span class="line">used_memory_lua:<span class="number">37888</span></span><br><span class="line"># 以更直观的格式显示Lua脚本存储占用的内存</span><br><span class="line">used_memory_lua_human:<span class="number">37.00</span>K</span><br><span class="line"># Redis实例的最大内存配置</span><br><span class="line">maxmemory:<span class="number">0</span></span><br><span class="line"># 以更直观的格式显示Redis实例的最大内存配置</span><br><span class="line">maxmemory_human:<span class="number">0</span>B</span><br><span class="line"># 当达到maxmemory时的淘汰策略</span><br><span class="line">maxmemory_policy:noeviction</span><br><span class="line">allocator_frag_ratio:<span class="number">1.00</span></span><br><span class="line">allocator_frag_bytes:<span class="number">294008</span></span><br><span class="line">allocator_rss_ratio:<span class="number">1.03</span></span><br><span class="line">allocator_rss_bytes:<span class="number">5181440</span></span><br><span class="line">rss_overhead_ratio:<span class="number">1.01</span></span><br><span class="line">rss_overhead_bytes:<span class="number">880640</span></span><br><span class="line"># 碎片率，used_memory_rss/ used_memory</span><br><span class="line">mem_fragmentation_ratio:<span class="number">1.04</span></span><br><span class="line">mem_fragmentation_bytes:<span class="number">6422528</span></span><br><span class="line"># 在编译时指定的， Redis 所使用的内存分配器。可以是 libc 、 jemalloc 或者 tcmalloc 。</span><br><span class="line">mem_allocator:jemalloc-<span class="number">4.0</span><span class="number">.3</span></span><br><span class="line">active_defrag_running:<span class="number">0</span></span><br><span class="line">lazyfree_pending_objects:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Persistence，RDB 持久化和 AOF 持久化有关信息</span><br><span class="line"># 一个标志值，记录了服务器是否正在载入持久化文件</span><br><span class="line">loading:<span class="number">0</span></span><br><span class="line"># 距离最近一次成功创建持久化文件之后，经过了多少秒</span><br><span class="line">rdb_changes_since_last_save:<span class="number">3813014</span></span><br><span class="line"># 一个标志值，记录了服务器是否正在创建 RDB 文件</span><br><span class="line">rdb_bgsave_in_progress:<span class="number">0</span></span><br><span class="line"># 最近一次成功创建 RDB 文件的 UNIX 时间戳</span><br><span class="line">rdb_last_save_time:<span class="number">1570002708</span></span><br><span class="line"># 一个标志值，记录了最近一次创建 RDB 文件的结果是成功还是失败</span><br><span class="line">rdb_last_bgsave_status:ok</span><br><span class="line"># 记录了最近一次创建 RDB 文件耗费的秒数</span><br><span class="line">rdb_last_bgsave_time_sec:-<span class="number">1</span></span><br><span class="line"># 如果服务器正在创建 RDB 文件，那么这个域记录的就是当前的创建操作已经耗费的秒数</span><br><span class="line">rdb_current_bgsave_time_sec:-<span class="number">1</span></span><br><span class="line">rdb_last_cow_size:<span class="number">0</span></span><br><span class="line"># 一个标志值，记录了 AOF 是否处于打开状态</span><br><span class="line">aof_enabled:<span class="number">0</span></span><br><span class="line"># 一个标志值，记录了服务器是否正在创建 AOF 文件</span><br><span class="line">aof_rewrite_in_progress:<span class="number">0</span></span><br><span class="line"># 一个标志值，记录了在 RDB 文件创建完毕之后，是否需要执行预约的 AOF 重写操作</span><br><span class="line">aof_rewrite_scheduled:<span class="number">0</span></span><br><span class="line"># 最近一次创建 AOF 文件耗费的时长</span><br><span class="line">aof_last_rewrite_time_sec:-<span class="number">1</span></span><br><span class="line"># 如果服务器正在创建 AOF 文件，那么这个域记录的就是当前的创建操作已经耗费的秒数</span><br><span class="line">aof_current_rewrite_time_sec:-<span class="number">1</span></span><br><span class="line"># 一个标志值，记录了最近一次创建 AOF 文件的结果是成功还是失败</span><br><span class="line">aof_last_bgrewrite_status:ok</span><br><span class="line">aof_last_write_status:ok</span><br><span class="line">aof_last_cow_size:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Stats，一般统计信息</span><br><span class="line"># 服务器已接受的连接请求数量</span><br><span class="line">total_connections_received:<span class="number">96</span></span><br><span class="line"># 服务器已执行的命令数量</span><br><span class="line">total_commands_processed:<span class="number">8700000</span></span><br><span class="line"># 服务器每秒钟执行的命令数量</span><br><span class="line">instantaneous_ops_per_sec:<span class="number">11</span></span><br><span class="line">total_net_input_bytes:<span class="number">710523330</span></span><br><span class="line">total_net_output_bytes:<span class="number">109073206</span></span><br><span class="line">instantaneous_input_kbps:<span class="number">1.04</span></span><br><span class="line">instantaneous_output_kbps:<span class="number">0.32</span></span><br><span class="line">rejected_connections:<span class="number">0</span></span><br><span class="line">sync_full:<span class="number">0</span></span><br><span class="line">sync_partial_ok:<span class="number">0</span></span><br><span class="line">sync_partial_err:<span class="number">0</span></span><br><span class="line"># 因为过期而被自动删除的数据库键数量</span><br><span class="line">expired_keys:<span class="number">13569</span></span><br><span class="line">expired_stale_perc:<span class="number">0.00</span></span><br><span class="line">expired_time_cap_reached_count:<span class="number">0</span></span><br><span class="line">#  因为最大内存容量限制而被驱逐（evict）的键数量</span><br><span class="line">evicted_keys:<span class="number">0</span></span><br><span class="line"># 查找数据库键成功的次数</span><br><span class="line">keyspace_hits:<span class="number">1911035</span></span><br><span class="line"># 查找数据库键失败的次数</span><br><span class="line">keyspace_misses:<span class="number">749427</span></span><br><span class="line"># 目前被订阅的频道数量</span><br><span class="line">pubsub_channels:<span class="number">0</span></span><br><span class="line"># 目前被订阅的模式数量</span><br><span class="line">pubsub_patterns:<span class="number">0</span></span><br><span class="line"># 最近一次 fork() 操作耗费的毫秒数</span><br><span class="line">latest_fork_usec:<span class="number">0</span></span><br><span class="line">migrate_cached_sockets:<span class="number">0</span></span><br><span class="line">slave_expires_tracked_keys:<span class="number">0</span></span><br><span class="line">active_defrag_hits:<span class="number">0</span></span><br><span class="line">active_defrag_misses:<span class="number">0</span></span><br><span class="line">active_defrag_key_hits:<span class="number">0</span></span><br><span class="line">active_defrag_key_misses:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Replication，主/从复制信息</span><br><span class="line"># 服务器角色</span><br><span class="line">role:master</span><br><span class="line"># 已连接的从服务器数量</span><br><span class="line">connected_slaves:<span class="number">0</span></span><br><span class="line">master_replid:<span class="number">33f</span>9e49948d61df7fa02e315ecff02bbc3b2c9aa</span><br><span class="line">master_replid2:<span class="number">0000000000000000000000000000000000000000</span></span><br><span class="line">master_repl_offset:<span class="number">0</span></span><br><span class="line">second_repl_offset:-<span class="number">1</span></span><br><span class="line">repl_backlog_active:<span class="number">0</span></span><br><span class="line">repl_backlog_size:<span class="number">1048576</span></span><br><span class="line">repl_backlog_first_byte_offset:<span class="number">0</span></span><br><span class="line">repl_backlog_histlen:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># CPU</span><br><span class="line">used_cpu_sys:<span class="number">925.48</span></span><br><span class="line">used_cpu_user:<span class="number">3467.41</span></span><br><span class="line">used_cpu_sys_children:<span class="number">0.00</span></span><br><span class="line">used_cpu_user_children:<span class="number">0.00</span></span><br><span class="line"></span><br><span class="line"># Cluster</span><br><span class="line">cluster_enabled:<span class="number">0</span></span><br><span class="line"></span><br><span class="line"># Keyspace</span><br><span class="line">db0:keys=<span class="number">876234</span>,expires=<span class="number">3</span>,avg_ttl=<span class="number">204565882</span></span><br></pre></td></tr></table></figure><h2 id="注解摘自原文"><a href="#注解摘自原文" class="headerlink" title="注解摘自原文"></a>注解摘自<a href="https://www.cnblogs.com/sjshare/p/11671338.html" target="_blank" rel="noopener">原文</a></h2>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
            <tag> redisTemplate </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis中危险命令</title>
      <link href="/2022/03/20/redis%E4%B8%AD%E5%8D%B1%E9%99%A9%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/03/20/redis%E4%B8%AD%E5%8D%B1%E9%99%A9%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：93,阅读全文大约需要1分钟</p><blockquote><p>线上需要禁止或者重命名</p></blockquote><ol><li><code>keys xxx</code>模糊查询符合要求的键，大数据量的情况会导致<code>CPU</code>飙升，<code>redis</code>锁住。</li><li><code>flushAll</code>清空<code>redis</code>所有数据，不会执行失败</li><li><code>flushdb</code>删除<code>Redis</code>中当前数据库的所有记录，不会失败</li><li><code>config</code>修改配置</li></ol><h1 id="禁用命令"><a href="#禁用命令" class="headerlink" title="禁用命令"></a>禁用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rename-command KEYS &quot; &quot;</span><br><span class="line">rename-command FLUSHALL &quot;&quot;</span><br></pre></td></tr></table></figure><h1 id="重命名"><a href="#重命名" class="headerlink" title="重命名"></a>重命名</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename-command FLUSHALL &quot;xxxxxxxxxxxxx&quot;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis为什么快</title>
      <link href="/2022/03/20/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%AB/"/>
      <url>/2022/03/20/redis%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BF%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：590,阅读全文大约需要2分钟</p><ol><li>完全基于内存，读写速度非常快</li><li>数据结构采用哈希表的形式，操作时间复杂度O(1);(有序列表内的数据存储用到了跳表)</li><li>数据结构简单，所以对于数据的操作也简单</li><li>单线程，避免上下文切换以及锁的问题</li><li>多路<code>I/O</code>复用模型，非阻塞<code>IO</code></li><li>改造了<code>VM</code>机制，对于系统的调用更快</li></ol><h1 id="多路-I-O-复用模型"><a href="#多路-I-O-复用模型" class="headerlink" title="多路 I/O 复用模型"></a>多路 I/O 复用模型</h1><p>多路I/O复用模型是利用 select、poll、epoll 可以同时监察多个流的 I/O 事件的能力，在空闲的时候，会把当前线程阻塞掉，当有一个或多个流有 I/O 事件时，就从阻塞态中唤醒，于是程序就会轮询一遍所有的流（epoll 是只轮询那些真正发出了事件的流），并且只依次顺序的处理就绪的流，这种做法就避免了大量的无用操作。</p><ol><li><strong>多路</strong>：多个网络连接请求</li><li><strong>复用</strong>：复用一个线程去处理</li></ol><h1 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h1><ol><li><p>官方的解释是<code>cpu</code>不是<code>redis</code>的瓶颈，机器的内存和网络带宽才更可能是。所以采用更简单的单线程</p></li><li><p>这里的单线程只是处理网络请求时是单线程</p></li><li><p>为了有效利用多核<code>cpu</code>，可以在一个服务器上部署多个<code>redis</code>，采用 主-从\主-主 形式。</p></li></ol><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><p>6.0版本之后增加了<code>worker</code>线程的子线程，用于处理命令的<code>io</code>操作，<code>worker</code>专注于命令处理。每个命令开一个新的子线程处理结束和返回结果的<code>io</code>。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis其它使用</title>
      <link href="/2022/03/20/redis%E5%85%B6%E5%AE%83%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/redis%E5%85%B6%E5%AE%83%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：503,阅读全文大约需要2分钟</p><h1 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h1><p>用来统计基数个数的算法，优点在于输入元素数量或体积非常大的情况下计算使用的空间总是固定的。<br>基数:集合中不重复的元素，即去重之后的元素。</p><ul><li><code>PFADD key element [element...]</code>添加指定元素到HyperLogLog中</li><li><code>PFCOUNT key [key...]</code>返回给定HyperLogLog的基数估算值。</li><li><code>PFMERGE destkey sourcekey [sourcekey]</code>将多个HyperLogLog合并成为一个</li></ul><h1 id="redis发布与订阅"><a href="#redis发布与订阅" class="headerlink" title="redis发布与订阅"></a>redis发布与订阅</h1><p>消息通讯模式，又有两个角色。发送者(pub),订阅者(sub)。一个订阅者可以订阅多个频道。<br>频道即一个redis</p><ul><li><code>PSUBSCRIBE pattern [pattern...]</code>订阅一个或多个符合给定模式的频道</li><li><code>PUBSUB &lt;subcommand&gt; [argument [argument ...]]</code>查看订阅与发布系统状态</li><li><code>PUBLISH channek message</code>将消息发sing给指定频道。</li><li><code>PUNSUBSCRIBE pattern [pattern...]</code>订阅改定的一个或者多个频道</li><li><code>SUBSCRIBE channel [channel...]</code>订阅给定的一个或多个频道</li><li><code>UNSUBSCRIBE [chnanel [chnanel...]]</code>退订指定的频道</li></ul><h1 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h1><p>redis的弹条命令是原子性的，但是事务并没有原子性的特点。更像是一个命令打包。<br>过程：开启事务，输入若干命令，执行。<br>执行过程中不会插入其它命令<br>执行过程中命令出错不会影响到其它的命令</p><ul><li><code>DISCARD</code> 取消事务，放弃执行事务块中的所有命令</li><li><code>EXEC</code>执行所有事务块内的命令</li><li><code>MULTI</code>标记一个事务块的开始</li><li><code>UNWATCH</code>取消WATCH命令对key的监视</li><li><code>WATCH key [key...]</code>监视一个或多个key，如果事务执行前这些key有改变，那么事务将被打断</li></ul><h1 id="在java中的使用"><a href="#在java中的使用" class="headerlink" title="在java中的使用"></a>在java中的使用</h1><p>环境:<code>jedis.jar</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> redis.clients.jedis.Jedis;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisJava</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//连接本地的 Redis 服务</span></span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">"localhost"</span>);</span><br><span class="line">        System.out.println(<span class="string">"服务正在运行: "</span>+jedis.ping());<span class="comment">//PONG</span></span><br><span class="line">   <span class="comment">//string</span></span><br><span class="line">        jedis.set(<span class="string">"xxx"</span>, <span class="string">"asfsf"</span>);</span><br><span class="line">        <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">        System.out.println(<span class="string">"redis 存储的字符串为: "</span>+ jedis.get(<span class="string">"xxx"</span>));</span><br><span class="line">   <span class="comment">//List</span></span><br><span class="line">        <span class="comment">//存入</span></span><br><span class="line">        jedis.lpush(<span class="string">"site-list"</span>, <span class="string">"xcascasc"</span>);</span><br><span class="line">        <span class="comment">// 获取存储的数据并输出</span></span><br><span class="line">        List&lt;String&gt; list = jedis.lrange(<span class="string">"site-list"</span>, <span class="number">0</span> ,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">//key</span></span><br><span class="line">        Set&lt;String&gt; keys = jedis.keys(<span class="string">"*"</span>); </span><br><span class="line">        Iterator&lt;String&gt; it=keys.iterator() ;   </span><br><span class="line">        <span class="comment">//遍历所有的key</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;   </span><br><span class="line">            String key = it.next();   </span><br><span class="line">            System.out.println(key);   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
            <tag> 订阅发布，大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis入门</title>
      <link href="/2022/03/20/redis%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/20/redis%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：870,阅读全文大约需要3分钟</p><blockquote><p>Redis是一款开源免费（BSD协议）高性能的key-value数据库</p></blockquote><h1 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h1><ol><li>支持数据持久化</li><li>支持<code>list</code>,<code>set</code>,<code>zset</code>,<code>hash</code>等数据结构</li><li>支持数据备份，<code>master-slave</code>（主从）模式</li><li>其它如<code>publish</code>/<code>subscribe</code>，通知，<code>key</code>过期等</li><li>原子性操作</li><li>高性能</li></ol><h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><blockquote><p><code>Redis</code>支持五种数据类型:<code>string</code>(字符串)、<code>hash</code>(哈希)、<code>list</code>(列表)、<code>set</code>(集合)、<code>zset</code>(sorted set有序集合)</p></blockquote><ol><li><code>string</code>字符串<br>这是最基本的类型，一个key对应一个value。二进制安全，及string可包含任何数据(图片、对象等)。最大存储512MB。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 键name 值zhangsan</span><br><span class="line">redis:0&gt; SET name &quot;zhangsan&quot;</span><br><span class="line">OK</span><br><span class="line">redis:0&gt; GET name</span><br><span class="line">&quot;zhangsan&quot;</span><br></pre></td></tr></table></figure></li><li><code>Hash</code>哈希<br><code>Redis hash</code>是一个键值对组合，<code>field-&gt;value</code>映射表。适合存储对象<blockquote><p>先使用<code>DEL keyName</code>删除上一个测试的key,防止报错<code>WRONGTYPE Operation against a key holding the wrong kind of value</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt; DEL name</span><br><span class="line">redis:0 &gt; HMSET myhash field1 &quot;value1&quot; field2 &quot;value2&quot;</span><br><span class="line">OK</span><br><span class="line">redis:0&gt; HGET myhash field1</span><br><span class="line">&quot;value1&quot;</span><br><span class="line">redis:0&gt; HGET myhash field2</span><br><span class="line">&quot;value2&quot;</span><br></pre></td></tr></table></figure><code>HMSET</code>设置 <code>field-&gt;value</code>对，<code>HGET</code>获取<code>hash</code>上的<code>field</code>对应的<code>value</code><br>每个hash可以存2^32 -1个键值对（40多亿）</li><li><code>List</code>列表<br>字符串列表，按照插入顺序排序。可以在头部（左边）或者尾部（右边）添加。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt; lpush myList string1 #开头插入string1</span><br><span class="line">(integer)1 #返回index</span><br><span class="line">redis:0&gt; lpush myList string2 # 开头再插入一个</span><br><span class="line">(integer)2</span><br><span class="line">redis:0&gt; lrange myList 0 5 # 返回0-5位置之间的元素</span><br><span class="line">1) &quot;string1&quot;</span><br><span class="line">2) &quot;string2&quot;</span><br></pre></td></tr></table></figure></li><li><code>Set</code>集合<br><code>string</code>的无序集合，通过哈希表实现，删改查复杂度都是o(1)。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt; sadd mySet value1 #向集合mySet插入一条数据value1</span><br><span class="line">(integer)1 # 插入成功返回1</span><br><span class="line">redis:0&gt; sadd mySet value1</span><br><span class="line">(integer)0 # 如果value存在则不插入，返回0</span><br><span class="line">redis:0&gt; smembers mySet # 输出所有</span><br><span class="line">1) &quot;value1&quot;</span><br></pre></td></tr></table></figure></li><li><code>zset</code>(sorted set)有序集合<br>和set一样是string类型的元素集合，不能重复。但是每个元素都绑定一个double类型的分数，并通过分数排序。分数可重复。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt; zadd myZset 0 value1 # 向myZset中插入分数为0的value1元素</span><br><span class="line">(integer)1 # 成功插入一条</span><br><span class="line">redis:0&gt; zadd myZset 1 value2 # 插入分数为1的数据</span><br><span class="line">redis:0&gt;zrangebyscore myZset 0 100</span><br><span class="line">1) value1</span><br><span class="line">2) value2</span><br></pre></td></tr></table></figure><h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><p>打开本地客户端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ redis-cli # 打开客户端</span><br><span class="line">redis:0&gt;ping # 检测服务是否启动</span><br><span class="line">PONG #结果</span><br></pre></td></tr></table></figure><p>远程服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># host地址 port端口 password密码</span><br><span class="line">$ redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><h1 id="键管理"><a href="#键管理" class="headerlink" title="键管理"></a>键管理</h1><p>命令格式:<code>COMMAND命令 KEY_NAME键名</code></p><ol><li><code>DEL key</code>存在key时删除key</li><li><code>DUMP key</code>序列化key,返回被序列化的值</li><li><code>EXISTS key</code>检测key是否存在</li><li><code>EXPIRE key seconds</code>设置过期时间(秒)</li><li><code>EXPIREAT key timestamp</code>设置过期时间(时间戳)</li><li><code>PEXPIRE key milliseconds</code>毫秒计过期时间</li><li><code>PEXPIREAT key milliseconds-timestamp</code>设置过期时间为毫秒的时间戳</li><li><code>KEYS pattern</code>查找符合规则的key<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">KEYS * # 匹配所有</span><br><span class="line">KEYS h?llo # 匹配hello hallo 等</span><br><span class="line">KEYS h*llo # 匹配hello haallo hllo等</span><br><span class="line">KEYS h[ae]llo # 匹配hello或hallo</span><br></pre></td></tr></table></figure></li><li><code>MOVE key db</code>将当前数据库的key移动到指定db中</li><li><code>PERSIST key</code>移除过期时间</li><li><code>PTTL key</code> 毫秒单位返回剩余过期时间</li><li><code>TTL key</code>以秒为单位返回剩余生存时间</li><li><code>RANDOMKEY</code>从当前数据库中随机返回一个key</li><li><code>RENAME key newkey</code>重命名</li><li><code>RENAMENX key newkey</code>不存在<code>newkey</code>时将<code>key</code>改名为<code>newkey</code></li><li><code>TYPE key</code>返回key存储的值类型</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis内存淘汰策略</title>
      <link href="/2022/03/20/redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/"/>
      <url>/2022/03/20/redis%E5%86%85%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：217,阅读全文大约需要1分钟</p><blockquote><p>当内存不够时写入数据的策略</p></blockquote><ol><li><p><code>noeviction</code>：当内存不足以容纳新写入数据时，新写入操作会报错。</p></li><li><p><code>allkeys-lru</code>：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key。</p></li><li><p><code>allkeys-random</code>：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key。</p></li><li><p><code>volatile-lru</code>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key。</p></li><li><p><code>volatile-random</code>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key。</p></li><li><p><code>volatile-ttl</code>：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis分库分表，读写分离</title>
      <link href="/2022/03/20/redis%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%EF%BC%8C%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/"/>
      <url>/2022/03/20/redis%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%EF%BC%8C%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：238,阅读全文大约需要1分钟</p><blockquote><p><a href="https://www.jianshu.com/p/f579dd0342a3" target="_blank" rel="noopener">原文</a></p></blockquote><h1 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h1><ol><li>开启多个<code>redis</code>服务</li><li>建立路由网关</li><li>在网关里设立规则，使不同的键分发到各个<code>redis</code>中<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Martin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/3/23 7:36 下午</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisSpit</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 服务器列表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; servers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        servers.add(<span class="string">"127.0.0.1:6380"</span>);</span><br><span class="line">        servers.add(<span class="string">"127.0.0.1:6381"</span>);</span><br><span class="line">        servers.add(<span class="string">"127.0.0.1:6382"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * redis服务器网关 客户端统一连接该网关</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">12530</span>);</span><br><span class="line">        Socket socket;</span><br><span class="line">        <span class="keyword">while</span> ((socket = serverSocket.accept())!= <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    InputStream inputStream =  socket.getInputStream();</span><br><span class="line">                    <span class="keyword">byte</span>[] request = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    inputStream.read(request);</span><br><span class="line">                    String req = <span class="keyword">new</span> String(request);</span><br><span class="line">                    String[] params = req.split(<span class="string">"\r\n"</span>);</span><br><span class="line">                    <span class="keyword">int</span> keyLength = Integer.parseInt(params[<span class="number">3</span>].split(<span class="string">"\\$"</span>)[<span class="number">1</span>]);</span><br><span class="line">                    <span class="comment">// 根据键长选择服务器</span></span><br><span class="line">                    <span class="keyword">int</span> mod = keyLength % servers.size();</span><br><span class="line">                    String[] serverInfo = servers.get(mod).split(<span class="string">":"</span>);</span><br><span class="line">                    <span class="comment">// 连接实际的redis服务器</span></span><br><span class="line">                    Socket client = <span class="keyword">new</span> Socket(serverInfo[<span class="number">0</span>],Integer.parseInt(serverInfo[<span class="number">1</span>]));</span><br><span class="line">                    <span class="comment">// 数据转发</span></span><br><span class="line">                    client.getOutputStream().write(request);</span><br><span class="line">                    <span class="keyword">byte</span>[] response = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                    client.getInputStream().read(response);</span><br><span class="line">                    client.close();</span><br><span class="line">                    <span class="comment">// 数据回写</span></span><br><span class="line">                    socket.getOutputStream().write(response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="读写分离"><a href="#读写分离" class="headerlink" title="读写分离"></a>读写分离</h1><p>使用配置文件中的<code>slaeof server port</code>配置主节点，实现主从的读写分离</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基本数据类型</title>
      <link href="/2022/03/20/redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2022/03/20/redis%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1906,阅读全文大约需要7分钟</p><blockquote><p>redis的五大基本类型操作</p></blockquote><h1 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h1><p>命令格式: <code>COMMAND命令 KEY_NAME键名 [值]</code></p><ol><li><code>SET key value</code>指定key的值</li><li><code>GET key</code>获取key的值</li><li><code>GETRANGE key start end</code>获取key中字符串的子字符串</li><li><code>GETSET key value</code>指定key的新值，返回旧值。</li><li><code>GETBIT key offset</code>对key所存储的字符串指定偏移量上的位(bit) 0/1</li><li><code>MGET key1 [key2]</code>获取一个/多个key的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis:0&gt;mget name name2</span><br><span class="line">1) asbx</span><br><span class="line">2) sgsg</span><br></pre></td></tr></table></figure></li><li><code>SETBIT key offset value</code>对key所存储的字符串的值，设置或清除指定偏移量上的位(bit)</li><li><code>SETEX key seconds value</code>设置key的值为value，过期时间seconds(秒)</li><li><code>SETNX key value</code>key不存在时设置key的值。</li><li><code>SETRANGE key offset value</code>用value覆盖key存储的字符串，从偏移量offset开始。</li><li><code>STRLEN key</code>返回key所存储的字符串长度</li><li><code>MSET key value [key value...]</code>同时设置多个键值对</li><li><code>MSETNX key value [key value...]</code>key都不存在时设置对应的value值</li><li><code>PSETEX key milliseconds value</code>设置<code>key</code>的值为<code>value</code>并且生存时间<code>milliseconds</code>(毫秒)</li><li><code>INCR key</code>key中存储的数字值+1(不是数字会报错)</li><li><code>INCRBY key increment</code>增加指定数量</li><li><code>INCRBYFLOAT key increment</code>增加指定浮点数值</li><li><code>DECR key</code>将key中存储的数字-1</li><li><code>DECRBY key decrement</code>将key中的值减去指定量</li><li><code>APPEND key value</code>如果key存在，将value追加到原有值末尾</li></ol><h1 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h1><p><code>field</code>=&gt;<code>value</code>的映射表</p><ol><li><code>HDEL key field1 [field2]</code>删除一个或多个哈希表字段。</li><li><code>HEXISTS key field</code>查看哈希表key中，指定的字段是否存在。</li><li><code>HGET key field</code>获取存储在哈希表中的字段的值。</li><li><code>HGETALL key</code>获取在哈希表中指定key的所有字段和值</li><li><code>HINCRBY key field increment</code>为哈希表key的指定字段的整数值加上增量increment</li><li><code>HINCRBYFLOAT key field increment</code>为哈希表key中指定字段的浮点数值加上increment</li><li><code>HKEYS key</code>获取所有哈希表中的字段</li><li><code>HLEN key</code>获取哈希表中字段的数量</li><li><code>HMGET key field1 [field2]</code>获取所有给定的值</li><li><code>HMSET key field1 value1 [field2 value2]</code>同时将多个field-value设置到哈希表key中</li><li><code>HSET key field value</code>将哈希表的key中的字段field的值设置为value</li><li><code>HSETNX key field value</code>只有字段field不存在时，设置哈希表字段的值。</li><li><code>HVALS key</code>从哈希表中获取所有的值</li><li><code>HSCAN key cursor [MARCH pattern] [COUNT count]</code>迭代器<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 0参数位是游标位置，当游标为0的时候开始新的一轮迭代</span><br><span class="line">hscan key 0 match xxx* count 100</span><br></pre></td></tr></table></figure><h1 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h1></li><li><code>BLPOP key1 [key2] timeout</code>移除并获取列表的第一个元素，如果列表没有元素会阻塞列表。直到等待超时或发现可弹出元素。</li><li><code>BRPOP key1 [key2] timeout</code>移除并获取列表最后一个元素，如果列表没有元素会阻塞直到超时或发现可弹出元素。</li><li><code>BRPOPLPUSH source destination timeout</code>从列表中弹出一个值，将弹出的元素插入到另一个列表并返回它；如果列表没有元素会阻塞明知道超时或有可弹出元素</li><li><code>LINDEX key index</code>通过索引获取列表中的元素</li><li><code>LINSERT key BEFORE|AFTER pivot value</code>在列表<code>key</code>的元素<code>pivot</code>前或后插入另一个元素。</li><li><code>LLEN key</code>获取列表长度</li><li><code>LPOP key</code>移除并获取列表的第一个元素</li><li><code>LPUSH key value1 [value2]</code>将一个值插入到已存在的列表头部</li><li><code>LPUSHX key value</code>插入到已存在的列表头，返回列表长度</li><li><code>LRANGE key start stop</code>获取列表指定范围的元素</li><li><code>LREM key count value</code>移除列表元素</li><li><code>LSET key index value</code>通过索引设置元素的值</li><li><code>LTRIM key start stop</code>对于一个列表进行修剪，删除不在指定区域的值</li><li><code>RPOP key</code>移除列表的最后一个元素，返回。</li><li><code>RPOPLPUSH source destination</code>移除列表的最后一个元素，并将该元素添加到另一个列表并返回</li><li><code>RPUSH key value1 [value2]</code>在列表中添加一个或多个值</li><li><code>RPUSHX key value</code>为已存在的列表添加值<h1 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h1>集合是基于hash的String类型的无序集合，集合成员是唯一的。</li><li><code>SADD key member1 [member2]</code>向集合添加一个或多个成员</li><li><code>SCARD key</code>获取集合的成员数</li><li><code>SDIFF key1 [key2]</code>返回差集，即第一个集合中其它集合没有的元素。</li><li><code>SDIFFSTORE destination key1 [key2]</code>返回给定的所有集合的差集存储在destination中</li><li><code>SINTER key1 [key2]</code>返回给定所有集合的交集</li><li><code>SINTERSTORE destination key1 [key2]</code>返回给定所有集合的交集存储在destination中</li><li><code>SISMEMBER key member</code>判断member集合元素是否是集合key的成员</li><li><code>SMEMBERS key</code>返回集合中的所有成员</li><li><code>SMOVE source destination member</code>将member元素从source集合移动到destination集合</li><li><code>SPOP key</code>移除并返回集合中的一个随机元素</li><li><code>SRANDMEMBER key [count]</code>返回集合中一个或多个随机数</li><li><code>SREM key member1 [member2]</code>移除集合中一个或多个成员</li><li><code>SUNION key1 [key2]</code>返回所有给定集合的并集</li><li><code>SUNIONSTORE destination key1 [key2]</code>所有给定集合的并集存储在destination集合中</li><li><code>SSCAN key cursor [MARCH pattern] [COUNT count]</code>迭代集合中元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sscan myset1 0 match h*</span><br></pre></td></tr></table></figure><h1 id="有序集合-sorted-set"><a href="#有序集合-sorted-set" class="headerlink" title="有序集合(sorted set)"></a>有序集合(sorted set)</h1>有顺序的set，通过分数排序</li><li><code>ZADD key score1 member1 [score2 member2]</code>向有序集合添加一个或多个成员，或者更新已存在成员的分数。</li><li><code>ZCARD key</code>获取有序集合成员数</li><li><code>ZCOUNT key min max</code>计算在有序集合中指定区间分数的成员数</li><li><code>ZINCRBY key increment member</code>有序集合中对指定成员的分数加上增量increment</li><li><code>ZINTERSTORE destination numkeys key [key...]</code>计算给定的有序集合交集，保存结果到新的有序集合key</li><li><code>ZLEXCOUNT key min max</code>有序集合中计算指定字典区间内成员数</li><li><code>ZRANGE key start stop [WITHSCORES]</code>通过索引区间返回有序集合指定区间内的成员</li><li><code>ZRANGEBYLEX key min max [LIMIT offset count]</code>通过字典区间返回有序集合成员，输出集合</li><li><code>ZRANGEBYSCORE key min max [withscore] [limit]</code>通过分数返回有序集合指定区间内的成员</li><li><code>ZRANK key member</code>返回有序集合中指定成员的索引</li><li><code>ZREM key member [member...]</code>移除有序集合中的一个或多个成员</li><li><code>ZREMRANGEBYLEX key min max</code>移除有序集合中给定的字典区间的所有成员。</li><li><code>ZREMRANGEBYRANK key start stop</code>移除有序集合中给定排名区间的所有成员</li><li><code>ZREMRANGEBYSCORE key min max</code>移除有序集合中给定的分数区间的所有成员</li><li><code>ZREVRANGE key start stop [WITHSCORES]</code>返回有序集中指定区间内的成员，通过索引，分数从高到底</li><li><code>ZREVRANGEBYSCORE key max min [WITHSCORES]</code>返回有序集中指定分数区间内的成员，分数从高到低排序</li><li><code>ZREVRANK key member</code>返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</li><li><code>ZSCORE key member</code>返回有序集合中，成员的分数</li><li><code>ZUNIONSTORE destination numkeys key [key ...]</code>计算给定的一个或多个有序集的并集，并存储在新的 key 中</li><li><code>ZSCAN key cursor [MATCH pattern] [COUNT count]</code>迭代有序集合中的元素（包括元素成员和元素分值）</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis持久化</title>
      <link href="/2022/03/20/redis%E6%8C%81%E4%B9%85%E5%8C%96/"/>
      <url>/2022/03/20/redis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>文章字数：517,阅读全文大约需要2分钟</p><blockquote><p>redis支持数据类型丰富的持久化操作，可以把数据保存在磁盘中，防止宕机之类的情况下数据丢失。</p></blockquote><h1 id="持久化方式"><a href="#持久化方式" class="headerlink" title="持久化方式"></a>持久化方式</h1><ol><li><p><code>RDB</code>:不定期使用异步方式保存二进制数据到磁盘，速度快、效率高、文件小。但是缓存一致性低。即如果半个小时备份一次，宕机到上一次备份直接的数据可能会丢失。保存文件过大还会导致<code>redis</code>反应变慢（4.x之前默认）</p></li><li><p><code>aof</code>:保存的是每次操作的命令，可以选择每秒同步、每次修改同步、不同步。优点是缓存一致性好，数据完整。缺点是文件大，<code>redis</code>再次启动速度慢。会保存一些无用数据，比如已经被更改的数据。</p></li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p><code>6379.conf</code>(监听的端口.conf)<br>搜索<code>save</code></p><p><strong>RDB</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1              #在900秒(15分钟)之后，如果至少有1个key发生变化，则dump内存快照。</span><br><span class="line">save 300 10            #在300秒(5分钟)之后，如果至少有10个key发生变化，则dump内存快照。</span><br><span class="line">save 60 10000        #在60秒(1分钟)之后，如果至少有10000个key发生变化，则dump内存快照。</span><br></pre></td></tr></table></figure><p>快照在<code>dump.rdb</code>中</p><p><strong>AOF</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always     #每次有数据修改发生时都会写入AOF文件。</span><br><span class="line">appendfsync everysec  #每秒钟同步一次，该策略为AOF的缺省策略。</span><br><span class="line">appendfsync no          #从不同步。高效但是数据不会被持久化。</span><br></pre></td></tr></table></figure><h1 id="混合使用"><a href="#混合使用" class="headerlink" title="混合使用"></a>混合使用</h1><ol><li>开启混合模式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aof-use-rdb... yes</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>设置aof重写大小（也可以手动）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auto-aof-rewrite-...两个</span><br></pre></td></tr></table></figure><ol start="3"><li>触发<code>AOF</code>的<code>rewrite</code>时，会清空<code>AOF</code>，直接保存当前<code>redis</code>数据（并不是真的重写）数据都在aof文件里，以二进制+命令的形式存储</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群</title>
      <link href="/2022/03/20/redis%E9%9B%86%E7%BE%A4/"/>
      <url>/2022/03/20/redis%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：806,阅读全文大约需要3分钟</p><blockquote><p><code>reids</code>的集群搭建方式有三种主从<code>master-slave</code>、哨兵<code>Sentinel</code>、集群<code>Cluster</code></p></blockquote><h1 id="主从master-slave"><a href="#主从master-slave" class="headerlink" title="主从master-slave"></a>主从master-slave</h1><p>数据库分为主数据库<code>master</code>和从数据库<code>slave</code></p><ol><li>主数据库进行写操作，数据变化时自动同步到从数据库</li><li>从数据库一般都是只读，数据来源为主数据库</li><li>一个<code>master</code>对应多个<code>slave</code>，一个<code>slave</code>对应多个<code>master</code></li><li><code>slave</code>挂了不影响其他的<code>slave</code>，重启之后会从<code>master</code>同步数据</li><li><code>master</code>挂了之后不影响<code>slave</code>的读，但是不再提供写的服务，重启之后重新提供。</li><li><code>master</code>挂了之后不会重新选举<code>master</code></li><li><code>master</code>设置密码之后<code>slave</code>访问不需要密码</li></ol><p><strong>缺点</strong><br> <code>master</code>挂了之后不会重新选举<code>master</code></p><h1 id="哨兵Sentinel"><a href="#哨兵Sentinel" class="headerlink" title="哨兵Sentinel"></a>哨兵Sentinel</h1><p>解决了主从模式的痛点，<code>master</code>挂了之后重新选举出<code>master</code></p><p><strong>特点</strong></p><ol><li><code>master</code>挂了之后<code>Sentinel</code>会选择一个<code>slave</code>作为<code>master</code>，并修改所有节点的配置文件</li><li><code>master</code>重启之后将会作为<code>slave</code>接收新的<code>master</code>的同步消息</li><li><code>Sentinel</code>也可能挂掉，可以形成集群</li><li>多<code>Sentinel</code>配置的时候，<code>Sentinel</code>之间也会自动监控</li><li>主从模式修改配置密码时<code>Sentinel</code>会将修改同步到配置文件</li><li><code>Sentinel</code>或<code>Sentinel</code>集群可以管理多个主从<code>Redis</code></li><li><code>Sentinel</code>最好不要和<code>Redis</code>放在同一台机器上，防止一起挂掉</li><li><code>Sentinel</code>模式下客户端应当直接连接<code>Sentinel</code>这样<code>master</code>挂掉之后<code>Sentinel</code>可以自动感知新的<code>master</code></li></ol><p><strong>工作机制</strong></p><ol><li><code>Sentinel</code>每秒都向所知的<code>master</code>、<code>slave</code>、其它<code>Sentinel</code>发送<code>pin</code></li><li>如果有一个实例距离上一次回复<code>pin</code>的时间超过<code>down-after-milliseconds</code>，实例就会被<code>Sentinel</code>标记成主观下线</li><li><code>master</code>标记成主观下线之后监视这个<code>master</code>的<code>Sentinel</code>都要每秒一次的频率确认是否是主观下线</li><li>当足够数量<code>Sentinel</code>(配置)在指定时间内确认此<code>master</code>主观下线，则<code>master</code>的标记将改为客观下线</li><li>当<code>master</code>被<code>sentinel</code>标记为客观下线时，<code>sentinel</code>向下线的<code>master</code>的所有<code>slave</code>发送 <code>INFO</code> 命令的频率会从 10 秒一次改为 1 秒一次</li><li><code>master</code>重新向<code>sentinel</code>的<code>pin</code>命令回复，则<code>master</code>的主观下线状态将被移除</li></ol><h1 id="集群Cluster"><a href="#集群Cluster" class="headerlink" title="集群Cluster"></a>集群Cluster</h1><p>当一台电脑上放不下信息时就可以采用集群的方式，分散存储信息<br>通过cluster可以实现主从和master重选功能，所以如果配置两个副本三个分片的话，就需要六个Redis实例。因为Redis的数据是根据一定规则分配到cluster的不同机器的，当数据量过大时，可以新增机器进行扩容。</p><p>使用集群，只需要将redis配置文件中的cluster-enable配置打开即可。每个集群中至少需要三个主数据库才能正常运行，新增节点非常方便。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis数据持久化方式</title>
      <link href="/2022/03/20/redis%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/03/20/redis%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：267,阅读全文大约需要1分钟</p><blockquote><p><code>redis</code>一般是将数据保存在内存中，以提高读取写入的效率。但是一旦断电，数据也会全部丢失。数据持久化就是将内存中的数据写入到磁盘，保证数据的完整性。</p></blockquote><h1 id="RDB-默认方式"><a href="#RDB-默认方式" class="headerlink" title="RDB(默认方式)"></a>RDB(默认方式)</h1><p>定时将内存中的快照保存成二进制的副本<br>（bgsave命令触发，父进程创建子线程执行fork操作）<br><strong>优点</strong></p><ol><li>二进制文件恢复速度快</li></ol><p><strong>缺点</strong></p><ol><li>开销大，不能做到实时</li></ol><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><p>开启后，<code>redis</code>每执行一次修改数据的命令，都会把命令添加到AOF文件中，根据文件就能进行恢复。</p><p><strong>优点</strong></p><ol><li>实时持久化</li></ol><p><strong>缺点</strong></p><ol><li>恢复速度慢</li><li>文件体积会无限制变大（时间越久执行的命令越多），需要定期整理</li></ol><h1 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h1><p><code>RDB</code>和<code>AOF</code>都开启，恢复时先用<code>RDB</code>，剩余部分再使用<code>AOF</code>恢复。<code>AOF</code>中的命令也只用保存上一次<code>RDB</code>之后进行的操作就行了</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群脑裂</title>
      <link href="/2022/03/20/redis%E9%9B%86%E7%BE%A4%E8%84%91%E8%A3%82/"/>
      <url>/2022/03/20/redis%E9%9B%86%E7%BE%A4%E8%84%91%E8%A3%82/</url>
      
        <content type="html"><![CDATA[<p>文章字数：529,阅读全文大约需要2分钟</p><h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>edis的集群脑裂是指因为网络问题，导致redis master节点跟redis slave节点和sentinel集群处于不同的网络分区，此时因为sentinel集群无法感知到master的存在，所以将slave节点提升为master节点。此时存在两个不同的master节点，就像一个大脑分裂成了两个。<br>集群脑裂问题中，如果客户端还在基于原来的master节点继续写入数据，那么新的master节点将无法同步这些数据，当网络问题解决之后，sentinel集群将原先的master节点降为slave节点，此时再从新的master中同步数据，将会造成大量的数据丢失。</p><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 连接到master的最少slave数</span><br><span class="line">min-slaves-to-write 3</span><br><span class="line"># slave连接master的最大延迟时间</span><br><span class="line">min-slaves-max-lag 10</span><br></pre></td></tr></table></figure><p>新版配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-replicas-to-write 3</span><br><span class="line">min-replicas-max-lag 10</span><br></pre></td></tr></table></figure><p>如上要求至少3个slave节点，且数据复制和同步的延迟不能超过10秒。否则master就拒绝读写，这样发生集群脑裂原先的master节点接收到写入请求就会拒绝</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis集群分区</title>
      <link href="/2022/03/20/redis%E9%9B%86%E7%BE%A4%E5%88%86%E5%8C%BA/"/>
      <url>/2022/03/20/redis%E9%9B%86%E7%BE%A4%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：570,阅读全文大约需要2分钟</p><blockquote><p><code>redis</code>数据量大的时候就需要使用多个<code>redis</code>实例去共同存储数据。</p></blockquote><h1 id="固定取模"><a href="#固定取模" class="headerlink" title="固定取模"></a>固定取模</h1><ul><li>过程</li></ul><ol><li><p>先把<code>redis</code>若干个主节点编号</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Master1 : 1</span><br><span class="line">Master2 : 2, 3</span><br><span class="line">Master3 : 4, 5</span><br></pre></td></tr></table></figure></li><li><p>再用hash值和编号总数量取模</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash(key) % total_virtual_weight</span><br></pre></td></tr></table></figure></li></ol><ul><li>缺点：当新增或者删除节点时，数据几乎全部都要重新洗牌。消耗过大，只能当做缓存</li></ul><h1 id="一致性哈希Consistent-Hashing"><a href="#一致性哈希Consistent-Hashing" class="headerlink" title="一致性哈希Consistent Hashing"></a>一致性哈希<code>Consistent Hashing</code></h1><ul><li>过程</li></ul><ol><li>假设有一个HSAH环，范围为2^32-1(即一个32位的无符号整形范围)</li><li>计算集群节点的HASH(通过ip,主机名之类的)，并标记在HASH环上</li><li>客户端请求数据时会通过数据的HASH值向后找，找到的第一个节点处理此请求</li></ol><ul><li>优点：相对于固定取模，删除节点或节点宕机所影响的数据更少。</li><li>缺点： 删除节点时还是需要计算所有该节点的key，另外算出来的节点Hash值也可能导致数据分布不均匀的现象。</li></ul><h1 id="预先分配PreSharding"><a href="#预先分配PreSharding" class="headerlink" title="预先分配PreSharding"></a>预先分配<code>PreSharding</code></h1><ul><li>过程</li></ul><ol><li>部署<code>redis</code>时一个机器上部署多个实例</li><li>需要拓展时将一台机器上的实例分发到多台机器上，以提升性能与空间</li></ol><ul><li>优点：增长过程中<code>redis</code>的实例数保持不变</li><li>缺点：实例多，增加了运维成本</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> redis </tag>
            
            <tag> NOSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restTemplate使用https</title>
      <link href="/2022/03/20/restTemplate%E4%BD%BF%E7%94%A8https/"/>
      <url>/2022/03/20/restTemplate%E4%BD%BF%E7%94%A8https/</url>
      
        <content type="html"><![CDATA[<p>文章字数：34,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.NoopHostnameVerifier;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.SSLContextBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.TrustStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-11-02 18:47</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> KeyStoreException, NoSuchAlgorithmException, KeyManagementException </span>&#123;</span><br><span class="line">        SSLContext sslContext = <span class="keyword">new</span> SSLContextBuilder().loadTrustMaterial(<span class="keyword">null</span>, <span class="keyword">new</span> TrustStrategy() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrusted</span><span class="params">(X509Certificate[] arg0, String arg1)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).build();</span><br><span class="line">        SSLConnectionSocketFactory csf =</span><br><span class="line">            <span class="keyword">new</span> SSLConnectionSocketFactory(sslContext, <span class="keyword">new</span> String[] &#123;<span class="string">"TLSv1.2"</span>&#125;, <span class="keyword">null</span>, NoopHostnameVerifier.INSTANCE);</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(csf).build();</span><br><span class="line">        HttpComponentsClientHttpRequestFactory requestFactory = <span class="keyword">new</span> HttpComponentsClientHttpRequestFactory();</span><br><span class="line">        requestFactory.setHttpClient(httpClient);</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(requestFactory);</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ssl </tag>
            
            <tag> 工具 </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBean生命周期(1)</title>
      <link href="/2022/03/20/springBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(1)/"/>
      <url>/2022/03/20/springBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F(1)/</url>
      
        <content type="html"><![CDATA[<p>文章字数：455,阅读全文大约需要1分钟</p><blockquote><p>SpringBean从创建、初始化操作、就绪、销毁。组成了一个完整的生命周期。</p></blockquote><h1 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h1><blockquote><p>普通的容器和<code>spring</code>的耦合很低，使用过程中不用知道<code>spring</code>的存在，将容器从<code>spring</code>替换成其他容器也可以正常运行。然而部分功能需要用到容器本身的功能和资源，于是<code>spring</code>提供了<code>spring aware</code>系列可以在初始化容器时通过接口的形式提供。</p></blockquote><ol><li>实例化</li><li>填充属性</li><li>调用<code>BeanNameAware</code>的<code>setBeanName</code>方法<br> 如果<code>Bean</code>实现此接口，调用<code>setBeanName</code>方法并传入<code>Bean</code>的<code>id</code></li><li>调用<code>BeanFactoryAware</code>的<code>setBeanFactory</code>方法<br> 如果<code>Bean</code>实现此接口,调用方法传入<code>Spring</code>工厂本身</li><li>调用<code>ApplicationContextAware</code>的<code>setApplicationContext</code>方法<br> 如果<code>Bean</code>实现此接口,调用方法传入<code>ApplicationContext</code>,即<code>spring</code>容器上下文</li><li>调用<code>BeanPostProcess</code>的<code>postProssBeforeInitialization</code>方法<br> 如果<code>Bean</code>实现此接口,调用方法传入<code>(Object bean,String beanName)</code><br> 这个方法是在初始化结束时调用，所以通常应用于内存或缓存技术</li></ol><hr><p>初始化结束</p><ol start="7"><li><p>如果<code>bean</code>在<code>Spring</code>配置文件中配置了<code>init-method</code>属性，会自动调用配置的初始化方法</p></li><li><p>调用<code>InitializingBean</code>的<code>afterPropertiesSet</code>方法</p></li><li><p>调用<code>BeanPostProcess</code>的<code>postProcessAfterInitialization</code>方法<br>如果<code>Bean</code>实现此接口,调用方法传入(Object bean,String beanName)<br> 初始化之后调用的方法</p></li><li><p><code>Bean</code>准备就绪</p></li></ol><hr><p>销毁</p><ol start="11"><li>调用<code>DispostbleBean</code>的<code>destory</code>方法<br>在清理阶段，实现此方法的<code>Bean</code>会调用<code>destory</code>方法销毁</li><li>调用指定的销毁方法<br>如果在配置文件指定<code>destory-method</code>方法，会自动销毁</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot webSocket</title>
      <link href="/2022/03/20/springBoot%20webSocket/"/>
      <url>/2022/03/20/springBoot%20webSocket/</url>
      
        <content type="html"><![CDATA[<p>文章字数：488,阅读全文大约需要1分钟</p><blockquote><p>springBoot2.x提供了简便的websocket实现方式。但是如果需要大并发，还是需要使用netty</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line">       &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;  </span><br><span class="line">       &lt;artifactId&gt;spring-boot-starter-websocket&lt;&#x2F;artifactId&gt;  </span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.standard.ServerEndpointExporter;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开启WebSocket支持</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();  </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnError;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.log.Log;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.log.LogFactory;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ServerEndpoint</span>(<span class="string">"/websocket/&#123;sid&#125;"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Log log=LogFactory.get(WebSocketServer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//静态变量，用来记录当前在线连接数。应该把它设计成线程安全的。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> onlineCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//concurrent包的线程安全Set，用来存放每个客户端对应的MyWebSocket对象。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketServer&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;WebSocketServer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与某个客户端的连接会话，需要通过它来给客户端发送数据</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收sid</span></span><br><span class="line">    <span class="keyword">private</span> String sid=<span class="string">""</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接建立成功调用的方法*/</span></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session,@PathParam(<span class="string">"sid"</span>)</span> String sid) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);     <span class="comment">//加入set中</span></span><br><span class="line">        addOnlineCount();           <span class="comment">//在线数加1</span></span><br><span class="line">        log.info(<span class="string">"有新窗口开始监听:"</span>+sid+<span class="string">",当前在线人数为"</span> + getOnlineCount());</span><br><span class="line">        <span class="keyword">this</span>.sid=sid;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">         sendMessage(<span class="string">"连接成功"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.error(<span class="string">"websocket IO异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接关闭调用的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);  <span class="comment">//从set中删除</span></span><br><span class="line">        subOnlineCount();           <span class="comment">//在线数减1</span></span><br><span class="line">        log.info(<span class="string">"有一连接关闭！当前在线人数为"</span> + getOnlineCount());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 收到客户端消息后调用的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 客户端发送过来的消息*/</span></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message, Session session)</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"收到来自窗口"</span>+sid+<span class="string">"的信息:"</span>+message);</span><br><span class="line">        <span class="comment">//群发消息</span></span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                item.sendMessage(message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> session</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> error</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@OnError</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Session session, Throwable error)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"发生错误"</span>);</span><br><span class="line">        error.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现服务器主动推送</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session.getBasicRemote().sendText(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 群发自定义消息</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendInfo</span><span class="params">(String message,@PathParam(<span class="string">"sid"</span>)</span> String sid) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    log.info(<span class="string">"推送消息到窗口"</span>+sid+<span class="string">"，推送内容:"</span>+message);</span><br><span class="line">        <span class="keyword">for</span> (WebSocketServer item : webSocketSet) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这里可以设定只推送给这个sid的，为null则全部推送</span></span><br><span class="line">            <span class="keyword">if</span>(sid==<span class="keyword">null</span>) &#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(item.sid.equals(sid))&#123;</span><br><span class="line">            item.sendMessage(message);</span><br><span class="line">            &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> onlineCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">subOnlineCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WebSocketServer.onlineCount--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket;  </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span>(WebSocket) == <span class="string">"undefined"</span>) &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"您的浏览器不支持WebSocket"</span>);  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"您的浏览器支持WebSocket"</span>);  </span><br><span class="line">        <span class="comment">//实现化WebSocket对象，指定要连接的服务器地址与端口  建立连接  </span></span><br><span class="line">            <span class="comment">//等同于socket = new WebSocket("ws://localhost:8083/checkcentersys/websocket/20");  </span></span><br><span class="line">            socket = <span class="keyword">new</span> WebSocket(<span class="string">"$&#123;basePath&#125;websocket/$&#123;cid&#125;"</span>.replace(<span class="string">"http"</span>,<span class="string">"ws"</span>));  </span><br><span class="line">            <span class="comment">//打开事件  </span></span><br><span class="line">            socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"Socket 已打开"</span>);  </span><br><span class="line">                <span class="comment">//socket.send("这是来自客户端的消息" + location.href + new Date());  </span></span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="comment">//获得消息事件  </span></span><br><span class="line">            socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;  </span><br><span class="line">                <span class="built_in">console</span>.log(msg.data);  </span><br><span class="line">                <span class="comment">//发现消息进入    开始处理前端触发逻辑</span></span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="comment">//关闭事件  </span></span><br><span class="line">            socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"Socket已关闭"</span>);  </span><br><span class="line">            &#125;;  </span><br><span class="line">            <span class="comment">//发生了错误事件  </span></span><br><span class="line">            socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">                alert(<span class="string">"Socket发生了错误"</span>);  </span><br><span class="line">                <span class="comment">//此时可以尝试刷新页面</span></span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">//离开页面时，关闭socket</span></span><br><span class="line">            <span class="comment">//jquery1.8中已经被废弃，3.0中已经移除</span></span><br><span class="line">            <span class="comment">// $(window).unload(function()&#123;  </span></span><br><span class="line">            <span class="comment">//     socket.close();  </span></span><br><span class="line">            <span class="comment">//&#125;);  </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> webSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot websocket的订阅和发送</title>
      <link href="/2022/03/20/springBoot%20websocket%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%91%E9%80%81/"/>
      <url>/2022/03/20/springBoot%20websocket%E7%9A%84%E8%AE%A2%E9%98%85%E5%92%8C%E5%8F%91%E9%80%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：245,阅读全文大约需要1分钟</p><blockquote><p>springWebSocket还有一种形式，除了事件绑定的形式还有基于观察者模式（发布-订阅）的绑定<code>topic</code>形式</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>springBoot的websocket的starter包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;    </span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    </span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocketMessageBroker</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title">AbstractWebSocketMessageBrokerConfigurer</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="comment">//添加服务端点,接收服务连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerStompEndpoints</span><span class="params">(StompEndpointRegistry registry)</span> </span>&#123;   </span><br><span class="line">        <span class="comment">// 添加一个 /socket 的端点</span></span><br><span class="line">        registry.addEndpoint(<span class="string">"/socket"</span>).withSockJS();<span class="comment">//开启SockJS支持</span></span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>    </span><br><span class="line">    <span class="comment">// 定义消息代理（连接请求的规范）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureMessageBroker</span><span class="params">(MessageBrokerRegistry registry)</span> </span>&#123;  </span><br><span class="line">        <span class="comment">// 客户端订阅地址前缀（服务端发送）</span></span><br><span class="line">        registry.enableSimpleBroker(<span class="string">"/topic"</span>);  </span><br><span class="line">        <span class="comment">// 客户端发布地址前缀（服务端接收）    </span></span><br><span class="line">        registry.setApplicationDestinationPrefixes(<span class="string">"/app"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>端点连接还可以配置允许跨域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">registry.addEndpoint(<span class="string">"/socket"</span>).addInterceptors(<span class="keyword">new</span> HandshakeInterceptor()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Map&lt;String, Object&gt; attributes)</span></span>&#123;</span><br><span class="line">response.getHeaders().add(<span class="string">"Access-Control-Allow-Origin"</span>, <span class="string">"*"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler wsHandler, Exception exception)</span> </span>&#123;</span><br><span class="line">&#125;&#125;).setAllowedOrigins(<span class="string">"*"</span>).withSockJS();</span><br></pre></td></tr></table></figure><h1 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingController</span> </span>&#123;    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SimpMessagingTemplate simpMessagingTemplate;    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/change-notice"</span>)  <span class="comment">// 接收客户端推送信息的地址，配置了头，所以前端发送应该是"/app/change-notice"</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">greeting</span><span class="params">(String value)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.simpMessagingTemplate.convertAndSend(<span class="string">"/topic/notice"</span>, value);    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以简写成这种形式，@SendTo代表返回值推送到那个topic</span></span><br><span class="line">    <span class="meta">@MessageMapping</span>(<span class="string">"/change-notice"</span>)</span><br><span class="line">    <span class="meta">@SendTo</span>(<span class="string">"/topic/notice"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">greeting</span><span class="params">(String value)</span> </span>&#123;    </span><br><span class="line">         <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h1><p>准备</p><ul><li><code>socketjs.js</code>:如果浏览器不支持<code>webSocket</code>，改库可以模拟对<code>webSocket</code>的支持</li><li><code>stomp.js</code>:将<code>webSocket</code>代理代码简易化的框架</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> socket = <span class="keyword">new</span> SocketJS(<span class="string">'/socket'</span>);</span><br><span class="line">    stompClient = Stomp.over(socket); </span><br><span class="line">    stompClient.connect(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">frame</span>) </span>&#123;</span><br><span class="line">          <span class="comment">//...</span></span><br><span class="line">     &#125;);  </span><br><span class="line"><span class="comment">//断开连接</span></span><br><span class="line">stompClient.disconnect();   </span><br><span class="line"><span class="comment">//发送信息</span></span><br><span class="line">stompClient.send(<span class="string">"/app/change-notice"</span>, &#123;&#125;, value);   </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//订阅信息</span></span><br><span class="line">stompClient.subscribe(<span class="string">'/topic/notice'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;            </span><br><span class="line">      $(<span class="string">'.message span.content'</span>).html(data.body);        </span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> webSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot-Aop</title>
      <link href="/2022/03/20/springBoot-Aop/"/>
      <url>/2022/03/20/springBoot-Aop/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1063,阅读全文大约需要4分钟</p><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.cenobitor.aop.annotation.Action;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.cenobitor.aop.annotation.Action)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">annotationPoinCut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"annotationPoinCut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">        Action action = method.getAnnotation(Action<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* com.cenobitor.aop.service.DemoMethodService.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        MethodSignature signature = (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        Method method = signature.getMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注解说明"><a href="#注解说明" class="headerlink" title="注解说明"></a>注解说明</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Aspect 定义切面：切面由切点和增强（引介）组成(可以包含多个切点和多个增强)，它既包括了横切逻辑的定义，也包括了连接点的定义，SpringAOP就是负责实施切面的框架，它将切面所定义的横切逻辑织入到切面所指定的链接点中。</span><br><span class="line">@Pointcut 定义切点：切点是一组连接点的集合。AOP通过“切点”定位特定的连接点。通过数据库查询的概念来理解切点和连接点的关系再适合不过了：连接点相当于数据库中的记录，而切点相当于查询条件。</span><br><span class="line">@Before ：在目标方法被调用之前做增强处理,@Before只需要指定切入点表达式即可。</span><br><span class="line">@AfterReturning ： 在目标方法正常完成后做增强,@AfterReturning除了指定切入点表达式后，还可以指定一个返回值形参名returning,代表目标方法的返回值。</span><br><span class="line">@Afterthrowing： 主要用来处理程序中未处理的异常,@AfterThrowing除了指定切入点表达式后，还可以指定一个throwing的返回值形参名,可以通过该形参名来访问目标方法中所抛出的异常对象。</span><br><span class="line">@After： 在目标方法完成之后做增强，无论目标方法时候成功完成。@After可以指定一个切入点表达式。</span><br><span class="line">@Around： 环绕通知,在目标方法完成前后做增强处理,环绕通知是最重要的通知类型,像事务,日志等都是环绕通知,注意编程中核心是一个ProceedingJoinPoint。</span><br><span class="line">环绕通知需要ProceedingJoinPoint.proceed放行执行中间的代码</span><br></pre></td></tr></table></figure><h1 id="AspectJ表达式"><a href="#AspectJ表达式" class="headerlink" title="AspectJ表达式"></a>AspectJ表达式</h1><blockquote><p>用来解释<code>aop</code>连接点</p></blockquote><ul><li>方法描述指示器</li></ul><table><thead><tr><th align="left">指示器</th><th align="left">说明</th><th align="left">使用</th></tr></thead><tbody><tr><td align="left"><code>execution()</code></td><td align="left">匹配方法执行的连接点</td><td align="left">execution(方法修饰符 <code>返回值</code> 类 <code>方法名(参数)</code> 抛出异常) <code>这个颜色表示不可省略部分</code>所有部分都支持<code>*</code>全部匹配</td></tr></tbody></table><ul><li>方法参数匹配</li></ul><table><thead><tr><th align="left">指示器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>args()</code></td><td align="left">匹配当前执行的方法传入参数为指定类型</td></tr><tr><td align="left"><code>@args</code></td><td align="left">匹配当前执行的方法传入的参数有指定注解的执行</td></tr></tbody></table><ul><li>当前AOP代理对象类型匹配</li></ul><table><thead><tr><th align="left">指示器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>this()</code></td><td align="left">用于匹配当前AOP代理对象类型的执行方法；注意是AOP代理对象的类型匹配，这样就可能包括引入接口也类型匹配</td></tr></tbody></table><ul><li>目标类匹配</li></ul><table><thead><tr><th align="left">指示器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>target()</code></td><td align="left">用于匹配当前目标对象类型的执行方法；注意是目标对象的类型匹配，这样就不包括引入接口也类型匹配</td></tr><tr><td align="left"><code>@target</code></td><td align="left">用于匹配当前目标对象类型的执行方法，其中目标对象持有指定的注解</td></tr><tr><td align="left"><code>within()</code></td><td align="left">用于匹配指定类型内的方法执行</td></tr><tr><td align="left"><code>@within</code></td><td align="left">用于匹配所以持有指定注解类型内的方法</td></tr></tbody></table><ul><li>标有此注解的方法匹配</li></ul><table><thead><tr><th align="left">指示器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>@annotation</code></td><td align="left">用于匹配当前执行方法持有指定注解的方法</td></tr></tbody></table><ul><li>匹配特定名称的Bean对象</li></ul><table><thead><tr><th align="left">指示器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>bean()</code></td><td align="left">Spring AOP扩展的，AspectJ没有对于指示符，用于匹配特定名称的Bean对象的执行方法</td></tr></tbody></table><ul><li>引用其他命名切入点</li></ul><table><thead><tr><th align="left">指示器</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left"><code>reference pointcut</code></td><td align="left">表示引用其他命名切入点，只有@ApectJ风格支持，Schema风格不支持</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot上传一直为空</title>
      <link href="/2022/03/20/springBoot%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%9B%B4%E4%B8%BA%E7%A9%BA/"/>
      <url>/2022/03/20/springBoot%E4%B8%8A%E4%BC%A0%E4%B8%80%E7%9B%B4%E4%B8%BA%E7%A9%BA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：158,阅读全文大约需要1分钟</p><blockquote><p>ajax提交json数据，springBoot使用有相同类型的实体类接收，但是实体类属性全部是空。最后通过前端F12查看发送的数据，发现发送的是json字符串，而不是键值对形式。原来是我在前端多了一步转换对象为json字符串的操作。。。低级错误。。</p></blockquote><p>正确的代码结构：<br>前端提交</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var formdata&#x3D;&#123;&#125;;</span><br><span class="line">formdata.name&#x3D;&#39;xxx&#39;;</span><br><span class="line">formdata.pwd&#x3D;&#39;zzz&#39;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">            data: formdata,</span><br><span class="line">            dataType: &quot;json&quot;,</span><br><span class="line">            type: &quot;post&quot;,</span><br><span class="line">            url: &quot;&#x2F;log&quot;,</span><br><span class="line">            success: function(result) &#123;</span><br><span class="line">                console.log(result)</span><br><span class="line">            &#125;,</span><br><span class="line">            error: function(result) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>springBoot:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public Mes add(User u，@RequestParam(&quot;other&quot;) String other)&#123;&#x2F;&#x2F;除了实体类里的信息外指定name获取其他信息</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>其中，User实体类应该完全包含前端发送的json（formdata）的所有属性，否则可能会出错。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot启动执行任务</title>
      <link href="/2022/03/20/springBoot%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/03/20/springBoot%E5%90%AF%E5%8A%A8%E6%89%A7%E8%A1%8C%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>文章字数：35,阅读全文大约需要1分钟</p><h1 id="启动任务代码"><a href="#启动任务代码" class="headerlink" title="启动任务代码"></a>启动任务代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order</span>(value = <span class="number">31</span>)</span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">dataProcessor</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">//原本这个方法上加的定时，现在改为循环</span></span><br><span class="line">            dataTiming();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot启动时执行</title>
      <link href="/2022/03/20/springBoot%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C/"/>
      <url>/2022/03/20/springBoot%E5%90%AF%E5%8A%A8%E6%97%B6%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：88,阅读全文大约需要1分钟</p><blockquote><p>开发的时候需要项目启动后执行一些初始化功能，soringBoot中可以添加一个model并实现CommandLineRunner接口，实现功能的代码放在实现的run方法中</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springboot.sample.runner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//作为bean加入spring</span></span><br><span class="line"><span class="meta">@Order</span>(value=<span class="number">2</span>)<span class="comment">//多个启动任务的执行顺序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyStartupRunner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;服务启动执行 2222 &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot开启https</title>
      <link href="/2022/03/20/springBoot%E5%BC%80%E5%90%AFhttps/"/>
      <url>/2022/03/20/springBoot%E5%BC%80%E5%90%AFhttps/</url>
      
        <content type="html"><![CDATA[<p>文章字数：483,阅读全文大约需要1分钟</p><blockquote><p>开启<code>https</code>可以有效防止中间人攻击。原理是使用非对称加密，连接双方加密的信息只能用对方的秘钥解密。<code>CA</code>颁发的证书还能够保证服务器证书不是被伪造的。</p></blockquote><h1 id="自己生成证书"><a href="#自己生成证书" class="headerlink" title="自己生成证书"></a>自己生成证书</h1><p>这种证书可以保证加密连接，但是黑客可以自己生成一个和我们域名一样的证书，并使用<code>DNS</code>劫持，将域名绑定到自己的<code>ip</code>上。使用<code>CA</code>颁发的证书可以解决这种问题。</p><ol><li>使用<code>jdk</code>自带的命令生成证书</li></ol><ul><li><code>keytool -genkeypair -alias tomcat -keyalg RSA -keystore E:\tomcat.key</code>完整命令</li><li><code>-alias tomcat</code>别名为tomcat</li><li><code>-keyalg RSA</code>使用RSA非对称加密</li><li><code>-keystore E:\tomcat.key</code>生成后保存位置</li></ul><ol start="2"><li>其它命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkey -alias tomcat  -storetype PKCS12 -keyalg RSA -keysize 2048  -keystore keystore.p12 -validity 3650</span><br><span class="line"></span><br><span class="line">1.-storetype 指定密钥仓库类型</span><br><span class="line">2.-keyalg 生证书的算法名称，RSA是一种非对称加密算法</span><br><span class="line">3.-keysize 证书大小</span><br><span class="line">4.-keystore 生成的证书文件的存储路径</span><br><span class="line">5.-validity 证书的有效期</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>配置<code>application.properties</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 路径</span><br><span class="line"># server.ssl.key-store: classpath:tomcat.key</span><br><span class="line">server.ssl.key-store&#x3D;tomcat.key</span><br><span class="line">server.ssl.keyStoreType&#x3D;JKS</span><br><span class="line">server.ssl.key-alias&#x3D;tomcat</span><br><span class="line"># 生成的时候输入的</span><br><span class="line">server.ssl.key-store-password&#x3D;password123</span><br></pre></td></tr></table></figure></li></ol><h1 id="使用CA的证书"><a href="#使用CA的证书" class="headerlink" title="使用CA的证书"></a>使用CA的证书</h1><ol><li>阿里云腾讯云之类的都有，购买证书后下载。</li><li>下载后解压，复制<code>Tomcat</code>文件夹中的<code>.jks</code>文件到资源目录，和配置文件同级</li><li>查看证书相关信息<code>keytool -list -keystore server.p12</code></li><li>配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.port: 8092</span><br><span class="line">server.ssl.key-store&#x3D; classpath:server.jks</span><br><span class="line"># 密码在文件夹中的txt中</span><br><span class="line">server.ssl.key-store-password&#x3D;你的密码</span><br><span class="line"># .jks证书的类型，还有一个是PKCS12，需要用crt生成</span><br><span class="line">server.ssl.keyStoreType &#x3D; JKS</span><br></pre></td></tr></table></figure><h1 id="配置Http转发到Https"><a href="#配置Http转发到Https" class="headerlink" title="配置Http转发到Https"></a>配置Http转发到Https</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EmbeddedServletContainerFactory <span class="title">servletContainer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        TomcatEmbeddedServletContainerFactory tomcat = <span class="keyword">new</span> TomcatEmbeddedServletContainerFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postProcessContext</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">                SecurityConstraint constraint = <span class="keyword">new</span> SecurityConstraint();</span><br><span class="line">                constraint.setUserConstraint(<span class="string">"CONFIDENTIAL"</span>);</span><br><span class="line">                SecurityCollection collection = <span class="keyword">new</span> SecurityCollection();</span><br><span class="line">                collection.addPattern(<span class="string">"/*"</span>);</span><br><span class="line">                constraint.addCollection(collection);</span><br><span class="line">                context.addConstraint(constraint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        tomcat.addAdditionalTomcatConnectors(httpConnector());</span><br><span class="line">        <span class="keyword">return</span> tomcat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connector <span class="title">httpConnector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connector connector = <span class="keyword">new</span> Connector(<span class="string">"org.apache.coyote.http11.Http11NioProtocol"</span>);</span><br><span class="line">        connector.setScheme(<span class="string">"http"</span>);</span><br><span class="line">        <span class="comment">//Connector监听的http的端口号</span></span><br><span class="line">        connector.setPort(<span class="number">8080</span>);</span><br><span class="line">        connector.setSecure(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//监听到http的端口号后转向到的https的端口号</span></span><br><span class="line">        connector.setRedirectPort(<span class="number">8092</span>);</span><br><span class="line">        <span class="keyword">return</span> connector;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> https </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot整合freemarker</title>
      <link href="/2022/03/20/springBoot%E6%95%B4%E5%90%88freemarker/"/>
      <url>/2022/03/20/springBoot%E6%95%B4%E5%90%88freemarker/</url>
      
        <content type="html"><![CDATA[<p>文章字数：276,阅读全文大约需要1分钟</p><blockquote><p>freemarker是一款模板引擎，适用于mvc框架</p></blockquote><h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;spring-boot-starter-freemarker&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">spring.freemarker.allow-request-override&#x3D;false</span><br><span class="line"># 关闭缓存</span><br><span class="line">spring.freemarker.cache&#x3D;false</span><br><span class="line">spring.freemarker.check-template-location&#x3D;true</span><br><span class="line">spring.freemarker.charset&#x3D;UTF-8</span><br><span class="line">spring.freemarker.content-type&#x3D;text&#x2F;html</span><br><span class="line">spring.freemarker.expose-request-attributes&#x3D;false</span><br><span class="line">spring.freemarker.expose-session-attributes&#x3D;false</span><br><span class="line">spring.freemarker.expose-spring-macro-helpers&#x3D;false</span><br><span class="line">#spring.freemarker.prefix&#x3D;</span><br><span class="line">#spring.freemarker.request-context-attribute&#x3D;</span><br><span class="line">#spring.freemarker.settings.*&#x3D;</span><br><span class="line">#文件后缀名</span><br><span class="line">#spring.freemarker.suffix&#x3D;.ftl</span><br><span class="line">#spring.freemarker.template-loader-path&#x3D;classpath:&#x2F;templates&#x2F; #comma-separated list</span><br><span class="line">#spring.freemarker.view-names&#x3D; # whitelist of view names that can be resolved</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ul><li><p>基本使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;Hello , $&#123;name&#125;&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li><li><p><em>Controller.java*</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">view</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"hello"</span>);</span><br><span class="line">    mv.addObject(<span class="string">"name"</span>,<span class="string">"xxx"</span>);</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#list studentList as student&gt;</span><br><span class="line">$&#123;student.id&#125;&#x2F;$&#123;studnet.name&#125;</span><br><span class="line">&lt;&#x2F;#list&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">下标</span><br></pre></td></tr></table></figure><p>&lt;#list studentList as student&gt;<br>  ${student_index}<br>&lt;/#list&gt;</p></li><li><p>判断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if student_index % 2 &#x3D;&#x3D; 0&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;&#x2F;#if&gt;</span><br></pre></td></tr></table></figure></li><li><p>日期格式化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">日期：$&#123;date?date&#125;</span><br><span class="line">时间：$&#123;date?time&#125;</span><br><span class="line">日期时间：$&#123;date?datetime&#125;</span><br><span class="line">自定义格式：$&#123;date?string(&quot;yyyyMM&#x2F;dd HH:mm:ss&quot;)&#125;</span><br></pre></td></tr></table></figure></li><li><p>null处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$&#123;name!&quot;默认...&quot;&#125;</span><br><span class="line">判断</span><br><span class="line">&lt;#if name??&gt;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">&lt;&#x2F;#if&gt;</span><br></pre></td></tr></table></figure></li><li><p>包含其他</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;#include &quot;hello.ftl&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h1><p>就是定义一个代码片段，在其它地方可以复用<br>####不带参数</p><ol><li>定义<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#macro</span> <span class="attr">greet</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">"+2"</span>&gt;</span>Hello Joe!<span class="tag">&lt;/<span class="name">font</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">#macro</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>复用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">@greet</span>&gt;</span><span class="tag">&lt;/<span class="name">@greet</span>&gt;</span>  </span><br><span class="line">或者  </span><br><span class="line"><span class="tag">&lt;<span class="name">@greet</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="带参使用"><a href="#带参使用" class="headerlink" title="带参使用"></a>带参使用</h4></li></ol><ul><li>定义<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">#macro</span> <span class="attr">header</span> <span class="attr">title</span>=<span class="string">"默认文字"</span> <span class="attr">keywords</span>=<span class="string">"默认文字"</span> <span class="attr">description</span>=<span class="string">"默认文字"</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>$&#123;title&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"$&#123;keywords&#125;"</span> /&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"$&#123;description&#125;"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">#macro</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入上面的定义文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">#include</span> "/<span class="attr">include</span>/<span class="attr">public.ftl</span>"&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">@header</span> <span class="attr">title</span>=<span class="string">"公司简介"</span> <span class="attr">keywords</span>=<span class="string">"公司简介2"</span> <span class="attr">description</span>=<span class="string">"公司简介3"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ol><li>重复生成固定数量的元素</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 定义一个1到28的数组 --&gt;</span><br><span class="line"> &lt;#assign months&#x3D;1..28&#x2F;&gt;</span><br><span class="line"> &lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">      &lt;!-- 遍历数组 --&gt;</span><br><span class="line">       &lt;#list months as month&gt;</span><br><span class="line">              &lt;option value&#x3D;&quot;$&#123;month&#125;&quot;&gt;$&#123;month&#125;&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;&#x2F;#list&gt;</span><br><span class="line">  &lt;&#x2F;select&gt;</span><br><span class="line">&lt;!-- 其它生成方式 --&gt;</span><br><span class="line">&lt;#assign months&#x3D;[1,2,3,4,5,6,7,8,9,0]&#x2F;&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> freemarker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot配置文件</title>
      <link href="/2022/03/20/springBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/20/springBoot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：324,阅读全文大约需要1分钟</p><blockquote><p>application.properties是保存spring配置的地方。springBoot提供了很多模块，只需要在pom中引入模块化的<code>starter POMs</code>（spring-boot-starter-*,ru dara-jpa这些spring整合的模块）。除了这些模块的应用外，还能有其他特殊的使用场景。</p></blockquote><h1 id="自定义属性及加载"><a href="#自定义属性及加载" class="headerlink" title="自定义属性及加载"></a>自定义属性及加载</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;key&#x3D;value 类型</span><br><span class="line">xxx.demo.test&#x3D;test</span><br></pre></td></tr></table></figure><p>在变量上加上注解，自动加载值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;属性名</span><br><span class="line">@Value(&quot;$&#123;xxx.demo.test&#125;&quot;)</span><br><span class="line">private String testValue</span><br></pre></td></tr></table></figure><h1 id="参数间引用"><a href="#参数间引用" class="headerlink" title="参数间引用"></a>参数间引用</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xxx.demo.test&#x3D;test</span><br><span class="line">xxx.demo.info&#x3D;this is a $&#123;xxx.demo.test&#125;</span><br></pre></td></tr></table></figure><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 随机字符串</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.value&#125;</span><br><span class="line"># 随机int</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.int&#125;</span><br><span class="line"># 随机long</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.long&#125;</span><br><span class="line"># 10以内随机数</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.int(10)&#125;</span><br><span class="line"># 10-20间随机数</span><br><span class="line">xxx.demo.test&#x3D;$&#123;random.init(10,20)&#125;</span><br></pre></td></tr></table></figure><h1 id="屏蔽命令行修改属性值"><a href="#屏蔽命令行修改属性值" class="headerlink" title="屏蔽命令行修改属性值"></a>屏蔽命令行修改属性值</h1><blockquote><p><code>java -jar xxx.jar --server.port=888</code>等价于在配置文件中设置xxx.jar，<code>--</code>是对于配置属性赋值的标识。</p></blockquote><ul><li>屏蔽修改属性<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringApplication.setAddCommandLineProperties(false)</span><br></pre></td></tr></table></figure><h1 id="多环境配置"><a href="#多环境配置" class="headerlink" title="多环境配置"></a>多环境配置</h1><blockquote><p>就是生产、测试、开发环境都用各自的配置文件</p></blockquote></li><li>application-dev.properties：开发环境</li><li>application-test.properties：测试环境</li><li>application-prod.properties：生产环境<br>在主配置文件<code>application.properties</code>中<code>spring.profiles.active</code>配置机体需要那一份配置。（rest,dev,prod）<br>也可以命令行选则<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar xxx.jar --spring.profiles.active&#x3D;test</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot整合的Junit4单元测试</title>
      <link href="/2022/03/20/springBoot%E6%95%B4%E5%90%88%E7%9A%84Junit4%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
      <url>/2022/03/20/springBoot%E6%95%B4%E5%90%88%E7%9A%84Junit4%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：352,阅读全文大约需要1分钟</p><blockquote><p>spring提供了<code>org.springframework.test</code>这个对于JUnit简单封装的框架，可以在spring搭建的项目上方便的进行单元测试。</p></blockquote><h1 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h1><p>自动创建的项目默认添加，底层默认使用<code>Junit4</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner<span class="class">.<span class="keyword">class</span>)//设置启动器</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span>(<span class="title">classes</span></span>=&#123;Application<span class="class">.<span class="keyword">class</span>&#125;)//指定启动类</span></span><br><span class="line"><span class="class">//@<span class="title">SpringApplicationConfiguration</span>(<span class="title">classes</span></span>=Application<span class="class">.<span class="keyword">class</span>)//1.4.0之前版本</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ApplicationTests</span></span>&#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//..测试内容</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAsser</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//JUnit4.1.2后Assert过时，TestCase.assertEquals成为替代</span></span><br><span class="line">      <span class="comment">//(期望结果,条件语句)</span></span><br><span class="line">      <span class="comment">//("提示",true,条件语句)</span></span><br><span class="line">      TestCase.assertEquals(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Before</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">testBefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//测试前执行</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@After</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">testAfter</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//测试结束后</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="JUnit基本注解使用"><a href="#JUnit基本注解使用" class="headerlink" title="JUnit基本注解使用"></a>JUnit基本注解使用</h1><ol><li><code>@BeforeClass</code>在所有测试方法前执行一次，一般是初始化</li><li><code>@AfterClass</code>在所有测试方法后执行一次</li><li><code>@Before</code>每个测试方法执行前执行，一般用于初始化或者重置数据</li><li><code>@After</code>每个测试方法执行之后执行</li><li><code>@Test(timeout = 1000)</code>测试方法超过1000毫秒后算是超时，测试失败</li><li><code>@Test(expected = Exception.class)</code>测试方法期望得到的异常类，如果方法执行没有抛出指定异常，测试失败。</li><li><code>@Ignore(&quot;not redy yet&quot;)</code>执行测试时忽略此方法/类</li><li><code>@Test</code>一般测试用例</li><li><code>@RunWith</code>选择Runner调试代码，不同Runner有各自的功能。如果只是普通的java程序，忽略<code>@RunWith</code>。</li></ol><blockquote><p>整理自<a href="https://blog.csdn.net/fxbin123/article/details/80617754" target="_blank" rel="noopener">原文</a></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot集成graphql</title>
      <link href="/2022/03/20/springBoot%E9%9B%86%E6%88%90graphql/"/>
      <url>/2022/03/20/springBoot%E9%9B%86%E6%88%90graphql/</url>
      
        <content type="html"><![CDATA[<p>文章字数：390,阅读全文大约需要1分钟</p><blockquote><p><code>graphql</code>是一个结构化查询语言，对应的传统方式是<code>rest api</code>。</p></blockquote><h1 id="我的理解"><a href="#我的理解" class="headerlink" title="我的理解"></a>我的理解</h1><ol><li><p>和<code>rest api</code>一样，<code>graphql</code>主要是为了满足前后端交互需求而产生的一种规范。</p></li><li><p>不同的是<code>rest api</code>在创建时就指定了接收的参数以及返回的数据格式，而<code>graphql</code>则可以根据前端使用的不同的传入参数返回之前可能需要好多个<code>rest api</code>才能返回的数据。</p></li></ol><p><code>rest api</code>获取信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取id为1的人员信息</span><br><span class="line">GET &#x2F;person&#x2F;1</span><br></pre></td></tr></table></figure><p><code>graphql</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 获取id为1的人员的firstName</span><br><span class="line">&#123;</span><br><span class="line">    person(id:1)&#123;</span><br><span class="line">        firstName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>graphql</code>能够指定信息的输出，以及输出格式。<br>比如后端有学生，班级两部分信息。</p><ul><li><code>rest api</code>获取信息只能根据前端需求，传入能够定位到对象的信息（如id）然后再放回指定的信息格式。仅需要学生名字和需要所有信息的接口需要分开写。</li><li><code>graphql</code>则只用把通过id获取对象的方法给<code>graphql</code>框架，前端通过<code>graphql</code>查询语言就能够在指定的范围内查询数据并且指定输出的格式。</li></ul><h1 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h1><ol><li><p>基于 <code>spring-boot</code> 2.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br></pre></td></tr></table></figure></li><li><p>引入依赖</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.graphql-java&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;graphql-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.0.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.graphql-java&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;graphql-java-tools&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.3.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol><li>定义服务入口</li></ol><p>即有哪些内容可以操作</p><p>resource/graphql/root.graphqls</p><p><code>Query</code>查询入口<br><code>Mutation</code>修改入口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">type Query &#123;</span><br><span class="line">    findAllAuthors: [Author]!</span><br><span class="line">    countAuthors: Long!</span><br><span class="line">    findOneAuthor(id: Long!): Author</span><br><span class="line"></span><br><span class="line">    findAllBooks: [Book]!</span><br><span class="line">    countBooks: Long!</span><br><span class="line">&#125;</span><br><span class="line">type Mutation &#123;</span><br><span class="line">    newAuthor(firstName: String!, lastName: String!) : Author!</span><br><span class="line"></span><br><span class="line">    newBook(title: String!, isbn: String!, pageCount: Int, authorId: Long!) : Book!</span><br><span class="line">    saveBook(input: BookInput!): Book!</span><br><span class="line">    deleteBook(id: ID!) : Boolean</span><br><span class="line">    updateBookPageCount(pageCount: Int!, id: Long!) : Book!</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resource/graphql/scheme.graphqls</p><p>具体的字段定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">type Author &#123;</span><br><span class="line">    id: Long!</span><br><span class="line">    createdTime: String</span><br><span class="line">    firstName: String</span><br><span class="line">    lastName: String</span><br><span class="line">    books: [Book]</span><br><span class="line">&#125;</span><br><span class="line">input BookInput &#123;</span><br><span class="line">    title: String!</span><br><span class="line">    isbn: String!</span><br><span class="line">    pageCount: Int</span><br><span class="line">    authorId: Long</span><br><span class="line">&#125;</span><br><span class="line">type Book &#123;</span><br><span class="line">    id: Long!</span><br><span class="line">    title: String!</span><br><span class="line">    isbn: String!</span><br><span class="line">    pageCount: Int</span><br><span class="line">    author: Author</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>对于定义的入口规则实现</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Query</span> <span class="keyword">implements</span> <span class="title">GraphQLQueryResolver</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AuthorRepository authorRepository;</span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Author <span class="title">findOneAuthor</span><span class="params">(Long id)</span> </span>&#123;</span><br><span class="line">        Optional&lt;Author&gt; opt = authorRepository.findById(id);</span><br><span class="line">        <span class="keyword">return</span> opt.isPresent() ? opt.get() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Author&gt; <span class="title">findAllAuthors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authorRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">countAuthors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> authorRepository.count();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">findAllBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">countBooks</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> bookRepository.count();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>定义了的Query都要实现</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> graphql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springCloud组件基本作用</title>
      <link href="/2022/03/20/springCloud%E7%BB%84%E4%BB%B6%E5%9F%BA%E6%9C%AC%E4%BD%9C%E7%94%A8/"/>
      <url>/2022/03/20/springCloud%E7%BB%84%E4%BB%B6%E5%9F%BA%E6%9C%AC%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1159,阅读全文大约需要4分钟</p><blockquote><p>Spring Cloud的组件有很多，主要记录常用的核心组件的使用场景及原理</p></blockquote><h1 id="一、Eureka"><a href="#一、Eureka" class="headerlink" title="一、Eureka"></a>一、Eureka</h1><blockquote><p>Eureka是微服务架构的注册中心，负责服务的注册与发现。</p></blockquote><ol><li><p><code>使用场景</code>: 微服务架构的各个服务系统部分可能分布在多台机器上，Eureka的作用就是使各个服务直接能够相互调用。</p></li><li><p><code>原理</code>: 每个服务中都集成了一个<code>Eureka Client</code>组件，这个组件负责将当前服务信息发送到<code>Eureka Server</code>中。<code>Eureka Server</code>是注册中心，保存了各个服务的地址信息。各组件可以通过<code>Eureka Client</code>获取其它服务的地址信息，并进行请求。</p></li></ol><h1 id="二、Feign"><a href="#二、Feign" class="headerlink" title="二、Feign"></a>二、Feign</h1><blockquote><p>Feign是一个动态代理，利用aop将连接其它服务，发送网络请求，判断返回值，接收结果等一系列动作封装好。</p></blockquote><ol><li><p><code>使用场景</code>: 调用其它微服务的服务时，接口上使用注解<code>@FeignClient</code>就能创建出一个相关服务的动态代理。接口中声明需要调用的微服务方法，地址等信息。业务中直接调用此接口，Feign就能自动完成远程调用该服务。</p></li><li><p><code>原理</code>: 首先创建一个接口，规范调用的方法。接口上声明<code>@FeignClient</code>并传入服务名，Feign就能通过Eureka获取到该服务的位置。接口方法声明的<code>RequestMapping</code>等和SpringMVC相同的注解则可以定位到方法的具体位置，方法的声明则指定了远程方法的具体格式。最后利用aop将这些动作封装起来。</p></li></ol><h1 id="三、Ribbon"><a href="#三、Ribbon" class="headerlink" title="三、Ribbon"></a>三、Ribbon</h1><blockquote><p>客户端负载均衡，区别于<code>Nginx</code>的服务端负载均衡。客户端负载均衡是访问者（消费者）决定如何访问服务。默认负载均衡算法是轮询算法，一个服务有多台机器上运行时按顺序每次请求分发到各个服务器上。</p></blockquote><ol><li><p><code>使用场景</code>: 当访问量特别大的时候，一台机器无法满足访问需求。这个时候就可以搭建多台机器，所有的机器都运行同一个服务。这些服务运行之后都会注册到注册中心。消费端访问服务时就可以使用<code>Ribbon</code>将访问量平摊到这些机器上。</p></li><li><p><code>原理</code>: 首先从<code>Eureka Server</code>上获取服务注册表，找到服务部署在那些机器上，监听那个端口。然后使用内置算法选出一台机器。最后使用<code>Feign</code>构造并发起请求。</p></li></ol><h1 id="四、Hystrix"><a href="#四、Hystrix" class="headerlink" title="四、Hystrix"></a>四、Hystrix</h1><blockquote><p>隔离、熔断、降级的框架。主要用于服务挂了，导致其它服务未接收相应也卡住。</p></blockquote><ol><li><p><code>使用场景</code>: 防止一个服务挂了之后其它访问的服务也产生连锁反应，保存挂了的服务在重启时间内的被访问数据。</p></li><li><p><code>原理</code>: 首先是<strong>隔离</strong>，<code>Hystrix</code>使用很多独立的线程池分割不同的服务，其中一个服务不可能占用所有的线程并影响其他服务。其次是<strong>熔断</strong>，检测到服务无法访问，这个针对服务的访问请求在特定时间内会直接返回。这样就不用到超时才返回。最后是<strong>降级</strong>，每次有请求访问已经挂了的服务就会向数据库中插入一条信息，记录访问的详细情况。方便在服务恢复之后手动恢复宕机期间的数据。</p></li></ol><h1 id="五、Zuul"><a href="#五、Zuul" class="headerlink" title="五、Zuul"></a>五、Zuul</h1><blockquote><p>微服务网关，根据请求的特征将请求分发到相应的服务中。</p></blockquote><ol><li><p><code>使用场景</code>: 方便前端，安卓设备等访问服务。后端程序的调用可以使用<code>Eureka</code>，前端则需要一个统一的入口。有了统一的入口之后降级，限流，认证授权，安全等都可以统一处理。</p></li><li><p><code>原理</code>: 根据请求的特征分发到相应的微服务中。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC-Request-method-&#39;POST&#39;-not-supported</title>
      <link href="/2022/03/20/springMVC-Request-method-&#39;POST&#39;-not-supported/"/>
      <url>/2022/03/20/springMVC-Request-method-&#39;POST&#39;-not-supported/</url>
      
        <content type="html"><![CDATA[<p>文章字数：142,阅读全文大约需要1分钟</p><blockquote><p>请求被拦截都会报这个错，前端报错405 Method not allowed。版本问题，springMVC可能隐藏部分报错信息</p></blockquote><blockquote><p>部分信息spring没有显示出来的可以看这里，而我的问题是url写错了一个字母。</p></blockquote><p>查看详细信息：</p><ul><li>进入springMVC核心sevelt<code>DispatcherServlet.java</code></li><li>在核心方法<code>doDispatch</code>的异常抛出处打断点<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">catch(Exception ex)&#123;</span><br><span class="line">  dispatchException &#x3D; ex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><em>debug处ex-&gt;detailMessage=”详细信息”*</em></li></ul><p>问题排查步骤：</p><ol><li>url是否正确</li><li>访问方法是否正确</li><li>发送的数据和接收的数据类型是否匹配</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC文件下载</title>
      <link href="/2022/03/20/springMVC%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2022/03/20/springMVC%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>文章字数：81,阅读全文大约需要1分钟</p><blockquote><p>摘抄自<a href="https://blog.csdn.net/a447332241/article/details/78998239" target="_blank" rel="noopener">原文</a></p></blockquote><h1 id="传统io输出"><a href="#传统io输出" class="headerlink" title="传统io输出"></a>传统io输出</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">      <span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">download</span><span class="params">( String fileName ,String filePath, HttpServletRequest request, HttpServletResponse response)</span></span>&#123; </span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e1) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">java.io.BufferedInputStream bis = <span class="keyword">null</span>;</span><br><span class="line">java.io.BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">String downLoadPath = filePath;  <span class="comment">//注意不同系统的分隔符</span></span><br><span class="line"><span class="comment">//String downLoadPath =filePath.replaceAll("/", "\\\\\\\\");   //replace replaceAll区别 *****  </span></span><br><span class="line">System.out.println(downLoadPath);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">long</span> fileLength = <span class="keyword">new</span> File(downLoadPath).length();</span><br><span class="line">response.setContentType(<span class="string">"application/x-msdownload;"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Content-disposition"</span>, <span class="string">"attachment; filename="</span> + <span class="keyword">new</span> String(fileName.getBytes(<span class="string">"utf-8"</span>), <span class="string">"ISO8859-1"</span>));</span><br><span class="line">response.setHeader(<span class="string">"Content-Length"</span>, String.valueOf(fileLength));</span><br><span class="line">bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(downLoadPath));</span><br><span class="line">bos = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream());</span><br><span class="line"><span class="keyword">byte</span>[] buff = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2048</span>];</span><br><span class="line"><span class="keyword">int</span> bytesRead;</span><br><span class="line"><span class="keyword">while</span> (-<span class="number">1</span> != (bytesRead = bis.read(buff, <span class="number">0</span>, buff.length))) &#123;</span><br><span class="line">bos.write(buff, <span class="number">0</span>, bytesRead);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (bis != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bis.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bos != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bos.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="springmvc提供的ResponseEntit"><a href="#springmvc提供的ResponseEntit" class="headerlink" title="springmvc提供的ResponseEntit"></a>springmvc提供的ResponseEntit</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/download"</span>)  </span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt; export(String fileName,String filePath) <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line"></span><br><span class="line">    HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();    </span><br><span class="line">    File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">    </span><br><span class="line">    headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);    </span><br><span class="line">    headers.setContentDispositionFormData(<span class="string">"attachment"</span>, fileName);    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;<span class="keyword">byte</span>[]&gt;(FileUtils.readFileToByteArray(file), headers, HttpStatus.CREATED);    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springSession</title>
      <link href="/2022/03/20/springSession/"/>
      <url>/2022/03/20/springSession/</url>
      
        <content type="html"><![CDATA[<p>文章字数：240,阅读全文大约需要1分钟</p><h1 id="session和cookie"><a href="#session和cookie" class="headerlink" title="session和cookie"></a>session和cookie</h1><p>http是无状态协议，为了能够维持状态，采用了<code>session</code>和<code>cookie</code>的机制。<code>session</code>保存在服务器端，用户访问时会带上<code>sessionId</code>以判断是那个session的信息。</p><h1 id="springSession"><a href="#springSession" class="headerlink" title="springSession"></a>springSession</h1><ol><li><code>springSession</code>使用第三方存储实现集群<code>session</code>管理(redis,mongodb,jdbc),使用<code>AOP</code>技术，几乎可以做到透明替换原生<code>session</code>。</li><li>方便拓展<code>Cookie</code>和自定义<code>session</code>相关的<code>Listener</code> <code>Filter</code></li><li>方便和<code>spring Security</code>集成</li></ol><h1 id="sprinBoot集成使用Redis的SpringSession"><a href="#sprinBoot集成使用Redis的SpringSession" class="headerlink" title="sprinBoot集成使用Redis的SpringSession"></a>sprinBoot集成使用Redis的SpringSession</h1><p>依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.session&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-session-data-redis&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span> <span class="comment">//扫描到这个即可</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置连接</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">        <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">database:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="关键源码"><a href="#关键源码" class="headerlink" title="关键源码"></a>关键源码</h1><ol><li><code>springSessionRepositoryFilter</code>拦截<code>HttpSession</code>的拦截器</li><li><code>AbstractSecurityWebApplicationInitializer</code>和<code>AbstractHttpSessionApplicationInitializer</code>初始化器，拥有很高优先级</li></ol><h1 id="根据用户名查找用户所属的session"><a href="#根据用户名查找用户所属的session" class="headerlink" title="根据用户名查找用户所属的session"></a>根据用户名查找用户所属的session</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//索引name （springSecurity似乎集成了这一步，直接索引了用户名）</span></span><br><span class="line">request.getSession().setAttribute(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME,username);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据索引名和索引值查找sessionId（结果是个map，索引名固定索引值就是用户名）</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">FindByIndexNameSessionRepository&lt;? extends ExpiringSession&gt;</span><br><span class="line"> sessionRepository;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map <span class="title">findByUserName</span><span class="params">(String userName)</span></span>&#123;</span><br><span class="line">    Map&lt;String, ? extends ExpiringSession&gt; usersSession = sessionRepository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME,username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springSession数据结构</title>
      <link href="/2022/03/20/springSession%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/03/20/springSession%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>文章字数：721,阅读全文大约需要2分钟</p><h1 id="三种redis中保存session的key"><a href="#三种redis中保存session的key" class="headerlink" title="三种redis中保存session的key"></a>三种redis中保存session的key</h1><ol><li><code>spring:session:sessions:sessionId</code></li><li><code>spring:session:expirations:时间戳</code></li><li><code>spring:session:sessions:expires:sessionId</code></li></ol><p><code>spring:session:</code>是三个键公用的前缀</p><h1 id="sessions"><a href="#sessions" class="headerlink" title="sessions"></a>sessions</h1><p> <code>spring:session:sessions:sessionId</code>的数据类型是<code>hash</code>类型,其中保存着<code>session</code>相关信息和<code>session</code>的数据。默认<code>TTL</code>是35分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;lastAccessedTime&quot;: 1523933008926,&#x2F;*2018&#x2F;4&#x2F;17 10:43:28*&#x2F;    #最后访问时间</span><br><span class="line">creationTime&quot;: 1523933008926, &#x2F;*2018&#x2F;4&#x2F;17 10:43:28*&#x2F;    #创建时间</span><br><span class="line">maxInactiveInterval&quot;: 1800,      #失效时长</span><br><span class="line">sessionAttr:xxx:&quot;666&quot;    #session的值 sessionAttr:名字:“值”</span><br></pre></td></tr></table></figure><h1 id="expirations"><a href="#expirations" class="headerlink" title="expirations:"></a>expirations:</h1><ol><li><code>redis</code>的过期处理优先级很低，如果有很多过期的键就会出现键已经过期但是未删除</li><li>确保<code>redis</code>的键过期的方式有两个：访问过期的键、手动删除</li><li>基于以上两点，<code>spring</code>会定时手动清除过期的键。<br><code>spring:session:expirations:时间戳</code>中保存的数据为<code>set</code>类型，其中保存着时间戳所在的一分钟之内过期的session，有数据访问就移除，添加到下一个时间段的<code>set</code>中。使用专门的键保存过期需要确保删除的session可以避免全局查找，然后一个个访问失效时间等信息。<br>用户快速操作可能会带来并发问题，在两个时间段都进行了请求。session的过期时间应该向后推两次，但是可能第一次向后推还没完成第二次就完成了(两次操作处于时间段节点)这样就造成session过期时间存在于两个时间段中。<br>此时如果直接删除会造成时间差，比预计删除早了一分钟。所以不能使用删除，使用<code>hasKey</code>命令访问过期的<code>key</code>,让<code>redis</code>自动删除。</li></ol><h1 id="sessions-expires"><a href="#sessions-expires" class="headerlink" title="sessions:expires"></a>sessions:expires</h1><p><code>spring:session:sessions:expires:sessionId</code>的值为空，<code>sessions</code>中保存着<code>session</code>的具体值,<code>sessions:expires</code>则是代表<code>session</code>的有效时间。<br><code>spring</code>需要在知道<code>session</code>过期后拿到过期<code>session</code>的详细信息并进行操作。然而<code>redis</code>的键空间通知<code>keyspace notifications</code>只会说明那个键过期了，无法访问过期的键。于是设置了<code>sessions:expires</code>代表<code>session</code>过期时间，这个键过期了代表<code>session</code>过期。存储信息的<code>sessions</code>键则多存活5分钟，以便过期后访问信息。<br><code>spring</code>中监听过期事件:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 配置</span><br><span class="line">org.springframework.session.data.redis.config.ConfigureNotifyKeyspaceEventsAction</span><br><span class="line"># 过期事件</span><br><span class="line">SessionExpiredEvent</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring事务传播</title>
      <link href="/2022/03/20/spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD/"/>
      <url>/2022/03/20/spring%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD/</url>
      
        <content type="html"><![CDATA[<p>文章字数：479,阅读全文大约需要1分钟</p><blockquote><p>事务传播指的是一个事务被另一个事务调用时事务的进行方式</p></blockquote><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span>(propagation = Propagation.REQUIRED)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   methodB();</span><br><span class="line">   <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="七种级别"><a href="#七种级别" class="headerlink" title="七种级别"></a>七种级别</h1><table><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td>PROPAGATION_REQUIRED</td><td>当前方法必须在事务中运行。如果存在事务，在此事务中运行，否则启动新事务</td></tr><tr><td>PROPAGATION_SUPPORTS</td><td>当前方法不需要事务上下文，但如果有就走当前事务中运行</td></tr><tr><td>PROPAGATION_MANDATORY</td><td>方法必须在事务中运行，不存在当前事务，抛异常</td></tr><tr><td>PROPAGATION_REQUIRED_NEW</td><td>当前方法必须运行在它自己的事务中，一个新的事物将被启动。如果存在当前事务，在改方法执行期间，当前事务会被挂起。如果使用<code>JTATransactionManager</code>的话，则需要访问<code>TransationManager</code></td></tr><tr><td>PROPAGATION_NEVER</td><td>表示当前方法不应该云心在事务上下文中。如果当前正有一个事物在运行，则抛异常</td></tr><tr><td>PROPAGATION_NESTED</td><td>如果当前存在事务，方法嵌套在事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与<code>PROPAGATION_REQUIRED</code>一样</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring单例和多例区别</title>
      <link href="/2022/03/20/spring%E5%8D%95%E4%BE%8B%E5%92%8C%E5%A4%9A%E4%BE%8B%E5%8C%BA%E5%88%AB/"/>
      <url>/2022/03/20/spring%E5%8D%95%E4%BE%8B%E5%92%8C%E5%A4%9A%E4%BE%8B%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：100,阅读全文大约需要1分钟</p><blockquote><p><code>spring</code>默认单例创建<code>bean</code>，也可以设置多例创建</p></blockquote><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ol><li><p>单例只创建一个，多例使用几次创建几次</p></li><li><p>创建时间，单例在IOC运行时创建，多例使用创建。单例设置懒加载也可以在使用时创建。</p></li></ol><h1 id="多例和懒加载"><a href="#多例和懒加载" class="headerlink" title="多例和懒加载"></a>多例和懒加载</h1><p>多例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Persion(<span class="string">"张三"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@Lazy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Person <span class="title">person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Persion(<span class="string">"张三"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring反射工具</title>
      <link href="/2022/03/20/spring%E5%8F%8D%E5%B0%84%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/spring%E5%8F%8D%E5%B0%84%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：392,阅读全文大约需要1分钟</p><blockquote><p><code>ReflectionUtils</code>是<code>spring</code>针对反射提供的工具类。</p></blockquote><h1 id="handleReflectionException异常处理"><a href="#handleReflectionException异常处理" class="headerlink" title="handleReflectionException异常处理"></a>handleReflectionException异常处理</h1><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleReflectionException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> NoSuchMethodException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Method not found: "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> IllegalAccessException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Could not access method: "</span> + ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> InvocationTargetException) &#123;</span><br><span class="line">        handleInvocationTargetException((InvocationTargetException) ex);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ex <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">        <span class="keyword">throw</span> (RuntimeException) ex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UndeclaredThrowableException(ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要是将反射中的异常分成几个部分，规范化输出</p><ul><li><code>boolean declaresException(Method method, Class&lt;?&gt; exceptionType)</code><br>判断方法上是否声明了指定的异常类型</li></ul><h1 id="findField查找字段"><a href="#findField查找字段" class="headerlink" title="findField查找字段"></a>findField查找字段</h1><ul><li><code>Field findField(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</code></li></ul><p>查找指定类的指定名称和指定类型的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Field <span class="title">findField</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; searchType = clazz;</span><br><span class="line">    <span class="keyword">while</span> (Object<span class="class">.<span class="keyword">class</span> !</span>= searchType &amp;&amp; searchType != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Field[] fields = getDeclaredFields(searchType);</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((name == <span class="keyword">null</span> || name.equals(field.getName())) &amp;&amp;</span><br><span class="line">                    (type == <span class="keyword">null</span> || type.equals(field.getType()))) &#123;</span><br><span class="line">                <span class="keyword">return</span> field;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        searchType = searchType.getSuperclass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取所有的方法，然后循环遍历，知道找到满足条件的返回<br>其中<code>getDeclaredFields(searchType)</code>方法使用<code>ConcurrentReferenceHashMap</code>将<code>Field</code>缓存，并优先从缓存中取。</p><ul><li><code>Field findField(Class&lt;?&gt; clazz, String name)</code></li></ul><h1 id="设置字段setField"><a href="#设置字段setField" class="headerlink" title="设置字段setField"></a>设置字段setField</h1><ul><li><code>void setField(Field field, Object target, Object value)</code>设置指定字段的值<br>直接使用<code>Field.set/get</code>方法，然后格式化处理了异常</li><li><code>Object getField(Field field, Object target)</code>获取指定字段的值</li></ul><h1 id="查找方法findMethod"><a href="#查找方法findMethod" class="headerlink" title="查找方法findMethod"></a>查找方法findMethod</h1><ul><li><p><code>Method findMethod(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... paramTypes)</code><br>查找方法，方法的参数是一个可变长的<code>Class</code></p></li><li><p><code>Method findMethod(Class&lt;?&gt; clazz, String name)</code>直接查，不指定参数</p></li></ul><h1 id="调用方法invokeMethod"><a href="#调用方法invokeMethod" class="headerlink" title="调用方法invokeMethod"></a>调用方法invokeMethod</h1><ul><li><p><code>Object invokeMethod(Method method, Object target, Object... args)</code>调用方法</p></li><li><p><code>Object invokeMethod(Method method, Object target)</code>简单版本</p></li></ul><h1 id="判断类"><a href="#判断类" class="headerlink" title="判断类"></a>判断类</h1><ul><li><p><code>boolean declaresException(Method method, Class&lt;?&gt; exceptionType)</code><br>方法上是否声明了指定的异常</p></li><li><p><code>boolean isPublicStaticFinal(Field field)</code><br>判断字段首付是<code>public static final</code>的</p></li><li><p><code>boolean isEqualsMethod(Method method)</code><br>判断方法是否是<code>equals</code>方法</p></li><li><p><code>boolean isHashCodeMethod(Method method)</code><br>判断方法是否是<code>hashcode</code>方法</p></li><li><p><code>boolean isToStringMethod(Method method)</code><br>判断方法是否是<code>toString</code>方法</p></li><li><p><code>boolean isObjectMethod(Method method)</code><br>判断方法是否是<code>Object</code>类上的方法</p></li></ul><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><ul><li><p><code>void makeAccessible(Field field)</code><br>使私有的字段可写</p></li><li><p><code>void makeAccessible(Method method)</code><br>私有方法可调用</p></li><li><p><code>void makeAccessible(Constructor&lt;?&gt; ctor)</code><br>私有构造器可调用</p></li><li><p><code>void doWithLocalMethods(Class&lt;?&gt; clazz, MethodCallback mc)</code><br>遍历类上的方法，并执行回调</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodCallback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doWith</span><span class="params">(Method method)</span> <span class="keyword">throws</span> IllegalArgumentException, IllegalAccessException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>void doWithMethods(Class&lt;?&gt; clazz, MethodCallback mc, MethodFilter mf)</code><br>增加了一个方法过滤器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MethodFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(Method method)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring定时任务修改系统时间后未生效</title>
      <link href="/2022/03/20/spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%90%8E%E6%9C%AA%E7%94%9F%E6%95%88/"/>
      <url>/2022/03/20/spring%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E4%BF%AE%E6%94%B9%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%90%8E%E6%9C%AA%E7%94%9F%E6%95%88/</url>
      
        <content type="html"><![CDATA[<p>文章字数：191,阅读全文大约需要1分钟</p><blockquote><p>使用<code>ScheduledThreadPoolExecutor</code>创建定时任务</p></blockquote><h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><ol><li>创建定时任务之后修改系统时间，以自测定时任务是否执行。发现未执行</li><li>不修改系统时间则正常</li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><ol><li><p><code>DelegatingErrorHandlingRunnable.class</code>可以看到每次执行之后才会使用延时创建下一个时段的任务。所以即使是<code>cron</code>表达式创建的定时任务指定了下一次执行时间后就和系统时间没有关联了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public ScheduledFuture&lt;?&gt; schedule() &#123;</span><br><span class="line">synchronized (this.triggerContextMonitor) &#123;</span><br><span class="line">this.scheduledExecutionTime &#x3D; this.trigger.nextExecutionTime(this.triggerContext);</span><br><span class="line">if (this.scheduledExecutionTime &#x3D;&#x3D; null) &#123;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">long initialDelay &#x3D; this.scheduledExecutionTime.getTime() - System.currentTimeMillis();</span><br><span class="line">this.currentFuture &#x3D; this.executor.schedule(this, initialDelay, TimeUnit.MILLISECONDS);</span><br><span class="line">return this;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void run() &#123;</span><br><span class="line">Date actualExecutionTime &#x3D; new Date();</span><br><span class="line">super.run();</span><br><span class="line">Date completionTime &#x3D; new Date();</span><br><span class="line">synchronized (this.triggerContextMonitor) &#123;</span><br><span class="line">this.triggerContext.update(this.scheduledExecutionTime, actualExecutionTime, completionTime);</span><br><span class="line">if (!this.currentFuture.isCancelled()) &#123;</span><br><span class="line">schedule();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>只能先修改时间再创建定时任务就可以解决问题。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring根据配置文件获取bean</title>
      <link href="/2022/03/20/spring%E6%A0%B9%E6%8D%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96bean/"/>
      <url>/2022/03/20/spring%E6%A0%B9%E6%8D%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%8E%B7%E5%8F%96bean/</url>
      
        <content type="html"><![CDATA[<p>文章字数：53,阅读全文大约需要1分钟</p><blockquote><p><code>@Configuration</code>注解的类就是配置文件，<code>@Bean</code>注解的方法就会注入名为方法名的实例</p></blockquote><h1 id="获取方法之一"><a href="#获取方法之一" class="headerlink" title="获取方法之一"></a>获取方法之一</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取配置文件</span></span><br><span class="line">        AnnotationConfigApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(MainConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 获取 bean文件</span></span><br><span class="line">        Person bean = context.getBean(Person<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(bean);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring注解Value设置默认值</title>
      <link href="/2022/03/20/spring%E6%B3%A8%E8%A7%A3Value%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC/"/>
      <url>/2022/03/20/spring%E6%B3%A8%E8%A7%A3Value%E8%AE%BE%E7%BD%AE%E9%BB%98%E8%AE%A4%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：33,阅读全文大约需要1分钟</p><ul><li>字符串<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:my default value&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String stringWithDefaultValue;</span><br><span class="line"><span class="comment">//空值</span></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String stringWithBlankDefaultValue;</span><br></pre></td></tr></table></figure></li><li>基本数据类型<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:true&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> booleanWithDefaultValue;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:42&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> intWithDefaultValue;</span><br></pre></td></tr></table></figure></li><li>数组默认值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:one,two,three&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String[] stringArrayWithDefaults;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:1,2,3&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] intArrayWithDefaults;</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring自动注入为null</title>
      <link href="/2022/03/20/spring%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E4%B8%BAnull/"/>
      <url>/2022/03/20/spring%E8%87%AA%E5%8A%A8%E6%B3%A8%E5%85%A5%E4%B8%BAnull/</url>
      
        <content type="html"><![CDATA[<p>文章字数：286,阅读全文大约需要1分钟</p><blockquote><p>写了一个工具类，并且使用<code>Spring</code>注入了一个<code>Service</code>但是使用的时候返回<code>null</code>。</p></blockquote><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><ol><li>如果是找不到类应该在启动的时候报错，但是知道运行时才报空指针（@Autowired默认required = true）</li><li>spring是在启动的时候扫描文件，将相应注解的<code>bean</code>保存，然后再统一注入</li><li>我的工具类是使用反射生成的实例，所以新的实例中没有注入的<code>bean</code></li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class BeanFactoryTest implements ApplicationContextAware &#123;</span><br><span class="line"></span><br><span class="line">    private ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException &#123;</span><br><span class="line">        this.applicationContext&#x3D;applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ApplicationContext getApplicationContext() &#123;</span><br><span class="line">        return applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动获取bean</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BlogService blogService&#x3D;beanFactoryTest.getApplicationContext().getBean(BlogService.class);</span><br></pre></td></tr></table></figure><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>使用注入的类如果不是spring管理的注入也没有效果，即只有在<code>bean</code>中才能使用<code>bean</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring缓存</title>
      <link href="/2022/03/20/spring%E7%BC%93%E5%AD%98/"/>
      <url>/2022/03/20/spring%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<p>文章字数：892,阅读全文大约需要3分钟</p><blockquote><p>spring提供了注解形式的缓存，可以在方法查询了一次之后保存结果。但是内部调用不会触发缓存(this.xx())。</p></blockquote><h1 id="基础注解"><a href="#基础注解" class="headerlink" title="基础注解"></a>基础注解</h1><ol><li><code>@Cacheable</code>被标记方法执行后返回结果会被缓存。</li><li><code>@CacheEvict</code>方法执行前或后执行移除springCache中某些元素。</li></ol><h1 id="Cacheable"><a href="#Cacheable" class="headerlink" title="@Cacheable"></a>@Cacheable</h1><p>标记方法支持缓存，执行一次后返回结果会被保存。拥有三个参数</p><ol><li><p><code>value</code>指定缓存在哪个Cache上，指定多个Cache时是一个数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(<span class="string">"cache1"</span>)<span class="comment">//Cache是发生在cache1上的</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">      returnnull;</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//多个</span></span><br><span class="line"><span class="meta">@Cacheable</span>(&#123;<span class="string">"cache1"</span>, <span class="string">"cache2"</span>&#125;)<span class="comment">//Cache是发生在cache1和cache2上的</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">      returnnull;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p><code>key</code>缓存的键，需要使用EL表达式。如果不指定，则缺省按照方法的所有参数进行组合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">key=<span class="string">"#id"</span><span class="comment">//#参数名 使用参数值作为key</span></span><br><span class="line">key=<span class="string">"#p0"</span><span class="comment">//#p参数的index 使用第一个参数值作为key</span></span><br><span class="line"><span class="comment">//使用spring提供的包含信息的root方法。root.可省略</span></span><br><span class="line">key=<span class="string">"root.methodName"</span><span class="comment">//当前方法名</span></span><br><span class="line">key=<span class="string">"root.method.name"</span><span class="comment">//当前方法</span></span><br><span class="line">key=<span class="string">"root.targetClass"</span><span class="comment">//当前被调用的对象</span></span><br><span class="line">key=<span class="string">"root.targetClass"</span><span class="comment">//对象Class</span></span><br><span class="line">key=<span class="string">"root.args[0]"</span><span class="comment">//当前方法组成的数值</span></span><br><span class="line">key=<span class="string">"root.caches[0].name"</span><span class="comment">//当前被调用的方法使用的Cache</span></span><br></pre></td></tr></table></figure><p>拼接：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cacheable</span>(key = <span class="string">"'com:test:'+#id"</span>)</span><br><span class="line"><span class="comment">//使用全局变量防止多次对key赋值？</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_NAME = <span class="string">"'com:test:'"</span>;</span><br><span class="line"><span class="meta">@Cacheable</span>(key = KEY_NAME +<span class="string">"+#id"</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>condition</code>指定发生条件<br>也是EL表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">condition=<span class="string">"#user.id%2==0"</span></span><br><span class="line">condition = <span class="string">"#key != null"</span></span><br></pre></td></tr></table></figure><h1 id="CachePut"><a href="#CachePut" class="headerlink" title="@CachePut"></a>@CachePut</h1><p>和<code>@Cacheable</code>相似，只不过<code>@CachePut</code>不会检查是否缓存中存在结果，而是直接执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@CachePut也可以标注在类上和方法上。使用@CachePut时我们可以指定的属性跟@Cacheable是一样的。</span></span><br><span class="line"> <span class="meta">@CachePut</span>(<span class="string">"users"</span>)<span class="comment">//每次都会执行方法，并将结果存入指定的缓存中</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"find user by user "</span> + user);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="CacheEvict"><a href="#CacheEvict" class="headerlink" title="@CacheEvict"></a>@CacheEvict</h1><p>用来清除缓存，加在需要清除操作的 方法/类 上。</p></li></ol><p>属性列表：<code>value</code>、<code>key</code>、<code>condition</code>、<code>allEntries</code>和<code>beforeInvocation</code><br>和<code>@Cacheable</code>相同意义的属性</p><ol><li><code>value</code>表示清除操作是发生在哪些Cache上的（对应Cache的名称）</li><li><code>key</code>key表示需要清除的是哪个key，如未指定则会使用默认策略生成的key</li><li><code>condition</code>condition表示清除操作发生的条件</li></ol><p><strong>其它属性</strong>：</p><ol><li><code>allEntries</code> allEntries是boolean类型，表示是否需要清除缓存中的所有元素。默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清除users</span></span><br><span class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"users"</span>, allEntries=<span class="keyword">true</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"delete user by id: "</span> + id);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><code>beforeInvocation</code>设置<br>清除默认是方法执行后，如果方法因异常没有成功返回则不会执行清除。设置这个能够在方法执行前清除。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheEvict</span>(value=<span class="string">"users"</span>, beforeInvocation=<span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   System.out.println(<span class="string">"delete user by id: "</span> + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><code>@Ehcache</code>也有设置清除策略</li></ol><h1 id="Caching"><a href="#Caching" class="headerlink" title="@Caching"></a>@Caching</h1><p>@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Caching</span>(cacheable = <span class="meta">@Cacheable</span>(<span class="string">"users"</span>), evict = &#123; <span class="meta">@CacheEvict</span>(<span class="string">"cache2"</span>),</span><br><span class="line"><span class="meta">@CacheEvict</span>(value = <span class="string">"cache3"</span>, allEntries = <span class="keyword">true</span>) &#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">find</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">   returnnull;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义注解中使用"><a href="#自定义注解中使用" class="headerlink" title="自定义注解中使用"></a>自定义注解中使用</h1><p>Spring允许我们在配置可缓存的方法时使用自定义的注解，前提是自定义的注解上必须使用对应的注解进行标注。如我们有如下这么一个使用@Cacheable进行标注的自定义注解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Cacheable</span>(value=<span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyCacheable &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 调优 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlserver数据库死锁排查工具</title>
      <link href="/2022/03/20/sqlserver%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/sqlserver%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E6%8E%92%E6%9F%A5%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：157,阅读全文大约需要1分钟</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询死锁</span></span><br><span class="line"><span class="keyword">select</span>    </span><br><span class="line">    request_session_id spid,   </span><br><span class="line">    OBJECT_NAME(resource_associated_entity_id) tableName    </span><br><span class="line"><span class="keyword">from</span>    </span><br><span class="line">    sys.dm_tran_locks   </span><br><span class="line"><span class="keyword">where</span>    </span><br><span class="line">    resource_type=<span class="string">'OBJECT'</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2. 查询相关资源</span></span><br><span class="line"><span class="keyword">SELECT</span>  </span><br><span class="line">der.[session_id],der.[blocking_session_id],  </span><br><span class="line">sp.lastwaittype,sp.hostname,sp.program_name,sp.loginame,  </span><br><span class="line">der.[start_time] <span class="keyword">AS</span> <span class="string">'开始时间'</span>,  </span><br><span class="line">der.[<span class="keyword">status</span>] <span class="keyword">AS</span> <span class="string">'状态'</span>,  </span><br><span class="line">dest.[<span class="built_in">text</span>] <span class="keyword">AS</span> <span class="string">'sql语句'</span>,  </span><br><span class="line">DB_NAME(der.[database_id]) <span class="keyword">AS</span> <span class="string">'数据库名'</span>,  </span><br><span class="line">der.[wait_type] <span class="keyword">AS</span> <span class="string">'等待资源类型'</span>,  </span><br><span class="line">der.[wait_time] <span class="keyword">AS</span> <span class="string">'等待时间'</span>,  </span><br><span class="line">der.[wait_resource] <span class="keyword">AS</span> <span class="string">'等待的资源'</span>,  </span><br><span class="line">der.[logical_reads] <span class="keyword">AS</span> <span class="string">'逻辑读次数'</span>  </span><br><span class="line"><span class="keyword">FROM</span> sys.[dm_exec_requests] <span class="keyword">AS</span> der  </span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> master.dbo.sysprocesses <span class="keyword">AS</span> sp <span class="keyword">ON</span> der.session_id=sp.spid  </span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">APPLY</span>  sys.[dm_exec_sql_text](der.[sql_handle]) <span class="keyword">AS</span> dest  </span><br><span class="line"><span class="comment">--WHERE [session_id]&gt;50 AND session_id&lt;&gt;@@SPID  </span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> der.[session_id]  </span><br><span class="line"><span class="keyword">GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3. 查询数据库状态</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">name</span>,user_access,user_access_desc,</span><br><span class="line">snapshot_isolation_state,snapshot_isolation_state_desc,</span><br><span class="line">is_read_committed_snapshot_on</span><br><span class="line"><span class="keyword">from</span> sys.databases</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4. 设置数据库为SINGLE_USER模式,减少锁定时间</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> dbname <span class="keyword">SET</span> SINGLE_USER <span class="keyword">WITH</span> <span class="keyword">ROLLBACK</span> <span class="keyword">IMMEDIATE</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> dbname <span class="keyword">SET</span> ALLOW_SNAPSHOT_ISOLATION <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> dbname <span class="keyword">SET</span> READ_COMMITTED_SNAPSHOT <span class="keyword">ON</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DATABASE</span> dbname <span class="keyword">SET</span> MULTI_USER</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5. 设置session 的锁超时时间，仅对当前session有效</span></span><br><span class="line"><span class="keyword">SET</span> LOCK_TIMEOUT <span class="number">3000</span> <span class="comment">--毫秒ms</span></span><br><span class="line"><span class="comment">/* 1 s = 1000 ms</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">select</span> @@LOCK_TIMEOUT <span class="comment">--默认值为-1，即无超时限制</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 锁 </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql常用函数</title>
      <link href="/2022/03/20/sql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/20/sql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：429,阅读全文大约需要1分钟</p><h1 id="一、字符串相关"><a href="#一、字符串相关" class="headerlink" title="一、字符串相关"></a>一、字符串相关</h1><ol><li><code>LENGTH</code>获取字节长度 <code>select length(&#39;abcd&#39;)</code></li><li><code>CONCAT</code>拼接字符串 <code>select concat(&#39;ab&#39;, &#39;cd&#39;)</code></li><li><code>UPPER</code>字符全转大写 <code>select upper(&#39;abcd&#39;)</code></li><li><code>LOWER</code>字符全转小写 <code>select lower(&#39;ABCD&#39;)</code></li><li><code>SUBSTR</code>从索引<code>1</code>开始，返回指定位置之后的字符 <code>select substr(&#39;abcd&#39;, 2)</code> =&gt; <code>bcd</code>; 从索引开始，获取指定长度 <code>select substr(&#39;abcd&#39;, 1,3)</code> =&gt; <code>abc</code></li><li><code>INSERT</code> 返回第二个参数第一次出现的位置，<code>1</code>开始,没有返回<code>0</code> <code>select insert(&#39;abcd&#39;, &#39;cd&#39;)</code> =&gt; <code>3</code></li><li><code>TRIM</code> 去除首尾指定的字符，如果没有指定，代表去除空格 <code>select trim(&#39;-&#39;,&#39;-123-&#39;)</code> =&gt; <code>123</code></li><li><code>LPAD</code> 用指定字符填充左长度，填充到指定长度 <code>select lpad(&#39;12&#39;, 4, &#39;0&#39;)</code> =&gt; <code>0012</code></li><li><code>RPAD</code> 用指定字符填充右长度，填充到指定长度 <code>select rpad(&#39;12&#39;,4,&#39;#&#39;)</code> =&gt; <code>12##</code></li><li><code>REPLACE</code> 替换所有字符串成另一个字符串 <code>select replace(&#39;abcdef&#39;, &#39;bc&#39;, &#39;#&#39;)</code> =&gt; <code>a#def</code></li></ol><h1 id="二、数学函数"><a href="#二、数学函数" class="headerlink" title="二、数学函数"></a>二、数学函数</h1><ol><li><code>ROUND</code>四舍五入 <code>select round(-1.55)</code> =&gt; <code>-2</code>； 保留指定位的小数 <code>select round(1.2345, 2)</code> =&gt; <code>1.23</code></li><li><code>CEIL</code> 向上取整 <code>select ceil(-1.01)</code> =&gt; <code>-1</code></li><li><code>FLOOR</code> 向下取整 <code>select floor(1.1)</code> =&gt; <code>1</code></li><li><code>TRUNCATE</code> 保留几位小数 <code>select truncate(1,2345, 2)</code> =&gt; <code>1.23</code></li><li><code>MOD</code> 取模 <code>select mod(10, 3)</code> =&gt; <code>1</code></li></ol><h1 id="三、日期函数"><a href="#三、日期函数" class="headerlink" title="三、日期函数"></a>三、日期函数</h1><ol><li><code>NOW</code> 返回当前系统日期和时间</li><li><code>CURDATE</code>返回当前系统日期</li><li><code>CURTIME</code>返回当前时间</li><li><code>MONTHNAME(NOW())</code>返回当前月份英文</li><li><code>DAYNAME(NOW())</code>返回当前是周几英文</li><li><code>SELECT STR_TO_DATE(&#39;4-3#1992&#39;, &#39;%m-%d#%Y&#39;)</code>日期格式化</li><li><code>SELECT DATE_FORMAT(NOW(), &#39;%m#%d#%Y&#39;)</code>时间格式化</li></ol><h1 id="四、系统相关"><a href="#四、系统相关" class="headerlink" title="四、系统相关"></a>四、系统相关</h1><ol><li><code>SELECT VERSION()</code> sql 版本号</li><li><code>SELECT DATABASE()</code>当前数据库名</li><li><code>SELECT USER()</code>当前登录用户名</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql排名函数</title>
      <link href="/2022/03/20/sql%E6%8E%92%E5%90%8D%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/20/sql%E6%8E%92%E5%90%8D%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：353,阅读全文大约需要1分钟</p><h1 id="一、ROW-NUMBER"><a href="#一、ROW-NUMBER" class="headerlink" title="一、ROW_NUMBER"></a>一、ROW_NUMBER</h1><p>作用：给查询的数据加上行号<br>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ROW_NUMBER() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) <span class="keyword">index</span>,score,<span class="keyword">name</span> <span class="keyword">from</span> studentScore</span><br></pre></td></tr></table></figure><p>查询学生的成绩<code>score</code>和名字<code>name</code>并且根据成绩排序<code>order by score desc</code>，最后加上行号<code>ROW_NUMBER() over...</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">index|score|name</span><br><span class="line">1    |100  |st1</span><br><span class="line">2    |90   |st1</span><br><span class="line">3    |90   |st1</span><br><span class="line">4    |80   |st1</span><br><span class="line">5    |70   |st1</span><br></pre></td></tr></table></figure><h1 id="二、RANK"><a href="#二、RANK" class="headerlink" title="二、RANK"></a>二、RANK</h1><p>作用：排名，如果有同名次的，会累加名次。比如找前5名，没有同名次的时候输出名次1,2,3,4,5的数据。如果有名次一样的，输出的则是名次1,2,2,4,5。</p><p>例如:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">RANK</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> studentScore <span class="keyword">desc</span>) studentRank, * <span class="keyword">from</span> studentScore</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">studentRank|score|name</span><br><span class="line">1          |100  |st1</span><br><span class="line">2          |90   |st1</span><br><span class="line">2          |90   |st1</span><br><span class="line">4          |80   |st1</span><br><span class="line">5          |70   |st1</span><br></pre></td></tr></table></figure><h1 id="三、DENSE-RANK"><a href="#三、DENSE-RANK" class="headerlink" title="三、DENSE_RANK"></a>三、DENSE_RANK</h1><p>作用：排名，区别于RANK。当有同名次的时候，不会累计，即有同名次是会显示名次1,2,2,3,4</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DENSE_RANK</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> studentScore <span class="keyword">desc</span>) studentRank, * <span class="keyword">from</span> studentScore</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">studentRank|score|name</span><br><span class="line">1          |100  |st1</span><br><span class="line">2          |90   |st1</span><br><span class="line">2          |90   |st1</span><br><span class="line">3          |80   |st1</span><br><span class="line">4          |70   |st1</span><br></pre></td></tr></table></figure><h1 id="NTILE"><a href="#NTILE" class="headerlink" title="NTILE"></a>NTILE</h1><p>作用：将数据切分成几个部分，并标记部分代号。比如NTILE(2),就是将所有数据平分成两个部分，一部分是1，另一部分是2</p><p>例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> NTILE(<span class="number">2</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> studentScore <span class="keyword">desc</span>) <span class="built_in">number</span>,* <span class="keyword">from</span> studentScore</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">studentRank|score|name</span><br><span class="line">1          |100  |st1</span><br><span class="line">1          |90   |st1</span><br><span class="line">1          |90   |st1</span><br><span class="line">2          |80   |st1</span><br><span class="line">2          |70   |st1</span><br></pre></td></tr></table></figure><p>关键词: <code>sql</code></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>sql开窗函数</title>
      <link href="/2022/03/20/sql%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/"/>
      <url>/2022/03/20/sql%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：269,阅读全文大约需要1分钟</p><h1 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h1><p>为前面的函数提供数据（分区排序，然后对每个分区都进行前面函数的操作）</p><h1 id="查出每门功课的第一名"><a href="#查出每门功课的第一名" class="headerlink" title="查出每门功课的第一名"></a>查出每门功课的第一名</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> *, ROW_NUMBER() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> coursename <span class="keyword">order</span> <span class="keyword">by</span> mark <span class="keyword">desc</span>) ranks <span class="keyword">from</span> stuMark</span><br><span class="line">    ) sc <span class="keyword">where</span> sc.ranks=<span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li><code>partition by coursename</code>将数据根据<code>coursename</code>进行分区，使各个学科的成绩分开</li><li><code>ROW_NUMBER()</code>给每个分区的成绩单独加上行号</li><li><code>where sc.ranks=1</code>选取行号为<code>1</code>即第一名的成绩数据</li></ul><h1 id="排名"><a href="#排名" class="headerlink" title="排名"></a>排名</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">RANK</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> studentScore <span class="keyword">desc</span>) studentRank, * <span class="keyword">from</span> studentScore</span><br></pre></td></tr></table></figure><ul><li>用<code>over</code>向<code>RANK</code>函数指定数据内容，及通过分数排序的学生成绩</li></ul><h1 id="根据班级求总分"><a href="#根据班级求总分" class="headerlink" title="根据班级求总分"></a>根据班级求总分</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.name,t.class,t.sroce,<span class="keyword">sum</span>(t.sroce) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> t.class <span class="keyword">order</span> <span class="keyword">by</span> t.sroce <span class="keyword">desc</span>) mm <span class="keyword">from</span> T2_TEMP t;</span><br></pre></td></tr></table></figure><ul><li>通过<code>over(partition by...</code>将数据分区</li><li>sum计算每个分区的总和</li><li></li></ul><h1 id="找出每个班级第一名和最后一名"><a href="#找出每个班级第一名和最后一名" class="headerlink" title="找出每个班级第一名和最后一名"></a>找出每个班级第一名和最后一名</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.name,t.class,t.sroce,<span class="keyword">first_value</span>(t.sroce) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> t.class <span class="keyword">order</span> <span class="keyword">by</span> t.sroce <span class="keyword">desc</span>) mm <span class="keyword">from</span> T2_TEMP t;</span><br><span class="line"><span class="keyword">select</span> t.name,t.class,t.sroce,<span class="keyword">last_value</span>(t.sroce) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> t.class <span class="keyword">order</span> <span class="keyword">by</span> t.sroce <span class="keyword">desc</span>) mm <span class="keyword">from</span> T2_TEMP t;</span><br></pre></td></tr></table></figure><ul><li>使用<code>over</code>分区</li><li><code>first_value</code>和<code>last_value</code>找出分区的第一名和最后一名</li></ul><h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">count() over(partition by ... order by ...)：求分组后的总数。</span><br><span class="line">　　max() over(partition by ... order by ...)：求分组后的最大值。</span><br><span class="line">　　min() over(partition by ... order by ...)：求分组后的最小值。</span><br><span class="line">　　avg() over(partition by ... order by ...)：求分组后的平均值。</span><br><span class="line">　　lag() over(partition by ... order by ...)：取出前n行数据。　　</span><br><span class="line"></span><br><span class="line">　　lead() over(partition by ... order by ...)：取出后n行数据。</span><br><span class="line"></span><br><span class="line">　　ratio_to_report() over(partition by ... order by ...)：Ratio_to_report() 括号中就是分子，over() 括号中就是分母。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql类型不匹配</title>
      <link href="/2022/03/20/sql%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%8C%B9%E9%85%8D/"/>
      <url>/2022/03/20/sql%E7%B1%BB%E5%9E%8B%E4%B8%8D%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>文章字数：60,阅读全文大约需要1分钟</p><blockquote><p>报错 <code>No operator matches the given name and argument type(s). You might need to add explicit type casts.</code><br>  <code>operator does not exist: character varying = integer.</code></p></blockquote><p>传入的值和数据库类型不匹配</p><p>错误查询语句:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">0</span>) <span class="keyword">FROM</span> TBNAME t <span class="keyword">WHERE</span>  t.TABLE_TYPE = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>原因：<code>table_type</code>的类型是<strong>字符串</strong>类型，<code>1</code>是<strong>数值</strong>类型</p><p>修改后:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">0</span>) <span class="keyword">FROM</span> TBNAME t <span class="keyword">WHERE</span>  t.TABLE_TYPE = <span class="string">'1'</span></span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">count</span>(<span class="number">0</span>) <span class="keyword">FROM</span> TBNAME t <span class="keyword">WHERE</span>  t.TABLE_TYPE =<span class="number">1</span>::<span class="built_in">varchar</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssl证书及编码格式</title>
      <link href="/2022/03/20/ssl%E8%AF%81%E4%B9%A6%E5%8F%8A%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/"/>
      <url>/2022/03/20/ssl%E8%AF%81%E4%B9%A6%E5%8F%8A%E7%BC%96%E7%A0%81%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：474,阅读全文大约需要1分钟</p><blockquote><p>在编写<code>ssl</code>相关代码的时候遇到了很多新的名词，这里梳理一下它们直接的关系。</p></blockquote><h1 id="一、X-690"><a href="#一、X-690" class="headerlink" title="一、X.690"></a>一、X.690</h1><ul><li><code>X.690</code>是<code>ITU-T</code>标准，规定了若干<code>ASN.1</code>编码格式</li><li>所谓的编码格式就是将具体对象怎么转换成二进制的规范，标准。比如字符编码<code>UTF-8</code>也是一种字符的编码格式</li><li><code>ASN.1</code>编码格式</li></ul><ol><li><code>Basic Encoding Rules (BER)</code></li><li><code>Canonical Encoding Rules (CER)</code></li><li><code>Distinguished Encoding Rules (DER)</code></li></ol><ul><li>其中，<code>DER</code>被广泛使用，它是<code>BER</code>的子级，除了删除了一个发送者选项外，其它和<code>BER</code>一样。<code>CER</code>和<code>DER</code>也类似。</li><li><code>X.509</code>公钥证书格式标准使用的就是<code>DER</code>编码</li></ul><h1 id="二、PEM-Privacy-Enhanced-Mail"><a href="#二、PEM-Privacy-Enhanced-Mail" class="headerlink" title="二、PEM(Privacy-Enhanced Mail)"></a>二、PEM(Privacy-Enhanced Mail)</h1><ul><li><p>也是一种编码格式，最初是一种文件格式，但是原始的标准没被广泛使用，反而是编码方式流行起来了</p></li><li><p>和<code>DER</code>不一样的是<code>PEM</code>文件内采用的是<code>Base64</code>编码，可以在只能传输<code>ASCII</code>的系统中使用</p></li><li><p>一下为<code>PEM</code>文件的格式，<code>xxx</code>是具体存储的消息类型，例如<code>CERTIFICATE</code>、<code>PRIVATE KEY</code></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN xxx -----</span><br><span class="line"> </span><br><span class="line">base64内容</span><br><span class="line"> </span><br><span class="line">-----END xxx -----</span><br></pre></td></tr></table></figure><ul><li><code>.pem</code> <code>.cer</code> <code>.crt</code> <code>.key</code>等后缀都可能是<code>PEM</code>格式的</li></ul><h1 id="三、PKCS-Public-Key-Cryptography-Standards"><a href="#三、PKCS-Public-Key-Cryptography-Standards" class="headerlink" title="三、PKCS (Public Key Cryptography Standards)"></a>三、PKCS (Public Key Cryptography Standards)</h1><ul><li><p>对于秘钥加密的标准</p></li><li><p>常见的标准有</p></li></ul><ol><li><code>PKCS #1</code>，是<code>RSA</code>加密算法标准</li></ol><hr><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ssl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized底层实现</title>
      <link href="/2022/03/20/synchronized%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/03/20/synchronized%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：180,阅读全文大约需要1分钟</p><h1 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h1><ul><li><code>synchtonized</code>膨胀为重量级锁时使用<code>mutex</code>实现的</li><li>操作系统提供的互斥锁</li><li><code>mutex</code>是重量级锁，线程获取不到锁之后就会进入休眠状态，<code>CPU</code>会转换到内核态，而代码的运行区在用户态。切换会导致性能降低，所以是重量级。</li><li><code>spin_lock</code>是<code>linux</code>提供的自旋锁</li></ul><h1 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h1><ul><li><strong>偏向锁</strong>，使用<code>CAS</code>判断对象头线程标记是不是本身，性能最好，不会进行用户态和内核态的切换</li><li><strong>轻量锁</strong>，使用<code>CAS</code>设置当前线程为对象头的标记</li><li><strong>重量锁</strong>，使用<code>mutex</code>的互斥，需要用户态和内核态切换，消耗资源。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 锁 </tag>
            
            <tag> JVM </tag>
            
            <tag> synchronized </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tcp三次握手四次挥手</title>
      <link href="/2022/03/20/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/"/>
      <url>/2022/03/20/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：256,阅读全文大约需要1分钟</p><blockquote><p>tcp是传输层协议，基于网络层协议ip。如果连接对象是url，要先通过dns获取到ip地址才能进行连接。</p></blockquote><h1 id="建立连接（三次握手）"><a href="#建立连接（三次握手）" class="headerlink" title="建立连接（三次握手）"></a>建立连接（三次握手）</h1><ol><li>客户端发送SYN包<code>syn=j</code>到服务器，并进入<code>SYN_SEND</code>状态，等待服务器确认。</li><li>服务器收到SYN包，向客户端返回ACK<code>ack=j+1</code>，同事也发送一个自己的SYN包<code>syn=k</code>，即ACK包+SYN包。</li><li>客户端收到服务器的确认<code>ACK</code>以及服务器的等待包<code>SYN</code>，发送确认包给服务器<code>ACK（ack=k+1）</code></li><li>服务器接收到<code>ACK</code>包后就完成了三次握手，进入<code>ESTABLISHED</code>状态，双方可以开始传输数据了。</li></ol><h1 id="断开连接（四次挥手）"><a href="#断开连接（四次挥手）" class="headerlink" title="断开连接（四次挥手）"></a>断开连接（四次挥手）</h1><ol><li>客户端发送<code>FIN</code>包，用于关闭客户端到服务器的数据传送</li><li>服务器收到<code>FIN</code>后返回<code>ACK</code>包</li><li>服务器关闭连接，发送一个<code>FIN</code>给客户端</li><li>客户端返回<code>ACK</code>给服务端</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 安全 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tp5-session-cookie</title>
      <link href="/2022/03/20/tp5-session-cookie/"/>
      <url>/2022/03/20/tp5-session-cookie/</url>
      
        <content type="html"><![CDATA[<p>文章字数：293,阅读全文大约需要1分钟</p><h1 id="session-cookie"><a href="#session-cookie" class="headerlink" title="session cookie"></a>session cookie</h1><p>赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 赋值（当前作用域）</span><br><span class="line">Session::set(&#39;name&#39;,&#39;thinkphp&#39;);</span><br><span class="line">&#x2F;&#x2F; 赋值think作用域</span><br><span class="line">Session::set(&#39;name&#39;,&#39;thinkphp&#39;,&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>是否存在</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 判断（当前作用域）是否赋值</span><br><span class="line">Session::has(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 判断think作用域下面是否赋值</span><br><span class="line">Session::has(&#39;name&#39;,&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 取值（当前作用域）</span><br><span class="line">Session::get(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 取值think作用域</span><br><span class="line">Session::get(&#39;name&#39;,&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 删除（当前作用域）</span><br><span class="line">Session::delete(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 删除think作用域下面的值</span><br><span class="line">Session::delete(&#39;name&#39;,&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>取值并删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 取值并删除</span><br><span class="line">Session::pull(&#39;name&#39;);</span><br></pre></td></tr></table></figure><p>清空</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 清除session（当前作用域）</span><br><span class="line">Session::clear();</span><br><span class="line">&#x2F;&#x2F; 清除think作用域</span><br><span class="line">Session::clear(&#39;think&#39;);</span><br></pre></td></tr></table></figure><p>作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 指定当前作用域</span><br><span class="line">Session::prefix(&#39;think&#39;);</span><br></pre></td></tr></table></figure><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 设置Cookie 有效期为 3600秒</span><br><span class="line">Cookie::set(&#39;name&#39;,&#39;value&#39;,3600);</span><br><span class="line">&#x2F;&#x2F; 设置cookie 前缀为think_</span><br><span class="line">Cookie::set(&#39;name&#39;,&#39;value&#39;,[&#39;prefix&#39;&#x3D;&gt;&#39;think_&#39;,&#39;expire&#39;&#x3D;&gt;3600]);</span><br><span class="line">&#x2F;&#x2F; 支持数组</span><br><span class="line">Cookie::set(&#39;name&#39;,[1,2,3]);</span><br><span class="line">判断</span><br><span class="line">Cookie</span><br><span class="line"></span><br><span class="line">Cookie::has(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 判断指定前缀的cookie值是否存在</span><br><span class="line">Cookie::has(&#39;name&#39;,&#39;think_&#39;);</span><br><span class="line">获取</span><br><span class="line">Cookie::get(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 获取指定前缀的cookie值</span><br><span class="line">Cookie::get(&#39;name&#39;,&#39;think_&#39;);</span><br><span class="line">删除</span><br><span class="line">删除cookie</span><br><span class="line">Cookie::delete(&#39;name&#39;);</span><br><span class="line">&#x2F;&#x2F; 删除指定前缀的cookie</span><br><span class="line">Cookie::delete(&#39;name&#39;,&#39;think_&#39;);</span><br><span class="line">清空</span><br><span class="line">&#x2F;&#x2F; 清空指定前缀的cookie</span><br><span class="line">Cookie::clear(&#39;think_&#39;);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tomcat基础内容</title>
      <link href="/2022/03/20/tomcat%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/"/>
      <url>/2022/03/20/tomcat%E5%9F%BA%E7%A1%80%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<p>文章字数：548,阅读全文大约需要2分钟</p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><ul><li><code>bin</code>内部包含<code>.sh</code>和<code>.bat</code>分别是<code>linux</code>和<code>windows</code>的执行文件</li><li><code>lib</code>依赖的<code>jar</code></li><li><code>conf</code> </li></ul><ol><li><code>catalina.policy</code> 权限相关配置</li><li><code>server.xml</code> 具体配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Server节点</span><br><span class="line">     - Executor 线程池</span><br><span class="line">     - Connector 连接器，管理对外的连接配置端口之类的。如果使用了线程池，这里的最大线程无效</span><br></pre></td></tr></table></figure></li><li><code>web.xml</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Servlet</span><br><span class="line">    - DefaultServlet 默认的，加载静态文件，图片，html，js等</span><br><span class="line">    - JspServlet 处理jsp的</span><br><span class="line">mime-mapping Tomcat处理的文件类型 </span><br><span class="line">welcome-file-list 首页</span><br></pre></td></tr></table></figure><ul><li><code>logs</code> 日志</li></ul><ol><li><code>catalina.x.log</code> 启动日志</li><li><code>localhost_access_log</code> 接收到的请求日志</li></ol><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><ul><li>隐式部署， war包放到webapps里(一般不推荐，程序和部署工具应该隔离)</li><li><code>server.xml</code>配置 <code>Host</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name&#x3D;&quot;localhost&quot; appBean&#x3D;&quot;webapps&quot; unpackWARs&#x3D;&quot;true&quot; auto Deploy&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;!-- reloadable热加载 --&gt;</span><br><span class="line">    &lt;Context path&#x3D;&quot;&#x2F;myUrl&quot; docBase&#x3D;&quot;d:&#x2F;Demo&quot; reloadable&#x3D;&quot;true&quot;&gt; &lt;&#x2F;Context&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>创建<code>xml</code> <code>conf/Catalina/localhost/my.xml</code></li></ul><p>my.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;Context path&#x3D;&quot;&#x2F;myUrl&quot; docBase&#x3D;&quot;d:&#x2F;Demo&quot; reloadable&#x3D;&quot;true&quot;&gt; &lt;&#x2F;Context&gt;</span><br></pre></td></tr></table></figure><p>然后就可以直接访问<code>/my</code>路径进入程序</p><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p><img src="https://upload-images.jianshu.io/upload_images/17243965-20f8c7629780aeec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构"></p><p>Service(通过配置多个service和connector可以监听多个端口) -&gt; engine(引擎) –&gt; Host（虚拟主机，域名）–&gt; Context(应用)–&gt;wrapper(servlet)</p><ul><li>Bootstarp 入口类</li><li>Catalina 启动类</li><li>server 服务器，代表整个tomcat（StandardServer是标准实现  ）</li><li>Service 逻辑功能层，可以有多个</li><li><code>Connector</code>连接器，负责<code>Tomcat</code>与客户端通讯 (多个)</li><li><code>Container</code> Service 的核心组件，按照层级有Engine,Host,Context,Wrapper四种，一个service只有一个Engine</li></ul><ol><li><code>Connector</code>发送<code>Request</code>给<code>Container</code></li><li><code>Container</code>返回<code>Reponse</code></li></ol><ul><li>Jasper jsp引擎</li></ul><h1 id="连接器"><a href="#连接器" class="headerlink" title="连接器"></a>连接器</h1><ul><li><code>NIO</code>模式，</li></ul><ol><li><code>Channel</code>向<code>Selector</code>注册连接，读写IO事件</li><li><code>Selector</code>轮询<code>selectKey</code>集合</li><li>通过key找到对应的<code>channel</code>通过绑定的<code>buffer</code>进行读写</li></ol><ul><li>流程解析</li></ul><ol><li>ProtocolHandler 协议解析</li><li>Endpoint Socker网络连接处理</li><li>Processor 处理Socker封装成Request</li><li>Adapter适配器将Request包装成ServletRequest</li></ol><h1 id="容器，责任链"><a href="#容器，责任链" class="headerlink" title="容器，责任链"></a>容器，责任链</h1><p>Engine =&gt; Host =&gt; Context =&gt; Wrapper<br>Catalina.start()启动tomcat  start</p><h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><p>增加VM参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置环境变量</span><br><span class="line">-Dcatalina.home&#x3D;&quot;D:\tomcat\build&quot;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>udp内网穿透</title>
      <link href="/2022/03/20/udp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
      <url>/2022/03/20/udp%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：618,阅读全文大约需要2分钟</p><blockquote><p>来自<a href="https://blog.csdn.net/Think88666/article/details/102944498" target="_blank" rel="noopener">原文</a></p></blockquote><p>1、双方都通过UDP与服务器通讯后，网关默认就是做了一个外网IP和端口号 与你内网IP与端口号的映射，这个无需设置的，服务器也不需要知道客户的真正内网IP </p><p>2、用户A先通过服务器知道用户B的外网地址与端口  </p><p>3、用户A向用户B的外网地址与端口发送消息，  </p><p>4、在这一次发送中，用户B的网关会拒收这条消息，因为它的映射中并没有这条规则。  </p><p>5、但是用户A的网关就会增加了一条允许规则，允许接收从B发送过来的消息  </p><p>6、服务器要求用户B发送一个消息到用户A的外网IP与端口号  </p><p>7、用户B发送一条消息，这时用户A就可以接收到B的消息，而且网关B也增加了允许规则  </p><p>8、之后，由于网关A与网关B都增加了允许规则，所以A与B都可以向对方的外网IP和端口号发送消息。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 安全 </tag>
            
            <tag> 网络 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>validate验证不通过确提交了</title>
      <link href="/2022/03/20/validate%E9%AA%8C%E8%AF%81%E4%B8%8D%E9%80%9A%E8%BF%87%E7%A1%AE%E6%8F%90%E4%BA%A4%E4%BA%86/"/>
      <url>/2022/03/20/validate%E9%AA%8C%E8%AF%81%E4%B8%8D%E9%80%9A%E8%BF%87%E7%A1%AE%E6%8F%90%E4%BA%A4%E4%BA%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：257,阅读全文大约需要1分钟</p><blockquote><p>js的表单验证工具validate，设置了<code>debug:true</code>（仅验证不提交）和<code>submitHandler</code>（处理提交的函数）结果还是提交了，并且验证失败也会提交</p></blockquote><h1 id="错误代码"><a href="#错误代码" class="headerlink" title="错误代码"></a>错误代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/xxx"</span> id=<span class="string">'submitId'</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">"name"</span> name=<span class="string">"name"</span> type=<span class="string">"txt"</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">&lt;button onclick="javascript:document.getElementById('submitId').submit()"&gt;ok&lt;button/</span>&gt;</span><br></pre></td></tr></table></figure><p>为了样式好调，我用<code>form.submit()</code>提交了表单，这样的操作似乎跳过了验证阶段。</p><h1 id="修改后"><a href="#修改后" class="headerlink" title="修改后"></a>修改后</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;form action=<span class="string">"/xxx"</span> id=<span class="string">'submitId'</span>&gt;</span><br><span class="line">    &lt;input name=<span class="string">"name"</span> name=<span class="string">"name"</span> type=<span class="string">"txt"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> style=<span class="string">"display:none"</span> id=<span class="string">"submit"</span> /&gt;</span><br><span class="line">&lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">...</span></span><br><span class="line"><span class="regexp">&lt;button onclick="javascript:document.getElementById('submit').click()"&gt;ok&lt;button/</span>&gt;</span><br></pre></td></tr></table></figure><p>修改成点击input提交就可以了</p><h1 id="其它注意点"><a href="#其它注意点" class="headerlink" title="其它注意点"></a>其它注意点</h1><ol><li>多次提交<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过id选中表单并提交</span></span><br><span class="line">submitHandler:<span class="function"><span class="keyword">function</span> (<span class="params">form</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"#submitId"</span>).submit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这样会一直提交表单，造成stack溢出</li></ol><p>修改点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//直接用入参提交表单</span></span><br><span class="line">submitHandler:<span class="function"><span class="keyword">function</span> (<span class="params">form</span>) </span>&#123;</span><br><span class="line">  form.submit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim</title>
      <link href="/2022/03/20/vim/"/>
      <url>/2022/03/20/vim/</url>
      
        <content type="html"><![CDATA[<p>文章字数：547,阅读全文大约需要2分钟</p><h1 id="一、命令模式"><a href="#一、命令模式" class="headerlink" title="一、命令模式"></a>一、命令模式</h1><ul><li>命令模式是输入基本命令的地方，此状态下敲击的任何按键都会被当做是命令。</li><li>命令模式下方会显示文件名，类似<code>&quot;fileName.txt&quot; [New File]</code></li></ul><h2 id="1-1-进入命令模式"><a href="#1-1-进入命令模式" class="headerlink" title="1.1 进入命令模式"></a>1.1 进入命令模式</h2><ul><li><code>vim fileName</code>进入文件后就处于命令模式</li><li>输入模式下按<code>ESC</code>键，从输入模式退出到命令模式。</li><li>底线模式输入回车结束命令，则退回命令模式。</li></ul><h2 id="1-2-常用命令"><a href="#1-2-常用命令" class="headerlink" title="1.2 常用命令"></a>1.2 常用命令</h2><ul><li>移动光标：箭头的上下左右或者 <code>j(下)</code>、<code>k(上)</code>、<code>h(左)</code>、<code>l(右)</code></li><li>移动一页：<code>PageUp</code>、<code>Page Down</code>或者<code>Ctrl + d(上)</code>、<code>Ctrl + f(下)</code></li><li>移动半页：<code>Ctrl + u(上)</code>、<code>Ctrl + d(下)</code></li><li>行首行尾：<code>Home</code>和<code>End</code></li><li>移动到具体行数：<code>nG</code>指定行数、<code>gg</code>第一行(等于<code>1g</code>)、<code>G</code>最后一行</li><li>光标向下移动具体行数：<code>n&lt;Enter&gt;</code></li><li>查找：<code>/word</code>光标之上查找、<code>?word</code>光标之下查找、<code>n</code>按钮代表重复上一个操作、<code>N</code>代表相反位置查找，即上一次向上查找，本次向下查找。</li><li>复制行：<code>yy</code></li><li>粘贴行：<code>p</code>粘贴在下一行、<code>P</code>粘贴在上一行</li><li>删除行：<code>dd</code></li></ul><h1 id="二、输入模式"><a href="#二、输入模式" class="headerlink" title="二、输入模式"></a>二、输入模式</h1><ul><li>输入模式即输入文本内容的模式，<code>ESC</code>可退出。</li><li>输入模式下方会有<code>--INSERT--</code></li></ul><h2 id="2-1进入命令模式"><a href="#2-1进入命令模式" class="headerlink" title="2.1进入命令模式"></a>2.1进入命令模式</h2><ul><li><code>i</code>从目前光标所在处输入</li><li><code>I</code>从目前所在行的第一个非空格符处开始输入</li><li><code>a</code>从目前光标所在的下一个字符处输入</li><li><code>A</code>从光标所在行最后一个字符处输入</li><li><code>o</code>光标所在行下一行输入新行</li><li><code>O</code>光标所在行上一行输入新行</li><li><code>r</code>取代光标所在的字符一次</li><li><code>R</code>一直取代光标所在的文字，直到<code>ESC</code></li></ul><h1 id="三、底线命令模式"><a href="#三、底线命令模式" class="headerlink" title="三、底线命令模式"></a>三、底线命令模式</h1><ul><li>可以输入单个/多个字符的命令</li></ul><h1 id="3-1-进入底线命令模式"><a href="#3-1-进入底线命令模式" class="headerlink" title="3.1 进入底线命令模式"></a>3.1 进入底线命令模式</h1><ul><li>命令模式下输入<code>:</code>进入底线命令模式</li></ul><h1 id="3-2常用命令"><a href="#3-2常用命令" class="headerlink" title="3.2常用命令"></a>3.2常用命令</h1><ul><li><code>:w</code>保存</li><li><code>:q!</code>强制退出不保存</li><li><code>:wq</code>保存并退出</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web-xml</title>
      <link href="/2022/03/20/web-xml/"/>
      <url>/2022/03/20/web-xml/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1129,阅读全文大约需要4分钟</p><blockquote><p>网上找到一个配置讲解</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">web-app</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"</span> </span></span><br><span class="line"><span class="meta"><span class="meta-string">"http://java.sun.com/dtd/web-app_2_3.dtd"</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Sample Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>This is a sample application<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–过滤器名，可以随便取，当web应用中有多个过滤器时不允许重名.–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SampleFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–具体的过滤器的类的完整的包名+类名。注意：不能写错了。否则容器不能正确的实例化过滤器–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>mypack.SampleFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 参数名 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>initParam1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 参数值 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> <span class="attr">Define</span> <span class="attr">the</span> <span class="attr">SampleFilter</span> <span class="attr">Mapping</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line">&lt;!–过滤器名，注意要和上面的&lt;filter-name&gt;里的名字一样。–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>SampleFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定过滤器负责过滤的<span class="attr">URL</span>。这里指定了*<span class="attr">.jsp</span>表示在访问任何一个<span class="attr">jsp</span>页面时都会先使用<span class="attr">mypack.SampleFilter</span>过滤器进行过滤。如果写成<span class="attr">login.jsp.</span>则只有在访问<span class="attr">login.jsp</span>时才会调用该过滤器进行过滤。–&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jsp<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> <span class="attr">Servlet</span>名字，可以随便取，有多个<span class="attr">Servlet</span>时不允许重名–&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SampleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–指定实现这个Servlet的类。完整的包名+类名–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>mypack.SampleServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line">&lt;!–定义Servlet的初始化参数(包括参数名和参数值)一个&lt;servlet&gt;元素里可以有多个&lt;init-param&gt;元素。在Servlet类中通过ServletConfig类的来访问这些参数。 </span><br><span class="line">–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 参数名 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>initParam1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 参数值 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>2<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–指定当前Web应用启动时装载Servlet的次序。当这个数</span>&gt;</span>=0时，容器会按数值从小到大依次加载。如果数值<span class="tag">&lt;<span class="name">0或没有指定，容器将载Web客户首次访问这个Servlet时加载。–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> <span class="attr">Define</span> <span class="attr">the</span> <span class="attr">SampleServlet</span> <span class="attr">Mapping</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line">&lt;!–必须和&lt;servlet&gt;里的&lt;servlet-name&gt;内容一样–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SampleServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–指定访问这个Servlet的URL。这里给出的是对于整个Web应用的相对URL路径。–</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sample<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span> </span><br><span class="line">&lt;!–设 定HttpSession的生命周期。这里以分钟计算。下面的设定指明Session在最长不活动时间为10分钟。过了这个时间，Servlet容器将它 作为无效处理。注意这里和程序里指定的计数单位不同，程序里是以秒为单位。&lt;session-config&gt;只有&lt;session- timeout&gt;这个元素–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>10<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!—</span> 配置会话侦听器，<span class="attr">class</span>表示一个<span class="attr">HttpSessionListener</span>或 <span class="attr">HttpSessionActivationListener</span> 或 <span class="attr">HttpSessionAttributeListener</span>或 <span class="attr">HttpSessionBindingListener</span>的实现类。该节点允许多个 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.cn.SessionListenerImpl<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span> </span><br><span class="line">&lt;!– 在 用户访问Web应用时,如果仅给出Web应用的根访问URL，没有指定具体的文件名，容器会调用&lt;weblcome-file- list&gt; 元素里指定的文件清单。&lt;welcome-file-list&gt;里允许有多个&lt;welcome-file&gt;元 素，每个元素代表一个文件。容器会先找第一文文件件是否存在，如果存在这把这个文件返回个客户，不再进行其他文件的查找。如果不存在则找第二个文件，依次 类推。如果所有文件都不存在，则跑出404错误–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 设置<span class="attr">Web</span>应用引用的自定义标签库。下面的代码定义了一个/<span class="attr">mytaglib</span>标签库，它对应的<span class="attr">TLD</span>文件为/<span class="attr">WEB-INF</span>/<span class="attr">mytaglib.tld</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">taglib-uri</span>&gt;</span>/mytaglib<span class="tag">&lt;/<span class="name">taglib-uri</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">taglib-location</span>&gt;</span>/WEB-INF/mytaglib.tld<span class="tag">&lt;/<span class="name">taglib-location</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 如果<span class="attr">Web</span>应用访问了由<span class="attr">Servlet</span>容器管理的某个<span class="attr">JNDI</span> <span class="attr">Resource</span>必须在这里声明对<span class="attr">JNDI</span> <span class="attr">Resource</span>的引用 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">resource-ref</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 对应用资源的说明 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>DB Connection<span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定所引用资源的<span class="attr">JNDI</span>名字 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">res-ref-name</span>&gt;</span>jdbc/sampleDb<span class="tag">&lt;/<span class="name">res-ref-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定所引用资源的类名字 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">res-type</span>&gt;</span>javax.sql.DataSource<span class="tag">&lt;/<span class="name">res-type</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定管理所引用资源的<span class="attr">Manager</span>， 它有两个可选值：<span class="attr">Container</span>和<span class="attr">Application.Container</span>表示由容器来创建和管理<span class="attr">Resource</span>，<span class="attr">Application</span>表示由<span class="attr">Web</span>应用来管理和创建<span class="attr">Resource</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">res-auth</span>&gt;</span>Container<span class="tag">&lt;/<span class="name">res-auth</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">resource-ref</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">security-constraint</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">web-resource-collection</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 这个名字是必须的，由工具使用，别的地方不使用 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">web-resource-name</span>&gt;</span>my application<span class="tag">&lt;/<span class="name">web-resource-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 指定要受约束的资源，至少有一个。可以有多个<span class="attr">.</span> –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">uri-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">uri-pattern</span>&gt;</span> </span><br><span class="line">&lt;!– 描 述了度可与URL模式指定的资源哪些方法是受约束的，如果没有&lt;http-method&gt;元素，表示任何角色的人都无法访问任何http的方 法  。这里放置了GET方法，表示只有GET方法是受约束的。其他任何角色的人可以访问POST和其他的方法。但不能访问GET方法。–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">http-method</span>&gt;</span>GET<span class="tag">&lt;/<span class="name">http-method</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-resource-collection</span>&gt;</span> </span><br><span class="line">&lt;!– 如果没有&lt;auth-constraint&gt;表示所有角色都能访问GET方法，如果是&lt;auth-constraint/&gt;表示任何角色都不能访问GET方法 –&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">auth-constraint</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 可选的。表示哪些角色能够在指定的资源上调用受约束的方法。这里表示只有拥有<span class="attr">Admin</span>和<span class="attr">Member</span>角色的人能够访问<span class="attr">GET</span>方法 </span></span><br><span class="line">&lt;security-role&gt;&gt;里的&lt;role-name&gt;值一样 –&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Admin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Member<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">auth-constraint</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">security-constraint</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 将指定的角色映射到<span class="attr">web.xml</span>里 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">security-role</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>The role that is required to log into the my Application </span><br><span class="line"><span class="tag">&lt;/<span class="name">description</span>&gt;</span> </span><br><span class="line">&lt;!– 以下的角色和tomcat-users.xml里的&lt;tomcat-users&gt;里的&lt;role rolename=""/&gt;里的rolename属性值对应 –&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Guest<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Admin<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">role-name</span>&gt;</span>Member<span class="tag">&lt;/<span class="name">role-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">security-role</span>&gt;</span> </span><br><span class="line">&lt;!– 如果要想进行认证，必须有&lt;login-config&gt;–&gt; </span><br><span class="line"><span class="tag">&lt;<span class="name">login-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">!–</span> 认证方式。有<span class="attr">4</span>种：<span class="attr">BASIC:</span>基本。 <span class="attr">DIGEST:</span>摘要。<span class="attr">CLIENT-CERT:</span>客户证书(能提供最高强度的认证)。<span class="attr">FORM:</span>表单 –&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">auth-method</span>&gt;</span>FORM<span class="tag">&lt;/<span class="name">auth-method</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">realm-name</span>&gt;</span> </span><br><span class="line">Tomcat Servet Configuraton Form-Based Authentication Area </span><br><span class="line"><span class="tag">&lt;/<span class="name">realm-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form-login-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form-login-page</span>&gt;</span>/login.jsp<span class="tag">&lt;/<span class="name">form-login-page</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">form-error-page</span>&gt;</span>/error.jsp<span class="tag">&lt;/<span class="name">form-error-page</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form-login-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">login-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue axios tp5错误</title>
      <link href="/2022/03/20/vue%20axios%20tp5%E9%94%99%E8%AF%AF/"/>
      <url>/2022/03/20/vue%20axios%20tp5%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：100,阅读全文大约需要1分钟</p><blockquote><p>已拦截跨源请求：同源策略禁止读取位于 <a href="http://101.132.138.141:8888/service/pageUsers" target="_blank" rel="noopener">http://101.132.138.141:8888/service/pageUsers</a> 的远程资源。（原因：CORS 头缺少 ‘Access-Control-Allow-Origin’）。</p></blockquote><p>axios跨域带上cookie，axios session消失</p><blockquote><p>vue的main.js 加上<code>axios.defaults.withCredentials = true;</code></p></blockquote><p>解决方法</p><blockquote><p>withCredentials的情况下，后端要设置Access-Control-Allow-Origin为你的源地址，例如<a href="http://localhost/" target="_blank" rel="noopener">http://localhost</a>:8080，不能是*，而且还要设置header(‘Access-Control-Allow-Credentials: true’);</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-axios</title>
      <link href="/2022/03/20/vue-axios/"/>
      <url>/2022/03/20/vue-axios/</url>
      
        <content type="html"><![CDATA[<p>文章字数：151,阅读全文大约需要1分钟</p><blockquote><p>vue中使用axios进行一步http访问</p></blockquote><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><p>main.js中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">import VueAxios from &#39;vue-axios&#39;</span><br><span class="line"></span><br><span class="line">Vue.use(VueAxios,axios);</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getMess()&#123;</span><br><span class="line">      this.axios.get(&#39;api&#x2F;getNewsList&#39;).then((response)&#x3D;&gt;&#123;</span><br><span class="line">        this.newsList&#x3D;response.data.data;</span><br><span class="line">      &#125;).catch((response)&#x3D;&gt;&#123;</span><br><span class="line">        console.log(response);</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">this.axios.get(&#39;&#x2F;user&#39;, &#123;&#x2F;&#x2F;url</span><br><span class="line">params: &#123;&#x2F;&#x2F;数据</span><br><span class="line">    id: 123</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">    console.log(response);&#x2F;&#x2F;成功结果</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">    console.log(error);&#x2F;&#x2F;失败信息</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>#POST</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">this.axios.post(&#39;&#x2F;user&#39;, &#123;</span><br><span class="line">    firstName: &#39;Fred&#39;,</span><br><span class="line">    lastName: &#39;Flintstone&#39;</span><br><span class="line">&#125;)</span><br><span class="line">.then(function (response) &#123;</span><br><span class="line">    console.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function (error) &#123;</span><br><span class="line">    console.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="并发请求"><a href="#并发请求" class="headerlink" title="并发请求"></a>并发请求</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function getUserAccount() &#123;</span><br><span class="line">    return axios.get(&#39;&#x2F;user&#x2F;12345&#39;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">function getUserPermissions() &#123;</span><br><span class="line">    return axios.get(&#39;&#x2F;user&#x2F;12345&#x2F;permissions&#39;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">this.axios.all([getUserAccount(), getUserPermissions()])</span><br><span class="line">.then(axios.spread(function (acct, perms) &#123;</span><br><span class="line">    &#x2F;&#x2F;两个请求现已完成</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h1 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h1><blockquote><p>原本vue里this指向vue,但是axios里不是，所以会导致this内容报空。可以在method调用axios的函数开头加上<code>let that=this</code>,然后使用that代替this。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows将程序注册成服务并自启</title>
      <link href="/2022/03/20/windows%E5%B0%86%E7%A8%8B%E5%BA%8F%E6%B3%A8%E5%86%8C%E6%88%90%E6%9C%8D%E5%8A%A1%E5%B9%B6%E8%87%AA%E5%90%AF/"/>
      <url>/2022/03/20/windows%E5%B0%86%E7%A8%8B%E5%BA%8F%E6%B3%A8%E5%86%8C%E6%88%90%E6%9C%8D%E5%8A%A1%E5%B9%B6%E8%87%AA%E5%90%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：18,阅读全文大约需要1分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将 D:&#x2F;server.bat 注册为自启 服务名为tomcat_8080</span><br><span class="line">sc create tomcat_8080 binPath&#x3D; D:&#x2F;server.bat start&#x3D; auto</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>wireshark抓包工具使用</title>
      <link href="/2022/03/20/wireshark%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/wireshark%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：79,阅读全文大约需要1分钟</p><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ol><li><p>选择网卡</p></li><li><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. Capture -&gt; Option</span><br><span class="line">2. 选择网卡，勾选Prom栏</span><br><span class="line">3. 勾选 Enable promiscuous mode on all interfaces</span><br><span class="line">4. 配置抓包过滤器，无则不选择 Capture all in promiscuous mode</span><br><span class="line">4. 点击start</span><br></pre></td></tr></table></figure></li><li><p>数据过滤</p></li></ol><ul><li>选择指定ip(源ip或目标ip)和协议<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.addr &#x3D;&#x3D; 192.168.1.1 and http</span><br></pre></td></tr></table></figure></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxx-is-not-a-function-at-HTMLInputElement-onchange</title>
      <link href="/2022/03/20/xxx-is-not-a-function-at-HTMLInputElement-onchange/"/>
      <url>/2022/03/20/xxx-is-not-a-function-at-HTMLInputElement-onchange/</url>
      
        <content type="html"><![CDATA[<p>文章字数：48,阅读全文大约需要1分钟</p><blockquote><p>之前可以使用的界面突然报错：enabledis not a function at HTMLInputElement.onchange</p></blockquote><p>我的错误是name和方法名相同，冲突了。<br>id和方法名也可能冲突。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;enable&quot; onchange&#x3D;&quot;enabled(this.checked)&quot;&gt;</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;yyy&quot; onchange&#x3D;&quot;enabledChange(this.checked)&quot;&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>x-content-type-options</title>
      <link href="/2022/03/20/x-content-type-options/"/>
      <url>/2022/03/20/x-content-type-options/</url>
      
        <content type="html"><![CDATA[<p>文章字数：81,阅读全文大约需要1分钟</p><blockquote><p>设置<code>script</code>和<code>styleSheet</code>通过<code>MIME</code>类型过滤不安全的文件</p></blockquote><p>当服务器响应头<code>X-Content-Type-Options: nosniff</code>则<code>script</code>和<code>styleSheet</code>元素会过滤非指定的<code>MIME</code>文件</p><h1 id="stylesheet"><a href="#stylesheet" class="headerlink" title="stylesheet"></a>stylesheet</h1><p><code>stylesheet</code>标签只会加载以下<code>MIME</code>类型的文件</p><ul><li><code>text/css</code></li></ul><h1 id="script"><a href="#script" class="headerlink" title="script"></a>script</h1><p><code>script</code>标签只会加载以下<code>MIME</code>类型的文件</p><ul><li><code>application/ecmascript</code></li><li><code>application/javascript</code></li><li><code>application/x-javascript</code></li><li><code>text/ecmascript</code></li><li><code>text/javascript</code></li><li><code>text/jscript</code></li><li><code>text/x-javascript</code></li><li><code>text/vbs</code></li><li><code>text/vbscript</code></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 安全 </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七种垃圾收集器</title>
      <link href="/2022/03/20/%E4%B8%83%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>/2022/03/20/%E4%B8%83%E7%A7%8D%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：192,阅读全文大约需要1分钟</p><h1 id="一、基本算法"><a href="#一、基本算法" class="headerlink" title="一、基本算法"></a>一、基本算法</h1><ul><li><strong>标记-清除算法</strong></li><li><strong>复制算法</strong></li><li><strong>标记-整理算法</strong></li><li><strong>火车算法</strong>，没人用了？</li></ul><h1 id="二、垃圾收集器组合及适用范围"><a href="#二、垃圾收集器组合及适用范围" class="headerlink" title="二、垃圾收集器组合及适用范围"></a>二、垃圾收集器组合及适用范围</h1><p><img src="https://upload-images.jianshu.io/upload_images/17243965-6d5d91a2117f1b62.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="适用范围及组合"></p><ul><li>收集器直接有连线，表示可以搭配适用</li><li><code>Serial Old</code>作为<code>CMS</code>出现<code>Concurrent Mode Failure</code>失败的后备预案</li></ul><h1 id="三、并行收集器和并发收集器"><a href="#三、并行收集器和并发收集器" class="headerlink" title="三、并行收集器和并发收集器"></a>三、并行收集器和并发收集器</h1><ul><li><p>并行<code>Parallel</code><br>多条垃圾收集器线程并行工作，但是用户线程仍然是等待状态。<br><code>ParNew</code>、<code>Parallel Scavenge</code>、<code>Parallel Old</code></p></li><li><p>并发<code>Concurrent</code><br>用户线程与垃圾收集器线程同时执行<br>CMS、<code>G1</code>（也有并行）</p></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 垃圾回收机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三元运算符导致的空指针异常</title>
      <link href="/2022/03/20/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AF%BC%E8%87%B4%E7%9A%84%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/03/20/%E4%B8%89%E5%85%83%E8%BF%90%E7%AE%97%E7%AC%A6%E5%AF%BC%E8%87%B4%E7%9A%84%E7%A9%BA%E6%8C%87%E9%92%88%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：156,阅读全文大约需要1分钟</p><blockquote><p>今天看《阿里巴巴java开发手册》时看到了一个有意思的空指针异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">1</span>;</span><br><span class="line">        Integer b = <span class="number">2</span>;</span><br><span class="line">        Integer c = <span class="keyword">null</span>;</span><br><span class="line">        Boolean flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// a*b 的结果是 int 类型，那么 c 会强制拆箱成 int 类型，抛出 NPE 异常</span></span><br><span class="line">        Integer result=(flag? a*b : c);</span><br></pre></td></tr></table></figure><p>在三元运算符中 <code>条件 ? 表达式1 : 表达式2</code><br>如果表达式1和表达式2存在类型对齐，那么可能因此造成空指针异常。<br>如上面的代码，表达式1的结果是int类型，然后表达式2的结果也对齐拆箱成int,然而变量c的值是空，于是抛出<code>NPE</code></p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三大范式</title>
      <link href="/2022/03/20/%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/"/>
      <url>/2022/03/20/%E4%B8%89%E5%A4%A7%E8%8C%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：134,阅读全文大约需要1分钟</p><h1 id="第一范式1NF"><a href="#第一范式1NF" class="headerlink" title="第一范式1NF"></a>第一范式1NF</h1><ul><li>数据库每一列都是不可分割的原子数据</li></ul><p>例如：</p><table><thead><tr><th>家庭信息</th><th>姓名</th></tr></thead><tbody><tr><td>上海，3口人</td><td>小凯</td></tr></tbody></table><p>家庭信息可以拆分成<strong>人口</strong>和<strong>住址</strong>。</p><h1 id="第二范式2NF"><a href="#第二范式2NF" class="headerlink" title="第二范式2NF"></a>第二范式2NF</h1><ul><li>数据库没一列都应该合主键相关，联合主键中要注意不能只和一个主键相关。</li></ul><h1 id="第三范式3NF"><a href="#第三范式3NF" class="headerlink" title="第三范式3NF"></a>第三范式3NF</h1><ul><li>非主属性不能依赖其他非主属性，即所有的普通数据只能和主键关联。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
            <tag> 范式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主定理</title>
      <link href="/2022/03/20/%E4%B8%BB%E5%AE%9A%E7%90%86/"/>
      <url>/2022/03/20/%E4%B8%BB%E5%AE%9A%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：79,阅读全文大约需要1分钟</p><blockquote><p>主定理最早出现在《算法导论》中，提供了分治方法带来的递归表达式的渐进复杂度分析。规模为<code>n</code>的问题通过分治，得到<code>a</code>个规模为<code>n/b</code>的问题，每次递归带来的额外计算为<code>c(n^d)</code></p></blockquote><h1 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h1><p><code>T(n) &lt;= aT(n/b) + c(n^d)</code></p><ul><li>T(n) = O(n^d log(n)) , if a = b^d</li><li>T(n) = O(n^d) , if a &lt; b^d</li><li>T(n) = O(n^logb(a)) , if a &gt; b^d</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二进制对照表</title>
      <link href="/2022/03/20/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
      <url>/2022/03/20/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：442,阅读全文大约需要1分钟<br>2^n|10进制值|2进制<br>—|—|—:<br>1|2|<code>10</code><br>2|4|<code>100</code><br>3|8|<code>1000</code><br>4|16|<code>10000</code><br>5|32|<code>100000</code><br>6|64|<code>1000000</code><br>7|128|<code>10000000</code><br>8|256|<code>100000000</code><br>9|512|<code>1000000000</code><br>10|1024|<code>10000000000</code><br>11|2048|<code>100000000000</code><br>12|4096|<code>1000000000000</code><br>13|8192|<code>10000000000000</code><br>14|16384|<code>100000000000000</code><br>15|32768|<code>1000000000000000</code><br>16|65536|<code>10000000000000000</code><br>17|131072|<code>100000000000000000</code><br>18|262144|<code>1000000000000000000</code><br>19|524288|<code>10000000000000000000</code><br>20|1048576|<code>100000000000000000000</code></p><h1 id="生成算法"><a href="#生成算法" class="headerlink" title="生成算法"></a>生成算法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> MAX_POW = <span class="number">20</span>;</span><br><span class="line">    System.out.println(<span class="string">"2^n|10进制值|2进制"</span>);</span><br><span class="line">    System.out.println(<span class="string">"---|---|---:"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= MAX_POW; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> radix10 = Double.valueOf(Math.pow(<span class="number">2</span>, i)).intValue();</span><br><span class="line">        System.out.print(i + <span class="string">"|"</span> + radix10);</span><br><span class="line">        System.out.println(<span class="string">"|`"</span> + Integer.toString(radix10, <span class="number">2</span>) + <span class="string">"`"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><blockquote><p><code>Integer</code>类提供了方法，可以把任意进制的数转换成<code>Integer</code>类型的值。也可以将<code>Integer</code>输出成任意进制。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> initVal = <span class="number">12354</span>;</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    String radix2 = Integer.toString(initVal, <span class="number">2</span>);</span><br><span class="line">    String radix10 = Integer.toString(initVal, <span class="number">10</span>);</span><br><span class="line">    String radix16 = Integer.toString(initVal, <span class="number">16</span>);</span><br><span class="line">    <span class="comment">// 输入</span></span><br><span class="line">    Integer fromRadix2 = Integer.valueOf(radix2, <span class="number">2</span>);</span><br><span class="line">    Integer fromRadix10 = Integer.valueOf(radix10, <span class="number">10</span>);</span><br><span class="line">    Integer fromRadix16 = Integer.valueOf(radix16, <span class="number">16</span>);</span><br><span class="line">    <span class="comment">// 结果</span></span><br><span class="line">    System.out.println(<span class="string">"radix2 = "</span> + radix2);</span><br><span class="line">    System.out.println(<span class="string">"radix10 = "</span> + radix10);</span><br><span class="line">    System.out.println(<span class="string">"radix16 = "</span> + radix16);</span><br><span class="line">    System.out.println(<span class="string">"fromRadix2 = "</span> + fromRadix2);</span><br><span class="line">    System.out.println(<span class="string">"fromRadix10 = "</span> + fromRadix10);</span><br><span class="line">    System.out.println(<span class="string">"fromRadix16 = "</span> + fromRadix16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">radix2 &#x3D; 11000001000010</span><br><span class="line">radix10 &#x3D; 12354</span><br><span class="line">radix16 &#x3D; 3042</span><br><span class="line">fromRadix2 &#x3D; 12354</span><br><span class="line">fromRadix10 &#x3D; 12354</span><br><span class="line">fromRadix16 &#x3D; 12354</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主机搜索工具端口扫描+ping</title>
      <link href="/2022/03/20/%E4%B8%BB%E6%9C%BA%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F+ping/"/>
      <url>/2022/03/20/%E4%B8%BB%E6%9C%BA%E6%90%9C%E7%B4%A2%E5%B7%A5%E5%85%B7%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F+ping/</url>
      
        <content type="html"><![CDATA[<p>文章字数：112,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.colin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.config.RequestConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManager;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.X509TrustManager;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-10-09 16:26</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HostSearchProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Pattern titlePattern = Pattern.compile(<span class="string">"&lt;title&gt;.*&lt;/title&gt;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试用socket连接某个url的端口</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryByUrl</span><span class="params">(String url, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> Socket socket = <span class="keyword">new</span> Socket(url, port);</span><br><span class="line">            socket.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ping 某个地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ipAddress</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">ping</span><span class="params">(String ipAddress)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> timeOut = <span class="number">3000</span>;</span><br><span class="line">        <span class="keyword">boolean</span> status;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            status = InetAddress.getByName(ipAddress).isReachable(timeOut);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量构造地址</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> networkSegment 网段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getHostByNetworkSegment</span><span class="params">(String networkSegment, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IntStream.range(start, end).mapToObj((i) -&gt; networkSegment + <span class="string">"."</span> + i).collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出某个范围内地址指定端口的服务名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> networkSegment 网段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 网段开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 网段结束</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> port 指定端口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeyManagementException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consoleServerTitleByNetworkSegment</span><span class="params">(String networkSegment, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> KeyManagementException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> CloseableHttpClient httpClient = HttpClientUtil.getHttpClientBuilder().build();</span><br><span class="line">        <span class="keyword">final</span> CloseableHttpClient httpsClient = HttpClientUtil.getHttpsClientBuilder().build();</span><br><span class="line"></span><br><span class="line">        RequestConfig requestConfig = RequestConfig.custom()</span><br><span class="line">                .setConnectTimeout(<span class="number">3000</span>)</span><br><span class="line">                .setConnectionRequestTimeout(<span class="number">1000</span>)</span><br><span class="line">                .setSocketTimeout(<span class="number">3000</span>).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> List&lt;String&gt; hostList = getHostByNetworkSegment(networkSegment, start, end);</span><br><span class="line">        <span class="keyword">for</span> (String host : hostList) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isReachable = ping(host);</span><br><span class="line">            System.out.println(<span class="string">"ping "</span> + host + <span class="string">", res = "</span> + isReachable);</span><br><span class="line">            <span class="keyword">if</span>(isReachable) &#123;</span><br><span class="line">                <span class="comment">// http</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String url = <span class="string">"http://"</span> + host + <span class="string">":"</span> + port;</span><br><span class="line">                    searchServerByUrl(httpClient, requestConfig, url);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">                <span class="comment">// https</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String url = <span class="string">"https://"</span> + host + <span class="string">":"</span> + port;</span><br><span class="line">                    searchServerByUrl(httpsClient, requestConfig, url);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">searchServerByUrl</span><span class="params">(CloseableHttpClient httpClient, RequestConfig requestConfig, String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        HttpGet httpGet = HttpClientUtil.createHttpGet(url, <span class="keyword">null</span>);</span><br><span class="line">        httpGet.setConfig(requestConfig);</span><br><span class="line">        <span class="keyword">final</span> String res = HttpClientUtil.parseRespToStr(httpClient.execute(httpGet));</span><br><span class="line">        <span class="keyword">final</span> Matcher matcher = titlePattern.matcher(res);</span><br><span class="line">        <span class="keyword">if</span>(matcher.find()) &#123;</span><br><span class="line">            String title = matcher.group(<span class="number">0</span>);</span><br><span class="line">            title = title.replace(<span class="string">"&lt;title&gt;"</span>, <span class="string">""</span>);</span><br><span class="line">            title = title.replace(<span class="string">"&lt;/title&gt;"</span>, <span class="string">""</span>);</span><br><span class="line">            System.out.println(url + <span class="string">" server title is "</span> + title);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互斥锁</title>
      <link href="/2022/03/20/%E4%BA%92%E6%96%A5%E9%94%81/"/>
      <url>/2022/03/20/%E4%BA%92%E6%96%A5%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：437,阅读全文大约需要1分钟</p><blockquote><p>互斥锁是最普遍的多线程锁，并发编程除了考虑运行结果的正确之外，还需要线程无死锁（线程永久停滞），无饥饿（部分线程永远拿不到执行权限）</p></blockquote><h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><ol><li><code>互斥</code>: 保证互斥行的专有名词是<strong>临界区</strong>，临界区内的代码在某个时刻只能被一个线程执行。即被锁保护的代码区域。</li><li><code>无死锁</code>: 不会永久停滞</li><li><code>无饥饿</code>: 不会部分永久停滞</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 一个锁的基本形态</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;<span class="comment">//锁定</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;<span class="comment">//解锁</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ol><li>使用方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在try之前就需要获取锁，避免发生异常时未获取到锁就执行解锁。</span></span><br><span class="line">mutex.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"> ...临界区</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    mutex.unlock()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>减少互斥锁粒度: 锁粒度越小，程序执行是需要串行执行的工作就会越少。就可以更充分利用多处理器并行处理的优势。</p></li><li><p>进来不用锁: 减少串行执行工作量。</p></li></ol><h1 id="互斥锁示例"><a href="#互斥锁示例" class="headerlink" title="互斥锁示例"></a>互斥锁示例</h1><p>《多处理器编程的艺术》中Peterson算法，保证两个线程使用锁时互斥，无死锁，无饥饿。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Peterson</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">boolean</span>[] flag = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">2</span>];</span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span> victim;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="keyword">int</span> i = ThreadID.get();</span><br><span class="line">           <span class="keyword">int</span> j = <span class="number">1</span> - i; <span class="comment">//因为只有两个，所以1-i就是另一个线程的id</span></span><br><span class="line">           flag[i]= <span class="keyword">true</span>;  <span class="comment">// 标记当前线程需要获取锁 </span></span><br><span class="line">           victim = i;  <span class="comment">// 并发时后改变这个值的线程自旋（保证早获取的执行，防止饥饿）</span></span><br><span class="line">           <span class="keyword">while</span>(flag[j] &amp;&amp; victim == i)&#123;&#125;  <span class="comment">// 当另一个锁需要执行，自己又获取的晚，那么等待另一个执行完。</span></span><br><span class="line">     &#125;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="keyword">int</span> i = ThreadID.get();</span><br><span class="line">           flag[i] = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 锁 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位图BitMap</title>
      <link href="/2022/03/20/%E4%BD%8D%E5%9B%BEBitMap/"/>
      <url>/2022/03/20/%E4%BD%8D%E5%9B%BEBitMap/</url>
      
        <content type="html"><![CDATA[<p>文章字数：253,阅读全文大约需要1分钟</p><h1 id="位"><a href="#位" class="headerlink" title="位"></a>位</h1><p><code>1byte = 8bit</code><br>内部只有0和1<br>每一位用来存储某种状态，适合大数据，但是数据状态并不多的情况。</p><h1 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h1><p>优点：占用空间小，只保存状态<br>缺点：只能保存状态，且只有0和1。不能计算个数（天然去重）</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li>上亿级别的ip黑名单，可以使用Hash算出黑名单处于map的位置并且设置值为1。</li></ol><h1 id="布隆过滤器"><a href="#布隆过滤器" class="headerlink" title="布隆过滤器"></a>布隆过滤器</h1><ol><li>使用三次Hash在位图中存储的方式表示元素是否存在于过滤器中</li><li>使用三次Hash命中不同位置（尽量避免hash碰撞），三次都未命中则一定不存在。并不能保证判断存在。</li><li>范围越大误判率越低，初始化大小决定了过滤器的误判率。</li><li>删除很困难。<br><code>google.guava</code>这个包里有<br><code>redis</code>中有布隆过滤器的插件，可以直接用<code>bf.add</code>和<code>bf.exists</code>。<br><code>bf.reserve xx 0.00001</code>设置误判率</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> BitMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算的基本使用</title>
      <link href="/2022/03/20/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/%E4%BD%8D%E8%BF%90%E7%AE%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：456,阅读全文大约需要1分钟</p><blockquote><p>看源码时经常能看到一些位运算的操作，这里列举几种常见的用法。</p></blockquote><h1 id="乘除"><a href="#乘除" class="headerlink" title="乘除"></a>乘除</h1><ol><li><p>乘<code>2^n</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">461637107</span>;</span><br><span class="line">        <span class="keyword">int</span> res1 = val / <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">int</span> res2 = val &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        System.out.println(<span class="string">"res1 = "</span> + res1);<span class="comment">// res1 = 28852319</span></span><br><span class="line">        System.out.println(<span class="string">"res2 = "</span> + res2);<span class="comment">// res2 = 28852319</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>除<code>2^n</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">134563</span>;</span><br><span class="line">    <span class="keyword">int</span> res1 = val * <span class="number">16</span>;</span><br><span class="line">    <span class="keyword">int</span> res2 = val &lt;&lt; <span class="number">4</span>;</span><br><span class="line">    System.out.println(<span class="string">"res1 = "</span> + res1);<span class="comment">// res1 = 2153008</span></span><br><span class="line">    System.out.println(<span class="string">"res2 = "</span> + res2);<span class="comment">// res2 = 2153008</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">461637107</span>;</span><br><span class="line">    <span class="keyword">int</span> res1 = val % <span class="number">32</span>;</span><br><span class="line">    <span class="keyword">int</span> res2 = val &amp; <span class="number">0x1F</span>;<span class="comment">// 31的16进制，即5个1。</span></span><br><span class="line">    System.out.println(<span class="string">"res1 = "</span> + res1);<span class="comment">//res1 = 19</span></span><br><span class="line">    System.out.println(<span class="string">"res2 = "</span> + res2);<span class="comment">//es2 = 19</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="设置具体bit位的数据为1"><a href="#设置具体bit位的数据为1" class="headerlink" title="设置具体bit位的数据为1"></a>设置具体bit位的数据为1</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    DecimalFormat df = <span class="keyword">new</span> DecimalFormat(<span class="string">"00000000"</span>);</span><br><span class="line">    <span class="keyword">int</span> oldVal = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> newVal = oldVal | <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">    <span class="comment">// 得到的数据</span></span><br><span class="line">    System.out.println(oldVal); <span class="comment">// 5</span></span><br><span class="line">    <span class="comment">// 输出二进制</span></span><br><span class="line">    System.out.println(df.format(Integer.valueOf(Integer.toString(oldVal, <span class="number">2</span>))));<span class="comment">//00000101</span></span><br><span class="line">    System.out.println(df.format(Integer.valueOf(Integer.toString(newVal, <span class="number">2</span>))));<span class="comment">//00001101</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设为0同样思路</p><h1 id="获取二进制第n个位置上的值"><a href="#获取二进制第n个位置上的值" class="headerlink" title="获取二进制第n个位置上的值"></a>获取二进制第n个位置上的值</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line">        String val = <span class="string">"00001101"</span>;</span><br><span class="line">        Integer valInt = Integer.valueOf(val, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">boolean</span> res = (valInt &amp; <span class="number">1</span> &lt;&lt; n) != <span class="number">0</span>;</span><br><span class="line">        System.out.println(res ? <span class="string">"1"</span> : <span class="string">"0"</span>);<span class="comment">//1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="基本运算符"><a href="#基本运算符" class="headerlink" title="基本运算符"></a>基本运算符</h1><p>1.&amp;（按位与运算） 只要有一个为0，就为0，如 0001 &amp; 0100 结果为 0000<br>2. |（按位或运算） 只要有一个为1，就为1，如 0001 &amp; 0100 结果为 0101<br>3. ~(取反运算) 这个只对一个数据进行操作，0取反为1，1取反为0；<br>4. ^ (按位异或运算) 不同为1，相同为0, 如 0001 ^ 0100 结果为 0101</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内置Tomcat并使用servlet</title>
      <link href="/2022/03/20/%E5%86%85%E7%BD%AETomcat%E5%B9%B6%E4%BD%BF%E7%94%A8servlet/"/>
      <url>/2022/03/20/%E5%86%85%E7%BD%AETomcat%E5%B9%B6%E4%BD%BF%E7%94%A8servlet/</url>
      
        <content type="html"><![CDATA[<p>文章字数：159,阅读全文大约需要1分钟</p><ol><li><code>servlet</code>类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">"hellowrld"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>创建内置的<code>tomcat</code>并使用<code>servlet</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建tomcat应用对象</span></span><br><span class="line">Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line"><span class="comment">// 设置端口</span></span><br><span class="line">tomcat.setPort(<span class="number">8080</span>);</span><br><span class="line"><span class="comment">// 是否自动部署</span></span><br><span class="line">tomcat.getHost().setAutoDeploy(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 创建上下文</span></span><br><span class="line">StandardContext standardContext = <span class="keyword">new</span> StandardContext();</span><br><span class="line"><span class="comment">// 设置项目名</span></span><br><span class="line">standardContext.setPath(<span class="string">"/sb"</span>);</span><br><span class="line"><span class="comment">// 监听上下文</span></span><br><span class="line">standardContext.addLifecycleListener(<span class="keyword">new</span> FixContextListener());</span><br><span class="line"><span class="comment">// 向tomcat容器对象添加上下文配置     tomcat.getHost().addChild(standardContext);</span></span><br><span class="line"><span class="comment">// 创建Servlet</span></span><br><span class="line">tomcat.addServlet(<span class="string">"/sb"</span>, <span class="string">"helloword"</span>, <span class="keyword">new</span> HelloServlet());</span><br><span class="line"><span class="comment">// Servlet映射</span></span><br><span class="line">standardContext.addServletMappingDecoded(<span class="string">"/hello"</span>, <span class="string">"helloword"</span>);</span><br><span class="line"><span class="comment">//启动tomcat容器</span></span><br><span class="line">tomcat.start();</span><br><span class="line"><span class="comment">//等待</span></span><br><span class="line">tomcat.getServer().await();</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> servlet </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>元空间</title>
      <link href="/2022/03/20/%E5%85%83%E7%A9%BA%E9%97%B4/"/>
      <url>/2022/03/20/%E5%85%83%E7%A9%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：531,阅读全文大约需要2分钟</p><h1 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h1><ol><li>元空间是<code>jdk1.8</code>之后出现的，之前叫永久代</li><li>元空间就是方法区，方法区是<code>JVM</code>的规范，元空间是<code>HotSpot</code>的具体实现</li><li>元空间存放着类的信息、方法数据、方法代码、常量池等</li><li>编译的时候代码里的字符串就会被编译成对象，然后被堆里的引用对象引用。</li></ol><h1 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h1><ul><li><code>XX:MetaspaceSize</code> 初始空间大小，达到该值就会触发垃圾收集进行类型卸载，同时GC会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过<code>MaxMetaspaceSize</code>时，适当提高该值。</li><li><code>XX:MaxMetaspaceSize</code>最大空间，默认是没有限制的。</li></ul><p>除了上面两个指定大小的选项以外，还有两个与 GC 相关的属性：</p><ul><li><code>XX:MinMetaspaceFreeRatio</code>在<code>GC</code>之后，最小的<code>Metaspace</code>剩余空间容量的百分比，减少为分配空间所导致的垃圾收集</li><li><code>XX:MaxMetaspaceFreeRatio</code>在<code>GC</code>之后，最大的<code>Metaspace</code>剩余空间容量的百分比，减少为释放空间所导致的垃圾收集</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> JMM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡排序</title>
      <link href="/2022/03/20/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/20/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：213,阅读全文大约需要1分钟</p><blockquote><p>冒泡排序的思想就是将所有的元素和边上其它元素比较，按照比对结果替换位置。（如果比后一个元素大就替换位置，继续和下一个比）本质上是大的向后移动，小的向前移动。</p></blockquote><p>时间复杂度 o(n^2)</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.length - <span class="number">1</span> ; i++ )&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> - i ; j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h1><p>如果已经是顺序数组，就不要进行后面的遍历了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length - <span class="number">1</span> ; i++ )&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isSort = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> j = <span class="number">0</span>;j &lt; arr.length - <span class="number">1</span> - i ; j++ )&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">                isSort = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(isSort)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式</title>
      <link href="/2022/03/20/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
      <url>/2022/03/20/%E5%88%86%E5%B8%83%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：137,阅读全文大约需要1分钟</p><h1 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h1><ul><li>并发数TPS:每秒处理的事务（完整请求）TomCat保守一般为500</li><li>数据量 mysql单表数据量不超过700w</li></ul><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><ul><li>一般方案</li></ul><ol><li>查缓存，有值直接返回</li><li>无值查数据库（缓存穿透、击穿），补入缓存</li><li>缓存和数据库数据不一致，通过过期时间调节</li><li>缓存区在某一时间一起失效，将大量缓存击穿(雪崩)</li></ol><ul><li>永不过期</li></ul><ol><li>不设置过期时间</li><li>额外同步机制</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式事务</title>
      <link href="/2022/03/20/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
      <url>/2022/03/20/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1203,阅读全文大约需要4分钟</p><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><ol><li>是什么</li></ol><ul><li><strong>分布式事务</strong>就是一次大的事务操作由不同的小操作组成，这些小操作分布在不同的服务器上</li><li><strong>分布式事务</strong>需要保证不同服务器上的小操作要不全部失败，要不全部成功。本质上是要保证数据库数据一致性</li></ul><ol start="2"><li>为什么需要分布式事务</li></ol><ul><li>当数据库单表一年产生数据超过<code>1000W</code>时就需要考虑分表，将一个数据库分成多个数据库。保证这些数据库的<strong>数据一致性</strong>就需要分布式事务</li><li>应用业务服务化(<code>SOA</code>)，将之前单机应用变成由服务组成的微服务系统。分离出入<strong>订单系统</strong>、<strong>用户中心</strong>、<strong>库存中心</strong>、<strong>订单中心</strong>等。每个微服务都有自己的数据库。例如提交订单的操作，需要订单和库存同时操作，所以需要分布式事务保证下单成功库存减少，下单失败库存不变。</li></ul><h1 id="事务的特性ACID"><a href="#事务的特性ACID" class="headerlink" title="事务的特性ACID"></a>事务的特性<code>ACID</code></h1><ol><li>原子性<code>A</code><br>整个事务中所有操作要不同时完成，要不全部失败</li><li>一致性<code>C</code><br>事务的执行必须保证系统的一致性，只要事务成功了，事务的操作就一定要体现在数据库中</li><li>隔离性<code>I</code><br>事务之间不会相互影响，一个事物的中间状态不会被其它事务感知</li><li>持久性<code>D</code><br>事务完成了之后事务对数据的操作就会完全保存在数据库中，停电宕机也会保存</li></ol><h1 id="基于XA协议的两阶提交"><a href="#基于XA协议的两阶提交" class="headerlink" title="基于XA协议的两阶提交"></a>基于<code>XA</code>协议的两阶提交</h1><ol><li>名词解释</li></ol><ul><li><code>XA</code>是一个分布式事务协议，主要分为两个部分<strong>事务管理器</strong>和<strong>本地资源管理器</strong></li><li><strong>本地资源管理器</strong>通常由数据库实现，负责本地资源的提交和回滚</li><li><strong>事务管理器</strong>作为全局调度者，负责调度本地资源</li></ul><ol start="2"><li>步骤</li></ol><ul><li>第一阶段：<strong>事务管理器</strong>通知各个<strong>本地资源管理器</strong>预备操作，<strong>本地资源管理器</strong>回复就绪（锁住资源）</li><li>第二阶段：<strong>事务管理器</strong>通知<strong>本地资源管理器</strong>提交，<strong>本地资源管理器</strong>回复成功</li></ul><ol start="3"><li>优缺点</li></ol><ul><li>优点是协议简单，大部分商业数据库（<code>Oracle</code>、<code>DB2</code>等）都实现了<code>XA</code>协议，使用分布式的成本较低。</li><li>缺点是性能差，在<code>mysql</code>中支持不理想（没有<code>prepare</code>阶段日志，准备切换回导致主库和备库数据不一致），很多<code>nosql</code>也没有<code>XA</code>的支持。这些缺点也导致其应用狭隘</li></ul><h1 id="基于消息事务实现的最终一致性事务"><a href="#基于消息事务实现的最终一致性事务" class="headerlink" title="基于消息事务实现的最终一致性事务"></a>基于消息事务实现的最终一致性事务</h1><ol><li>解释</li></ol><ul><li><strong>消息事务</strong>就是基于消息中间件的两阶段提交，是对消息中间件的特殊利用。此方法实现的事务是最终一致性，并不能保证实时一致。</li></ul><ol start="2"><li>步骤</li></ol><ul><li>系统A发送预备消息给中间件</li><li>中间件保存预备消息并返回</li><li>系统A执行本地事务</li><li>执行结束后发送给消息中间件</li><li>消息中间件保存信息并发送给其它系统</li><li>其它系统执行本地事务并返回（如果失败中间件会重复发送）</li><li>mq将最终执行结果返回系统A</li></ul><ol start="3"><li>优缺点</li><li>性能好</li><li>缺点是如果其它系统一直不成功，会破坏一致性。</li></ol><h1 id="TCC编程模式"><a href="#TCC编程模式" class="headerlink" title="TCC编程模式"></a>TCC编程模式</h1><ul><li>根据业务决定具体代码实现</li><li>一种编程框架，吧业务逻辑分为<code>Try``Confirm``Cancel</code>三个操作</li><li>例如下单，<code>Try</code>就是去库存，<code>Confirm</code>是更新订单，<code>Cancel</code>是失败恢复库存</li><li>本质是人为进行两段式提交</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>匿名内部类</title>
      <link href="/2022/03/20/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2022/03/20/%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：19,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Inter i = <span class="keyword">new</span> Inter()&#123;<span class="comment">//多态</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show2</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"show2"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">i.show();<span class="comment">//调用类方法</span></span><br><span class="line">i.show2();</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原码、反码、补码</title>
      <link href="/2022/03/20/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/"/>
      <url>/2022/03/20/%E5%8E%9F%E7%A0%81%E3%80%81%E5%8F%8D%E7%A0%81%E3%80%81%E8%A1%A5%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：495,阅读全文大约需要1分钟</p><h1 id="机器数和真值"><a href="#机器数和真值" class="headerlink" title="机器数和真值"></a>机器数和真值</h1><ul><li><strong>真值</strong>: 即数字本身的值，例如<code>-3</code></li><li><strong>机器数</strong>: 数字在计算机中存储的值，第一位为符号位<code>1</code>代表负数，<code>0</code>代表正数。后面的二进制代表绝对值，例如<code>-3</code>的机器数就是<code>10000011</code></li></ul><h1 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h1><ul><li>原码即机器数，是计算机对于数值的二进制表示方式</li><li>除了第一位的符号位，其余便是绝对值。因此可以表示的范围为<code>[1111 1111, 0111 1111]</code>即<code>[-127, 127]</code></li></ul><h1 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h1><ul><li>正数不变</li><li>负数在原码的基础上，<strong>除了符号位，其余取反</strong></li><li>为了解决数值减法的问题，通过反码可以让符号位也参与运算，从而将减法也转换成加法(2-1 = 2 + (-1))</li></ul><h1 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h1><ul><li>正数不变</li><li>负数在<strong>反码</strong>的基础上，<strong>+1</strong></li><li>为了解决反码存在两个值表示<code>0</code>的情况(因为存在符号位，所以有一个+0和-0)</li><li>使用补码之后负数能比正数多表示一个值(正数需要表示0，负数部分不需要)</li><li>所以补码表示范围就成了<code>[-2^8, (2^8)-1]</code>即<code>[-127, +127]</code></li></ul><h1 id="计算机加减法"><a href="#计算机加减法" class="headerlink" title="计算机加减法"></a>计算机加减法</h1><ul><li>补码将减法也变成了加法，计算机上数值都是以补码形式存储的，所以直接二进制相加即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(b==<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 两个都是1的需要进位</span></span><br><span class="line">        <span class="keyword">int</span> c = a &amp; b;</span><br><span class="line">        <span class="comment">// 进位</span></span><br><span class="line">        c = c &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 按位相加，0+1=1,1+0=1,0+0=0,1+1=0(进位了，所以当前位为0)，所以直接异或即可。</span></span><br><span class="line">        <span class="keyword">int</span> d = a ^ b;</span><br><span class="line">        <span class="keyword">return</span> add(c, d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原子操作CAS</title>
      <link href="/2022/03/20/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9CCAS/"/>
      <url>/2022/03/20/%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9CCAS/</url>
      
        <content type="html"><![CDATA[<p>文章字数：473,阅读全文大约需要1分钟</p><blockquote><p><code>Atom</code>不可分割的意思，<code>CAS</code>是一种替换操作，不是锁。</p></blockquote><h1 id="一、原子操作"><a href="#一、原子操作" class="headerlink" title="一、原子操作"></a>一、原子操作</h1><h2 id="1-1sync的缺点"><a href="#1-1sync的缺点" class="headerlink" title="1.1sync的缺点"></a>1.1sync的缺点</h2><ol><li>基于阻塞机制</li><li>被阻塞的线程优先级很高</li><li>拿到锁的线程不释放</li><li>大量竞争消耗<code>cpu</code>带来死锁等问题</li></ol><h2 id="1-2-CAS原理"><a href="#1-2-CAS原理" class="headerlink" title="1.2 CAS原理"></a>1.2 CAS原理</h2><ol><li>基于指令级别保证是原子操作</li><li>基本思路：如果内存地址的值和期望值相等，就把新的值赋给此内存地址，否则不进行操作</li><li>在循环中不断进行<code>CAS</code>操作，直到成功(自旋)。</li></ol><h2 id="1-3-ABA问题"><a href="#1-3-ABA问题" class="headerlink" title="1.3 ABA问题"></a>1.3 ABA问题</h2><ul><li>值<code>A</code>被改成了<code>B</code>又被改回了<code>A</code>。对于一个线程来说，检测到值为<code>A</code>就以为没有改动过，其实有可能是再次被改回来了。</li><li>解决方法是加上版本号。</li></ul><h2 id="1-4-性能问题"><a href="#1-4-性能问题" class="headerlink" title="1.4 性能问题"></a>1.4 性能问题</h2><ul><li>如果长期不成功，<code>cpu</code>会不断循环</li></ul><h2 id="1-5-常用工具"><a href="#1-5-常用工具" class="headerlink" title="1.5 常用工具"></a>1.5 常用工具</h2><table><thead><tr><th align="left">类型</th><th align="left">jdk类</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">基本类型</td><td align="left"><code>AtomicBoolean</code> <code>AtomicInteger</code> <code>AtomicLong</code></td><td align="left">常用<code>getAndIncrement()</code>先获取后累加，<code>incrementAndGet()</code>先累加再获取之类的方法。</td></tr><tr><td align="left">数组</td><td align="left"><code>AtomicIntegerArray</code> <code>AtomicLongArray</code> <code>AtomicReferenceArray</code></td><td align="left">可以理解为数组的引用类型</td></tr><tr><td align="left">引用类型</td><td align="left"><code>AtomicReference</code> <code>AtomicMarkableReference</code> <code>AtomicStampedReference</code></td><td align="left"><code>AtomicReference</code>包装一个类，然后调用<code>compareAndSet</code>进行原子操作替换成另一个类。可以进行整个类的<code>CAS</code>原子操作。另外两个主要关系<code>ABA</code>问题，<code>mark</code>关心是否被动过，<code>stamped</code>关心动过几次</td></tr><tr><td align="left">原子更新字段类</td><td align="left"><code>AtomicReferenceFieldUpdater</code> <code>AtomicIntegerFieldUpdater</code> <code>AtomicLongFieldUpdater</code></td><td align="left">比较麻烦，可以用上一个替代</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> 锁 </tag>
            
            <tag> 乐观锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去掉console-log程序执行异常</title>
      <link href="/2022/03/20/%E5%8E%BB%E6%8E%89console-log%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%BC%82%E5%B8%B8/"/>
      <url>/2022/03/20/%E5%8E%BB%E6%8E%89console-log%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%BC%82%E5%B8%B8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：115,阅读全文大约需要1分钟</p><blockquote><p>怀疑人生，去掉输出程序执行错误(时好时坏)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把密码加密再提交表单</span></span><br><span class="line"><span class="keyword">var</span> md5Pwd=hex_md5(pwd);</span><br><span class="line"> $(<span class="string">"#password"</span>).val(md5Pwd);</span><br><span class="line">$(<span class="string">'#form'</span>)[<span class="number">0</span>].submit();</span><br></pre></td></tr></table></figure><p>原来提交之前输出md5字符串的值，之后去掉了。结果提交的密码就成了明文？？？</p><h1 id="可能的问题"><a href="#可能的问题" class="headerlink" title="可能的问题"></a>可能的问题</h1><p>可能加密或者val()存在异步操作，程序直接进入下一步。</p><h1 id="暂时解决办法"><a href="#暂时解决办法" class="headerlink" title="暂时解决办法"></a>暂时解决办法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> md5Pwd=hex_md5(pwd);</span><br><span class="line">        $(<span class="string">"#password"</span>).val(md5Pwd);</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#forgotPwdForm'</span>)[<span class="number">0</span>].submit();</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射效率低的原因</title>
      <link href="/2022/03/20/%E5%8F%8D%E5%B0%84%E6%95%88%E7%8E%87%E4%BD%8E%E7%9A%84%E5%8E%9F%E5%9B%A0/"/>
      <url>/2022/03/20/%E5%8F%8D%E5%B0%84%E6%95%88%E7%8E%87%E4%BD%8E%E7%9A%84%E5%8E%9F%E5%9B%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：711,阅读全文大约需要2分钟</p><blockquote><p>整理自<a href="https://www.jianshu.com/p/bd6fb77a7883" target="_blank" rel="noopener">原文</a></p></blockquote><h1 id="反射效率低的原因"><a href="#反射效率低的原因" class="headerlink" title="反射效率低的原因"></a>反射效率低的原因</h1><ol><li><p><code>Method#invoke</code>方法会对参数做封装和解封操作<br><code>invoke</code>方法参数是<code>Object[]</code>类型，如果方法的参数是简单类型，那么需要先包装成<code>Object</code>类型。例如<code>long</code>需要装换成<code>Long</code>。此时产生了多余的<code>Long</code>类型的<code>Objec</code>。生成动态字节码，并加载到<code>jvm</code>的方法<code>MethodAccessorGenerator#emitInvoke</code>会将参数恢复到之前的类型，同时做参数校验。<br>反射调用的时候可能会将参数进行多余的封装和解封，产生不必要的内存浪费。调用次数过多甚至会导致<code>GC</code>（感觉有点夸张）</p></li><li><p>需要检测方法可见性<br>反射每次调用都必须检查方法的可见性（Method.invoke）</p></li><li><p>需要校验参数<br>反射必须检查每个实际参数和形式参数的类型匹配（在NativeMethodAccessorImpl.invoke0 里或者生成的 Java 版 MethodAccessor.invoke 里）</p></li><li><p>方法难以内联<br><code>Method.invoke()</code>自身难以被内联到方法调用。</p></li><li><p>JIT无法优化<br>反射涉及到动态加载的类型，无法优化。</p></li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>文章没给，但是自己能想到几个</p><ol><li>方法参数使用包装类型（减少了包装和拆包的步骤）</li><li>将反射获取的<code>Method</code>等对象缓存下来，这样在下次调用的时候可以减少生成的开销。</li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>获取方式的方法</li></ol><ul><li><p>getMethod / getDeclaredMethod<br>调用反射时现需要创建<code>Class</code>对象(Class.forName)，然后获取<code>Method</code>对象（getMethod / getDeclaredMethod），最后才是<code>invoke</code>调用。<br>相同：<code>getMethod</code>和<code>getDeclaredMethod</code>的内部结构都是<strong>检查方法权限</strong>、<strong>获取方法</strong>、<strong>返回方法的拷贝</strong>。<br>不同：<code>getMethod</code>检查和获取的方法可以是自身的也可以是父类的，<code>getDeclaredMethod</code>获取的方法只能是自身的。</p></li><li><p>checkMemberAccess<br>第一步，检查方法权限。<code>getMethod</code>的传入值之一是<code>Member.PUBLIC</code>，<code>getDeclaredMethod</code>是<code>Member.DECLARED</code>。一个检查父类和自身，另一个只有自身方法。</p></li><li><p>getMethod0<br><code>getMethod</code>方法检查完方法权限后调用<code>getMethod0</code>获取方法</p></li><li><p>getMechodsRecursive<br>递归查找父类方法</p></li><li><p>privateGetDeclaredMethods<br>获取自身方法</p></li><li><p>Method#copy</p></li></ul><ol start="2"><li>调用方式的方法</li></ol><ul><li>checkAccess</li><li>acquireMethodAccessor</li><li>MethodAccessor#invoke</li></ul><ol start="3"><li>方式效率低的原因</li></ol><ul><li>Method#invoke 方法会对参数做封装和解封操作</li><li>需要检查方法的可见性</li><li>需要校验参数</li><li>反射方法难以内联</li><li>JIT无法优化</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>后端全局响应架构</title>
      <link href="/2022/03/20/%E5%90%8E%E7%AB%AF%E5%85%A8%E5%B1%80%E5%93%8D%E5%BA%94%E6%9E%B6%E6%9E%84/"/>
      <url>/2022/03/20/%E5%90%8E%E7%AB%AF%E5%85%A8%E5%B1%80%E5%93%8D%E5%BA%94%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<p>文章字数：174,阅读全文大约需要1分钟<br><a href="https://www.jianshu.com/p/b5b8613769db" target="_blank" rel="noopener">原文</a></p><h1 id="全局数据响应（返回数据统一）"><a href="#全局数据响应（返回数据统一）" class="headerlink" title="全局数据响应（返回数据统一）"></a>全局数据响应（返回数据统一）</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span>(basePackages = &#123;<span class="string">"com.rudecrab.demo.controller"</span>&#125;) <span class="comment">// 注意哦，这里要加上需要扫描的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseControllerAdvice</span> <span class="keyword">implements</span> <span class="title">ResponseBodyAdvice</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(MethodParameter returnType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果接口返回的类型本身就是ResultVO那就没有必要进行额外的操作，返回false</span></span><br><span class="line">        <span class="keyword">return</span> !returnType.getGenericParameterType().equals(ResultVO<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">beforeBodyWrite</span><span class="params">(Object data, MethodParameter returnType, MediaType mediaType, Class&lt;? extends HttpMessageConverter&lt;?&gt;&gt; aClass, ServerHttpRequest request, ServerHttpResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// String类型不能直接包装，所以要进行些特别的处理</span></span><br><span class="line">        <span class="keyword">if</span> (returnType.getGenericParameterType().equals(String<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 将数据包装在ResultVO里后，再转换为json字符串响应给前端</span></span><br><span class="line">                <span class="keyword">return</span> objectMapper.writeValueAsString(<span class="keyword">new</span> ResultVO&lt;&gt;(data));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> APIException(<span class="string">"返回String类型错误"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将原本的数据包装在ResultVO里</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResultVO&lt;&gt;(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="全局异常返回"><a href="#全局异常返回" class="headerlink" title="全局异常返回"></a>全局异常返回</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">String</span> <span class="title">MethodArgumentNotValidExceptionHandler</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 从异常对象中拿到ObjectError对象</span></span><br><span class="line">        ObjectError objectError = e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 然后提取错误提示信息进行返回</span></span><br><span class="line">        <span class="keyword">return</span> objectError.getDefaultMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式编程</title>
      <link href="/2022/03/20/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2022/03/20/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>文章字数：204,阅读全文大约需要1分钟</p><blockquote><p>响应式编程有三个组成部分 变化传递<code>propagation of change</code>、 数据流<code>data stream</code>、 申明式<code>declarative</code>。</p></blockquote><h1 id="变化传递-propagation-of-change"><a href="#变化传递-propagation-of-change" class="headerlink" title="变化传递(propagation of change)"></a>变化传递(propagation of change)</h1><p>  在响应式编程中，一个模块数据产生变动，相应模块的数据也会变化。(vue的数据绑定)<br>  生产者生成发送 数据/事件，消费者监听并负责处理数据变化传递的方式。</p><h1 id="数据流-data-stream"><a href="#数据流-data-stream" class="headerlink" title="数据流(data stream)"></a>数据流(data stream)</h1><p>  响应式编程中的数据是以数据流的形式发出的，相应的方法监听数据流，对于数据流的元素一次处理。</p><h1 id="声明式-declarative"><a href="#声明式-declarative" class="headerlink" title="声明式(declarative)"></a>声明式(declarative)</h1><p>  数据流中说到的监听数据流的方法中对于数据流应该如何处理的定义就是声明。预先定义好将如何对数据流进行处理就是声明式。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回文子串算法</title>
      <link href="/2022/03/20/%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/20/%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：359,阅读全文大约需要1分钟</p><blockquote><p>回文子串指的是从前向后和从后向前读是一样的字符串，比如<code>abba</code>或者<code>abcba</code>。</p></blockquote><h1 id="暴力获取法"><a href="#暴力获取法" class="headerlink" title="暴力获取法"></a>暴力获取法</h1><p>以下是我自己写的，思路如下：</p><ol><li>获取可能是回文子串的字符串</li><li>判断是否是回文子串</li></ol><p>实现是：</p><ol><li>用一个循环遍历所有字符</li><li>再嵌套一个循环，从反方向循环，找到一样的值<br>（左右相同就可能是回文子串）</li><li>判断字符串是否是回文子串，用个循环遍历其中的内容。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.trim().equals(<span class="string">""</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> longsLeft = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> longsRight = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] args = s.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length() - maxLength; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (args[i] == args[j]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isPalindrome(s.substring(i, j + <span class="number">1</span>))) &#123;</span><br><span class="line">                        <span class="keyword">int</span> longs = j - i + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span> (longs &gt; maxLength) &#123;</span><br><span class="line">                            longsLeft = i;</span><br><span class="line">                            longsRight = j;</span><br><span class="line">                            maxLength = longs;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s.substring(longsLeft, longsRight + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] args = arg.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = args.length - <span class="number">1</span>; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (args[i] != args[j]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度<code>O(n^3)</code><br>为了直观，现将<code>String</code>转成<code>char[]</code>再操作，多占了内存。将<code>char[]</code>的操作改成直接操作<code>String</code>可以达到空间复杂度<code>O(1)</code></p><h1 id="中心扩散法"><a href="#中心扩散法" class="headerlink" title="中心扩散法"></a>中心扩散法</h1><p>在<code>leetcode</code>官方讲解中看到的一个解决方法，时间复杂度<code>O(n^2)</code>，空间复杂度<code>O(1)</code></p><p>思路：<br>每个回文子串都有个中心，<code>abba</code>的中心就是<code>bb</code>。<code>abcba</code>的中心是<code>c</code>。<br>通过中心向外扩散，即可得到整个回文子串。</p><p>实现</p><ol><li>循环遍历每个元素（每两个）</li><li>以每个元素为中心，向两边遍历，直到不相同即为回文子串长度</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = expandAroundCenter(s, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                end = i + len / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = left, R = right;</span><br><span class="line">        <span class="keyword">while</span> (L &gt;= <span class="number">0</span> &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) &#123;</span><br><span class="line">            L--;</span><br><span class="line">            R++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基数排序</title>
      <link href="/2022/03/20/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/20/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：265,阅读全文大约需要1分钟</p><blockquote><p>基数排序适用于整形排序，将数据按照位数切割成不同的数字，按照权重依次桶排序。</p></blockquote><h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p>第一次排序，位数最大的在后面，小的在前面。<br>第二次排序十位上的大的向后<br>第三次百位大的向后<br>…<br>越在后面进行的排序作用就越大，因为可以推翻之前的排序结果。位数越靠前代表的值也越大，所以从个位开始到最高位。</p><p>本质上是桶排序的增强版，不需要那么多的桶。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = arr.length;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最大值</span></span><br><span class="line">    <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &gt; max)&#123;</span><br><span class="line">            max = arr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前排序位置</span></span><br><span class="line">    <span class="keyword">int</span> location = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//桶列表</span></span><br><span class="line">    ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//长度为10 装入余数0-9的数据</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">        bucketList.add(<span class="keyword">new</span> ArrayList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断是否排完</span></span><br><span class="line">        <span class="keyword">int</span> dd = (<span class="keyword">int</span>)Math.pow(<span class="number">10</span>，(location - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">if</span>(max &lt; dd)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数据入桶</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//计算余数 放入相应的桶</span></span><br><span class="line">            <span class="keyword">int</span> number = ((arr[i] / dd) % <span class="number">10</span>);</span><br><span class="line">            bucketList.get(number).add(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写回数组</span></span><br><span class="line">        <span class="keyword">int</span> nn = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> size = bucketList.get(i).size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">0</span>;ii &lt; size;ii ++)&#123;</span><br><span class="line">                arr[nn++] = bucketList.get(i).get(ii);</span><br><span class="line">            &#125;</span><br><span class="line">            bucketList.get(i).clear();</span><br><span class="line">        &#125;</span><br><span class="line">        location++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于1-8的Base64和文件的转换及1-7的Files类</title>
      <link href="/2022/03/20/%E5%9F%BA%E4%BA%8E1-8%E7%9A%84Base64%E5%92%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%8F%8A1-7%E7%9A%84Files%E7%B1%BB/"/>
      <url>/2022/03/20/%E5%9F%BA%E4%BA%8E1-8%E7%9A%84Base64%E5%92%8C%E6%96%87%E4%BB%B6%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%8F%8A1-7%E7%9A%84Files%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：511,阅读全文大约需要2分钟</p><h1 id="文件转Base64"><a href="#文件转Base64" class="headerlink" title="文件转Base64"></a>文件转Base64</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">encryptToBase64</span><span class="params">(String filePath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (filePath == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">byte</span>[] b = Files.readAllBytes(Paths.get(filePath));</span><br><span class="line"><span class="keyword">return</span> Base64.getEncoder().encodeToString(b);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Files、Paths类是JDK7里加入的，读取文件不再需要调用IO包里的FileInputStream，简单便捷。字符串参数filePath是文件的路径。</p></blockquote><blockquote><p>首先是将文件读成二进制码，然后通过Base64.getEncoder().encodeToString()方法将二进制码转换为Base64值。</p></blockquote><h1 id="Base64转文件"><a href="#Base64转文件" class="headerlink" title="Base64转文件"></a>Base64转文件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">decryptByBase64</span><span class="params">(String base64, String filePath)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (base64 == <span class="keyword">null</span> &amp;&amp; filePath == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"生成文件失败，请给出相应的数据。"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Files.write(Paths.get(filePath), Base64.getDecoder().decode(base64),StandardOpenOption.CREATE);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"指定路径下生成文件成功！"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Files.write()方法轻松将文件写入指定位置</p></blockquote><h1 id="Path类"><a href="#Path类" class="headerlink" title="Path类"></a>Path类</h1><blockquote><p>1.7之后引入了<code>java.nio.file</code>包取代原来基于<code>java.io.File</code>的文件IO操作<br>位置：</p></blockquote><ul><li><code>java.nio.file.Files</code></li><li><code>java.nio.file.Path</code></li></ul><ol><li><p>获取path</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Path path;</span><br><span class="line"><span class="comment">//1.绝对路径</span></span><br><span class="line">path = Paths.get(<span class="string">"c:\\test.txt"</span>);</span><br><span class="line"><span class="comment">//2.相对路径</span></span><br><span class="line">path = Paths.get(<span class="string">"/demo/test.txt"</span>);</span><br><span class="line"><span class="comment">//3.通过FileSystems</span></span><br><span class="line">path = FileSystems.getDefault().getPath(<span class="string">"c:\\test.txt"</span>);</span><br></pre></td></tr></table></figure></li><li><p><code>File</code>和<code>Path</code>转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">File file = <span class="keyword">new</span> file(<span class="string">"c:\\xxx.txt"</span>);</span><br><span class="line"><span class="comment">//文件转Path</span></span><br><span class="line">Path path = file.toPath();</span><br><span class="line"><span class="comment">//Path转File</span></span><br><span class="line">path.toFile();</span><br><span class="line"><span class="comment">//File转uri</span></span><br><span class="line">file.toURI();</span><br></pre></td></tr></table></figure></li><li><p><code>Path</code>信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"D:\\demo\text.txt"</span>);</span><br><span class="line">System.out.println(<span class="string">"文件名："</span> + path.getFileName());</span><br><span class="line">System.out.println(<span class="string">"名称元素的数量："</span> + path.getNameCount());</span><br><span class="line">System.out.println(<span class="string">"父路径："</span> + path.getParent());</span><br><span class="line">System.out.println(<span class="string">"根路径："</span> + path.getRoot());</span><br><span class="line">System.out.println(<span class="string">"是否是绝对路径："</span> + path.isAbsolute());</span><br><span class="line"><span class="comment">//startsWith()方法的参数既可以是字符串也可以是Path对象</span></span><br><span class="line">System.out.println(<span class="string">"是否是以为给定的路径D:开始："</span> + path.startsWith(<span class="string">"D:\\"</span>) );</span><br><span class="line">System.out.println(<span class="string">"该路径的字符串形式："</span> + path.toString());</span><br></pre></td></tr></table></figure></li></ol><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><ol><li><p>文件是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"D:\\demo.txt"</span>);</span><br><span class="line"><span class="keyword">boolean</span> pathExists = Files.exists(path,<span class="keyword">new</span> LinkOption[]&#123;</span><br><span class="line">    LinkOption.NOFOLLOW_LINKS</span><br><span class="line">&#125;);<span class="comment">//数组内的NOFOLLOW_LINKS代表不包含符合链接文件</span></span><br></pre></td></tr></table></figure></li><li><p>创建文件/文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Path target2 = Paths.get(<span class="string">"C:\\demo.txt"</span>);</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!Files.exists(target2))</span><br><span class="line">        Files.createFile(target2);</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">  e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Files.createDirectory()</code>创建文件夹，上级目录不存在报错<br><code>Files.createDirectorys()</code>创建文件夹，上级目录不存在则创建上级目录</p></li><li><p>删除文件或目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"data/subdir/logging-moved.properties"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Files.delete(path);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>复制文件到另一个位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Path sourcePath = Paths.get(<span class="string">"data/logging.properties"</span>);</span><br><span class="line">Path destinationPath = Paths.get(<span class="string">"data/logging-copy.properties"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    Files.copy(sourcePath, destinationPath);</span><br><span class="line">&#125; <span class="keyword">catch</span>(FileAlreadyExistsException e) &#123;</span><br><span class="line">    <span class="comment">//文件已经存在</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还可以直接覆盖目标文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Files.copy(sourcePath, destinationPath,</span><br><span class="line">            StandardCopyOption.REPLACE_EXISTING);</span><br></pre></td></tr></table></figure></li><li><p>获取文件属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Path path = Paths.get(<span class="string">"D:\\XMind\\bcl-java.txt"</span>);</span><br><span class="line">System.out.println(Files.getLastModifiedTime(path));</span><br><span class="line">System.out.println(Files.size(path));</span><br><span class="line">System.out.println(Files.isSymbolicLink(path));</span><br><span class="line">System.out.println(Files.isDirectory(path));</span><br><span class="line">System.out.println(Files.readAttributes(path, <span class="string">"*"</span>));</span><br></pre></td></tr></table></figure></li><li><p>遍历一个文件夹</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Path dir = Paths.get(<span class="string">"D:\\Java"</span>);</span><br><span class="line"><span class="keyword">try</span>(DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(dir))&#123;</span><br><span class="line">    <span class="keyword">for</span>(Path e : stream)&#123;</span><br><span class="line">        System.out.println(e.getFileName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历整个文件目录<br>walkFileTree接受一个path和FileVisitor，path是遍历的目录，FileVistor则是一个接口，每次遍历都会被调用，需要自己实现。<br>SimpleFileVisitor是默认实现类，将接口所有方法都做了空实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//地址</span></span><br><span class="line">Path startingDir = Paths.get(<span class="string">"D:\\demo"</span>);</span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line">Files.walkFileTree(startingDir, <span class="keyword">new</span> FindJavaVisitor());</span><br></pre></td></tr></table></figure><p><code>FindJavaVisitor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindJavaVisitor</span> <span class="keyword">extends</span> <span class="title">SimpleFileVisitor</span>&lt;<span class="title">Path</span>&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span></span>&#123;</span><br><span class="line">            <span class="comment">//do...</span></span><br><span class="line">            <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本算法</title>
      <link href="/2022/03/20/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/20/%E5%9F%BA%E6%9C%AC%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：918,阅读全文大约需要3分钟</p><blockquote><p>五个常用的算法思想</p></blockquote><h1 id="贪婪算法"><a href="#贪婪算法" class="headerlink" title="贪婪算法"></a>贪婪算法</h1><ol><li>特性</li></ol><ul><li>局部最优解，总是找出当前看来最好的选择，而不是从整体考虑</li><li>局部最优解通常不是全局最优</li><li>想要通过贪婪算法找到最优解，通常需要严谨的数学证明</li></ul><ol start="2"><li>计算过程</li></ol><ul><li>将问题拆解成若干个子问题</li><li>选择子问题的最优解</li><li>将子问题的解合并成问题的解</li></ul><ol start="3"><li>例子</li></ol><ul><li>背包问题： 有若干个重量、价值不同的物体，在背包承重固定的情况下找出能拿走加个最高的组合。</li><li>策略1: 找最贵的拿，直到再拿就超重</li><li>策略2: 拿最重的</li><li>策略3: 拿最轻的</li><li>策略4: 拿性价比最高的<br>最后可以比较所有策略的结果，去出最优的<br>结果只是接近最优，但是性能大幅提升</li></ul><h1 id="动态规划算法"><a href="#动态规划算法" class="headerlink" title="动态规划算法"></a>动态规划算法</h1><ol><li>动态规划法能解决具有以下特点的问题</li></ol><ul><li>最优子结构: 可以把局部问题结合起来得出全局最优解</li><li>重复子问题: 计算最优解的过程中会处理很多相同的问题</li></ul><ol start="2"><li>原理</li></ol><ul><li>一个问题是另一个问题状态转移后的到的，所以计算每一步的状态转移过程即可的到最终答案</li></ul><ol start="3"><li>例子</li></ol><ul><li>斐波那契数列的计算</li><li>斐波那契数列第二项之后的元素都是前两个元素之和</li><li>如果每次都从头计算，会有很多重复的运算</li><li>直接将每次的结果都保存下来，接下来计算每项都直接从结果集中取前两项的值</li></ul><h1 id="分治算法"><a href="#分治算法" class="headerlink" title="分治算法"></a>分治算法</h1><ol><li>将大问题分成若干小问题，再把小问题划分下去。直到<code>base cases</code>，解决之后一步步向上，最终解决大问题</li><li>例子: 快速排序</li></ol><h1 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h1><ul><li>回溯算法和暴力破解很像，但是优点在于排除了很多不可能的步骤</li></ul><ol><li>原理</li></ol><ul><li>遍历元素时如果得出此方法不通，则直接返回。</li></ul><ol start="2"><li>例子: N皇后问题</li></ol><ul><li>加入有N*N的棋盘，要在上面放上N个皇后，并保证N个都无法吃掉对方</li><li>即不在一行，不在一列，不在对角线上</li><li>每一个棋子都是一个循环</li><li>当最后一个棋子确定此路不同时，结束循环</li><li>父循环进入下一次循环</li></ul><ol start="3"><li>其它例子: 深度优先遍历</li></ol><h1 id="分支限界算法"><a href="#分支限界算法" class="headerlink" title="分支限界算法"></a>分支限界算法</h1><ul><li>和回溯法类似，但是分支限界算法是从广度上进行排除不可能的步骤的</li><li>回溯法是找到一个解就深入下去，直到判断无解，然后放弃一整条路径，进入下一个</li><li>分支限界算法是先把所有的最外层问题解出来，然后再去除不可能的。</li><li>然后再从可能的中进入下一次子问题</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复制文字时自动追加版权信息</title>
      <link href="/2022/03/20/%E5%A4%8D%E5%88%B6%E6%96%87%E5%AD%97%E6%97%B6%E8%87%AA%E5%8A%A8%E8%BF%BD%E5%8A%A0%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/03/20/%E5%A4%8D%E5%88%B6%E6%96%87%E5%AD%97%E6%97%B6%E8%87%AA%E5%8A%A8%E8%BF%BD%E5%8A%A0%E7%89%88%E6%9D%83%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：99,阅读全文大约需要1分钟</p><ul><li>监听复制事件</li><li>读取剪贴板的内容</li><li>追加信息到剪贴板</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.oncopy = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> selecttion = <span class="built_in">window</span>.getSelection().toString();</span><br><span class="line">    <span class="keyword">if</span>(e.clipboardData)&#123;</span><br><span class="line">        e.clipboardData.setData(<span class="string">'text/plain'</span>, selecttion + <span class="string">'这是大勇哥的博客：https://blog.csdn.net/zy444263/article/details/83827697'</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.clipboardData)&#123;</span><br><span class="line">        <span class="comment">//ie浏览器</span></span><br><span class="line">        <span class="built_in">window</span>.clipboardData.setData(<span class="string">'text/plain'</span>, selecttion + <span class="string">'这是大勇哥的博客：https://blog.csdn.net/zy444263/article/details/83827697'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//阻止默认行为，否则无法重置被选中的内容。</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实体类复制</title>
      <link href="/2022/03/20/%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/03/20/%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：105,阅读全文大约需要1分钟</p><blockquote><p>apache的BeanUtils.copyProperties（from,to）可以实现实体类属性复制，但是空属性不会忽略。在网上找到了一种方法可以忽略空属性</p></blockquote><p>忽略空属性的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static String[] getNullPropertyNames (Object source) &#123;</span><br><span class="line">        final BeanWrapper src &#x3D; new BeanWrapperImpl(source);</span><br><span class="line">        java.beans.PropertyDescriptor[] pds &#x3D; src.getPropertyDescriptors();</span><br><span class="line"></span><br><span class="line">        Set&lt;String&gt; emptyNames &#x3D; new HashSet&lt;String&gt;();</span><br><span class="line">        for(java.beans.PropertyDescriptor pd : pds) &#123;</span><br><span class="line">            Object srcValue &#x3D; src.getPropertyValue(pd.getName());</span><br><span class="line">            if (srcValue &#x3D;&#x3D; null) emptyNames.add(pd.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        String[] result &#x3D; new String[emptyNames.size()];</span><br><span class="line">        return emptyNames.toArray(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void copyPropertiesIgnoreNull(Object src, Object target)&#123;</span><br><span class="line">        BeanUtils.copyProperties(src, target, getNullPropertyNames(src));</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F;使用</span><br><span class="line">BeanUtils.copyProperties(examLifeStyle, examDetail, getNullPropertyNames(examLifeStyle));</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将canvas保存成图片工具类</title>
      <link href="/2022/03/20/%E5%B0%86canvas%E4%BF%9D%E5%AD%98%E6%88%90%E5%9B%BE%E7%89%87%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/03/20/%E5%B0%86canvas%E4%BF%9D%E5%AD%98%E6%88%90%E5%9B%BE%E7%89%87%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：122,阅读全文大约需要1分钟</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将canvas的内容保存成图片</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveAsPng</span>(<span class="params">canvasOb, name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name == <span class="literal">null</span> || name == <span class="string">""</span>) &#123;</span><br><span class="line">        name = <span class="string">"img"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> type = <span class="string">"image/png"</span>;</span><br><span class="line">    <span class="keyword">var</span> imgData = canvasOb.toDataURL(&#123;<span class="attr">format</span>: type&#125;);</span><br><span class="line">    <span class="keyword">var</span> base64Str = imgData.substr(<span class="number">22</span>, imgData.length);</span><br><span class="line">    <span class="keyword">var</span> blob = base64ToBlob(base64Str, type);</span><br><span class="line">    downloadByBlob(blob, name + <span class="string">"png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将base64数据转换成blob文件对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64ToBlob</span>(<span class="params">b64data, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> byteCharacters = atob(b64data);</span><br><span class="line">    <span class="keyword">var</span> byteArrays = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> offset = <span class="number">0</span>; offset &lt; byteCharacters.length; offset += <span class="number">512</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> slice = byteCharacters.slice(offset, offset + <span class="number">512</span>);</span><br><span class="line">      <span class="keyword">var</span> byteNumbers = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; slice.length; i++) &#123;</span><br><span class="line">          byteNumbers.push(slice.charCodeAt(i));</span><br><span class="line">      &#125;</span><br><span class="line">      byteArrays.push(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteNumbers));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> Blob(byteArrays, &#123;<span class="attr">type</span>: type&#125;)</span><br><span class="line">    result = <span class="built_in">Object</span>.assign(result,&#123;<span class="attr">preview</span>: URL.createObjectURL(result)&#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据指定的blob对象和文件名调用浏览器下载文件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadByBlob</span>(<span class="params">blob, fileName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">    link.download = fileName + <span class="string">".png"</span>;</span><br><span class="line">    link.href = URL.createObjectURL(blob);</span><br><span class="line">    link.click();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 工具 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象可达性分析</title>
      <link href="/2022/03/20/%E5%AF%B9%E8%B1%A1%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90/"/>
      <url>/2022/03/20/%E5%AF%B9%E8%B1%A1%E5%8F%AF%E8%BE%BE%E6%80%A7%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>文章字数：553,阅读全文大约需要2分钟</p><blockquote><p><code>java</code>是自动管理内存的语言，需要知道对象是否存活已决定是否清理对象。</p></blockquote><h1 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h1><ol><li><strong>方式</strong>: 每当有一个地方引用对象，对象计数器<code>+1</code>，引用失效<code>-1</code></li><li><strong>判断方式</strong>: 计数不为0时存活，否则判断死亡</li><li><strong>优点</strong>: 简单实现，高效判断</li><li><strong>缺点</strong>: 如果对象相互引用，但是没有其它对象引用这两个。这两个对象会一直相互引用</li></ol><h1 id="引用链法"><a href="#引用链法" class="headerlink" title="引用链法"></a>引用链法</h1><ol><li><strong>方式</strong></li></ol><ul><li>可达性分析</li><li>第一次标记，筛选</li><li>第二次标记，筛选</li></ul><ol start="2"><li><strong>可达性分析</strong></li></ol><ul><li>一系列的<code>GC Roots</code>对象作为起点，向下搜索</li><li><code>GC Root</code>对象有: 虚拟机栈中的引用对象、<code>JNI</code>引用对象、方法区中常量、类静态属性引用的对象。</li><li><code>GC Root</code>不可达代表对象不可用</li><li>不可达对象再经过两次标记筛选后才会加入优先级很低的销毁队列</li></ul><ol start="3"><li><strong>第一次标记筛选</strong></li></ol><ul><li><strong>条件</strong>: 判断该对象是否有必要执行<code>finalize()</code>方法<br>需要执行（需要设置）则筛选出来进入下一次筛选<br>没必要则判定死亡，执行回收</li></ul><ol start="4"><li><strong>第二次标记筛选</strong></li></ol><ul><li>对象存放在<code>F-Queue</code>队列中，被一个自动建立，优先级低的<code>Finalizer</code>线程去执行<code>finalize()</code>。</li><li><code>finalize()</code>方法如果没有或者执行过一次，则视为没必要执行</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> 垃圾回收机制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象操作流ObjectOutputStream</title>
      <link href="/2022/03/20/%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E6%B5%81ObjectOutputStream/"/>
      <url>/2022/03/20/%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C%E6%B5%81ObjectOutputStream/</url>
      
        <content type="html"><![CDATA[<p>文章字数：147,阅读全文大约需要1分钟</p><blockquote><p>能够将对象写入到文件，并从文件中读取的操作（序列化，反序列化）</p></blockquote><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><ol><li><p>需要被序列化的类必须实现<code>Serializable</code>接口，最好声明字段<code>private static final long serialVersionUID = 1L;</code>表示序列化对象的版本，防止多个序列化版本时冲突。</p></li><li><p>被序列化的类加上<code>get</code> <code>set</code>方法</p></li><li><p>序列化反序列化</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Student s1 = <span class="keyword">new</span> Student(<span class="string">"zhangsan"</span>);</span><br><span class="line">Student s2 = <span class="keyword">new</span> Student(<span class="string">"lisi"</span>);</span><br><span class="line"><span class="comment">// 写入</span></span><br><span class="line">ObjectOutputStream os=<span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">os.writeObject(s1);</span><br><span class="line">os.writeObject(s2);</span><br><span class="line">os.close();</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line">ObjectInputStream ois=<span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"test.txt"</span>));</span><br><span class="line">Student s1=(Student) ois.readObject();</span><br><span class="line">Student s2=(Student) ois.readObject();</span><br><span class="line">ois.close();</span><br></pre></td></tr></table></figure><ol start="4"><li>多个类读取比较麻烦，可以保持在集合里再序列化到文件中。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式Tomcat</title>
      <link href="/2022/03/20/%E5%B5%8C%E5%85%A5%E5%BC%8FTomcat/"/>
      <url>/2022/03/20/%E5%B5%8C%E5%85%A5%E5%BC%8FTomcat/</url>
      
        <content type="html"><![CDATA[<p>文章字数：207,阅读全文大约需要1分钟</p><h1 id="嵌入式调用"><a href="#嵌入式调用" class="headerlink" title="嵌入式调用"></a>嵌入式调用</h1><ul><li><code>Tomcat7RunnerCli</code>引导类</li><li>嵌入式<code>tomcat</code>的启动依赖于<code>Tomcat7Runner</code>调用<code>Tomcat api</code></li><li><code>org.apache.catalina.startup.Tomcat</code>的<code>api</code>，用于嵌入式启动</li></ul><h1 id="手写嵌入式Tomcat"><a href="#手写嵌入式Tomcat" class="headerlink" title="手写嵌入式Tomcat"></a>手写嵌入式Tomcat</h1><ul><li>新建Tomcat对象</li><li>设置端口</li><li>设置Context目录</li><li>添加Servlet</li><li>调用Tomcat.start()</li><li>强制Tomcat等待</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String classpath = System.getProperty(<span class="string">"user.dir"</span>);<span class="comment">//目录绝对路径</span></span><br><span class="line">    Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line">    tomcat.setPort(<span class="number">9090</span>); <span class="comment">// 端口绑定，也可以使用tomcat.getConnector().serPort(9091);</span></span><br><span class="line">    Host host = tomcat.getHost(); <span class="comment">// 设置Host</span></span><br><span class="line">    host.setName(<span class="string">"localhost"</span>); <span class="comment">// 和xml设置一样</span></span><br><span class="line">    host.setAppBase(<span class="string">"webapps"</span>); <span class="comment">// 根据xml设置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// --- 基础配置完成</span></span><br><span class="line">    <span class="comment">// 加载class,加入 启动工程</span></span><br><span class="line">    Context context = tomcat.addContext(host, <span class="string">"/"</span>, <span class="string">"classpath "</span>);</span><br><span class="line">    <span class="keyword">if</span>(context  <span class="keyword">instanceof</span> StandardContext) &#123;</span><br><span class="line">        StandardContext standardContext = (StandardContext)context;</span><br><span class="line">        context  .setDefaultContextXml(<span class="string">"d:/tomcat/conf/web.xml"</span>);</span><br><span class="line">        <span class="comment">// wrapper 是Servlet的基本单元</span></span><br><span class="line">        Wrapper wrapper = tomcat.addServlet(<span class="string">"/"</span>, <span class="string">"DemoServler"</span>, <span class="keyword">new</span> DemoServlet);</span><br><span class="line">        wrapper.addMapping(<span class="string">"/demo.do"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// --- 启动</span></span><br><span class="line">    tomcat.start(); <span class="comment">// 启动</span></span><br><span class="line">    tomcat.getServer().await(); <span class="comment">// server等待，防止main运行完直接结束</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用并发容器</title>
      <link href="/2022/03/20/%E5%B8%B8%E7%94%A8%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/03/20/%E5%B8%B8%E7%94%A8%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1003,阅读全文大约需要4分钟</p><h1 id="一、Map"><a href="#一、Map" class="headerlink" title="一、Map"></a>一、Map</h1><h2 id="1-1hash冲突解决"><a href="#1-1hash冲突解决" class="headerlink" title="1.1hash冲突解决"></a>1.1hash冲突解决</h2><ul><li>开放寻址</li><li>再散列</li><li>链地址法</li></ul><h2 id="1-2-ConcurrentHashMap"><a href="#1-2-ConcurrentHashMap" class="headerlink" title="1.2 ConcurrentHashMap"></a>1.2 ConcurrentHashMap</h2><ul><li><code>HashTable</code>使用<code>sync</code>锁方法实现线程安全，效率低。</li><li><code>putIfAbsent()</code> 比<code>HashMap</code>多了一个方法，如果存在设置</li><li><code>ConcurrentHashMap</code>使用了分段存储的原理，分段锁</li></ul><p>##<code>1.8</code>之前</p><ol><li>会根据并发度将数据分成若干区域<code>Segment</code></li><li>每个区域都继承了可重入锁，即线程每次只会锁区域。</li><li>区域下是<code>table</code>,再下一级是<code>HashEntry</code>。</li><li><code>get</code>和<code>set</code>会先将<code>hash</code>进行再散列</li><li>然后根据并发度取模，得出位于那个区域内。</li><li><code>get</code>方法没有加锁，因为数据是<code>volatile</code>修饰的，有修改马上体现（链表不是，遍历时可能会不一致，弱一致性）</li><li>扩容只会扩容当前区域的<code>map</code></li><li><code>size()</code>会尝试两次不加锁的获取，一致返回，不一致全部加锁获取。</li></ol><h2 id="1-8后"><a href="#1-8后" class="headerlink" title="1.8后"></a><code>1.8</code>后</h2><ol><li>取消了区域<code>segment</code>只维护一个数组，锁粒度更小</li><li>链表+红黑树(8个以内链表，之后用红黑树，查询效率高(O(logn)))</li></ol><ul><li><code>sizeCtl</code></li></ul><ol><li><p>负数，进行初始化或扩容，-1正则初始化，-N,有n+1个线程在扩容</p></li><li><p>正数，0没初始化，&gt;0初始化或下次扩容的阈值</p></li><li><p>初始化时会检测<code>sizeCrl</code>的值，如果&lt;0,表示有线程在初始化或扩容，让出运行权。</p></li><li><p>并发扩容，如果线程发现有线程在扩容，会帮助扩容然后再插入。</p></li><li><p><code>put</code>方法先再<code>hash</code>保证分布均匀，其次判断是否扩容，最后<code>CAS</code>插入</p></li><li><p><code>get</code>方法主要是定位，用<code>hash</code>值根据当前<code>table</code>大小取模</p></li></ol><h1 id="二、其他容器"><a href="#二、其他容器" class="headerlink" title="二、其他容器"></a>二、其他容器</h1><h2 id="2-1ConcurrentSkipListMap"><a href="#2-1ConcurrentSkipListMap" class="headerlink" title="2.1ConcurrentSkipListMap"></a>2.1ConcurrentSkipListMap</h2><ul><li><code>SkipList</code>跳表，空间换时间，每次插入都会随机判断是否当作索引。</li></ul><h2 id="2-2ConcurrentLinkedQueue"><a href="#2-2ConcurrentLinkedQueue" class="headerlink" title="2.2ConcurrentLinkedQueue"></a>2.2ConcurrentLinkedQueue</h2><h2 id="2-3写时复制容器"><a href="#2-3写时复制容器" class="headerlink" title="2.3写时复制容器"></a>2.3写时复制容器</h2><ul><li><code>CopyOnWriteArrayList</code></li><li><code>CopyOnWriteArraySet</code></li><li>每次写都会创建一个新的容器，创建完将引用转到新的容器</li><li>数据一致性不高</li><li>空间占用大</li></ul><h1 id="三、阻塞队列"><a href="#三、阻塞队列" class="headerlink" title="三、阻塞队列"></a>三、阻塞队列</h1><ul><li>队列满的时候，插入元素线程阻塞，直到队列不满</li><li>队列空的时候，获取元素线程阻塞，直到有数据</li></ul><h2 id="3-1-常用方法"><a href="#3-1-常用方法" class="headerlink" title="3.1 常用方法"></a>3.1 常用方法</h2><table><thead><tr><th>方法效果</th><th>抛出异常</th><th>返回值</th><th>一直阻塞</th><th>超时退出</th></tr></thead><tbody><tr><td>插入方法</td><td>add</td><td>offer</td><td>put</td><td>offer(time)</td></tr><tr><td>移除方法</td><td>remove</td><td>poll</td><td>take</td><td>poll(time)</td></tr><tr><td>检查方法</td><td>element</td><td>peek</td><td>-</td><td>-</td></tr></tbody></table><h2 id="3-2-阻塞队列接口"><a href="#3-2-阻塞队列接口" class="headerlink" title="3.2 阻塞队列接口"></a>3.2 阻塞队列接口</h2><ul><li><code>BlockingQueue</code>阻塞队列接口</li></ul><h2 id="3-3常用实现类"><a href="#3-3常用实现类" class="headerlink" title="3.3常用实现类"></a>3.3常用实现类</h2><ul><li><code>ArryBlockingQuenue</code>一个数组结构组成的有界阻塞队列(先进先出，需要初始大小)</li><li><code>LinkedBlockingQuenue</code>一个链表组成的有界阻塞队列(先进先出，默认初始Integer.Max_Value)</li><li><code>PriorityBlockingQueue</code>支持优先级排序的无界阻塞队列(默认自然排序，优先级需要实现<code>compareTo()</code>)</li><li><code>DelayQueue</code>使用优先级队列实现的无界阻塞延时队列，到期才能取出(内部元素必须实现<code>Delayed</code>，定义<code>compareTo</code>根据等待时间排序，<code>getDelay</code>获取剩余时间)</li><li><code>SynchronousQueue</code>不存储元素的阻塞队列，每个<code>put</code>都要对应一个<code>take</code>，速度很快，生产者和消费者需要匹配。</li><li><code>LinkedTransferQueue</code>链表结构组成的无界队列(<code>transfer()</code>消费者消费后，才返回。<code>tryTransfer()</code>立刻消费了则返回<code>true</code>否则返回<code>false</code>)</li><li><code>LinkedBlockingDeque</code>链表组成的双向阻塞队列(可以从头和尾插入和移除元素，<code>fork/join</code>工作窃取的实现)，方法名是<code>addLast</code>、<code>addFirst</code>这样的方式区分。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用消息队列</title>
      <link href="/2022/03/20/%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2022/03/20/%E5%B8%B8%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>文章字数：817,阅读全文大约需要3分钟</p><blockquote><p>高并发场景下，消息队列常用于流量削峰，解耦等作用。</p></blockquote><h1 id="基本标准"><a href="#基本标准" class="headerlink" title="基本标准"></a>基本标准</h1><ol><li>消息可靠，不丢失信息</li><li>支持集群</li><li>性能好，满足绝大部分要求。</li><li>开源，发现问题可以修改源码</li><li>社区活跃，用的人多大部分问题都能提前发现</li></ol><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><blockquote><p>使用<code>Erlang</code>编写，最早是为电信行业系统之间通讯设计。支持<code>AMQP</code></p></blockquote><p>特点：</p><ol><li><code>轻量级</code>：轻量，开箱即用。容易部署和使用。</li><li><code>Exchange</code>：生产者和队列之间加入了一个根据路由规则分发消息到不同的队列的功能。</li><li><code>客户端支持语言多</code>：支持很多种客户端语言</li></ol><p>不足</p><ol><li><code>消息堆积支持不好</code>：消息大量堆积性能急剧下降</li><li><code>性能不好</code>：每秒几万到十几万的数据量，比起其他几十万的（RabbitMQ）性能差一个数量级</li><li><code>Erlang</code>：使用<code>Erlang</code>语言，拓展性不好，二次开发成本高（相对于java）</li></ol><h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><blockquote><p>阿里巴巴2012年开源的，后来捐赠给<code>Apache</code>。使用<code>java</code>开发，在阿里内部被广泛使用。</p></blockquote><p>优点</p><ol><li><code>性能稳定，可靠</code>：性能稳定，可靠性高，功能齐全。</li><li><code>中文社区活跃，使用java开发</code>：社区活跃，使用java开发，拓展和二次开发比较容易。</li><li><code>延迟低</code>：业务响应延时做了优化，大多数情况下毫秒级响应。</li><li><code>性能好</code>：每秒能处理几十万条信息</li></ol><p>劣势</p><ol><li><code>与其它产品的集成和兼容性不足</code></li></ol><h1 id="kafka"><a href="#kafka" class="headerlink" title="kafka"></a>kafka</h1><blockquote><p>期初是分布式日志提交系统</p></blockquote><p>优点</p><ol><li><code>兼容性好</code>：大数据相关的开源软件都会优先支持<code>Kafka</code></li><li><code>性能高</code>：性能比RocketMQ还好一点，也是每秒几十万数据。足够多的客户端并发异步批量发送，在开启压缩情况下极限处理能力达到2000万条。</li></ol><p>不足</p><ol><li><code>异步批量</code>：异步批量的思想性能好，但是也带来延时较高的问题。</li></ol><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><table><thead><tr><th>\</th><th>kafka</th><th>RocketMQ</th><th>RabbitMQ</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>十万级</td><td>十万级</td><td>万级</td></tr><tr><td>开发语言</td><td>java &amp; Scala</td><td>java</td><td>Erlang</td></tr><tr><td>消息延迟</td><td>号码级</td><td>毫秒级</td><td>微秒级</td></tr><tr><td>消息丢失</td><td>参数配置后可以0丢失</td><td>参数配置后可以0丢失</td><td>极低概率丢失</td></tr><tr><td>消费模式</td><td>Pull</td><td>Pull+Push</td><td>Pull+Push</td></tr><tr><td>topic数量对吞吐量影响</td><td>topic几十几百时，吞吐量大幅下降</td><td>topic几百几千时,小幅度下降</td><td>\</td></tr><tr><td>可用性</td><td>非常高（分布式）</td><td>非常高（主从）</td><td>高（主从）</td></tr><tr><td>总结</td><td>吞吐量高，分布高可用，支持较少topic数量</td><td>支持大规模topic数量</td><td>不支持集群动态扩容</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>平衡二叉查找树（AVL）</title>
      <link href="/2022/03/20/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%EF%BC%88AVL%EF%BC%89/"/>
      <url>/2022/03/20/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%EF%BC%88AVL%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：427,阅读全文大约需要1分钟</p><blockquote><p>和红黑树相比旋转操作更多，频繁插入删除的情况下红黑树更优</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><ol><li>二叉查找树</li></ol><ul><li>任意节点，若左子树不为空，则左子树上所有的节点值都小于它的根节点值</li><li>人员节点，若右子树不为空，则右子树上所有节点均大于它的节点值</li><li>左右节点都可以单独当做二叉查找树</li><li>利用二分查找法，查找的最大次数等于树的高度</li><li>在极端情况下，数可能会退化成链表。</li></ul><ol start="2"><li>平衡二叉查找树（AVL）</li></ol><ul><li>具有二叉查找树所有的优点</li><li>每个节点的左子树和右子树高度差最多为1</li><li>每次插入后如果不满足条件2，则需要通过若干左旋右旋操作恢复平衡</li></ul><h1 id="需要平衡的类型"><a href="#需要平衡的类型" class="headerlink" title="需要平衡的类型"></a>需要平衡的类型</h1><ol><li><strong>左-左型</strong></li></ol><ul><li>倾斜于左的情况，此时需要进行右旋。</li><li>即顺时针旋转两个节点，使父节点被自己的左孩子渠道，自己成为右孩子<br>例1<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       9</span><br><span class="line">      &#x2F;         右旋       5</span><br><span class="line">    5         &#x3D;&#x3D;&#x3D;&#x3D;&gt;      &#x2F;   \</span><br><span class="line">  &#x2F;                    4      9</span><br><span class="line">4</span><br></pre></td></tr></table></figure>例2<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">         6                         4</span><br><span class="line">        &#x2F;  \                      &#x2F;  \</span><br><span class="line">      4      9                  3     6</span><br><span class="line">     &#x2F;  \           右旋      &#x2F;      &#x2F;  \</span><br><span class="line">   3      5         &#x3D;&#x3D;&#x3D;&#x3D;&gt;   2       5    9</span><br><span class="line">  &#x2F;</span><br><span class="line">2</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>右-右型</strong></li></ol><ul><li>倾斜于右的情况，和<strong>左-左型</strong>刚好相反</li></ul><ol start="3"><li><p><strong>右-左型</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">7                                   7                      9</span><br><span class="line"> \    先对10右旋，变成右-右型         \    再左旋节点7     &#x2F;  \</span><br><span class="line">  10            &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;                9     &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;      7    10</span><br><span class="line"> &#x2F;                                      \</span><br><span class="line">9                                        10</span><br></pre></td></tr></table></figure></li><li><p><strong>左-右型</strong></p></li></ol><ul><li>整体倾斜于左，但是新增的节点倾斜于右</li><li>和<strong>右-左型</strong>处理刚好相反</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发容器</title>
      <link href="/2022/03/20/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/"/>
      <url>/2022/03/20/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1260,阅读全文大约需要5分钟</p><blockquote><p><code>JUC</code>包下的14个并发容器，专门应付并发状态下线程安全的问题</p></blockquote><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ol><li><p><code>ConcurrentHashMap</code>并发版的<code>HashMap</code></p></li><li><p><code>CopyOnWriteArrayList</code>并发版的<code>ArrayList</code></p></li><li><p><code>CopyOnWriteArraySet</code>并发版的<code>Set</code></p></li><li><p><code>ConcurrentLinkedQueue</code>基于链表的并发队列（不阻塞）</p></li><li><p><code>ConcurrentLinkedDeque</code>基于双向列表的并发队列</p></li><li><p><code>ConcurrentSkipListMap</code>基于跳表的并发<code>Map</code><br>跳表：链表之上加了一层索引，就是一个新的链表，指向源数据的双数索引的位置。这一层的索引之上还可以增加索引，指向本层的双数位置。链表版的二分法。</p></li><li><p><code>ConcurrentSkipListSet</code>基于跳表的并发<code>Set</code></p></li><li><p><code>ArrayBlockingQueue</code>阻塞队列基于数组</p></li><li><p><code>LinkedBlockingQueue</code>阻塞队列基于链表</p></li><li><p><code>LinkedBlockingDeque</code>阻塞队列基于双链表</p></li><li><p><code>PriorityBlockingQueue</code>线程安全的优先队列</p></li><li><p><code>SynchronousQueue</code>读写成对的队列</p></li><li><p><code>LinkedTransferQueue</code>基于链表的数据交换队列</p></li><li><p><code>DelayQueue</code>延时队列</p></li></ol><h1 id="一、ConcurrentHashMap"><a href="#一、ConcurrentHashMap" class="headerlink" title="一、ConcurrentHashMap"></a>一、ConcurrentHashMap</h1><p>最常见的并发容器之一，常作用于并发场景下的缓存。底层还是哈希表，但是<code>java8</code>中有了优化。</p><ol><li><code>java7</code>采用分段锁，即数据被分成16个部分。每个部分一把锁，各部分之间不冲突。</li><li><code>java8</code>放弃了分段锁，采用<code>CAS</code>乐观锁。</li><li><code>java8</code>中增加了同哈希值组成的链表长度超过8之后会转换成红黑树</li></ol><h1 id="二、CopyOnWriteArrayList"><a href="#二、CopyOnWriteArrayList" class="headerlink" title="二、CopyOnWriteArrayList"></a>二、CopyOnWriteArrayList</h1><p>并发版的<code>ArrayList</code>, 底层结构还是数组。原理是增删改的操作会加锁，其中删改会创建新的数组并替换原来的。<br>适用于读多写少的情况，并且读没有加锁，所以可能读到脏数据。<br>读的效率高。</p><h1 id="三、CopyOnWriteArraySet"><a href="#三、CopyOnWriteArraySet" class="headerlink" title="三、CopyOnWriteArraySet"></a>三、CopyOnWriteArraySet</h1><p>并发版的<code>Set</code>, 内部使用<code>CopyOnWriteArrayList</code>实现的。每次<code>add</code>都会遍历内部数据，检查是否重复。不存在执行插入（加锁）<br>和<code>CopyOnWriteArrayList</code>注意点类似，多了一条数据量不能太大，否则遍历成本过高。</p><h1 id="四、ConcurrentLinkedQueue"><a href="#四、ConcurrentLinkedQueue" class="headerlink" title="四、ConcurrentLinkedQueue"></a>四、ConcurrentLinkedQueue</h1><p>基于链表实现的并发队列，不阻塞。使用乐观锁<code>CAS</code>保证现存的安全。内部是链表，理论上没有大小限制。</p><h1 id="五、ConcurrentLinkedDeque"><a href="#五、ConcurrentLinkedDeque" class="headerlink" title="五、ConcurrentLinkedDeque"></a>五、ConcurrentLinkedDeque</h1><p>基于双向链表的并发队列，可以分别对于首尾进行操作。可以先进先出也可以先进后出。</p><h1 id="六、ConcurrentSkipListMap"><a href="#六、ConcurrentSkipListMap" class="headerlink" title="六、ConcurrentSkipListMap"></a>六、ConcurrentSkipListMap</h1><p>基于跳表<code>SkipList</code>的并发<code>Map</code>, 跳表是用空间换时间的数据结构。<br>每一层都是上一层的一半数据，类似于二分查找的实现方式来增加搜索效率。</p><h1 id="七、ConcurrentSkipListSet"><a href="#七、ConcurrentSkipListSet" class="headerlink" title="七、ConcurrentSkipListSet"></a>七、ConcurrentSkipListSet</h1><p>基于跳表的并发<code>Set</code>, 使用<code>ConcurrentSkipListMap</code>实现的</p><h1 id="八、ArrayBlockingQueue"><a href="#八、ArrayBlockingQueue" class="headerlink" title="八、ArrayBlockingQueue"></a>八、ArrayBlockingQueue</h1><p>基于数组的阻塞队列，构造时需要指定大小。<br>添加元素时如果数组满了会阻塞，知道有位置可以放。（也可以设置返回或者超时等待）<br>通过锁<code>ReentrantLock</code>保证线程安全</p><h1 id="九、LinkedBlockingQueue"><a href="#九、LinkedBlockingQueue" class="headerlink" title="九、LinkedBlockingQueue"></a>九、LinkedBlockingQueue</h1><p>基于链表的阻塞队列，相比不阻塞<code>ConcurrentLinkedQueue</code>多了容量的现在。不设置默认<code>int</code>的最大值</p><h1 id="十、LinkedBlockingDeque"><a href="#十、LinkedBlockingDeque" class="headerlink" title="十、LinkedBlockingDeque"></a>十、LinkedBlockingDeque</h1><p>和<code>LinkedBlockingQueue</code>类似，底层是双链表</p><h1 id="十一、PriorityBlockingQueue"><a href="#十一、PriorityBlockingQueue" class="headerlink" title="十一、PriorityBlockingQueue"></a>十一、PriorityBlockingQueue</h1><p>线程安全的优先队列，构造的时候需要传入一个比较器。内部会根据元素的优先级排序。读取的时候会根据优先级从高到低读取。<br>优先级低的可能会因为一直有更高级的元素而无法被读取。</p><h1 id="十二、SynchronousQueue"><a href="#十二、SynchronousQueue" class="headerlink" title="十二、SynchronousQueue"></a>十二、SynchronousQueue</h1><p>数据同步交换队列，内部只能存一个元素。每次插入操作必须要取才能再次插入。<br>任何一个对<code>SynchronousQueue</code>写需要等到一个对<code>SynchronousQueue</code>的读操作，反之亦然</p><h1 id="十三、LinkedTransferQueue"><a href="#十三、LinkedTransferQueue" class="headerlink" title="十三、LinkedTransferQueue"></a>十三、LinkedTransferQueue</h1><p>基于链表的交换队列，比<code>SynchronousQueue</code>更强大。<br>实现了<code>TransferQueue</code>接口，通过<code>transfer</code>方法放入元素时如果有线程在阻塞去元素，就会把元素直接给等待队列。如果没有人等待，则放到队列尾部，并阻塞直到有人读取。</p><h1 id="十四、DelayQueue"><a href="#十四、DelayQueue" class="headerlink" title="十四、DelayQueue"></a>十四、DelayQueue</h1><p>可以使放入的元素在指定延时之后才被消费者取出，元素需要实现<code>Delayed</code>接口</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发工具类</title>
      <link href="/2022/03/20/%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/03/20/%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：755,阅读全文大约需要3分钟</p><h1 id="一、Fork-Join"><a href="#一、Fork-Join" class="headerlink" title="一、Fork/Join"></a>一、Fork/Join</h1><h2 id="1-1分治思想"><a href="#1-1分治思想" class="headerlink" title="1.1分治思想"></a>1.1分治思想</h2><ul><li>体现了分而治之的算法思想</li><li>将大任务分成若干规模小的子任务</li><li>规模为<code>N</code>的问题，<code>N&lt;阈值</code>直接解决。<code>N&gt;阈值</code>分解成若干小规模问题。子问题见互相对立，且与原问题形式相同。子问题的解合并就是原问题的解。</li><li>动态规划和分治的不同在于动态规划的子问题间没有联系。</li></ul><h2 id="1-2-fork-join"><a href="#1-2-fork-join" class="headerlink" title="1.2 fork/join"></a>1.2 fork/join</h2><ul><li><code>Fork</code>将大问题分成小问题</li><li><code>Join</code>小问题的解合并成大问题的解</li><li>工作窃取，线程执行完自己任务队列的任务后会从其他任务队列最后面取任务执行。节约资源</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ForkJoinPool pool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line"><span class="comment">// 自己定义的任务</span></span><br><span class="line">MyTask myTask = <span class="keyword">new</span> ForkJoinTask(src, <span class="number">0</span>, src.length - <span class="number">1</span>);</span><br><span class="line">Pool.invoke(myTask);<span class="comment">// 主线程阻塞</span></span><br><span class="line"><span class="comment">// pool.execute(myTask);// 异步执行主线程不阻塞</span></span><br><span class="line">Result = myTask.join();<span class="comment">//阻塞等待结果</span></span><br></pre></td></tr></table></figure><p>自定义任务需要继承于<code>RecuriveTask/RecursiveAction/ForkJoinTask</code>，<code>ForkJoinTask</code>是父级类，一般用另外两个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// &lt;&gt;里为返回值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SumTask</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> THRESHOLD = <span class="number">10</span>; <span class="comment">// 子任务的最大数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] src; <span class="comment">// 表示要处理的数组</span></span><br><span class="line">    <span class="keyword">private</span> fromIndex; <span class="comment">//开始的下标</span></span><br><span class="line">    <span class="keyword">private</span> toIndex; <span class="comment">// 结束的下标</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SumTask</span><span class="params">(<span class="keyword">int</span>[] src, <span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.src = src;</span><br><span class="line">        <span class="keyword">this</span>.fromIndex = fromIndex;</span><br><span class="line">        <span class="keyword">this</span>.toIndex = toIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(toIndex - fromIndex &lt; THRESHOLD) &#123;</span><br><span class="line">            <span class="comment">// 小于子任务最大数量，直接计算返回</span></span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = fromIndex; i &lt;= toIndex; i++) &#123;</span><br><span class="line">                count = count + src[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (formIndex + toIndex) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// 拆分成两个任务，并执行，返回两个任务执行结果的和</span></span><br><span class="line">            SumTask left = <span class="keyword">new</span> SumTask(src, fromIndex, mid);</span><br><span class="line">            SumTask right = <span class="keyword">new</span> SumTask(src, mid + <span class="number">1</span>, toIndex);</span><br><span class="line">            invokeAll(left, right);</span><br><span class="line">            <span class="keyword">return</span> left.join + right.join();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、CountDownlatch"><a href="#二、CountDownlatch" class="headerlink" title="二、CountDownlatch"></a>二、CountDownlatch</h1><ul><li>一个线程等待其他线程工作完成之后执行，加强版的<code>join</code></li><li><code>CountDownlatch(n)</code>初始化<code>n</code>个标记</li><li><code>await()</code>等待标记数量为0</li><li><code>countdown()</code>标记数量<code>-1</code></li></ul><h1 id="三、CyclicBarrier"><a href="#三、CyclicBarrier" class="headerlink" title="三、CyclicBarrier"></a>三、CyclicBarrier</h1><ul><li>一组线程达到某个屏障，阻塞。直到一组最后一个到达屏障，开放。</li><li><code>CyclicBarrier(n)</code>总共几个线程</li><li><code>await()</code>等待所有的线程都到达<code>await()</code>位置</li><li>等于<code>CountDownlatch</code>每个线程自动<code>countdown()</code></li></ul><h1 id="四、Semaphore"><a href="#四、Semaphore" class="headerlink" title="四、Semaphore"></a>四、Semaphore</h1><ul><li>控制同时访问某个特定资源的数量，常用于流量控制</li><li><code>new Semaphore(n)</code>初始化n个令牌，<code>release()</code>可累加超过初始的数</li><li><code>acquire()</code>令牌<code>-1</code></li><li><code>release()</code>令牌<code>+1</code></li></ul><h1 id="五、Exchange"><a href="#五、Exchange" class="headerlink" title="五、Exchange"></a>五、Exchange</h1><ul><li>两个线程之间的数据交换</li><li><code>exchange(Object)</code>两个线程都调用此方法，线程会阻塞在此位置。直到两个线程都到这个位置，会进行一次数据交换。</li><li>只能适用于两个线程</li></ul><h1 id="六、Callable和Future"><a href="#六、Callable和Future" class="headerlink" title="六、Callable和Future"></a>六、Callable<V>和Future<V></h1><ul><li><code>Callable</code>可以返回值和抛出异常，线程的业务内容</li><li><code>FutureTask</code>将<code>Callable</code>包装成<code>Runnable</code></li></ul><h2 id="6-1future接口"><a href="#6-1future接口" class="headerlink" title="6.1future接口"></a>6.1future接口</h2><ul><li><code>isDone</code>是否结束</li><li><code>isCanncelled</code>任务完成前被取消，返回<code>true</code></li><li><code>cancel(true)</code>中断并运行任务，成功返回<code>true</code>。<code>cancel(false)</code>不会中断。已结束返回<code>false</code></li><li><code>get()</code>阻塞等待结果</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2022/03/20/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2022/03/20/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：844,阅读全文大约需要3分钟</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>并查集是一种管理<strong>元素分组</strong>的数据结构，可以管理一系列<strong>不相交的集合</strong>。<br>并查集支持两种元素操作</p><ol><li>合并<code>Union</code>, 将两个集合并为一个集合</li><li>查询<code>Find</code>, 查询两个元素是否在同一个集合中</li></ol><p>并查集的原理就是选取一个元素作为整个集合的父节点（代表节点），所以如果两个元素一直向上查找父节点，最后的根节点一样，则这两个元素在同一个集合中。合并的原理也一样，将其中一个元素集合的父节点设置为另一个元素集合的父节点，这样两个元素所在的集合就有共同的父节点。</p><h1 id="移除最多同行或同列的石头"><a href="#移除最多同行或同列的石头" class="headerlink" title="移除最多同行或同列的石头"></a>移除最多同行或同列的石头</h1><p><code>leetcode</code>第947题</p><p>题目：<br><code>n</code> 块石头放置在二维平面中的一些整数坐标点上。每个坐标点上最多只能有一块石头。<br>如果一块石头的 同行或者同列 上有其他石头存在，那么就可以移除这块石头。<br>给你一个长度为<code>n</code>的数组<code>stones</code>，其中<code>stones[i] = [xi, yi]</code>表示第<code>i</code>块石头的位置，返回 可以移除的石子 的最大数量。</p><p>思路：<br>只要同行或同列里存在其他石子，则当前的石子就可以被移除<br>可以把同行或同列有相交的石子连起来，组成一个集合<br>则棋盘上会有若干集合，每个集合都可以按顺序移除石子，直到只剩一个<br>所以，有多少个这种集合，最少就能剩下几个石子<br>用石子总数减去集合数，就是最多移除的石子数<br>查找集合就可以使用并查集，将相交的石子所在的集合合并，最后查找有几个并查集就可以了</p><p>解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeStones</span><span class="params">(<span class="keyword">int</span>[][] stones)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 父节点集合，代表每个元素的父节点</span></span><br><span class="line">    <span class="keyword">int</span>[] fathers = <span class="keyword">new</span> <span class="keyword">int</span>[stones.length];</span><br><span class="line">    <span class="comment">// 初始化集合，设置每个元素为一个单独的集合，即父节点是自己</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fathers.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 父节点是自己</span></span><br><span class="line">        fathers[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 循环所有石子，如果在一行或者一列，则并集</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stones.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; stones.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stones[i][<span class="number">0</span>] == stones[j][<span class="number">0</span>] || stones[i][<span class="number">1</span>] == stones[j][<span class="number">1</span>]) &#123;</span><br><span class="line">                join(fathers, i, j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查找一下fathers里每个元素的父级，最后统计一下有几个集合。</span></span><br><span class="line">    <span class="comment">// 总数-集合数就是结果</span></span><br><span class="line">    <span class="keyword">return</span> stones.length - (<span class="keyword">int</span>)Arrays.stream(fathers).map(val -&gt; findFather(fathers, val)).distinct().count();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 合并操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fathers 父节点集合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">join</span><span class="params">(<span class="keyword">int</span>[] fathers, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果i和j所在的集合的父节点不一样，则代表是两个集合，需要合并</span></span><br><span class="line">    <span class="keyword">if</span> (findFather(fathers, i) != findFather(fathers, j)) &#123;</span><br><span class="line">        <span class="comment">// 其中一个集合的父节点设置父节点为另一个集合的父节点</span></span><br><span class="line">        fathers[findFather(fathers, j)] = findFather(fathers, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找父节点</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fathers</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> x</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">findFather</span><span class="params">(<span class="keyword">int</span>[] fathers, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果父节点不是集合的根节点（集合的父节点）</span></span><br><span class="line">    <span class="keyword">while</span> (fathers[x] != x) &#123;</span><br><span class="line">        <span class="comment">// 设置当前节点的父节点为父节点的父节点，减少下次查询的次数。也可以在查找到根节点后将路径上所有的节点父节点都设置成集合根节点</span></span><br><span class="line">        fathers[x] = fathers[fathers[x]];</span><br><span class="line">        <span class="comment">// 向上查找</span></span><br><span class="line">        x = fathers[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证, 写了一个将<code>leetcode</code>测试用例数组转换成<code>java</code>数组的小工具</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    String data = <span class="string">"[[0,1],[1,0],[1,1]]"</span>;</span><br><span class="line">    data = delChar(data);</span><br><span class="line">    <span class="keyword">final</span> String[] dataSplit = data.split(<span class="string">",\\["</span>);</span><br><span class="line">    <span class="keyword">int</span>[][] stones = <span class="keyword">new</span> <span class="keyword">int</span>[dataSplit.length][<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; stones.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span>[] one = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">        String oneData = dataSplit[i].replace(<span class="string">"["</span>, <span class="string">""</span>);</span><br><span class="line">        oneData = oneData.replace(<span class="string">"]"</span>, <span class="string">""</span>);</span><br><span class="line">        one[<span class="number">0</span>] = Integer.parseInt(StringUtils.split(oneData, <span class="string">","</span>)[<span class="number">0</span>]);</span><br><span class="line">        one[<span class="number">1</span>] = Integer.parseInt(StringUtils.split(oneData, <span class="string">","</span>)[<span class="number">1</span>]);</span><br><span class="line">        stones[i] = one;</span><br><span class="line">    &#125;</span><br><span class="line">    Solution solution = <span class="keyword">new</span> Solution();</span><br><span class="line">    System.out.println(solution.removeStones(stones));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">delChar</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> StringUtils.substring(data, <span class="number">1</span>, data.length() - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启druid管理界面</title>
      <link href="/2022/03/20/%E5%BC%80%E5%90%AFdruid%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2/"/>
      <url>/2022/03/20/%E5%BC%80%E5%90%AFdruid%E7%AE%A1%E7%90%86%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>文章字数：28,阅读全文大约需要1分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># druid 状态监控</span><br><span class="line">spring.datasource.druid.filter.stat.enabled&#x3D;true</span><br><span class="line">spring.datasource.druid.filter.stat.db-type&#x3D;postgresql</span><br><span class="line"># druid 监控过滤器</span><br><span class="line">spring.datasource.druid.web-stat-filter.enabled&#x3D;true</span><br><span class="line">spring.datasource.druid.web-stat-filter.exclusions&#x3D;&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,&#x2F;druid&#x2F;*&quot;</span><br><span class="line"># druid 监控页面</span><br><span class="line">spring.datasource.druid.stat-view-servlet.enabled&#x3D;true</span><br><span class="line">spring.datasource.druid.stat-view-servlet.url-pattern&#x3D;&#x2F;druid&#x2F;*</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>强引用、软引用、弱引用、虚引用</title>
      <link href="/2022/03/20/%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E5%BC%95%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E8%99%9A%E5%BC%95%E7%94%A8/"/>
      <url>/2022/03/20/%E5%BC%BA%E5%BC%95%E7%94%A8%E3%80%81%E8%BD%AF%E5%BC%95%E7%94%A8%E3%80%81%E5%BC%B1%E5%BC%95%E7%94%A8%E3%80%81%E8%99%9A%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：540,阅读全文大约需要2分钟</p><h1 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h1><ol><li>平常使用的<code>Object a = new Object()</code>就是强引用</li><li><code>JVM</code>内存不足时宁愿抛出<code>OOM</code>也不会随意回收存活的对象</li></ol><h1 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h1><ol><li>通过<code>SoftReference</code>实现</li><li>只有内存不足时才会试图回收软引用指向的对象</li><li>如果软引用指向的对象被回收了，<code>SoftReference</code>对象就会被加入到<code>ReferenceQueue</code>队列中。使用<code>poll()</code>方法可以检查对象是否被回收，此方法返回队列前面的一个<code>SoftReference</code>对象</li><li>可以做缓存<h1 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h1></li><li>通过<code>WeakReference</code>实现</li><li><code>GC</code>检查到只有弱引用指向的对象就会清除此对象（即不能维护调用链的存活判断）</li><li>同样可以和一个引用队列<code>ReferenceQueue</code>关联</li><li>应用：<code>ThreadLocal</code>的<code>key</code>就是弱引用，不会因为<code>key</code>有依赖导致对象不被<code>GC</code><h1 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h1></li><li>也叫幻想引用</li><li>使用<code>PhantomReference</code>实现</li><li>无法通过虚引用操作对象</li><li>仅能通过关联的<code>ReferenceQueue</code>知道对象是否被回收</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务业务监控elk和efk</title>
      <link href="/2022/03/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%9A%E5%8A%A1%E7%9B%91%E6%8E%A7elk%E5%92%8Cefk/"/>
      <url>/2022/03/20/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%B8%9A%E5%8A%A1%E7%9B%91%E6%8E%A7elk%E5%92%8Cefk/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1443,阅读全文大约需要5分钟</p><blockquote><p>在业务中收集需要的数据，并且进行处理和展示的架构。业务中收集数据的工作被称为<code>埋点</code>，一般使用日志的方式进行。</p></blockquote><h1 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h1><ol><li><p>微服务日志埋点：使用日志输出框架，例如<code>Logback</code></p></li><li><p>日志收集：收集<code>Logback</code>输出的日志，使用<code>FileBeat</code></p></li></ol><p>2.1 消息队列传输：这里可以使用消息队列减轻日志解析压力</p><ol start="3"><li><p>数据解析，落盘：将<code>Logback</code>传来的数据格式化成可用的格式如<code>json</code>，然后生成<code>ElasticSearch</code>分片格式并发送（落盘）</p></li><li><p>数据使用：<code>ElasticSearch</code>收到后就可以提供查询服务，供使用者获取信息</p></li><li><p>数据展示：使用<code>Kibana</code>展示数据</p></li></ol><h1 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h1><h2 id="数据生成"><a href="#数据生成" class="headerlink" title="数据生成"></a>数据生成</h2><ol><li><p>数据埋点：数据埋点就是将需要的数据在业务中抽离出来，一般使用日志框架就可以了<code>Logback</code>。也可以自己输出成文件。</p></li><li><p>格式：输出的格式需要统一，例如</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &#123;时间&#125;|&#123;来源&#125;|&#123;对象id&#125;|&#123;类型&#125;|&#123;对象属性(以&amp;分割)&#125;</span><br><span class="line">2019-11-07 10:32:01|api-gateway|1|request-statistics|ip&#x3D;171.221.203.106&amp;browser&#x3D;CHROME&amp;operatingSystem&#x3D;WINDOWS_10</span><br></pre></td></tr></table></figure><ol start="3"><li>埋点输出位置：需要和日志文件分开，使用单独的目录。<code>Logback</code>的配置就可以实现</li></ol><h2 id="数据收集"><a href="#数据收集" class="headerlink" title="数据收集"></a>数据收集</h2><ol><li>日志收集中间件有很多，<code>FileBeat</code>、<code>Flume</code>、<code>Fluentd</code>、<code>rsyslog</code>等</li><li>每台服务器需要部署一个收集中间件，即使一个服务器部署了多个微服务也可以只部署一个收集中间件。</li><li>收集到的信息可以通过消息队列的方式发送给下一个处理环节，使用消息队列可以增加并发性能，削峰填谷，减轻压力。也可以同时发送给多个系统，使数据有多个用途。</li></ol><h2 id="数据解析"><a href="#数据解析" class="headerlink" title="数据解析"></a>数据解析</h2><ol><li>使用<code>Logstash</code>的<code>grok</code>表达式可以解析日志数据，并且格式化。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-11-07 10:32:01|api-gateway|1|request-statistics|ip&#x3D;171.221.203.106&amp;browser&#x3D;CHROME&amp;operatingSystem&#x3D;WINDOWS_10</span><br></pre></td></tr></table></figure><p>格式化后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">timestamp: &#39;2019-11-07 10:32:01&#39;,</span><br><span class="line">appName: &#39;api-gateway&#39;,</span><br><span class="line">resouceid: &#39;1&#39;,</span><br><span class="line">type: &#39;request-statistics&#39;,</span><br><span class="line">ip: &#39;171.221.203.106&#39;,</span><br><span class="line">browser: &#39;CHROME&#39;,</span><br><span class="line">operatingSystem: &#39;WINDOWS_10&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>Logstash</code>还能完成数据落盘功能，自动创建<code>Elasticsearch</code>索引，并根据天为单位分片<br>可以通过索引模板来指定每个字段的类型和分词器等属性</li></ol><h2 id="数据使用"><a href="#数据使用" class="headerlink" title="数据使用"></a>数据使用</h2><p>除了自己写查询并使用外还可以使用<code>kibana</code>可视化<code>Elasticsearch</code>中的日志</p><h1 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h1><p>指的是<code>Elasticsearch</code> + <code>Logstash</code> + <code>kibana</code>组成的日志处理系统</p><h1 id="EFK"><a href="#EFK" class="headerlink" title="EFK"></a>EFK</h1><p>将<code>ELK</code>中的<code>Logstash</code>替换成轻量级的<code>filebeat</code>,牺牲了一定的数据格式化能力，但是性能提升很大</p><h1 id="安装EFK"><a href="#安装EFK" class="headerlink" title="安装EFK"></a>安装EFK</h1><ul><li>安装<code>Elasticsearch</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建并进入文件夹</span></span><br><span class="line">mkdir -p /opt/software &amp;&amp; cd /opt/software</span><br><span class="line"><span class="meta">#</span><span class="bash"> 拉取软件包</span></span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.3.2-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压 z:使用gzip x:解压，c是压测 v:显示正在处理的文件名 f:指定文件（必须在最后面，因为后面需要跟文件名）</span></span><br><span class="line">tar -zxvf elasticsearch-7.3.2-linux-x86_64.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 移动到指定文件夹</span></span><br><span class="line">mv elasticsearch-7.3.2 /opt/elasticsearch</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加一个用户[elasticsearch]并绑定用户根目录[-d /opt/elasticsearch] 设置用户为不能用来登录的[-s /sbin/nologin], 如果需要登录，可以不加[-s ...]并且设置[-p <span class="built_in">pwd</span>]设置登录密码</span></span><br><span class="line">useradd elasticsearch -d /opt/elasticsearch -s /sbin/nologin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加两个文件夹的权限</span></span><br><span class="line">chown elasticsearch.elasticsearch /opt/elasticsearch -R</span><br><span class="line">chown elasticsearch.elasticsearch /opt/logs/elasticsearch -R</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置单个进程可拥有的虚拟内存数量，防止elasticsearch内存不够</span></span><br><span class="line">echo "vm.max_map_count = 655350" &gt;&gt; /etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 刷新系统配置</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 集群名字</span></span><br><span class="line"><span class="comment">#cluster.name: my-application</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点名字</span></span><br><span class="line"><span class="comment">#node.name: 192.168.1.31</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志位置</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/opt/logs/elasticsearch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本节点访问IP</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.31</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本节点访问</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点运输端口</span></span><br><span class="line"><span class="attr">transport.port:</span> <span class="number">9300</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 集群中其他主机的列表</span></span><br><span class="line"><span class="comment">#discovery.seed_hosts: ["192.168.1.31", "192.168.1.32", "192.168.1.33"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首次启动全新的Elasticsearch集群时，在第一次选举中便对其票数进行计数的master节点的集合</span></span><br><span class="line"><span class="comment">#cluster.initial_master_nodes: ["192.168.1.31", "192.168.1.32", "192.168.1.33"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用跨域资源共享</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 只要有2台数据或主节点已加入集群，就可以恢复</span></span><br><span class="line"><span class="comment">#gateway.recover_after_nodes: 2</span></span><br></pre></td></tr></table></figure><ul><li>安装<code>filebeat</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/software &amp;&amp; cd /opt/software</span><br><span class="line">wget https://artifacts.elastic.co/downloads/beats/filebeat/filebeat-7.3.2-linux-x86_64.tar.gz</span><br><span class="line">mkdir -p /opt/logs/filebeat/</span><br><span class="line">tar -zxvf filebeat-7.3.2-linux-x86_64.tar.gz</span><br><span class="line">mv filebeat-7.3.2-linux-x86_64 /opt/filebeat</span><br><span class="line"><span class="meta">#</span><span class="bash"> 不另外创建用户，因为filebeat需要监听elasticsearch的日志文件</span></span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 文件输入</span></span><br><span class="line"><span class="attr">filebeat.inputs:</span></span><br><span class="line">  <span class="comment"># 文件输入类型</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">log</span></span><br><span class="line">    <span class="comment"># 开启加载</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 文件位置</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/log/nginx/access.log</span></span><br><span class="line">    <span class="comment"># 自定义参数</span></span><br><span class="line">    <span class="attr">fields:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">nginx_access</span>  <span class="comment"># 类型是nginx_access,和上面fields.type是一致的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出至elasticsearch</span></span><br><span class="line"><span class="attr">output.elasticsearch:</span></span><br><span class="line">  <span class="comment"># elasticsearch集群</span></span><br><span class="line">  <span class="attr">hosts:</span> <span class="string">["http://192.168.1.31:9200",</span></span><br><span class="line">          <span class="string">"http://192.168.1.32:9200"</span><span class="string">,</span></span><br><span class="line">          <span class="string">"http://192.168.1.33:9200"</span><span class="string">]</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 索引配置</span></span><br><span class="line">  <span class="attr">indices:</span></span><br><span class="line">    <span class="comment"># 索引名</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">index:</span> <span class="string">"nginx_access_<span class="template-variable">%&#123;+yyy.MM&#125;</span>"</span></span><br><span class="line">      <span class="comment"># 当类型是nginx_access时使用此索引</span></span><br><span class="line">      <span class="attr">when.equals:</span></span><br><span class="line">        <span class="attr">fields.type:</span> <span class="string">"nginx_access"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭自带模板</span></span><br><span class="line"><span class="attr">setup.template.enabled:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 开启日志记录</span></span><br><span class="line"><span class="attr">logging.to_files:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 日志等级</span></span><br><span class="line"><span class="attr">logging.level:</span> <span class="string">info</span></span><br><span class="line"><span class="comment"># 日志文件</span></span><br><span class="line"><span class="attr">logging.files:</span></span><br><span class="line">  <span class="comment"># 日志位置</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/opt/logs/filebeat/</span></span><br><span class="line">  <span class="comment"># 日志名字</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">filebeat</span></span><br><span class="line">  <span class="comment"># 日志轮转期限，必须要2~1024</span></span><br><span class="line">  <span class="attr">keepfiles:</span> <span class="number">7</span></span><br><span class="line">  <span class="comment"># 日志轮转权限</span></span><br><span class="line">  <span class="attr">permissions:</span> <span class="number">0600</span></span><br></pre></td></tr></table></figure><ul><li>安装<code>kibana</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/software &amp;&amp; cd /opt/software</span><br><span class="line">wget https://artifacts.elastic.co/downloads/kibana/kibana-7.3.2-linux-x86_64.tar.gz</span><br><span class="line">tar -zxvf kibana-7.3.2-linux-x86_64.tar.gz</span><br><span class="line">mv kibana-7.3.2-linux-x86_64 /opt/kibana</span><br><span class="line">useradd kibana -d /opt/kibana -s /sbin/nologin</span><br><span class="line">chown kibana.kibana /opt/kibana -R</span><br></pre></td></tr></table></figure><ul><li>配置</li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本节点访问端口</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本节点IP</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">"192.168.1.21"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本节点名字</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">"192.168.1.21"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># elasticsearch集群IP</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">["http://192.168.1.31:9200",</span></span><br><span class="line">                      <span class="string">"http://192.168.1.32:9200"</span><span class="string">,</span></span><br><span class="line">                      <span class="string">"http://192.168.1.33:9200"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><ul><li>启动所有服务</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> elasticsearch启动（3台es均启动）</span></span><br><span class="line">sudo -u elasticsearch /opt/elasticsearch/bin/elasticsearch</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> filebeat启动</span></span><br><span class="line">/opt/filebeat/filebeat -e -c /opt/filebeat/filebeat.yml -d "publish"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> kibana启动</span></span><br><span class="line">sudo -u kibana /opt/kibana/bin/kibana -c /opt/kibana/config/kibana.yml</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> 架构 </tag>
            
            <tag> SpringCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2022/03/20/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/20/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：916,阅读全文大约需要3分钟</p><blockquote><p>快速排序的思想就是把第一个数作为基数，比基数小的放到前面，比基数大或等于的放到基数后面。然后再对基数以前和基数以后的部分分别进行前面的操作，直到基数前面和基数后面都只有一个数时（左侧游标和右侧游标相遇）</p></blockquote><p>时间复杂度<code>O(N*logN)</code></p><h1 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h1><p>调用：</p><ol><li>写一个用于整理区域的方法</li><li>递归调用，整理所有的部分（整理当前，的到基数位置，递归整理基数之前的区域，递归整理基数之后的区域）</li></ol><p>整理方法：</p><ol><li>选第一位为基数</li><li>右游标从前找比基数小的数，放到左游标处(左右游标的位置上都没有值，因为一旦选中某个元素，就意味着这个元素不符合要求，需要放到另一边)</li><li>左游标向后找比基数大的数，放到右游标的位置。</li><li>循环2，3操作，知道左右游标相遇，这个位置就是基数应该放在的地方</li><li>返回基数的位置，方便上面的递归调用时判断基数前后区域</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">midTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">arrayTheList</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="comment">//选中第一位作为基数</span></span><br><span class="line">        <span class="keyword">int</span> x = arr[l];</span><br><span class="line">        <span class="comment">//左和右的游标遇到时结束</span></span><br><span class="line">        <span class="keyword">while</span> (l&lt;r)&#123;</span><br><span class="line">            <span class="comment">//右游标移动到小于基数的值上</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;arr[r]&gt;=x)&#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//放到左边游标的位置上（相当于从右边找不符合要求的数，全部放到左边）</span></span><br><span class="line">            <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">                arr[l]=arr[r];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//左边找不符合要求的数，放到右边</span></span><br><span class="line">            <span class="keyword">while</span>(l&lt;r&amp;&amp;arr[l]&lt;=x)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">                arr[r]=arr[l];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//当左边游标和右边游标相同时这个位置填充基数</span></span><br><span class="line">        arr[l]=x;</span><br><span class="line">        <span class="comment">//返回基数位置</span></span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span>[]arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="comment">//递归的结束条件</span></span><br><span class="line">        <span class="keyword">if</span>(l&lt;r)&#123;</span><br><span class="line">            <span class="comment">//1.整理当前区域，返回基数位置</span></span><br><span class="line">            <span class="keyword">int</span> i = arrayTheList(arr,l,r);</span><br><span class="line">            <span class="comment">//2.整理基数左边的区域</span></span><br><span class="line">            quick_sort(arr,l,i-<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//3.整理基数右边的区域</span></span><br><span class="line">            quick_sort(arr,i+<span class="number">1</span>,r);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr=&#123;<span class="number">21</span>,<span class="number">35</span>,<span class="number">2</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">98</span>,<span class="number">4</span>,<span class="number">95</span>,<span class="number">1</span>,<span class="number">60</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">14</span>,<span class="number">0</span>,<span class="number">123</span>,<span class="number">3</span>,<span class="number">654</span>,<span class="number">484</span>,<span class="number">34</span>,<span class="number">5235</span>,<span class="number">68</span>,<span class="number">455</span>,<span class="number">834</span>,<span class="number">568</span>,<span class="number">3458</span>,<span class="number">56</span>,<span class="number">31</span>,<span class="number">69</span>,<span class="number">55</span>,<span class="number">349</span>,<span class="number">582</span>,<span class="number">1</span>,<span class="number">97</span>,<span class="number">35</span>,<span class="number">95</span>,<span class="number">84</span>,<span class="number">8492</span>,<span class="number">2</span>,<span class="number">546</span>,<span class="number">475</span>,<span class="number">354</span>&#125;;</span><br><span class="line">        midTest t = <span class="keyword">new</span> midTest();</span><br><span class="line">        <span class="comment">//调用排序</span></span><br><span class="line">        t.quick_sort(arr,<span class="number">0</span>,arr.length-<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">            System.out.print(i);</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span>(index!=arr.length)&#123;</span><br><span class="line">                System.out.print(<span class="string">","</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#输出结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,0,1,1,2,2,2,2,2,2,3,4,4,4,5,6,7,8,14,21,31,34,35,35,55,56,60,68,69,84,95,95,97,98,123,349,354,455,475,484,546,568,582,654,834,3458,5235,8492</span><br></pre></td></tr></table></figure><h1 id="基于栈的快速排序"><a href="#基于栈的快速排序" class="headerlink" title="基于栈的快速排序"></a>基于栈的快速排序</h1><p>上面的使用的是递归，递归如果深度过深可能会造成<code>jvm</code>栈空间不足。所以修改了一下调用的方法，改为使用先进后出的数据结构<code>stack</code>,和递归效果一样，但是每次的函数执行完就退出，不会像递归那样不关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] values = &#123;<span class="number">1</span>, <span class="number">23</span>, <span class="number">51</span>, <span class="number">24</span>, <span class="number">124</span>, <span class="number">15</span>, <span class="number">124</span>, <span class="number">15123</span>, <span class="number">114</span>, <span class="number">4</span>, <span class="number">564</span>, <span class="number">42</span>, <span class="number">5</span>, <span class="number">434</span>, <span class="number">3434</span>, <span class="number">344</span>, <span class="number">444</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">90</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">8</span>,</span><br><span class="line">            <span class="number">54</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">65</span>, <span class="number">43</span>, <span class="number">34</span>, <span class="number">5</span>, <span class="number">743</span>, <span class="number">24</span>, <span class="number">514</span>, <span class="number">5</span>, <span class="number">2</span>&#125;;</span><br><span class="line">        sortArray(values, <span class="number">0</span>, values.length - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : values) &#123;</span><br><span class="line">            System.out.print(v + <span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用区域排序，并把基准点左右区域的排序任务入栈</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dealArrayAndAddToStack</span><span class="params">(<span class="keyword">int</span>[] args, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> baseIndex = sort(args, l, r);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (l &lt; baseIndex - <span class="number">1</span>) &#123;</span><br><span class="line">            Node leftNode = <span class="keyword">new</span> Node(l, baseIndex - <span class="number">1</span>);</span><br><span class="line">            stack.push(leftNode);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (baseIndex + <span class="number">1</span> &lt; r) &#123;</span><br><span class="line">            Node rightNode = <span class="keyword">new</span> Node(baseIndex + <span class="number">1</span>, r);</span><br><span class="line">            stack.push(rightNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序调度</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sortArray</span><span class="params">(<span class="keyword">int</span>[] args, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        dealArrayAndAddToStack(args, l, r);</span><br><span class="line">        <span class="comment">// 任务出栈</span></span><br><span class="line">        <span class="keyword">while</span> (!stack.empty()) &#123;</span><br><span class="line">            Node currentNode = stack.pop();</span><br><span class="line">            dealArrayAndAddToStack(args, currentNode.left, currentNode.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 区域排序</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> l</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> r</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] args, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> base = args[l];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; args[r] &gt;= base) &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                args[l] = args[r];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; args[l] &lt;= base) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                args[r] = args[l];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        args[l] = base;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> left;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> right;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.left = left;</span><br><span class="line">            <span class="keyword">this</span>.right = right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="简易版"><a href="#简易版" class="headerlink" title="简易版"></a>简易版</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> lIndex, <span class="keyword">int</span> rIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (lIndex &lt; rIndex) &#123;</span><br><span class="line">        <span class="keyword">int</span> l = lIndex, r = rIndex, x = nums[lIndex];</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[r] &gt; x) &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                nums[l] = nums[r];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r &amp;&amp; nums[l] &lt; x) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l &lt; r) &#123;</span><br><span class="line">                nums[r] = nums[l];</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[l] = x;</span><br><span class="line">        sort(nums, lIndex, l - <span class="number">1</span>);</span><br><span class="line">        sort(nums, l + <span class="number">1</span>, rIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>慢查询</title>
      <link href="/2022/03/20/%E6%85%A2%E6%9F%A5%E8%AF%A2/"/>
      <url>/2022/03/20/%E6%85%A2%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1166,阅读全文大约需要4分钟</p><h1 id="定义及作用"><a href="#定义及作用" class="headerlink" title="定义及作用"></a>定义及作用</h1><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ol><li>位置</li></ol><ul><li><code>windows</code>下配置文件为<code>my.ini</code></li><li><code>linux</code>下配置文件位置为<code>my.cnf</code></li></ul><ol start="2"><li>开启配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slow_query_log &#x3D; 1 # 0关闭 1开启</span><br><span class="line">slow_query_log_file &#x3D; slow.log # 慢文件存放位置(安装目录date文件夹下)</span><br><span class="line">long_query_time &#x3D; 5 # 查询多久以上的算是慢</span><br></pre></td></tr></table></figure></li></ol><h1 id="排查"><a href="#排查" class="headerlink" title="排查"></a>排查</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Query_time: xxx # 执行时间</span><br><span class="line">Lock_time: xxx # 锁定时间</span><br></pre></td></tr></table></figure><h1 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h1><ul><li><code>mysqldumpslow</code><br><code>MySQL</code>自带的慢查询文件解析工具，自带分析。位于<code>bin</code>下。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldumpslow -s at -t 5 &#x2F;usr&#x2F;local&#x2F;data&#x2F;slow.log</span><br><span class="line">-s at # 算出平均时间</span><br><span class="line">-t 5 # top5</span><br></pre></td></tr></table></figure></li></ul><h1 id="常见优化"><a href="#常见优化" class="headerlink" title="常见优化"></a>常见优化</h1><ol><li>系统层面入手(排查sql导致cpu占用过高)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top -H # 查出性能占用最大的pid</span><br></pre></td></tr></table></figure></li><li>mysql参数优化<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 独立表空间</span><br><span class="line">Using filesort</span><br><span class="line"></span><br><span class="line"># 设置缓存空间(连表之类的操作使用的缓存空间)</span><br><span class="line">set sort_buffer_size &#x3D; 256*1024*1024</span><br></pre></td></tr></table></figure></li><li>sql优化</li></ol><ul><li>子查询变成关联查询</li></ul><ol start="4"><li>反范式设计优化</li></ol><ul><li>针对范式化设计而言</li><li>为了性能和读取效率考虑，适当对数据库设计范式进行违反</li><li>允许适当冗余，以空间换时间(减少连表)</li></ul><ol start="5"><li>索引优化</li></ol><ul><li><code>explain</code>查看索引使用情况</li><li>根据使用情况重写建立索引(创建时范围索引放最后)</li></ul><h1 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">explain sql</span><br></pre></td></tr></table></figure><ul><li><code>key</code> 是否使用了索引，使用了什么索引</li><li><code>key_len</code> 是否充分使用了索引</li></ul><p><code>varchar(50)</code>的索引计算</p><ol><li>字符类型 varchar +2  char+0</li><li>字符集 utf8(3) <strong>一个字符的长度</strong></li><li>本身长度 50 </li><li>是否null null(+ 1)    not null(+ 0)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">50 * 3</span><br><span class="line">varchar(50) * 一个字符3个字节 + 0(not null) + 2(varchar类型)</span><br></pre></td></tr></table></figure><p>可以通过索引长度计算出使用了几个索引</p><h1 id="Explain字段详解"><a href="#Explain字段详解" class="headerlink" title="Explain字段详解"></a>Explain字段详解</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from servers;</span><br><span class="line">+----+-------------+---------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">| id | select_type | table   | type | possible_keys | key  | key_len | ref  | rows | Extra |</span><br><span class="line">+----+-------------+---------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | servers | ALL  | NULL          | NULL | NULL    | NULL |    1 | NULL  |</span><br><span class="line">+----+-------------+---------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">row in set (0.03 sec)</span><br></pre></td></tr></table></figure><h2 id="1-id"><a href="#1-id" class="headerlink" title="1. id"></a>1. id</h2><ul><li>执行顺序的标识，id大的优先执行</li></ul><h2 id="2-select-type"><a href="#2-select-type" class="headerlink" title="2. select_type"></a>2. select_type</h2><ul><li><code>SIMPLE</code>简单的查询，不使用<code>UNION</code>或子查询等</li><li><code>PRIMARY</code>查询中包含任何复杂字部分，最外层查询会被标记为<code>PRIMARY</code></li><li><code>UNION</code>中的后一个语句标记为<code>UNION</code></li><li><code>DEPENDENT UNION</code>，<code>UNION</code>中的后一个语句，取决于外面的查询</li><li><code>UNION RESULT</code>是<code>UNION</code>语句的结果</li><li><code>SUBQUERY</code>子查询中的第一个<code>SELECT</code></li><li><code>DEPENDENT SUBQUERY</code>，子查询中的第一个<code>SELECT</code>，取决于外面的查询</li><li><code>DERIVED</code>派生表的<code>SELECT</code>，<code>FROM</code>子句的子查询</li><li><code>UNCACHEABLE SUBQUERY</code>一个子查询的结果不能被缓存，必须重新评估外链接的第一行</li></ul><h2 id="3-table"><a href="#3-table" class="headerlink" title="3. table"></a>3. table</h2><ul><li>这一行的数据是关于那张表的，可能是<code>tableNamex</code>，<code>x</code>代表执行的步骤</li></ul><h2 id="4-type"><a href="#4-type" class="headerlink" title="4. type"></a>4. type</h2><ul><li>表示查找到这一行的方式，性能从低到高</li></ul><ol><li><code>ALL</code>遍历全表找到匹配的行</li><li><code>index</code>遍历全部索引树找到匹配的行</li><li><code>range</code>只检索给定范围的行，使用一个索引来选择行</li><li><code>ref</code>表的连接匹配条件，即那些列或常量被用于查找索引上的值</li><li><code>eq_ref</code>类似<code>ref</code>区别在于是使用的所有是唯一索引，即多表中使用<code>primary key</code>或者<code>unique key</code>作为关联条件</li><li><code>const</code>、<code>system</code>，当<code>MySQL</code>对查询某部分进行优化，并转换成一个常量时，使用这些类型访问。例如主键置于<code>where</code>中，<code>MySQL</code>就能把改查询转换成一个常量，<code>system</code>是<code>const</code>的特例，当查询的表只有一行情况下是<code>system</code>。</li><li><code>NULL</code>执行时不用访问表或索引，例如从索引列选取最小值，可以直接通过索引查找完成。</li></ol><h2 id="5-possible-keys"><a href="#5-possible-keys" class="headerlink" title="5. possible_keys"></a>5. possible_keys</h2><ul><li>指出<code>MySQL</code>能使用那个索引在表中找到记录，查询涉及到的字段若存在索引，则索引会被列出，但不一定会被利用到。</li></ul><h2 id="6-key"><a href="#6-key" class="headerlink" title="6.key"></a>6.key</h2><ul><li><code>MySQL</code>决定使用的键</li></ul><h2 id="7-key-len"><a href="#7-key-len" class="headerlink" title="7. key_len"></a>7. key_len</h2><ul><li>表示索引中使用的字节数，可通过改列计算查询中使用的索引的长度。</li></ul><h2 id="8-ref"><a href="#8-ref" class="headerlink" title="8. ref"></a>8. ref</h2><ul><li>列与索引的比较，表示上述表的连接匹配条件，即那些列或常量被用于查找索引列的值</li></ul><h2 id="9-rows"><a href="#9-rows" class="headerlink" title="9. rows"></a>9. rows</h2><ul><li>估算出结果集行数，表示<code>MySQL</code>根据表统计信息及索引选用情况估算找到所需记录所需要读的行数</li></ul><h2 id="10-Extra"><a href="#10-Extra" class="headerlink" title="10. Extra"></a>10. Extra</h2><ul><li>包含<code>MySQL</code>解决查询的详细信息</li></ul><ol><li><code>Using where</code>，不用读取表中的所有信息，通过索引就能获取所需数据</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
            <tag> 调优 </tag>
            
            <tag> 执行计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>执行计划</title>
      <link href="/2022/03/20/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
      <url>/2022/03/20/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>文章字数：817,阅读全文大约需要3分钟</p><h1 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h1><ul><li>表示索引使用的字节数，可通过计算查询中使用的索引长度。不损失精度准确性情况下，越短越好</li><li>显示的是值为索引字段的最大可能长度，而不是实际长度，即根据表定义计算得出的</li></ul><h1 id="key-len字符型"><a href="#key-len字符型" class="headerlink" title="key_len字符型"></a>key_len字符型</h1><p>类型|大小|用法<br>CHAR|0-255|定长字符串<br>WARCHAR|0-65535|变长字符串</p><ul><li><code>CHAR UTF-8</code>一个字符大小为<code>3</code></li><li><code>CHAR UTF-8</code>如果允许为<code>null</code>长度<code>+1</code></li><li><code>VARCHAR UTF-8</code>在<code>CHAR</code>的基础上<code>+2</code>表示变长的大小</li></ul><h1 id="key-len数值型"><a href="#key-len数值型" class="headerlink" title="key_len数值型"></a>key_len数值型</h1><p>类型|大小|有符号范围<br>TINYINT|1|-128,127<br>SMALLINT|2|-3276,32767<br>MEDIUMINT|3|-8388608,8388707<br>INT/INTEGER|4|-2147483648,2147483647<br>BIGINT|8|<br>FLOAT|4|<br>DOUBLE|8|</p><h1 id="key-len日期"><a href="#key-len日期" class="headerlink" title="key_len日期"></a>key_len日期</h1><p>类型|大小<br>DATE|3<br>TIME|3<br>YEAR|1<br>DATETIME|8<br>TIMESTAMP|4</p><ul><li><code>datetime</code>在<code>5.6</code>中长度是<code>5</code>个字节</li><li><code>datetime</code>在<code>5.5</code>中长度是<code>8</code>个字节</li></ul><h1 id="key-len总结"><a href="#key-len总结" class="headerlink" title="key_len总结"></a>key_len总结</h1><ul><li>变长需要额外<code>2</code>个字节记录长度</li><li><code>null</code>需要<code>1</code>个字节的额外空间，索引最好不要<code>null</code></li><li>复合索引最左前缀的特性，key_len可以看复合索引是否全部使用</li></ul><h1 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h1><ul><li>显示索引的那一列被使用了，如果有可能，是一个常数。那些列或者常量被用于查找索引列上的值。 </li><li><code>const</code>表示使用了常量</li><li><code>db.table.id</code>那个数据库的那个表的那个字段使用了索引</li></ul><h1 id="rows"><a href="#rows" class="headerlink" title="rows"></a>rows</h1><ul><li>根据表信息统计和索引选用，估算找到信息大致所需读取的行</li></ul><h1 id="Extra"><a href="#Extra" class="headerlink" title="Extra"></a>Extra</h1><ul><li>包含护士和在其他列中显示但十分重要的信息</li><li><code>Using filesort</code>使用文件排序，即没有用到索引，需要使用外部索引，进利用表内索引无法按顺序读取。此时需要在语句中加上索引的<code>where</code>、<code>group by</code>…</li><li><code>Using temporary</code>使用了临时表用于加快查询，在<code>group by</code>最左边加入<code>where in</code>的字段，可以消除临时表。子查询优化成连表…</li><li><code>Using index</code>覆盖索引，查询的所有字段都是索引，就可以直接从索引读取。</li><li><code>Using where</code>使用了<code>where</code>查询</li></ul><h1 id="type"><a href="#type" class="headerlink" title="type"></a>type</h1><p>效率顺序，最好是<code>ref</code>以上</p><ul><li><code>system</code></li><li><code>const</code></li><li><code>eq_ref</code></li><li><code>ref</code> 使用了条件索引</li><li><code>range</code></li><li><code>index</code> 扫描了整个索引文件（全表扫描的一种）</li><li><code>ALL</code></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
            <tag> 调优 </tag>
            
            <tag> 执行计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口幂等</title>
      <link href="/2022/03/20/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89/"/>
      <url>/2022/03/20/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：595,阅读全文大约需要2分钟</p><blockquote><p>幂等指的是任意次数的操作和一次操作的执行影响相同。</p></blockquote><h1 id="不同场景的幂等"><a href="#不同场景的幂等" class="headerlink" title="不同场景的幂等"></a>不同场景的幂等</h1><ol><li>查询：查询并不会对于数据造成影响，所以天然幂等</li><li>删除：指定删除数据行，此时指定的数据行只有一条，所以无论删除多少次影响都是一样的。也是天然幂等</li><li>唯一索引：使用唯一索引，使一个对象的新增操作只能执行一次，并发新增就会报错。（dao层接口幂等）</li><li>token机制：用于防止页面重复提交。<br>用户访问页面时后台随机生成<code>Token</code>并保存，用户表单提交时会带上<code>Token</code>，后台进行校验。每个<code>Token</code>只能使用一次，所以第二次提交就会失效。<br><code>Token</code>如果在<code>Redis</code>里，并且是</li><li>数据库锁<br>操作的时候先加锁，防止其他请求并发操作。</li><li>查询状态<br>将操作的唯一值存入数据库，请求到了之后查询一下是否是已经处理的请求。</li><li>业务代码实现<br>操作之前先查询关键数据，查看操作是否已经完成。并发不高的可以这么用</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 幂等 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类和接口</title>
      <link href="/2022/03/20/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/"/>
      <url>/2022/03/20/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>文章字数：208,阅读全文大约需要1分钟<br>参数|抽象类|接口<br>:—|:—|:—<br>默认方法实现|都可以有默认方法实现|<code>default</code>和<code>static</code>方法可以有默认实现<br>实现|子类使用<code>extends</code>关键字继承抽象类，如果子类不是抽象类，则必须实现所有抽象方法|使用<code>implements</code>实现接口，需要实现除了<code>default</code>之外的接口<br>构造器|可以有|不能有<br>与正常类区别|除了不能实例化，其它没区别|完全两种类型<br>访问修饰符|<code>public</code>、<code>protected</code>、<code>default</code>|只能是<code>public</code>可省略<br>main方法|可以有，并能运行|<code>static</code>和<code>default</code>可以在<code>main</code>中使用功能<br>继承|继承一个类和多个接口|可以继承一个或多个接口<br>速度|速度快，因为单继承|需要找实现类中的实现方法，稍慢</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>控制台引入js文件</title>
      <link href="/2022/03/20/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%BC%95%E5%85%A5js%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/20/%E6%8E%A7%E5%88%B6%E5%8F%B0%E5%BC%95%E5%85%A5js%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：23,阅读全文大约需要1分钟</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建元素，设置地址</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.src = <span class="string">"https://xxxxx.js"</span>;</span><br><span class="line"><span class="comment">// 添加到head标签中</span></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库优化</title>
      <link href="/2022/03/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/"/>
      <url>/2022/03/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>文章字数：494,阅读全文大约需要1分钟</p><h1 id="优化方式"><a href="#优化方式" class="headerlink" title="优化方式"></a>优化方式</h1><ul><li>表结构设计合理<code>3NF</code></li><li>添加索引<code>普通索引</code> <code>主键索引</code> <code>唯一索引unique</code> <code>全文索引</code></li><li>sql语句优化</li><li>分表技术<code>水平分割</code> <code>垂直分割</code></li><li>读写分离</li><li>配置优化，配置最大并发，缓存</li></ul><h1 id="定位需要优化点-慢查询日志"><a href="#定位需要优化点-慢查询日志" class="headerlink" title="定位需要优化点(慢查询日志)"></a>定位需要优化点(慢查询日志)</h1><p><code>MySQL</code>中日志有：<code>错误日志</code>、<code>二进制日志</code>、<code>通用查询日志</code>、<code>慢查询日志</code></p><ul><li><code>二进制日志</code>通过监听此日志建立主从结构</li><li><code>通用查询</code>建立客户端连接和执行的语句</li><li><code>慢查询</code>所有执行时间超过<code>long_query_time</code>秒的所有查询或者不适用所用的查询<br>配置慢查询<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.my.ini中增加</span><br><span class="line">long_query_time&#x3D;2</span><br><span class="line"></span><br><span class="line">2.可在直接在mysql连接中开启</span><br><span class="line">set global slow_query_log&#x3D;ON</span><br><span class="line">set global long_query_time &#x3D; 3600;</span><br><span class="line">set global log_querise_not_using_indexes &#x3D; ON;</span><br></pre></td></tr></table></figure></li></ul><h1 id="语句分析"><a href="#语句分析" class="headerlink" title="语句分析"></a>语句分析</h1><ul><li><code>explain</code>关键字，显示了mysql如何使用索引处理查询及表连接<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM USER ORDER BY TIME LIMIT 0,100</span><br></pre></td></tr></table></figure>结果中常用的信息:</li></ul><table><thead><tr><th>列名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询序列号</td></tr><tr><td>select_type</td><td>查询类型（union相关）</td></tr><tr><td>table</td><td>那张表</td></tr><tr><td>type</td><td>使用了何种类型，从好到坏：const、eq_reg、ref、range、index、ALL</td></tr><tr><td>-</td><td>const:表最多有一个匹配行</td></tr><tr><td>-</td><td>eq_ref:对于多表行组合，从改表中只读取一行</td></tr><tr><td>-</td><td>ref:对于每个来自前面表的行组合，所有匹配索引值的行都从这张表中读取</td></tr><tr><td>-</td><td>ref_or_null:该联接类型如同ref，但是添加了MySQL可以专门所有包含NULL值的行。</td></tr><tr><td>-</td><td>index_merge:该联接类型表示使用了索引合并优化</td></tr><tr><td>-</td><td>unique_subquery:索引查找含糊，替固定代子查询，效率更高</td></tr><tr><td>-</td><td>index_subquery:改联接类型类似于unique_subquery</td></tr><tr><td>-</td><td>range:只检索给定范围的行,使用一个索引来选择行</td></tr><tr><td>-</td><td>index:该联接类型与ALL相同，除了只有索引树被扫描。扫描索引比扫描数据文件块一点</td></tr><tr><td>-</td><td>ALL:对于每个来自前面的表的行组合，完整扫描了表数据</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
            <tag> 调优 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入排序</title>
      <link href="/2022/03/20/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/20/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：175,阅读全文大约需要1分钟</p><blockquote><p>插入排序就是将数据依次和左边的数据比较，直到有一个位置是它存在的区间（大于左边的，小于右边的）。就插入，并开始下一个。直到全部插入左边。即右边按顺序取出数据放到左边合适的地方</p></blockquote><p>时间复杂度 o(n) - o(n^2)<br>因为找到合适的位置就不再对比了，所以最好的情况是已经拍好，即每个都对比一次<code>O(n)</code>。最不好的情况是反向排序，每个都要对比<code>O(n^2)</code></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> value = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//插入的位置</span></span><br><span class="line">        <span class="keyword">for</span> (j = i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; value) &#123;</span><br><span class="line">                arr[j+<span class="number">1</span>] = arr[j];<span class="comment">//移动数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j+<span class="number">1</span>] = value; <span class="comment">//插入数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构堆</title>
      <link href="/2022/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A0%86/"/>
      <url>/2022/03/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%A0%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：174,阅读全文大约需要1分钟</p><blockquote><p>堆（heap）又被成为优先队列(priority queue)。堆虽然也是从头部取出元素，从堆底插入，但是堆中的元素排列是按照一定顺序排列的。</p></blockquote><h1 id="两种堆"><a href="#两种堆" class="headerlink" title="两种堆"></a>两种堆</h1><ol><li>最大堆（大顶堆）：任意节点必须是起子树的最大值</li><li>最小堆（小顶堆）：任意节点必须是起子树的最小值</li></ol><h1 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h1><ol><li>维持完全二叉树  </li><li>子类数字总是大于父类数字  </li></ol><h1 id="支持的操作"><a href="#支持的操作" class="headerlink" title="支持的操作"></a>支持的操作</h1><ol><li>添加</li><li>删除</li><li>查找最大/最小值</li></ol><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><ol><li>将数据存入堆</li><li>挨个取出（取出的一定是最大值）<br>就排列好了。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库隔离级别</title>
      <link href="/2022/03/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/2022/03/20/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：593,阅读全文大约需要2分钟</p><blockquote><p>数据库隔离级别是只多个并行的事务之间的锁策略</p></blockquote><h1 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h1><table><thead><tr><th>等级</th><th>名称</th><th>说明</th><th>产生的问题</th></tr></thead><tbody><tr><td>0</td><td>Read Uncommitted</td><td>读未提交，即并行的事务中没有提交的数据其它事务也可以查询的到</td><td>脏读(读取到别的事务回滚前的脏数据)、不可重复读(一个事务多次读取的数据不一样)、幻读(一个事务多次读取的数据条数不一样)</td></tr><tr><td>1</td><td>READ COMMITTED</td><td>读提交，不会读到其它事务没提交的数据</td><td>不可重复读(一个事务多次读取的数据不一样)、幻读(一个事务多次读取的数据条数不一样)</td></tr><tr><td>2</td><td>REPEATABLE READ</td><td>重复读，不能修改其它事务已读取但为提交的数据</td><td>幻读(一个事务多次读取的数据条数不一样)、性能损失</td></tr><tr><td>3</td><td>Serializable</td><td>串行化，事务间串行执行</td><td>不存在并行的事务，所以没问题</td></tr></tbody></table><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><ol><li>脏读：读到别的事务还没回滚前的脏数据，只有读未提交下允许读其他事务没提交的数据，所以只有读未提交才会有</li><li>不可重复读：并行的事务将数据更改了，导致另一个事物两次读一条数据的结果都不一样。即不能保证两次读取数据相同，即不可重复读。重复读禁止事务修改被其它事务读的数据，所以避免此问题。（针对update、delete）</li><li>幻读：和不可重复读类似，但是被改变的是匹配查询语句的数据条数。第一次读匹配一条，被另一个并行事务修改后又读到了两条。此为幻读。幻读并不是改变已经读到的数据，而是增加条目，所以只有串行化可以解决（针对insert）</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文字换行</title>
      <link href="/2022/03/20/%E6%96%87%E5%AD%97%E6%8D%A2%E8%A1%8C/"/>
      <url>/2022/03/20/%E6%96%87%E5%AD%97%E6%8D%A2%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：51,阅读全文大约需要1分钟<br>强制不换行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123; white-space:nowrap; &#125;</span><br></pre></td></tr></table></figure><p>自动换行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123; word-wrap:break-word; &#125;</span><br></pre></td></tr></table></figure><p>强制英文单词断行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p &#123; word-break:break-all; &#125;</span><br></pre></td></tr></table></figure><p>注意：设置强制将英文单词断行，需要将行内元素设置为块级元素。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无重复最长子串</title>
      <link href="/2022/03/20/%E6%97%A0%E9%87%8D%E5%A4%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/2022/03/20/%E6%97%A0%E9%87%8D%E5%A4%8D%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>文章字数：247,阅读全文大约需要1分钟</p><blockquote><p>获取给定的字符串的不重复的最长子串的长度。</p></blockquote><h1 id="滑动窗口法"><a href="#滑动窗口法" class="headerlink" title="滑动窗口法"></a>滑动窗口法</h1><p>滑动窗口法是常用的字符操作算法</p><ol><li>设定一个窗口，窗口的开端对应着数组的开关</li><li>窗口向后扩展，直到扩展到一个有重复数据</li><li>窗口的前部向后移动，到重复的元素后面。</li><li>继续延伸。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; window = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">// 0. 滑动窗口法</span></span><br><span class="line">        <span class="comment">// 1. i 不变，j一直向后</span></span><br><span class="line">        <span class="comment">// 2. j和i重复时 i移动到第一个重复的元素之后。（如果重复的元素在i之前就不变）</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; j &lt; s.length(); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (window.containsKey(s.charAt(j))) &#123;</span><br><span class="line">                <span class="comment">// 防止i变小， 如 abba 的情况</span></span><br><span class="line">                i = Math.max(window.get(s.charAt(j)) + <span class="number">1</span>, i);</span><br><span class="line">            &#125;</span><br><span class="line">            window.put(s.charAt(j), j);</span><br><span class="line">            <span class="keyword">int</span> length = j - i + <span class="number">1</span>;</span><br><span class="line">            maxLength = Math.max(maxLength, length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLength;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"lengthOfLongestSubstring(\"abba\") = "</span> + lengthOfLongestSubstring(<span class="string">"abba"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>显式锁</title>
      <link href="/2022/03/20/%E6%98%BE%E5%BC%8F%E9%94%81/"/>
      <url>/2022/03/20/%E6%98%BE%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：372,阅读全文大约需要1分钟</p><blockquote><p><code>Lock</code>接口是语言层面的锁</p></blockquote><h1 id="一、-常用方法"><a href="#一、-常用方法" class="headerlink" title="一、 常用方法"></a>一、 常用方法</h1><ul><li><code>lock()</code>加锁</li><li><code>lockInterruptibly()</code>可中断获取锁的过程</li><li><code>unlock()</code>释放锁</li><li><code>tryLock()</code>尝试获取锁</li><li><code>tryLock(long, TimeUnit)</code>可设置获取锁超时</li></ul><h1 id="二、对比synchronized"><a href="#二、对比synchronized" class="headerlink" title="二、对比synchronized"></a>二、对比synchronized</h1><ul><li>不可中断</li><li>不可超时</li><li><code>synchronized</code>更简洁</li><li>需要锁中断、超时、尝试的时候使用<code>Lock</code>锁，其他尽量使用<code>synchronized</code></li></ul><h1 id="三、可重入锁"><a href="#三、可重入锁" class="headerlink" title="三、可重入锁"></a>三、可重入锁</h1><ul><li><code>synchronized</code>是隐式可重入锁</li><li><code>ReentrantLock</code>是<code>Lock</code>的可重入锁实现类，相当于<code>synchronized</code>的代码层实现</li></ul><h1 id="四、公平和非公平锁"><a href="#四、公平和非公平锁" class="headerlink" title="四、公平和非公平锁"></a>四、公平和非公平锁</h1><ul><li>公平锁，先获取先执行。</li><li>非公平锁，新来的执行。效率高，取消了新来的锁的状态切换过程，直接执行。</li><li><code>ReentrantLock(true)</code>公平锁</li><li><code>ReentrantLock()</code>默认是非公平锁</li></ul><h1 id="五、读写锁"><a href="#五、读写锁" class="headerlink" title="五、读写锁"></a>五、读写锁</h1><ul><li>排它锁，<code>synchronized</code>和<code>ReentrantLock</code>都是排它锁，只允许一个线程获取数据。</li><li>读写锁，维护读和写两个锁。适用于读多写少的操作。</li><li><code>ReadWriteLock</code>接口下的<code>ReentrantReadWriteLock</code></li><li><code>getlock = readWriteLock.readLock()</code>获取读锁，<code>getlock.lock()</code></li><li><code>setlock = readWriteLock.writeLock()</code>获取写锁，<code>getlock.lock()</code><br>锁的一般用法<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="六、Condition接口"><a href="#六、Condition接口" class="headerlink" title="六、Condition接口"></a>六、Condition接口</h1><ul><li>实现线程唤醒(通知)功能</li><li>每个锁的实现都有<code>getCondition</code>方法可以获取，一个锁可以多个</li></ul><h2 id="6-1使用"><a href="#6-1使用" class="headerlink" title="6.1使用"></a>6.1使用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">cond.signal();<span class="comment">// 唤醒，因为和等待线程是一一对于的，所以不用All</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lock.lock();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        cond.await();<span class="comment">//等待唤醒</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> 锁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>断言assert</title>
      <link href="/2022/03/20/%E6%96%AD%E8%A8%80assert/"/>
      <url>/2022/03/20/%E6%96%AD%E8%A8%80assert/</url>
      
        <content type="html"><![CDATA[<p>文章字数：64,阅读全文大约需要1分钟</p><blockquote><p>很多框架的源码里都有使用到assert，这里学习一下</p></blockquote><h1 id="开启断言"><a href="#开启断言" class="headerlink" title="开启断言"></a>开启断言</h1><p>默认关闭</p><ul><li>jvm加上参数<code>-ea</code>或者<code>-enableassertions</code></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>如果判断语句为false,则会报错，并提示指定信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">assert</span> a &gt; <span class="number">0</span> : <span class="string">"error message"</span>;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树基本概念</title>
      <link href="/2022/03/20/%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>/2022/03/20/%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：891,阅读全文大约需要3分钟</p><blockquote><p>树是由一个根节点延伸到若干节点，再由这些若干节点向外延伸的数据结构。</p></blockquote><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>树</p><ol><li><strong>节点</strong>: 构成树的基本单位。</li><li><strong>树</strong>: 是节点的有限集，当节点为空时成为空树。树只有一个根节点，多棵树之间无交互。</li><li><strong>度</strong>: 节点拥有的子树（即子节点，子节点组成的数为子树）数量。</li><li><strong>节点关系</strong>: 节点的下级节点成为该节点的<code>孩子节点</code>，节点是下级节点的<code>双亲节点</code>，节点下级节点之间互为<code>兄弟节点</code>。</li><li><strong>节点层次</strong>: 根节点为<code>第一层</code>，根节点的子节点为<code>第二次</code>，再往下为<code>第三层</code>…以此类推。</li><li><strong>深度</strong>: 数节点的最大层次，成为改树的深度/高度。</li></ol><p>二叉树</p><ol><li><strong>二叉树</strong>: 在树的定义之上增加子节点只有两个的限制，两个节点称为<code>左节点</code>和<code>右节点</code>。左右节点次序不可以颠倒，只有一个节点也要区分左右节点。</li><li><strong>斜树</strong>: 所有节点都只有左节点的二叉树称为<code>左斜树</code>，所有节点都只有右节点的二叉树称为<code>右斜树</code>。</li><li><strong>满二叉树</strong>: 二叉树上所有的分支节点都有左右节点，并且叶子节点处于同一层。即当前深度的二叉树中节点最多的结构。所有的层都是满的。</li><li><strong>完全二叉树</strong>: 和满二叉树类型，只是最后一层不满，并且所有的空缺都在右边（先填满左节点再右节点）</li><li><strong>二叉查找树</strong>:  若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值； 它的左、右子树也分别为二叉排序树。[搜索,插入,删除的复杂度等于树高，O(log(n))]</li><li><strong>红黑树</strong>: 一种自平衡的二叉查找树，解决了二叉查找树可能出现树不平衡的情况（全部在左边或者全部在右边等情况）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">性质1. 节点是红色或黑色。</span><br><span class="line">性质2. 根节点是黑色。(叶子节点null也是黑色的)</span><br><span class="line">性质3 每个红色节点的两个子节点都是黑色。(从每个叶子到根的所有路径上不能有两个连续的红色节点)</span><br><span class="line">性质4. 从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点。</span><br></pre></td></tr></table></figure><p>红黑树性质4保证了最长路径和最短路径差距不会超过两倍</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>根据系统语言转换大小写</title>
      <link href="/2022/03/20/%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E8%BD%AC%E6%8D%A2%E5%A4%A7%E5%B0%8F%E5%86%99/"/>
      <url>/2022/03/20/%E6%A0%B9%E6%8D%AE%E7%B3%BB%E7%BB%9F%E8%AF%AD%E8%A8%80%E8%BD%AC%E6%8D%A2%E5%A4%A7%E5%B0%8F%E5%86%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：69,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取系统中标记为 TR-TR 的语言（土耳其语）</span></span><br><span class="line">trlocale = Locale.forLanguageTag（“TR-TR”）;</span><br><span class="line"><span class="comment">//转换成土耳其语的 i (和英文不一样)</span></span><br><span class="line"><span class="string">"i"</span>.toLowerCase(trlocale);</span><br></pre></td></tr></table></figure><blockquote><p>toLowerCase没设置语言则自动获取当前语言，可能会导致转换和想象的不一样</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> i18n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桶排序</title>
      <link href="/2022/03/20/%E6%A1%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/20/%E6%A1%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：333,阅读全文大约需要1分钟</p><blockquote><p>桶排序的时间复杂度为 o(n+k) 即常数</p></blockquote><h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><ol><li>将有限的桶排列好顺序(包含所有数据或者数据范围)</li><li>将数据挨个放入相应的桶里(如果是范围，就在范围里线性排列)</li><li>按照桶的顺序取出所有数据，此时数据便排好了顺序</li></ol><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @param a 需要排序的数组</span></span><br><span class="line"><span class="comment"> * @param max 用于自动生成桶，示例为小范围数字，所以直接生成顺序桶就好了。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucketSort</span><span class="params">(<span class="keyword">int</span>[] a, <span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] buckets;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a == <span class="keyword">null</span> || max &lt; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个容量为max的数组buckets，并且将buckets中的所有数据都初始化为0。</span></span><br><span class="line">        buckets = <span class="keyword">new</span> <span class="keyword">int</span>[max];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 计数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++)&#123;</span><br><span class="line">            buckets[a[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; max; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> ((buckets[i]--) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                a[j++] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        buckets = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解AutoWrite匹配规则</title>
      <link href="/2022/03/20/%E6%B3%A8%E8%A7%A3AutoWrite%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/"/>
      <url>/2022/03/20/%E6%B3%A8%E8%A7%A3AutoWrite%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：43,阅读全文大约需要1分钟</p><ol><li>当只有一个实现类时直接匹配(优先类型)</li><li>多个实现类匹配name</li><li>name也匹配多个则报错</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解Conditional按条件注入bean</title>
      <link href="/2022/03/20/%E6%B3%A8%E8%A7%A3Conditional%E6%8C%89%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5bean/"/>
      <url>/2022/03/20/%E6%B3%A8%E8%A7%A3Conditional%E6%8C%89%E6%9D%A1%E4%BB%B6%E6%B3%A8%E5%85%A5bean/</url>
      
        <content type="html"><![CDATA[<p>文章字数：97,阅读全文大约需要1分钟</p><blockquote><p>根据一定的条件判断是否注入<code>bean</code></p></blockquote><h1 id="声明两个条件"><a href="#声明两个条件" class="headerlink" title="声明两个条件"></a>声明两个条件</h1><ul><li><code>Windows</code>环境下注入<code>bean</code>的条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowsCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getEvironment().getProperty(<span class="string">"os.name"</span>).contains(<span class="string">"Windows"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>Linux</code>环境下注入<code>bean</code>的条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinuxCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context, AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> context.getEvironment().getProperty(<span class="string">"os.name"</span>).contains(<span class="string">"Linux"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(WindowsCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">MyService</span> <span class="title">windowMyService</span>() </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional</span>(LinuxCondition<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">MyService</span> <span class="title">linuxMyService</span>() </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其它衍生的注解"><a href="#其它衍生的注解" class="headerlink" title="其它衍生的注解"></a>其它衍生的注解</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@ConditionalOnMissingBean(xx.class) &#x2F;&#x2F; 没有xx.class bean时注入</span><br><span class="line">@ConditionalOnBean(xx.class) &#x2F;&#x2F; 有xx.class bean 时注入</span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解ConfigurationProperties</title>
      <link href="/2022/03/20/%E6%B3%A8%E8%A7%A3ConfigurationProperties/"/>
      <url>/2022/03/20/%E6%B3%A8%E8%A7%A3ConfigurationProperties/</url>
      
        <content type="html"><![CDATA[<p>文章字数：624,阅读全文大约需要2分钟</p><blockquote><p><code>Spring</code>提供的自动将<code>application.properties</code>配置文件中参数绑定到指定类成员变量的注解，功能上类似<code>@Value</code></p></blockquote><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ol><li>配置参数</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">myapp.mail.enable</span>=<span class="string">true</span></span><br><span class="line"><span class="meta">myapp.mail.default-subject</span>=<span class="string">test subject</span></span><br></pre></td></tr></table></figure><ol start="2"><li>绑定配置到配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 必须要有setter方法</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">// 标记参数前缀</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"myapp.mail"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailProperties</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 设置参数类型及默认值，如果配置文件里没有此参数，就使用默认值 */</span></span><br><span class="line">    <span class="comment">/**  */</span></span><br><span class="line">    <span class="keyword">private</span> Boolean enable = Boolean.TRUE;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String defaultSubject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="参数绑定规则"><a href="#参数绑定规则" class="headerlink" title="参数绑定规则"></a>参数绑定规则</h1><ol><li>宽松绑定规则<code>relaxed binding</code>,多种书写方式都可以绑定</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">myapp.mail.defaultSubject</span>=<span class="string">test subject</span></span><br><span class="line"><span class="meta">myapp.mail.defaultsubject</span>=<span class="string">test subject</span></span><br><span class="line"><span class="meta">myapp.mail.default-subject</span>=<span class="string">test subject</span></span><br><span class="line"><span class="meta">myapp.mail.default_subject</span>=<span class="string">test subject</span></span><br><span class="line"><span class="meta">myapp.mail.DEFAULT-SUBJECT</span>=<span class="string">test subject</span></span><br><span class="line"><span class="meta">```</span> <span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="meta">2.</span> <span class="string">前缀必须相同</span></span><br><span class="line"><span class="meta">3.</span> <span class="string">类型必须是可转换的，不可转换时默认抛出异常。设置`ignoreInvalidFields=true`可以忽略此错误</span></span><br><span class="line"><span class="meta">4.</span> <span class="string">未绑定的配置参数默认忽略，如果想存在未绑定参数是报错可以设置`ignoreUnknownFields=false`</span></span><br><span class="line"><span class="meta">5.</span> <span class="string">参数是否有效校验</span></span><br><span class="line"></span><br><span class="line"><span class="attr">```java</span></span><br><span class="line"><span class="meta">//</span> <span class="string">开启参数校验</span></span><br><span class="line"><span class="attr">@Validated</span></span><br><span class="line"><span class="attr">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix</span> = <span class="string">"myapp.mail")</span></span><br><span class="line"><span class="attr">public</span> <span class="string">class MailProperties &#123;</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">/**</span> <span class="string">设置校验规则 */</span></span><br><span class="line">    <span class="meta">@NotNull</span> <span class="string"></span></span><br><span class="line">    <span class="attr">private</span> <span class="string">Boolean enable = Boolean.TRUE;</span></span><br><span class="line">    <span class="attr">@NotEmpty</span></span><br><span class="line">    <span class="attr">private</span> <span class="string">String defaultSubject;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="激活配置"><a href="#激活配置" class="headerlink" title="激活配置"></a>激活配置</h1><ol><li>创建了一个<code>@ConfigurationProperties</code>注解的配置类，还需要将其添加到应用上下文才能使用</li><li>可以直接<code>@Componment</code>将其添加到容器中</li><li>使用<code>@configuration</code>类中声明也有同样效果，和2类似，都是注册成<code>bean</code></li><li>使用<code>@EnableConfigurationProperties</code>注解，让当前类被<code>Spring</code>容器感知</li></ol><h1 id="复杂类型属性"><a href="#复杂类型属性" class="headerlink" title="复杂类型属性"></a>复杂类型属性</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** list类型 */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; smtpServer;</span><br><span class="line"><span class="comment">/** 还支持map类型 */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; serverInfo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 持续时间，不写单位默认是毫秒,也可以指定默认单位 */</span></span><br><span class="line"><span class="meta">@DurationUnit</span>(ChronoUnit.SECONDS)</span><br><span class="line"><span class="keyword">private</span> Duration mails;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    ns for nanoseconds (纳秒)</span></span><br><span class="line"><span class="comment">    us for microseconds (微秒)</span></span><br><span class="line"><span class="comment">    ms for milliseconds (毫秒)</span></span><br><span class="line"><span class="comment">    s for seconds (秒)</span></span><br><span class="line"><span class="comment">    m for minutes (分)</span></span><br><span class="line"><span class="comment">    h for hours (时)</span></span><br><span class="line"><span class="comment">    d for days (天)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 数据大小，默认byte字节，也可以指定单位 */</span></span><br><span class="line"><span class="meta">@DataSizeUnit</span>(DataUnit.MEGABYTES)</span><br><span class="line"><span class="keyword">private</span> DataSize maxAttachementSize = DataSize.ofMegabytes(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">    B for bytes</span></span><br><span class="line"><span class="comment">    KB for kilobytes</span></span><br><span class="line"><span class="comment">    MB for megabytes</span></span><br><span class="line"><span class="comment">    GB for gigabytes</span></span><br><span class="line"><span class="comment">    TB for terabytes</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">myapp.mail.smtpServerp[0]&#x3D;server0</span><br><span class="line">myapp.mail.smtpServerp[1]&#x3D;server1</span><br><span class="line"></span><br><span class="line"># yml本身支持list</span><br><span class="line">myapp:</span><br><span class="line">    mail:</span><br><span class="line">        smtp-servers:</span><br><span class="line">            - server0</span><br><span class="line">            - server1</span><br><span class="line"></span><br><span class="line"># 可以指定单位，不指定按照默认单位</span><br><span class="line">myapp.mail.mails&#x3D;2s</span><br><span class="line">myapp.mail.maxAttachementSize&#x3D;1m</span><br></pre></td></tr></table></figure><h1 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myapp.mail.weight&#x3D;5kg</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;** 声明属性 *&#x2F;</span><br><span class="line">private Weight weight;</span><br></pre></td></tr></table></figure><ul><li>自定义转换器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightConverter</span> <span class="keyword">implements</span> <span class="title">Converter</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Weight <span class="title">conver</span><span class="params">(String source)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 怎么将数值转换成类</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注册改转换器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PropertiesConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationPropertiesBinding</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WeightConverter <span class="title">weightConverter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WeightConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配置自动补全"><a href="#配置自动补全" class="headerlink" title="配置自动补全"></a>配置自动补全</h1><ul><li>在书写配置时，可以自动提醒配置信息</li></ul><ul><li>依赖</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.springframwork.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-configuration-processor&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>重新<code>build</code>项目，<code>configuration processor</code>会自动生成一个<code>spring-configuration-metadata.json</code></li><li><code>application.properties</code>中写配置就会自动提示</li></ul><ul><li>标记属性为<code>deprecated</code>标记原因和替代属性，并重新<code>build</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 在getter方法上加注解 */</span></span><br><span class="line"><span class="meta">@DeprecatedConfigurationProperty</span>(reason=<span class="string">"change name"</span>, replacement = <span class="string">"none"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDefaultSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解Configuration和注解bean</title>
      <link href="/2022/03/20/%E6%B3%A8%E8%A7%A3Configuration%E5%92%8C%E6%B3%A8%E8%A7%A3bean/"/>
      <url>/2022/03/20/%E6%B3%A8%E8%A7%A3Configuration%E5%92%8C%E6%B3%A8%E8%A7%A3bean/</url>
      
        <content type="html"><![CDATA[<p>文章字数：317,阅读全文大约需要1分钟</p><blockquote><p><code>@Configuration</code>和<code>@Bean</code>是Spring中常用的用于配置的Bean的两个注解(将<code>@Bean</code>注解的方法返回的类注入spring)</p></blockquote><h1 id="Bean"><a href="#Bean" class="headerlink" title="@Bean"></a>@Bean</h1><ul><li><p>定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;用于注解方法和注解的定义</span><br><span class="line">@Target(&#123;ElementType.METHOD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br></pre></td></tr></table></figure></li><li><p>适用范围<br><code>@Bean</code>可作用于组件<code>@Component</code>，该注解及其扩展注解均可使用：<br><code>@Component</code>定义类为组件，并且注入Spring中<br><code>@Repository</code>定义DAO层<br><code>@Service</code>Service服务层类<br><code>@Controller</code>控制层类<br><code>@Configuration</code>标记这是一个配置Bean的类，通常和<code>@bean</code>一起使用。可以使用类中的其它@Bean注入的bean，其它不行。</p></li><li><p>作用</p><blockquote><p>用@Bean注解的方法：会实例化、配置并初始化返回一个新的对象，这个对象会由spring IoC 容器管理。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyService <span class="title">myService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于 (beam默认使用注解方法名作为bean的id)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;myService&quot; class&#x3D;&quot;com.acme.services.MyServiceImpl&quot;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure><p>给bean起名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;指定名称</span><br><span class="line">@Bean(name &#x3D; &quot;myFoo&quot;)</span><br><span class="line">&#x2F;&#x2F;指定多个名字</span><br><span class="line">@Bean(name &#x3D; &#123; &quot;dataSource&quot;, &quot;subsystemA-dataSource&quot;, &quot;subsystemB-dataSource&quot; &#125;)</span><br></pre></td></tr></table></figure></li></ul><h1 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h1><blockquote><p><code>@Configuration</code>和<code>@Component</code>区别在于<code>@Configuration</code>可以在注入类内依赖的Bean,即上一个方法注入的bean可以被下一个方法获取使用。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleConfiguration</span></span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BasicDataSource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PlatformTransactionManager <span class="title">transactionManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//直接调用上面的方法，在@Configuration中是使用上个方法注入的Bean而不是执行方法返回的新对象。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解Import</title>
      <link href="/2022/03/20/%E6%B3%A8%E8%A7%A3Import/"/>
      <url>/2022/03/20/%E6%B3%A8%E8%A7%A3Import/</url>
      
        <content type="html"><![CDATA[<p>文章字数：216,阅读全文大约需要1分钟</p><blockquote><p>将普通类导入到<code>IOC</code>容器中的注解</p></blockquote><p>导入<code>Bean</code>的方法有</p><ol><li><code>@Bean</code>注解</li><li><code>@Controller</code> <code>@Service</code> <code>@Repository</code> <code>@Component</code>等注解类，使用<code>@ComponentScan</code>扫描包</li><li><code>@Import</code>方法注入（4.2之前只能导入配置类）</li></ol><h1 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h1><ul><li>在<code>@Enablexxx</code>注解中使用，此注解声明的类在加载之前会加载<code>@inport</code>注解中的类</li><li>配合<code>ImportSelector.class</code>接口使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BeanFactoryAware可以获取beanFactory相关信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyImportSelector</span> <span class="keyword">implements</span> <span class="title">ImportSelector</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> BeanFactory beanFactory;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanFactory</span><span class="params">(BeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.beanFactory = beanFactory;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        <span class="comment">// importingClassMetadata可以获取注解所在类的其它注解信息</span></span><br><span class="line">        <span class="comment">// 返回最终选择注入的className</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;XXXClass<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()&#125;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明注解，并使用MyImportSelector</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Import</span>(MyImportSelector<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableXXX</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在配置类上使用注解，就能在加载配置类之前加载好选择的类</span></span><br><span class="line"><span class="meta">@EnableXXX</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解Query报错</title>
      <link href="/2022/03/20/%E6%B3%A8%E8%A7%A3Query%E6%8A%A5%E9%94%99/"/>
      <url>/2022/03/20/%E6%B3%A8%E8%A7%A3Query%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：24,阅读全文大约需要1分钟</p><blockquote><p>写了个原生，结果报错 Validation failed for query for method public abstract </p></blockquote><p>解决：nativeQuery=true ，jpa默认是hql查询</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解Value报错</title>
      <link href="/2022/03/20/%E6%B3%A8%E8%A7%A3Value%E6%8A%A5%E9%94%99/"/>
      <url>/2022/03/20/%E6%B3%A8%E8%A7%A3Value%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>文章字数：34,阅读全文大约需要1分钟</p><blockquote><p>Could not resolve placeholder ‘xxx’ in value ‘zzz’</p></blockquote><p>找不到key对应的value,需要给value一个默认参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;some.key:defaultValue&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String stringWithDefaultValue;</span><br></pre></td></tr></table></figure><p>这样就不会找不到了</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器调用本地exe文件</title>
      <link href="/2022/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0exe%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/20/%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B0%83%E7%94%A8%E6%9C%AC%E5%9C%B0exe%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>文章字数：136,阅读全文大约需要1分钟</p><blockquote><p>类似迅雷的点击下载后弹出软件的功能</p></blockquote><h1 id="一、在windows注册表中注册自定义协议"><a href="#一、在windows注册表中注册自定义协议" class="headerlink" title="一、在windows注册表中注册自定义协议"></a>一、在windows注册表中注册自定义协议</h1><h2 id="1-1-注册表编辑器内容"><a href="#1-1-注册表编辑器内容" class="headerlink" title="1.1 注册表编辑器内容"></a>1.1 注册表编辑器内容</h2><blockquote><p>保存为 <code>.reg</code>文件，运行即可</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser]</span><br><span class="line">@&#x3D;&quot;&quot;</span><br><span class="line">&quot;URL Protocol&quot;&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser\DefaultIcon]</span><br><span class="line">@&#x3D;&quot;D:\\test.exe&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser\Shell]</span><br><span class="line">@&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser\Shell\Open]</span><br><span class="line">@&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Browser\Shell\Open\Command]</span><br><span class="line">@&#x3D;&quot;D:\\MyCode\\learnTest\\RegisterURI\\wrapper.exe %1&quot;</span><br></pre></td></tr></table></figure><ol><li><code>Browser</code>：自定义的协议名称；</li><li><code>D:\\test.exe</code> ：调用的exe文件路径；</li><li><code>%1</code> ：代表传入的参数；</li></ol><h1 id="二、调用exe"><a href="#二、调用exe" class="headerlink" title="二、调用exe"></a>二、调用exe</h1><h2 id="2-1浏览器调用"><a href="#2-1浏览器调用" class="headerlink" title="2.1浏览器调用"></a>2.1浏览器调用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"Browser:// aaaaaaa bbbbbbb"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>多个参数之间使用空格分开，最后一个参数的结尾会多一个<code>/</code>，程序需要自己处理</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洗牌算法</title>
      <link href="/2022/03/20/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/20/%E6%B4%97%E7%89%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：170,阅读全文大约需要1分钟</p><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>洗牌算法, <code>Fisher–Yates</code>随机置乱算法也被称做高纳德置乱算法, 作用是生成一个有限集合的随机排列，即打乱集合，并使每个排列的可能都相等。</p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>从n个数组中选取低（1到n-1）中随机选择一个，并和<code>n</code>替换</li><li>再从（1到n-2）中随机选择一个，和<code>n-2</code>个替换<br>…<br>直到全部替换完成</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始的有序数组</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        arr[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 费雪耶兹置乱算法</span></span><br><span class="line">    <span class="comment">// 每次生成的随机交换位置:</span></span><br><span class="line">    <span class="keyword">for</span> (i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// 随机数生成器，范围[0, i]</span></span><br><span class="line">        <span class="keyword">int</span> rand = (<span class="keyword">new</span> Random()).nextInt(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[rand];</span><br><span class="line">        arr[rand] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>热部署和热加载</title>
      <link href="/2022/03/20/%E7%83%AD%E9%83%A8%E7%BD%B2%E5%92%8C%E7%83%AD%E5%8A%A0%E8%BD%BD/"/>
      <url>/2022/03/20/%E7%83%AD%E9%83%A8%E7%BD%B2%E5%92%8C%E7%83%AD%E5%8A%A0%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>文章字数：133,阅读全文大约需要1分钟</p><blockquote><p>一直分不清热部署和热加载，感觉上是一样的。其实不一样</p></blockquote><h1 id="热加载"><a href="#热加载" class="headerlink" title="热加载"></a>热加载</h1><ul><li>直接修改Java虚拟机中的字节码文件</li><li>内存不会释放</li><li>不安全，无法监控。</li><li>俗称开发者模式，一般是开发时候使用</li></ul><h1 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h1><ul><li>重新打包war包</li><li>释放原有内存</li><li>不需要重新tomcat，不影响服务器中其它项目</li></ul><h1 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h1><ul><li>都能在改变代码后更新改变</li><li>静态文件都能够重新加载</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2022/03/20/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/"/>
      <url>/2022/03/20/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：208,阅读全文大约需要1分钟</p><blockquote><p>策略模式是将算法分离出来，在使用的时候指定使用的算法。避免大量使用<code>if..else</code>的设计模式。将原来由if…else判断之后获取实现类转换成实现类和值绑定，直接通过值获取类。省略了if…else</p></blockquote><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//选择一个具体策略</span></span><br><span class="line">        IStrategy strategy = <span class="keyword">new</span> ConcreteStrategyA();</span><br><span class="line">        <span class="comment">//来一个上下文环境</span></span><br><span class="line">        Context context = <span class="keyword">new</span> Context(strategy);</span><br><span class="line">        <span class="comment">//客户端直接让上下文环境执行算法</span></span><br><span class="line">        context.algorithm();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//抽象策略类 Strategy</span></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体策略类 ConcreteStrategy</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyA</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Strategy A"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体策略类 ConcreteStrategy</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteStrategyB</span> <span class="keyword">implements</span> <span class="title">IStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Strategy B"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上下文环境</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> IStrategy mStrategy;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Context</span><span class="params">(IStrategy strategy)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.mStrategy = strategy;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">algorithm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.mStrategy.algorithm();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="基于Spring的应用"><a href="#基于Spring的应用" class="headerlink" title="基于Spring的应用"></a>基于Spring的应用</h1><ol><li><p>将策略类注册成为组件</p></li><li><p>通过组件名获取组件，获取策略时传入的策略名就是组件名。</p></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 策略模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简书文章获取时间</title>
      <link href="/2022/03/20/%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/"/>
      <url>/2022/03/20/%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%8E%B7%E5%8F%96%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：379,阅读全文大约需要1分钟</p><blockquote><p>本文主要是对上一篇文章<a href="https://www.jianshu.com/p/18d9e25daac8" target="_blank" rel="noopener">简书文章转换成hexo文章</a>的补充。上一次自动转换的代码创建时间固定是now，但是我希望能够和简书上的一样。这样就可以查看自己文章发布的大致历程。思路使用爬虫爬取信息，爬到的信息使用Map(文章名，日期)的形式保存。</p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><code>jdk1.8</code></li><li>引入<code>jar</code>包</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.jsoup&#x2F;jsoup --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.jsoup&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;jsoup&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;1.10.2&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;net.sourceforge.htmlunit&#x2F;htmlunit --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;net.sourceforge.htmlunit&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;htmlunit&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.32&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.gargoylesoftware.htmlunit.WebClient;</span><br><span class="line"><span class="keyword">import</span> com.gargoylesoftware.htmlunit.html.HtmlPage;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 9:29 2019/9/30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">jsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Map&lt;String,String&gt; countMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; urlMap = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">255</span>);</span><br><span class="line">        String baseUrl = <span class="string">"https://www.jianshu.com/u/2eb26c0a6d3b?order_by=shared_at&amp;page="</span>;</span><br><span class="line">        getTime(baseUrl,urlMap);</span><br><span class="line">        <span class="comment">//爬取结果 Map(title,time)</span></span><br><span class="line">        urlMap.forEach((k,v)-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(k + <span class="string">" = "</span> + v);</span><br><span class="line">            &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getTime</span><span class="params">(String baseUrl,Map urlMap)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"><span class="comment">//            Map&lt;String,String&gt; urlMap = new HashMap&lt;&gt;(255);</span></span><br><span class="line"><span class="comment">//            String baseUrl = "https://www.jianshu.com/u/2eb26c0a6d3b?order_by=shared_at&amp;page=";</span></span><br><span class="line">            String currentUrl = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">int</span> pageIndex=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">do</span>&#123;</span><br><span class="line">                currentUrl = baseUrl+pageIndex;</span><br><span class="line">                pageIndex++;</span><br><span class="line">                System.out.println(<span class="string">"currentUrl = "</span> + currentUrl);</span><br><span class="line">            &#125;<span class="keyword">while</span> (getJianShuArticleUrlList(currentUrl,urlMap));</span><br><span class="line"><span class="comment">//            System.out.println("pageIndex = " + pageIndex);</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getJianShuArticleUrlList</span><span class="params">(String oneUrl, Map&lt;String,String&gt; urlMap)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">// 模拟浏览器操作</span></span><br><span class="line">        WebClient webClient = <span class="keyword">new</span> WebClient();</span><br><span class="line">        <span class="comment">// 关闭css代码功能</span></span><br><span class="line">        webClient.getOptions().setThrowExceptionOnScriptError(<span class="keyword">false</span>);</span><br><span class="line">        webClient.getOptions().setCssEnabled(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 如若有可能找不到文件js则加上这句代码</span></span><br><span class="line">        webClient.getOptions().setThrowExceptionOnFailingStatusCode(<span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">// 获取第一级网页html</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            HtmlPage page = webClient.getPage(oneUrl);</span><br><span class="line">            <span class="keyword">if</span>(page==<span class="keyword">null</span>||!page.isHtmlPage())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Document doc = Jsoup.parse(page.asXml());</span><br><span class="line">            Elements dates = doc.select(<span class="string">"[class=note-list] li"</span>);</span><br><span class="line">            Iterator var2 = dates.iterator();</span><br><span class="line">            Element element = <span class="keyword">null</span>;</span><br><span class="line">            Element titleElement = <span class="keyword">null</span>;</span><br><span class="line">            Element timeElement = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span>(var2.hasNext()) &#123;</span><br><span class="line">                element = (Element)var2.next();</span><br><span class="line">                titleElement = element.select(<span class="string">"[class=title]"</span>).first();</span><br><span class="line">                timeElement = element.select(<span class="string">"[class=time]"</span>).first();</span><br><span class="line">                <span class="comment">//爬取的时候发现有一些数据的样式发生了改变，这里设置成如果找不到就使用另一种样式。</span></span><br><span class="line">                <span class="keyword">if</span>(timeElement==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    timeElement = element.select(<span class="string">"[data-type=share_note]"</span>).first();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(timeElement!=<span class="keyword">null</span>&amp;&amp;titleElement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">//爬取的时候发现有一些数据的样式发生了改变，这里设置成如果找不到就使用另一种样式。</span></span><br><span class="line">                    String tag = <span class="string">"data-shared-at"</span>;</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.isBlank(timeElement.attr(tag)))&#123;</span><br><span class="line">                        tag = <span class="string">"data-datetime"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(StringUtils.isNotBlank(titleElement.text())&amp;&amp;StringUtils.isNotBlank(timeElement.attr(tag)))&#123;</span><br><span class="line">                        <span class="comment">//爬取时发现有数据重复的情况，两页相连的数据会重复。这里判断出现次数，到达三次结束爬取。</span></span><br><span class="line">                        <span class="keyword">if</span>(StringUtils.isNotBlank(urlMap.get(titleElement.text())))&#123;</span><br><span class="line">                            <span class="keyword">int</span> count = countMap.get(titleElement.text())==<span class="keyword">null</span>?<span class="number">1</span>:Integer.valueOf(countMap.get(titleElement.text())).intValue();</span><br><span class="line">                            count++;</span><br><span class="line">                            countMap.put(titleElement.text(),count+<span class="string">""</span>);</span><br><span class="line">                            <span class="keyword">if</span>(count==<span class="number">3</span>)&#123;</span><br><span class="line">                                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//时间格式转换一下</span></span><br><span class="line">                        String dateStr = timeElement.attr(tag);</span><br><span class="line">                        dateStr = dateStr.replace(<span class="string">"T"</span>,<span class="string">" "</span>);</span><br><span class="line">                        dateStr = dateStr.replace(<span class="string">"+08:00"</span>,<span class="string">""</span>);</span><br><span class="line">                        urlMap.put(titleElement.text(),dateStr);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            res=<span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 自动化 </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简书文章转换成hexo文章</title>
      <link href="/2022/03/20/%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%BD%AC%E6%8D%A2%E6%88%90hexo%E6%96%87%E7%AB%A0/"/>
      <url>/2022/03/20/%E7%AE%80%E4%B9%A6%E6%96%87%E7%AB%A0%E8%BD%AC%E6%8D%A2%E6%88%90hexo%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：483,阅读全文大约需要1分钟</p><blockquote><p>简书的文章需要搬运到hexo上，手动太麻烦。于是用Java写了一个自动转换的工具。文章不在简书上也可以，转换规则为 总目录(root)-&gt;子目录(分类名)-&gt;文章(文件名就是标题)</p></blockquote><p>效果可以看<a href="http://greatcolin.github.io" target="_blank" rel="noopener">我的博客</a></p><ol><li>环境<code>jdk1.8</code></li><li>简书设置里的打包下载全部文章，解压。解压后目录就是源文件目录root</li><li>根据文集自动标记<code>hexo</code>的分类</li><li>增加字数统计，推荐阅读时间功能。（英文单词和中文的个数）</li><li>我自己是写java的，文件名出现<code>@</code>字符，统一替换成了<code>注解</code>。（文件名即标题）<br>如果不需要可以删除<code>.replaceAll(&quot;@&quot;,&quot;注解&quot;)</code></li><li>使用字节流，没有用字符流。懒得换了，不影响使用。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.attribute.BasicFileAttributes;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> Created In 17:54 2019/6/26</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="comment">//文章计数器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//字数计数器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> charCount=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Pattern p = Pattern.compile(<span class="string">"[\u4e00-\u9fa5]|[a-zA-Z]+|[1-9]|[,.，。?？]"</span>, Pattern.CASE_INSENSITIVE);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//源文件根目录root</span></span><br><span class="line">        <span class="keyword">final</span> String rootPath = <span class="string">"G:\\chromedownload\\user-xxx\\mynote"</span>;</span><br><span class="line">        <span class="comment">//转换后文章存放目录</span></span><br><span class="line">        <span class="keyword">final</span> String toPathAdd = <span class="string">"F:\\hexoBlog\\greatcolin\\source\\_posts"</span>;</span><br><span class="line">        Path root = Paths.get(rootPath);</span><br><span class="line">        Path target = Paths.get(toPathAdd);</span><br><span class="line">        <span class="comment">//存放目录则不存在新建</span></span><br><span class="line">        <span class="keyword">if</span>(!Files.exists(target))&#123;</span><br><span class="line">            Files.createDirectories(target);</span><br><span class="line">        &#125;</span><br><span class="line">        Files.walkFileTree(root,<span class="keyword">new</span> SimpleFileVisitor&lt;Path&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> FileVisitResult <span class="title">visitFile</span><span class="params">(Path file, BasicFileAttributes attrs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> oneNoteCount = <span class="number">0</span>;</span><br><span class="line">                String fileName = file.getFileName().toString().replaceAll(<span class="string">"@"</span>,<span class="string">"注解"</span>);</span><br><span class="line">                <span class="comment">//创建转换后的文件</span></span><br><span class="line">                Path toPath = Paths.get(toPathAdd+<span class="string">"\\"</span>+fileName);</span><br><span class="line">                <span class="keyword">if</span>(!Files.exists(toPath))&#123;</span><br><span class="line">                    toPath = Files.createFile(toPath);</span><br><span class="line">                    System.out.println(<span class="string">"create"</span>+toPath);</span><br><span class="line">                &#125;</span><br><span class="line">                FileOutputStream fop;</span><br><span class="line">                <span class="keyword">if</span>(Files.exists(toPath))&#123;</span><br><span class="line">                    fop = <span class="keyword">new</span> FileOutputStream(toPath.toFile());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    System.err.println(<span class="string">"不存在"</span>+toPath);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                FileInputStream fip = <span class="keyword">new</span> FileInputStream(file.toFile());</span><br><span class="line">                <span class="comment">//头</span></span><br><span class="line">                String noteClass = file.getParent().toString();</span><br><span class="line">                String[] className = noteClass.split(<span class="string">"\\\\"</span>);</span><br><span class="line">                <span class="comment">//根据文件夹名称获取分类名</span></span><br><span class="line">                noteClass = className[className.length-<span class="number">1</span>];</span><br><span class="line">                <span class="comment">//创建头部，写入</span></span><br><span class="line">                <span class="keyword">byte</span>[] headBuf = createHead(fileName,noteClass);</span><br><span class="line">                fop.write(headBuf);</span><br><span class="line">                <span class="comment">//读取文件，写入</span></span><br><span class="line">                <span class="keyword">int</span> read = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">while</span>((read=fip.read(buf))&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    String a = <span class="keyword">new</span> String(buf).replaceAll(<span class="string">"[^0-9a-zA-Z\u4e00-\u9fa5]+"</span>,<span class="string">""</span>);</span><br><span class="line">                    <span class="keyword">int</span> count = countNote(a);</span><br><span class="line">                    charCount += count;</span><br><span class="line">                    oneNoteCount += count;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> time = Math.ceil(oneNoteCount/<span class="number">250</span>)&gt;=<span class="number">1</span>?(<span class="keyword">int</span>)Math.ceil(oneNoteCount/<span class="number">250</span>):<span class="number">1</span>;</span><br><span class="line">                fop.write(<span class="keyword">new</span> String(<span class="string">"文章字数："</span>+oneNoteCount+<span class="string">",阅读全文大约需要"</span>+time+<span class="string">"分钟\r\n"</span>).getBytes());</span><br><span class="line">                fip.close();</span><br><span class="line">                fip = <span class="keyword">new</span> FileInputStream(file.toFile());</span><br><span class="line">                <span class="keyword">while</span>((read=fip.read(buf))&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    fop.write(buf,<span class="number">0</span>,read);</span><br><span class="line">                &#125;</span><br><span class="line">                fip.close();</span><br><span class="line">                fop.close();</span><br><span class="line">                System.out.println(fileName+<span class="string">"  转换成功"</span>);</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">return</span> FileVisitResult.CONTINUE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">"执行完成，总共转换"</span>+count+<span class="string">"篇文章。中英文总字/词数达到"</span>+charCount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成文章头部信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> title 标题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> noteClass 分类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] createHead(String title,String noteClass)&#123;</span><br><span class="line">        StringBuilder headStr = <span class="keyword">new</span> StringBuilder(<span class="string">"---\r\n"</span>);</span><br><span class="line">        title = title.replaceAll(<span class="string">".md"</span>,<span class="string">""</span>);</span><br><span class="line">        headStr.append(<span class="string">"title: "</span>+title+<span class="string">"\r\n"</span>);</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        headStr.append(<span class="string">"date: "</span>+sdf.format(<span class="keyword">new</span> Date())+<span class="string">"\r\n"</span>);</span><br><span class="line">        headStr.append(<span class="string">"categories: "</span>+noteClass+<span class="string">"\r\n"</span>);</span><br><span class="line">        headStr.append(<span class="string">"tags: \r\n"</span>);</span><br><span class="line">        headStr.append(<span class="string">"---\r\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> headStr.toString().getBytes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算字数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> note</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countNote</span><span class="params">(String note)</span></span>&#123;</span><br><span class="line">        Matcher m = p.matcher(note);</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (m.find()) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><blockquote><p>此文中的文件创建时间是固定的，我另写了一个工具可以获取文章的发布日期。<a href="https://www.jianshu.com/p/459b18654ac6" target="_blank" rel="noopener">简书文章获取时间</a></p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>索引优化</title>
      <link href="/2022/03/20/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/"/>
      <url>/2022/03/20/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>文章字数：543,阅读全文大约需要2分钟</p><h1 id="尽量全值匹配"><a href="#尽量全值匹配" class="headerlink" title="尽量全值匹配"></a>尽量全值匹配</h1><ul><li>如果使用了符合索引，查询的列是索引列，不要使用<code>select *</code> 使用索引列。</li><li>不要使用<code>select *</code>，避免查询不需要的列，避免表结构增加列对于查询的影响，同时有助于引擎的索引优化。</li></ul><h1 id="最佳左前缀法则"><a href="#最佳左前缀法则" class="headerlink" title="最佳左前缀法则"></a>最佳左前缀法则</h1><ul><li>创建了一个复合索引<code>key(a, b, c)</code>时，查询的<code>where</code>语句一定要出现a, 且只有<code>a, b, c</code>同时出现在<code>where</code>的条件中时，这个索引才是最高效的。</li></ul><h1 id="索引不要有任何操作"><a href="#索引不要有任何操作" class="headerlink" title="索引不要有任何操作"></a>索引不要有任何操作</h1><ul><li>各种函数之类的，不要在索引列上使用</li></ul><h1 id="范围条件放最后"><a href="#范围条件放最后" class="headerlink" title="范围条件放最后"></a>范围条件放最后</h1><ul><li>创建联合索引时，<code>between &lt; =</code>等访问查询，如果范围查询的列是<code>a</code>则创建的索引中<code>a</code>应该是最后一个如<code>key(b, c, a)</code>而不是<code>key(a, b, c)</code></li></ul><h1 id="like查询"><a href="#like查询" class="headerlink" title="like查询"></a>like查询</h1><ul><li>尽量使用<code>关键字%</code>而不是使用<code>%关键字</code>，后者会导致索引失效</li></ul><h1 id="搜索字符类型"><a href="#搜索字符类型" class="headerlink" title="搜索字符类型"></a>搜索字符类型</h1><ul><li>字符类型需要加引号，否则会使索引失效。使用<code>where a=&#39;1&#39;</code>而不是<code>where a=1</code></li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
            <tag> 调优 </tag>
            
            <tag> 优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程基础</title>
      <link href="/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p>文章字数：751,阅读全文大约需要3分钟</p><h1 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h1><p>1.<code>CPU</code>核心数和线程数关系</p><ul><li>一般为1：1关系</li><li>英特尔超线程技术可以实现1个核心数2线程</li></ul><ol start="2"><li><code>CPU</code>时间片轮转机制</li></ol><ul><li>RR调度，上线文切换（操作系统处理，程序无关）</li></ul><ol start="3"><li><p>进程和线程<br>进程：程序资源分配的最小单位，进程下有多个线程。<br>线程：cpu调度的最小单位，需要依附于进程。需要使用进程的资源</p></li><li><p>并行和并发<br>并发：与时间相关，一定时间内可处理的能力<br>并行：程序设计的结构，同一时刻可以处理能力（瞬时）</p></li><li><p>高并发编程意义</p></li></ol><ul><li>无关操作可以不用等待</li><li>模块化，异步化</li><li>可能造成冲突，死锁，资源分配不足等问题。</li></ul><h1 id="二、java线程"><a href="#二、java线程" class="headerlink" title="二、java线程"></a>二、java线程</h1><h2 id="2-1天然多线程，无需手动开启既有一些线程"><a href="#2-1天然多线程，无需手动开启既有一些线程" class="headerlink" title="2.1天然多线程，无需手动开启既有一些线程"></a>2.1天然多线程，无需手动开启既有一些线程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 虚拟机线程管理接口</span></span><br><span class="line">ThreadMXBean bean = ManagementFactory.getThreadMXBean();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Attach Listener</span><br><span class="line">Signal Dispatcher</span><br><span class="line">Finalizer</span><br><span class="line">Reference Handler</span><br><span class="line">main</span><br></pre></td></tr></table></figure><h2 id="2-2-线程创建"><a href="#2-2-线程创建" class="headerlink" title="2.2 线程创建"></a>2.2 线程创建</h2><ol><li><code>Thread</code>类(自带的)</li><li><code>Runnable</code>接口(自带的)</li><li><code>Callable</code>有返回值的<code>Runnable</code>，需要用<code>FutureTask</code>包装才能实现一个完整的<code>Runnable</code>并被<code>Thread</code>运行。并且提供了接受返回值的方法(没有结果会阻塞)</li></ol><h2 id="2-3-线程退出"><a href="#2-3-线程退出" class="headerlink" title="2.3 线程退出"></a>2.3 线程退出</h2><ol><li>自然执行完</li><li>一场</li><li><code>stop()</code> <code>resume()</code>等方法(不推荐使用，无法释放线程资源已废弃)</li></ol><h2 id="2-4线程中断（协作式）"><a href="#2-4线程中断（协作式）" class="headerlink" title="2.4线程中断（协作式）"></a>2.4线程中断（协作式）</h2><ul><li><code>myThread.interrupt()</code>中断线程（不是强制型，知识中断通知）设置线程中断标志</li><li><code>Thread.currentThread().isInterrupted()</code>判断是否处于中断状态，读取中断标志位。(需要线程内部自己读取状态，实现中断)</li><li><code>Thread.interrupted()</code>中断标志设置为<code>false</code></li><li>线程抛出<code>InterruptedException</code>时会复位线程中断位<code>sleep</code>、<code>join</code>等阻塞的方法都会抛出。需要在<code>catch</code>里重新设置中断标志位,再次中断</li><li>线程中阻塞时设置了<code>interrupt()</code>则会抛出<code>InterruptedException</code>异常。即强制通知线程状态的改变。</li></ul><h2 id="2-5线程状态"><a href="#2-5线程状态" class="headerlink" title="2.5线程状态"></a>2.5线程状态</h2><ul><li>新建，还没有<code>start()</code></li><li>就绪，<code>start()</code>之后，等待操作系统分配运行资源（<code>join</code>方法可以获取执行权）。<br><code>yield()</code>方法可以让线程进入就绪状态，让出当前的运行资源，重写加入等待队列</li><li>阻塞，<code>wait()</code>方法进入阻塞，<code>notify()</code>和<code>notifyAll()</code>接触阻塞。<code>sleep()</code>休眠固定时间</li><li>死亡，<code>stop()</code>，<code>setDeamon()</code>，运行结束</li></ul><h2 id="2-6线程优先级"><a href="#2-6线程优先级" class="headerlink" title="2.6线程优先级"></a>2.6线程优先级</h2><p><code>Thread.setPriority</code>，1-10的值，不可靠。操作系统不一定会按照此值执行。</p><h2 id="2-7守护线程"><a href="#2-7守护线程" class="headerlink" title="2.7守护线程"></a>2.7守护线程</h2><ol><li>和主线程共同退出</li><li>设置<code>setDeamon(true)</code></li><li>守护线程中<code>try...finally</code>不一定生效<code>finally</code>中不一定会执行，因为守护线程可能回合父级线程一起结束了。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程协作</title>
      <link href="/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/"/>
      <url>/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<p>文章字数：431,阅读全文大约需要1分钟</p><h1 id="一、等待和通知-Object方法"><a href="#一、等待和通知-Object方法" class="headerlink" title="一、等待和通知(Object方法)"></a>一、等待和通知(Object方法)</h1><h2 id="1-1等待和通知"><a href="#1-1等待和通知" class="headerlink" title="1.1等待和通知"></a>1.1等待和通知</h2><ul><li><code>wait()</code>等待方</li></ul><ol><li>获取对象的锁</li><li>循环里判断条件是否满足，不满足调用<code>wait()</code>方法</li><li>满足执行业务</li></ol><ul><li><code>notify/notifyAll</code>通知方</li></ul><ol><li>获取对象锁</li><li>改变对象条件</li><li>通知所有等待对象的线程</li></ol><ul><li><code>wait()</code>用于休眠当前线程，需要调用同对象的<code>notify()</code>或者<code>notifyAll()</code>方法唤醒。</li><li><code>wait()</code>、<code>notify()</code>和<code>notifyAll()</code>需要先获取到线程的锁，即<code>synchronized</code>包裹。</li><li><code>notify()</code>唤醒一个线程，<code>notifyAll()</code>唤醒所有。建议都使用<code>nofityAll()</code>方法，内部用<code>while()</code>循环判断是否满足条件，不满足继续<code>wait()</code>。否则会出现信号丢失情况。</li></ul><h2 id="1-2利用等待通知实现超时连接池"><a href="#1-2利用等待通知实现超时连接池" class="headerlink" title="1.2利用等待通知实现超时连接池"></a>1.2利用等待通知实现超时连接池</h2><ul><li>连接池<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存链接的地方</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LinkdList&lt;Connection&gt; pool = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法里初始化若干数量的数据库链接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DBPool</span><span class="params">(<span class="keyword">int</span> initalSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(initalSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; initalSize; i++) &#123;</span><br><span class="line">            pool.addLast(SqlConnectServer.fetchConnection());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取线程，设置超时时间为mills，超时返回null。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">fetchConn</span><span class="params">(<span class="keyword">long</span> mills)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(pool) &#123;</span><br><span class="line">        <span class="comment">// 不超时，等到有为止</span></span><br><span class="line">        <span class="keyword">if</span> (mills &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(pool.isEmpty()) &#123;</span><br><span class="line">                pool.wait();</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="keyword">return</span> pool.removeFirst();</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 什么时候超时</span></span><br><span class="line">            <span class="keyword">long</span> overtime = System.currentTimeMillis() + mills;</span><br><span class="line">            <span class="comment">// 剩余时间 </span></span><br><span class="line">            <span class="keyword">long</span> remain = mills;</span><br><span class="line">            <span class="comment">// 池为空且还有等待时间</span></span><br><span class="line">            <span class="keyword">while</span>(pool.isEmpty() &amp;&amp; remain &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                pool.wait(remain);</span><br><span class="line">                remain = overtime - System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">            Connection result = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(!pool.isEmpty()) &#123;</span><br><span class="line">                result = pool.removeFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">releseConn</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(pool) &#123;</span><br><span class="line">            pool.addLast(conn);</span><br><span class="line">            pool.notifyAll();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="二、join方法（Thread的）"><a href="#二、join方法（Thread的）" class="headerlink" title="二、join方法（Thread的）"></a>二、join方法（Thread的）</h1><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>线程A执行了线程B的<code>join()</code>方法，则线程A必须等线程B执行之后才能继续自己的工作。</li></ol><h1 id="三、yield-、sleep-、wait-、notify-等对锁的影响"><a href="#三、yield-、sleep-、wait-、notify-等对锁的影响" class="headerlink" title="三、yield()、sleep()、wait()、notify()等对锁的影响"></a>三、yield()、sleep()、wait()、notify()等对锁的影响</h1><ol><li><code>yield()</code>交出执行权，不释放持有的锁</li><li><code>sleep()</code>休眠，不释放持有的锁</li><li><code>wait()</code>方法执行前必须要持有锁，调用了<code>wait()</code>方法之后，自动释放锁。被唤醒时自动持有锁</li><li><code>notify()</code>方法执行前必须要持有锁，调用时本身不会释放锁。所以一般在<code>synchroized</code>代码块最后。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程共享</title>
      <link href="/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB/"/>
      <url>/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：131,阅读全文大约需要1分钟</p><h1 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h1><ul><li>对象锁，锁定具体对象</li><li>类锁，锁定整个<code>class</code></li></ul><h1 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h1><ul><li>最轻量级的同步机制</li><li>只能保证数据是从主内存中读取的，而不是当前cpu内存的缓存数据。 </li><li>一个线程写，多个线程读，只能保证可见性</li></ul><h1 id="threadLocal"><a href="#threadLocal" class="headerlink" title="threadLocal"></a>threadLocal</h1><ul><li>线程直接独立的变量</li><li>线程之间不会冲突</li><li>一个绑定在线程上的<code>Map</code></li><li>每个变量每个线程都有一个自己的变量，所以最好是小的值。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程安全</title>
      <link href="/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
      <url>/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：857,阅读全文大约需要3分钟</p><h1 id="一、如何实现"><a href="#一、如何实现" class="headerlink" title="一、如何实现"></a>一、如何实现</h1><ul><li><strong>栈封闭</strong>，变量处于方法内部，则此变量处于线程私有区域，是安全的</li><li><strong>无状态</strong>，例如基本的加减乘除，无论多少线程调用都不会有问题</li><li><strong>类不可变</strong>，成员变量位final的基本类型的类，此类只能初始化时赋值，其他时候无法改变。或者成员变量无法获取，只能做判断。（Akka框架）</li><li><strong>volatile</strong>，一个线程写，多个读的情况可以实现线程安全。例如线程安全的map,写加锁，读不加。</li><li><strong>加锁或CAS</strong></li><li><strong>安全的发布</strong>，所谓的发布即将内部的成员变量的引用return，外部可以使用此引用进行对象操作。安全的发布就是返回类的副本，让外部无法直接操作</li><li><strong>ThreadLocal</strong>，线程数据隔离</li></ul><h1 id="二、Servlet线程不安全"><a href="#二、Servlet线程不安全" class="headerlink" title="二、Servlet线程不安全"></a>二、Servlet线程不安全</h1><ul><li><code>servlet</code>很少有线程安全的需求</li><li>接受请求，返回都是一个线程负责</li><li>请求到达生成，请求返回销毁</li></ul><h1 id="三、线程不安全问题"><a href="#三、线程不安全问题" class="headerlink" title="三、线程不安全问题"></a>三、线程不安全问题</h1><ul><li><p><strong>死锁</strong>，两个及以上线程执行中资源竞争阻塞，如果没其他因素推动，将一直持续下去的情况。(多个资源占用，一个资源不会发生)<br>怀疑死锁<br><code>jps -m</code>查看当前机子上运行的java及进程号<br><code>jstack id</code>检测死锁</p></li><li><p><strong>动态顺序死锁</strong>，根据参数，锁定的顺序不确定，可能导致的死锁。</p></li></ul><ol><li><p>首先要将不确定的顺序变成固定的，可以使用<code>hashCode</code>将两个锁的排序指定锁顺序。 System.identityHashCode(xx)可以直接调用最底层的hashCode，避免调用对象重写的HashCode<br>如果hash值一致，则竞争获取一个static的锁，获胜者即可将所有资源获取。</p></li><li><p>使用显式锁tryLock去分别获取锁，获取不到则释放重新尝试<br>释放后需要休眠随机时间，避免死锁。</p></li></ol><ul><li><strong>线程饥饿</strong>，低优先级的线程总是拿不到执行时间</li><li><strong>性能</strong>，线程切换需要时间，如果切换的消耗不能抵消节约的时间，就不划算。</li></ul><ol><li>延迟时间和吞吐量(相应时间和处理任务能力)，往往是矛盾的。一般来说，吞吐量更受重视。</li><li>优先保证程序正确，确实达不到要求时再考虑提供速度</li><li>一切以测试为基准</li><li>锁的范围，粒度尽量小。范围指定是代码的区域，粒度指的是如果有多个锁保护的对象，对象直接相互独立，就可以使用多个锁。</li><li>锁分段，替换独占锁。</li></ol><h1 id="四、单例模式线程安全"><a href="#四、单例模式线程安全" class="headerlink" title="四、单例模式线程安全"></a>四、单例模式线程安全</h1><ol><li>懒汉模式-双重检查可能会有势力内存地址以及引用，但是对象内部值还没分配的情况，可以增加<code>volita</code>修饰变量。</li><li>懒汉模式-延迟占位模式，使用私有内部类类持有变量，获取时用私有类.变量获取，虚拟机保证在获取时才会实例化内部类生成变量。</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池</title>
      <link href="/2022/03/20/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>/2022/03/20/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：578,阅读全文大约需要2分钟</p><blockquote><p>降低线程创建和销毁的消耗，提高速度，节约资源，线程可管理。</p></blockquote><h1 id="参数含义"><a href="#参数含义" class="headerlink" title="参数含义"></a>参数含义</h1><ul><li><code>int corePoolSize</code>核心线程数</li><li><code>int maximumPoolSize</code>最大线程数</li><li><code>long keepAliveTime</code>空闲线程存活时间</li><li><code>workQueue</code>任务队列</li><li><code>threadFactory</code>创建线程的工厂，主要赋予名字</li><li><code>RejectedExcutionHandler</code>线程池饱和策略</li></ul><ol><li><code>AbortPolicy</code>抛出异常，默认</li><li><code>CallerRunsPolicy</code>调用者线程执行</li><li><code>DiscardOldestPolicy</code>丢弃最老的任务</li><li><code>DiscardPolicy</code>直接丢弃</li></ol><p>实现自己的饱和策略，实现<code>RejectedExcutionHandler</code>就行，保存到数据库之类的。</p><h1 id="提交任务"><a href="#提交任务" class="headerlink" title="提交任务"></a>提交任务</h1><ul><li><code>execute(Runnable command)</code>不需要返回</li><li><code>Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>有返回</li></ul><h1 id="最佳线程数"><a href="#最佳线程数" class="headerlink" title="最佳线程数"></a>最佳线程数</h1><ul><li><code>CPU</code>密集型，<code>Runtime.getRuntime().availableProcessors() + 1</code>最大核心数+1</li><li><code>IO</code>密集型，尽量大，可以是<code>CPU数 * 2</code></li></ul><h1 id="预定义线程池-全部实现ExecutorService接口"><a href="#预定义线程池-全部实现ExecutorService接口" class="headerlink" title="预定义线程池(全部实现ExecutorService接口)"></a>预定义线程池(全部实现<code>ExecutorService</code>接口)</h1><ul><li><code>FixedThreadPool</code></li><li><code>SingleThreadExecutor</code></li><li><code>CachedThreadPool</code></li><li><code>WorkStealingPool</code>基于<code>fork/join</code></li><li><code>ScheduledThreadPoolExecutor</code>定时执行的任务，可以指定抛出异常，不影响线程执行。</li><li><code>newSingleThreadScheduledExecutor</code>包含一个线程，只需要单个线程执行周期任务，保证任务执行顺序</li></ul><ol><li><code>schedule</code>执行一次，可以延时执行</li><li><code>scheduleAtFixedRate</code>提交固定时间执行任务</li><li><code>scheduleWhithFixedDelay</code>提交固定延时间隔执行的任务</li></ol><ul><li><code>scheduleAtFixedRate</code>任务超时，当前一个任务超出下个任务的超时时间，下个任务会在上一个执行后马上执行。</li></ul><p>自定义线程池</p><ul><li><code>new ThreadPoolExecutor(...)</code></li></ul><h1 id="CompletionService"><a href="#CompletionService" class="headerlink" title="CompletionService"></a>CompletionService</h1><ul><li>用于接收线程池返回结果(先结束的先拿)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 包装线程池</span></span><br><span class="line">CompletionService&lt;Integer&gt; cService = <span class="keyword">new</span> ExcutorCompletionService&lt;&gt;(pool);</span><br><span class="line"><span class="comment">// 提交若干任务</span></span><br><span class="line">cService.submit(<span class="keyword">new</span> WorkTask(..));</span><br><span class="line">cService.submit(<span class="keyword">new</span> WorkTask(..));</span><br><span class="line"><span class="comment">// 按照执行速度获取执行结果</span></span><br><span class="line">cService.take().get();</span><br><span class="line">cService.take().get();</span><br></pre></td></tr></table></figure><ul><li>内部包装了<code>task</code>会将执行成功的结果放到内部维护的队列中。</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> JDK </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程封闭背后设计思想</title>
      <link href="/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%B0%81%E9%97%AD%E8%83%8C%E5%90%8E%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/"/>
      <url>/2022/03/20/%E7%BA%BF%E7%A8%8B%E5%B0%81%E9%97%AD%E8%83%8C%E5%90%8E%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>文章字数：872,阅读全文大约需要3分钟</p><blockquote><p>整理自<a href="[https://blog.csdn.net/ITer_ZC/article/details/39546405](https://blog.csdn.net/ITer_ZC/article/details/39546405)">聊聊高并发（二）结合实例说说线程封闭和背后的设计思想</a></p></blockquote><h1 id="高并发问题简述"><a href="#高并发问题简述" class="headerlink" title="高并发问题简述"></a>高并发问题简述</h1><ol><li><code>定义</code>: 来自《java并发变成实战》的定义。线程安全指的是多个线程访问某个类时，这个类始终能表现正确行为。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">我的理解是线程安全问题就是多个线程同时操作一个数据，</span><br><span class="line">导致每个线程在读取并操作期间数据可能会被其它线程篡改，</span><br><span class="line">即不能表现正确行为。</span><br><span class="line">而栈空间（方法栈）的数据是线程私有的，所以只有类有这个问题。</span><br></pre></td></tr></table></figure><ol start="2"><li><code>思路</code>: 线程安全问题，就是对象状态问题。如果对象无状态(不变性，操作前后一样。)，或者避免多个线程共享，那就是线程安全的。只有对象不可避免要被多个线程操作时才会有多线程问题。所以业务代码尽量做到无状态。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">思考流程</span><br><span class="line">1. 能否做成无状态的不变对象</span><br><span class="line">2. 能否线程封闭，不让其他线程操作</span><br><span class="line">3. 实在需要多线程操作，那么采用什么同步技术</span><br></pre></td></tr></table></figure><h1 id="线程封闭技术"><a href="#线程封闭技术" class="headerlink" title="线程封闭技术"></a>线程封闭技术</h1><ol><li><code>栈封闭</code>: 多使用局部变量，局部变量属于方法，方法属于栈，栈属于本线程。</li><li><code>ThreadLocal</code>: 限制其他线程访问的全局变量。本质是一个Map，每个线程只能操作自己作为key下的值。</li><li><code>程序控制线程封闭</code>: 思想，把处理对象状态的代码放到一个线程中。例子：<code>Netty</code>，<code>EventLoop</code>被设计成一个线程池（工作线程+任务队列）。请求被插入任务队列，工作线程再一个个取。这样保证了请求有序处理。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">1. 把用户状态相关代码放到一个队列中，由一个线程处理。</span><br><span class="line">2. 考虑是否隔离用户之间状态，及一个用户一个任务队列还是多个用户使用一个。</span><br></pre></td></tr></table></figure><p>一般设计</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 有界任务队列和不限个数的工作线程，任务队列有界保证不会内存被一直加入的请求撑爆。不限个数的工作线程保证任务队列的请求都能被相应，而不至于以为工作线程的速度慢而产生积压。</span><br><span class="line">2. 线程请求尽量快，尽量不超过100ms</span><br><span class="line">3. 单线程处理时间由于任务大而耗时可以拆解成小任务多次执行</span><br><span class="line">4. 小任务还是慢则可以使用线程，异步处理，然后使用线程定时查看状态或者回调函数的形式。</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程数量选择</title>
      <link href="/2022/03/20/%E7%BA%BF%E7%A8%8B%E6%95%B0%E9%87%8F%E9%80%89%E6%8B%A9/"/>
      <url>/2022/03/20/%E7%BA%BF%E7%A8%8B%E6%95%B0%E9%87%8F%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<p>文章字数：592,阅读全文大约需要2分钟</p><h1 id="为什么需要多线程"><a href="#为什么需要多线程" class="headerlink" title="为什么需要多线程"></a>为什么需要多线程</h1><ol><li>现在的计算机大多数都是多核cpu，单线程运行程序就只能利用其中一个。</li><li>所以根据cpu核心数选取正确的线程数能有效利用资源，提升性能。</li></ol><h1 id="程序分类"><a href="#程序分类" class="headerlink" title="程序分类"></a>程序分类</h1><ol><li>cpu密集型：就是线程大多数时间都是用于cup的数据处理。</li><li>I/O密集型：相对的，这个是程序大多操作都是在执行I/O操作</li></ol><h1 id="线程数量选取"><a href="#线程数量选取" class="headerlink" title="线程数量选取"></a>线程数量选取</h1><ol><li><p>cpu密集型：<br>理论上线程数量=cpu核心数就行了，一个cpu核心执行一个线程，避免切换线程带来的消耗。<br>但是实际上会设置cpu逻辑核心数+1。<br>《Java并发编程》</p><blockquote><p>计算(CPU)密集型的线程恰好在某时因为发生一个页错误或者因其他原因而暂停，刚好有一个“额外”的线程，可以确保在这种情况下CPU周期不会中断工作。</p></blockquote></li><li><p>I/O密集型:<br>这种类型的程序执行时有很大部分时间是在I/O的消耗上，所以会导致cpu空闲时间较多。此时根据cpu核数计算线程数量就不合算了。</p></li></ol><p>最佳线程数 = <code>CPU核心数 * (1/CPU利用率)</code> = <code>CPU核心数 * (1 + (I/O耗时/CPU耗时))</code></p><h1 id="cpu使用率获取"><a href="#cpu使用率获取" class="headerlink" title="cpu使用率获取"></a>cpu使用率获取</h1><p>APM(Application Performance Manager)工具可以帮我们找到准确的数据</p><ol><li>SkyWalking</li><li>CAT</li><li>zipkin</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存淘汰算法</title>
      <link href="/2022/03/20/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/20/%E7%BC%93%E5%AD%98%E6%B7%98%E6%B1%B0%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：146,阅读全文大约需要1分钟</p><ol><li><strong>先进先出算法</strong><code>FIFO</code><br>最先存入缓存的数据将最先被淘汰</li><li><strong>最不经常使用算法</strong><code>LFU</code><br>淘汰使用次数最少的数据，一般实现是对每个数据进行计数，每使用一次就进行计算一次，淘汰计数次数最少的3. </li><li><strong>最近最少使用算法</strong><code>LRU</code><br>最近不使用的数据最先被淘汰，一般实现是通过链表，将最新访问、新插入的元素移到链表头部，淘汰链表最后一个元素</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网页转换成阿拉伯语风格</title>
      <link href="/2022/03/20/%E7%BD%91%E9%A1%B5%E8%BD%AC%E6%8D%A2%E6%88%90%E9%98%BF%E6%8B%89%E4%BC%AF%E8%AF%AD%E9%A3%8E%E6%A0%BC/"/>
      <url>/2022/03/20/%E7%BD%91%E9%A1%B5%E8%BD%AC%E6%8D%A2%E6%88%90%E9%98%BF%E6%8B%89%E4%BC%AF%E8%AF%AD%E9%A3%8E%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：19,阅读全文大约需要1分钟</p><blockquote><p>阿拉伯语风格就是文字从右到左</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">direction</span>: rtl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聚集索引非聚集索引</title>
      <link href="/2022/03/20/%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95/"/>
      <url>/2022/03/20/%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：228,阅读全文大约需要1分钟</p><blockquote><p>sql的索引有<code>B+</code>树和<code>Hash</code>结构两种，<strong>聚集索引</strong>和<strong>非聚集索引</strong>都是采用<code>B+</code>树索引。</p></blockquote><h1 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h1><p><strong>定义</strong>：数据行的物理顺序与该索引列值的逻辑顺序相同，一个表只能有一个聚集索引。即代表物理行位置的索引。</p><p>不创建索引，系统会自动创建隐含列作为表的聚集索引。</p><p><code>SQL Server</code>默认主键就是聚集索引，也可以指定非聚集索引<br>创建完表后再指定聚集索引<br><code>create clustered index clustered_index on table_name(colum_name)</code></p><p><code>MySql</code>主键就是聚集索引，直接设置主键就行了<br><code>alter table table_name add primary key(colum_name)</code></p><h1 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h1><p><strong>定义</strong>：该索引中索引的逻辑顺序与磁盘上行的物理存储顺序不同，一个表中可以拥有多个非聚集索引。</p><p>非聚集索引也可以作为主键，视数据库。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> SQL </tag>
            
            <tag> 索引 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存穿透、击穿、雪崩</title>
      <link href="/2022/03/20/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E3%80%81%E9%9B%AA%E5%B4%A9/"/>
      <url>/2022/03/20/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E5%87%BB%E7%A9%BF%E3%80%81%E9%9B%AA%E5%B4%A9/</url>
      
        <content type="html"><![CDATA[<p>文章字数：605,阅读全文大约需要2分钟</p><h1 id="正常流程"><a href="#正常流程" class="headerlink" title="正常流程"></a>正常流程</h1><ol><li>前端请求数据</li><li>先从缓存找，找到直接返回结果</li><li>取不到从数据库中取</li><li>数据库取到更新到缓存再返回结果</li><li>数据库也没有，返回空</li></ol><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><p><strong>描述</strong><br>用户不断发送内存和数据库中都没有的数据。导致数据库压力过大</p><p><strong>解决</strong></p><ol><li>基础规则校验，如<code>id &gt; 0</code>等屏蔽必然不存在的数据请求</li><li>布隆过滤器，排除必然不存在的数据</li><li>缓存和数据库都没有的数据，查出来之后可以将值设为空保存在内存中，设置有效期。</li></ol><h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><p><strong>描述</strong><br>并发量大的时候缓存失效，导致请求全部压到了数据库上。</p><p><strong>解决</strong></p><ol><li>热点数据永不过期</li><li>峰值前预热</li><li>读数据库加锁，只让一个线程读取数据库。获取锁失败的线程自旋，等待若干时间后再从内存中获取</li></ol><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><p><strong>描述</strong><br>缓存中的数据大批量过期，导致数据查询量过大。缓存击穿是单个数据过期，缓存雪崩是多个数据过期</p><p><strong>解决</strong></p><ol><li>缓存数据过期时间随机设置，防止同一时间设置的缓存又同时失效</li><li>分布式缓存可以将热点数据均匀分布在不同缓存数据库中</li><li>热点数据永不过期</li><li>后端进行服务降级和限流</li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义Repository实现</title>
      <link href="/2022/03/20/%E8%87%AA%E5%AE%9A%E4%B9%89Repository%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/03/20/%E8%87%AA%E5%AE%9A%E4%B9%89Repository%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>文章字数：331,阅读全文大约需要1分钟</p><blockquote><p>在jpa的基础上增加自己的实现 <a href="https://blog.csdn.net/u011659172/java/article/details/51537602" target="_blank" rel="noopener">原文</a></p></blockquote><h1 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h1><ol><li><p>创建一个中间层Dao,继承jpa的两个接口，并用注解注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoRepositoryBean</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>,<span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>,<span class="title">ID</span>&gt;,<span class="title">JpaSpecificationExecutor</span>&lt;<span class="title">T</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建上面的dao+impl的实现类，拓展功能。</p></li><li><p>其它dao直接继承与<code>BeseDao</code></p></li></ol><h1 id="NoRepositoryBean"><a href="#NoRepositoryBean" class="headerlink" title="@NoRepositoryBean"></a>@NoRepositoryBean</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.data.repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation to exclude repository interfaces from being picked up and thus in consequence getting an instance being</span></span><br><span class="line"><span class="comment"> * created.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * This will typically be used when providing an extended base interface for all repositories in combination with a</span></span><br><span class="line"><span class="comment"> * custom repository base class to implement methods declared in that intermediate interface. In this case you typically</span></span><br><span class="line"><span class="comment"> * derive your concrete repository interfaces from the intermediate one but don't want to create a Spring bean for the</span></span><br><span class="line"><span class="comment"> * intermediate interface.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Oliver Gierke</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NoRepositoryBean &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">当为所有存储库提供扩展的基础接口，并结合自定义存储库基类以实现在该中间接口中声明的方法时，通常会使用此方法。 </span><br><span class="line">在这种情况下，您通常会从中间接口派生出具体的存储库接口，但又不想为中间接口创建Spring bean。</span><br></pre></td></tr></table></figure><h1 id="配置开启功能"><a href="#配置开启功能" class="headerlink" title="配置开启功能"></a>配置开启功能</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.data.jpa.config;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.config.EnableJpaRepositories;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.web.config.EnableSpringDataWebSupport;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过注解配置factory-class</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaowen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2016年5月30日</span></span><br><span class="line"><span class="comment"> * @ version 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaRepositories</span>(basePackages = <span class="string">"com.data.jpa**.dao"</span>, </span><br><span class="line">repositoryFactoryBeanClass = CustomRepositoryFactoryBean<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">EnableSpringDataWebSupport</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">JpaDataConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个注解是为基类仓库拓展准备的</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jpa </tag>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义类加载器-1</title>
      <link href="/2022/03/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-1/"/>
      <url>/2022/03/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8-1/</url>
      
        <content type="html"><![CDATA[<p>文章字数：92,阅读全文大约需要1分钟</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">//指定路径</span></span><br><span class="line">    <span class="keyword">private</span> String path ;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClassLoader</span><span class="params">(String classPath)</span></span>&#123;</span><br><span class="line">        path=classPath;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写findClass方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name 是我们这个类的全路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class log = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取该class文件字节码数组</span></span><br><span class="line">        <span class="keyword">byte</span>[] classData = getData();</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (classData != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将class的字节码数组转换成Class类的实例</span></span><br><span class="line">            log = defineClass(name, classData, <span class="number">0</span>, classData.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> log;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将class文件转化为字节码数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] getData() &#123;</span><br><span class="line"> </span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="keyword">if</span> (file.exists())&#123;</span><br><span class="line">            FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">            ByteArrayOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"> </span><br><span class="line">                <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> ((size = in.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                    out.write(buffer, <span class="number">0</span>, size);</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    in.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"> </span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> out.toByteArray();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
            <tag> ClassLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义类加载器</title>
      <link href="/2022/03/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/"/>
      <url>/2022/03/20/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：111,阅读全文大约需要1分钟<br>1.自定义类加载器， 实现<code>findClass</code>方法。<code>loadClass</code>在找不到类时会调用此方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClassLoader</span> <span class="keyword">extends</span> <span class="title">ClassLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                String filePath = <span class="string">"/Users/zhanjun/Desktop/"</span> + name.replace(<span class="string">'.'</span>, File.separatorChar) + <span class="string">".class"</span>;</span><br><span class="line">                <span class="comment">//指定读取磁盘上的某个文件夹下的.class文件：</span></span><br><span class="line">                File file = <span class="keyword">new</span> File(filePath);</span><br><span class="line">                FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">                <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[fis.available()];</span><br><span class="line">                fis.read(bytes);</span><br><span class="line">                <span class="comment">//调用defineClass方法，将字节数组转换成Class对象</span></span><br><span class="line">                Class&lt;?&gt; clazz = <span class="keyword">this</span>.defineClass(name, bytes, <span class="number">0</span>, bytes.length);</span><br><span class="line">                fis.close();</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (FileNotFoundException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.findClass(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>调用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Class clazz0 = <span class="keyword">new</span> MyClassLoader().loadClass(<span class="string">"com.sankuai.discover.memory.OOM"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ClassLoader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自旋锁</title>
      <link href="/2022/03/20/%E8%87%AA%E6%97%8B%E9%94%81/"/>
      <url>/2022/03/20/%E8%87%AA%E6%97%8B%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>文章字数：658,阅读全文大约需要2分钟</p><blockquote><p>自旋锁指的是线程在为获取到许可的情况下循环获取许可状态</p></blockquote><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ol><li>TAS（Test And Set Lock）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TASLock</span> <span class="keyword">implements</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始值为false；</span></span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean mutex=<span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//返回之前的值，并设置为true fixme 如果之前未true则进入自旋状态</span></span><br><span class="line">        <span class="comment">//fixme mutex之前状态时FALSE时才返回，表示获取到锁</span></span><br><span class="line">        <span class="comment">//原子变量的改动对所有线程都可见</span></span><br><span class="line">        <span class="keyword">while</span>(mutex.getAndSet(<span class="keyword">true</span>))&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mutex.set(<span class="keyword">false</span>);<span class="comment">//fixme ?释放锁？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TASLockMain</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TASLock cost=<span class="keyword">new</span> TASLock ();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//自旋获取许可</span></span><br><span class="line">        cost.lock();</span><br><span class="line">        <span class="comment">//释放许可</span></span><br><span class="line">        cost.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            Thread t=<span class="keyword">new</span> Thread(()-&gt; func());</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不停的设置值会造成不停通知其他芯片值更改，产生缓存一致性风暴</p></blockquote><ol start="2"><li>TTASLock（Test Test And Set Lock）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test.lock;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试-测试-设置自旋锁，使用AtomicBoolean原子变量保存状态</span></span><br><span class="line"><span class="comment"> * 分为两步来获取锁</span></span><br><span class="line"><span class="comment"> * 1. 先采用读变量自旋的方式尝试获取锁</span></span><br><span class="line"><span class="comment"> * 2. 当有可能获取锁时，再使用getAndSet原子操作来尝试获取锁</span></span><br><span class="line"><span class="comment"> * 优点是第一步使用读变量的方式来获取锁，在处理器内部高速缓存操作，不会产生缓存一致性流量</span></span><br><span class="line"><span class="comment"> * 缺点是当锁争用激烈的时候，第一步一直获取不到锁，getAndSet底层使用CAS来实现，一直在修改共享变量的值，会引发缓存一致性流量风暴</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TTASLock</span> <span class="keyword">implements</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> AtomicBoolean mutex = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="comment">// 第一步使用读操作，尝试获取锁，当mutex为false时退出循环，表示可以获取锁</span></span><br><span class="line"><span class="keyword">while</span>(mutex.get())&#123;&#125;</span><br><span class="line"><span class="comment">// 第二部使用getAndSet方法来尝试获取锁</span></span><br><span class="line"><span class="keyword">if</span>(!mutex.getAndSet(<span class="keyword">true</span>))&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mutex.set(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"TTASLock"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>先查看是否可用再设置，少了cas次数。但是在高征用的情况下会导致多次操作才能获取到锁，增加cas次数</p></blockquote><ol start="3"><li>回退算法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.test.lock;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回退算法，降低锁争用的几率</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Backoff</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> minDelay, maxDelay;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Random random;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Backoff</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.minDelay = min;</span><br><span class="line"><span class="keyword">this</span>.maxDelay = max;</span><br><span class="line">limit = minDelay;</span><br><span class="line">random = <span class="keyword">new</span> Random();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回退，线程等待一段时间</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">backoff</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line"><span class="keyword">int</span> delay = random.nextInt(limit);</span><br><span class="line">limit = Math.min(maxDelay, <span class="number">2</span> * limit);</span><br><span class="line">Thread.sleep(delay);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">package</span> com.test.lock;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicBoolean;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回退自旋锁，在测试-测试-设置自旋锁的基础上增加了线程回退，降低锁的争用</span></span><br><span class="line"><span class="comment"> * 优点是在锁高争用的情况下减少了锁的争用，提高了执行的性能</span></span><br><span class="line"><span class="comment"> * 缺点是回退的时间难以控制，需要不断测试才能找到合适的值，而且依赖底层硬件的性能，扩展性差</span></span><br><span class="line"><span class="comment"> * **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BackoffLock</span> <span class="keyword">implements</span> <span class="title">Lock</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_DELAY, MAX_DELAY;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BackoffLock</span><span class="params">(<span class="keyword">int</span> min, <span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">        MIN_DELAY = min;</span><br><span class="line">        MAX_DELAY = max;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> AtomicBoolean mutex = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 增加回退对象</span></span><br><span class="line">        Backoff backoff = <span class="keyword">new</span> Backoff(MIN_DELAY, MAX_DELAY);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 第一步使用读操作，尝试获取锁，当mutex为false时退出循环，表示可以获取锁</span></span><br><span class="line">            <span class="keyword">while</span>(mutex.get())&#123;&#125;</span><br><span class="line">            <span class="comment">// 第二部使用getAndSet方法来尝试获取锁</span></span><br><span class="line">            <span class="keyword">if</span>(!mutex.getAndSet(<span class="keyword">true</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//回退</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    backoff.backoff();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;    </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mutex.set(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"TTASLock"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>获取失败后线程休眠一段时间，减少冲突概率。缺点是休眠时间不好设置，需要根据硬件条件调整参数。</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> 锁 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取当前时间</title>
      <link href="/2022/03/20/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/"/>
      <url>/2022/03/20/%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：201,阅读全文大约需要1分钟</p><blockquote><p>java获取当前时间可以使用 System.currentTimeMillis()获取当前毫秒数，也可以直接new Date()获取当前日期类，date.getTime()获取毫秒数</p></blockquote><h1 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h1><p>Date的无参构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>本质上也是调用System.currentTimeMillis()，所以如果需要获取当前毫秒数，<code>System.currentTimeMillis()</code>比起<code>new Date().getTime()</code>少了引用及转换，效率更高。</p><h1 id="精确度"><a href="#精确度" class="headerlink" title="精确度"></a>精确度</h1><p><code>System.currentTimeMillis()</code>依赖系统底层实现，精确度无法保证。毫秒级别的时间，测量从1970年1月1日0到现在的毫秒数。<br><code>System.nanoTime</code>也是依赖系统底层实现，但是精度为纳秒。此方法依赖cpu自身的计时器，所以不同机器返回的时间不同，只能用作计算某一时间内的时间差。</p><p>纳秒转换成毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.nanoTime()/<span class="number">1000000L</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表单重复提交</title>
      <link href="/2022/03/20/%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/"/>
      <url>/2022/03/20/%E8%A1%A8%E5%8D%95%E9%87%8D%E5%A4%8D%E6%8F%90%E4%BA%A4/</url>
      
        <content type="html"><![CDATA[<p>文章字数：165,阅读全文大约需要1分钟</p><blockquote><p>起因是邮件修改密码偶尔会提示<code>token</code>过期，后台断点发现应该是一次提交的表单提交了两次。</p></blockquote><h1 id="可能的原因"><a href="#可能的原因" class="headerlink" title="可能的原因"></a>可能的原因</h1><ol><li><p>提交的按钮放在<code>form</code>表单里（自带提交属性），但是点击事件里又提交了一次。（里面用的是异步提交）</p></li><li><p>回车触发提交事件，可能事件被多次触发（加了日志输出，排除了）</p></li><li><p>其它代码也进行了提交操作</p></li></ol><h1 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h1><p>最后在<code>chrome</code>的<code>event listeners</code>找到了另一个表单提交事件，是框架封装的提交，和自己的提交重复了。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取本机ip的两种方式</title>
      <link href="/2022/03/20/%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAip%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/03/20/%E8%8E%B7%E5%8F%96%E6%9C%AC%E6%9C%BAip%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：416,阅读全文大约需要1分钟</p><blockquote><p>获取服务器ip，之前一直用<code>request.getHeader(&quot;Host&quot;)</code>获取。后来发现本机访问时获取到的是<code>127.0.0.1</code>这个地址，而我需要的是其它地方也能访问到的地址。</p></blockquote><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol><li><p>解析<code>HostName</code>获取,直接<code>InetAddress.getLocalHost().getHostAddress()</code></p></li><li><p>遍历网卡的地址（即本机所有ip地址），从中找到符合规则的。</p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.Inet4Address;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.NetworkInterface;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 两种方法，单网卡直接获取，多网卡选择获取</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1. 单网卡时，通过解析本机hostName获取ip地址</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress inet = InetAddress.getLocalHost();</span><br><span class="line">            String ipAddress = inet.getHostAddress();</span><br><span class="line">            System.out.println(<span class="string">"单网卡获取ip地址 = "</span> + ipAddress);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 多网卡状态下从所有的网卡ip中找出需要的ip</span></span><br><span class="line">        <span class="comment">// 这里的逻辑是能找到外网地址返回外网，不能找到返回最后一个内网地址</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String serverIp = getServerIpv4Address(ip -&gt; &#123;</span><br><span class="line">                <span class="comment">// 本机地址过滤</span></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.equals(<span class="string">"127.0.0.1"</span>, ip.trim())) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 内网地址权重1</span></span><br><span class="line">                <span class="keyword">if</span> (ip.matches(</span><br><span class="line">                    <span class="string">"^(127\\.0\\.0\\.1)|(localhost)|(10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;)|(172\\.((1[6-9])|(2\\d)|(3[01]))\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;)|(192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;)$"</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 外网地址权重2</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"遍历网卡地址选取ip = "</span> + serverIp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过网卡查找网卡绑定的ipv4地址，并交由filter进行权重判断</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filter</span></span><br><span class="line"><span class="comment">     *            自定义选择逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回权重最大的ip</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getServerIpv4Address</span><span class="params">(Function&lt;String, Integer&gt; filter)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Map&lt;Integer, String&gt; resMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 获得本机的所有网络接口</span></span><br><span class="line">        Enumeration&lt;NetworkInterface&gt; nifs = NetworkInterface.getNetworkInterfaces();</span><br><span class="line">        <span class="keyword">while</span> (nifs.hasMoreElements()) &#123;</span><br><span class="line">            NetworkInterface nif = nifs.nextElement();</span><br><span class="line">            <span class="comment">// 获得与该网络接口绑定的 IP 地址，一般只有一个</span></span><br><span class="line">            Enumeration&lt;InetAddress&gt; addresses = nif.getInetAddresses();</span><br><span class="line">            <span class="keyword">while</span> (addresses.hasMoreElements()) &#123;</span><br><span class="line">                InetAddress addr = addresses.nextElement();</span><br><span class="line">                <span class="comment">// 只关心 IPv4 地址</span></span><br><span class="line">                <span class="keyword">if</span> (addr <span class="keyword">instanceof</span> Inet4Address) &#123;</span><br><span class="line">                    String ip = addr.getHostAddress();</span><br><span class="line">                    <span class="comment">// 自定义过滤器，返回权重。</span></span><br><span class="line">                    Integer index = filter.apply(ip);</span><br><span class="line">                    <span class="keyword">if</span> (index != <span class="number">0</span>) &#123;</span><br><span class="line">                        resMap.put(index, ip);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Collection&lt;Integer&gt; collection = resMap.keySet();</span><br><span class="line">        <span class="keyword">if</span> (collection.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Integer i = Collections.max(collection);</span><br><span class="line">            <span class="keyword">return</span> resMap.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 没有匹配结果</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过滤器</title>
      <link href="/2022/03/20/%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>/2022/03/20/%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：184,阅读全文大约需要1分钟</p><blockquote><p>注解创建过滤器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xc.common.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: FilterDemo01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:filter的三种典型应用： &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *                             1、可以在filter中根据条件决定是否调用chain.doFilter(request, response)方法， 即是否让目标资源执行&lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *                             2、在让目标资源执行之前，可以对request\response作预处理，再让目标资源执行 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> *                             3、在目标资源执行之后，可以捕获目标资源的执行结果，从而实现一些特殊的功能 &lt;br/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"FilterDemo01"</span>, urlPatterns = &#123; <span class="string">"/*"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo01</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----FilterDemo01过滤器初始化----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对request和response进行一些预处理</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"FilterDemo01执行前！！！"</span>);</span><br><span class="line">        chain.doFilter(request, response); <span class="comment">// 让目标资源执行，放行</span></span><br><span class="line">        System.out.println(<span class="string">"FilterDemo01执行后！！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"----过滤器销毁----"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> filter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>踩坑终极指南</title>
      <link href="/2022/03/20/%E8%B8%A9%E5%9D%91%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/"/>
      <url>/2022/03/20/%E8%B8%A9%E5%9D%91%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<p>文章字数：192,阅读全文大约需要1分钟</p><blockquote><p>遇到一个无法解决的bug？debug发现代码迷之跳跃？添加了代码重新编译，然而出现迷之错误？请收看大型通关策略类游戏《java从入门到放弃》攻略之—《踩坑终极指南》</p></blockquote><h1 id="第一步清空数据库数据"><a href="#第一步清空数据库数据" class="headerlink" title="第一步清空数据库数据"></a>第一步清空数据库数据</h1><ul><li>设置jpa为运行时创建（如果有覆盖）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.jpa.properties.hibernate.hbm2ddl.auto&#x3D;create</span><br></pre></td></tr></table></figure><h1 id="第二步清空redis"><a href="#第二步清空redis" class="headerlink" title="第二步清空redis"></a>第二步清空redis</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Redis0:&gt; select 01 &#x2F;&#x2F;选择数据库</span><br><span class="line">Redis01:&gt; flushAll  &#x2F;&#x2F;清空缓存</span><br></pre></td></tr></table></figure><h1 id="第三步重启软件"><a href="#第三步重启软件" class="headerlink" title="第三步重启软件"></a>第三步重启软件</h1><blockquote><p>到这一步之后重启软件一般因为缓存（spring,redis…）导致的问题都能解决了</p></blockquote><h1 id="第四步重启电脑"><a href="#第四步重启电脑" class="headerlink" title="第四步重启电脑"></a>第四步重启电脑</h1><blockquote><p>此问题一般是端口占用，服务冲突，软件抽了等。。。</p></blockquote><h1 id="第五步换电脑"><a href="#第五步换电脑" class="headerlink" title="第五步换电脑"></a>第五步换电脑</h1><blockquote><p>怎么可能是我的代码问题？</p></blockquote><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过接口注入多个实现类</title>
      <link href="/2022/03/20/%E9%80%9A%E8%BF%87%E6%8E%A5%E5%8F%A3%E6%B3%A8%E5%85%A5%E5%A4%9A%E4%B8%AA%E5%AE%9E%E7%8E%B0%E7%B1%BB/"/>
      <url>/2022/03/20/%E9%80%9A%E8%BF%87%E6%8E%A5%E5%8F%A3%E6%B3%A8%E5%85%A5%E5%A4%9A%E4%B8%AA%E5%AE%9E%E7%8E%B0%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：187,阅读全文大约需要1分钟</p><blockquote><p>通过注入一个List<BaseService>的方法注入多个实现类，然后再循环遍历列表，得出需要使用的实现类。可以作为策略模式的实现之一。</p></blockquote><h1 id="Autowire-和-Resource"><a href="#Autowire-和-Resource" class="headerlink" title="@Autowire 和 @Resource"></a>@Autowire 和 @Resource</h1><ol><li>这两个都是用来装配bean的，可以加在字段或方法上（get,set,构造方法）</li><li><code>Autowired</code>默认使用类型装配，找到多个才会根据变量名找</li><li><code>Autowired</code>默认<code>required</code>为<code>true</code>即找不到会报错</li><li><code>Resource</code>是先通过名字找，然后才是类型</li></ol><h1 id="使用-Autowired实现"><a href="#使用-Autowired实现" class="headerlink" title="使用@Autowired实现"></a>使用@Autowired实现</h1><p><code>Autowired</code>是通过类型先匹配的，所以可以匹配到多个类。如果接受的变量刚好是集合，便能把匹配的所有类都赋值给集合。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;BaseService&gt; services;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> bean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑关联和物理关联</title>
      <link href="/2022/03/20/%E9%80%BB%E8%BE%91%E5%85%B3%E8%81%94%E5%92%8C%E7%89%A9%E7%90%86%E5%85%B3%E8%81%94/"/>
      <url>/2022/03/20/%E9%80%BB%E8%BE%91%E5%85%B3%E8%81%94%E5%92%8C%E7%89%A9%E7%90%86%E5%85%B3%E8%81%94/</url>
      
        <content type="html"><![CDATA[<p>文章字数：204,阅读全文大约需要1分钟</p><blockquote><p>逻辑关联/逻辑外键 和 物理关联/物理外键 指的是 实体对象/数据库 中 对象和对象/表与表 的关系是否有设计上的关联</p></blockquote><h1 id="逻辑关联"><a href="#逻辑关联" class="headerlink" title="逻辑关联"></a>逻辑关联</h1><p>逻辑关联指的是实体类上一个值对应另一个对象的id,这个对应仅限于思想上的。<br>逻辑外键就是思想上数据库中的一个字段对应另一个表的id,但是没有任何额外操作。写程序时自己判断如何关联/连表查询</p><h1 id="物理关联"><a href="#物理关联" class="headerlink" title="物理关联"></a>物理关联</h1><p>物理关联指的是实体类上明确标注了对象间的管理，管理维护是由系统来维护而不是额外代码手动维护。<br>物理外键即设置了外键关联。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>选择排序</title>
      <link href="/2022/03/20/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
      <url>/2022/03/20/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>文章字数：63,阅读全文大约需要1分钟</p><blockquote><p>选择排序就是选出最大的，放在第一个，再选出最大的，放第二个。。。</p></blockquote><p>时间复杂度 o(n^2)</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> arr[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length ; i++ )&#123;</span><br><span class="line">        <span class="keyword">int</span> min = i;<span class="comment">//最小元素的下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j &lt; arr.length ; j++ )&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &lt; arr[min])&#123;</span><br><span class="line">                min = j;<span class="comment">//找最小值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//交换位置</span></span><br><span class="line">        <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">        arr[i] = arr[min];</span><br><span class="line">        arr[min] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置文件值映射到类属性</title>
      <link href="/2022/03/20/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%80%BC%E6%98%A0%E5%B0%84%E5%88%B0%E7%B1%BB%E5%B1%9E%E6%80%A7/"/>
      <url>/2022/03/20/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%80%BC%E6%98%A0%E5%B0%84%E5%88%B0%E7%B1%BB%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：52,阅读全文大约需要1分钟</p><blockquote><p>相比于<code>@Value</code>这个方法更加简便一点</p></blockquote><p><code>person.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">person:</span><br><span class="line">    lastName: hello</span><br><span class="line">    age: 18</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 引入配置文件</span></span><br><span class="line"><span class="meta">@PropertySource</span>(value = &#123;<span class="string">"classpath:person.properties"</span>&#125;)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">// 2. 加载开头为person的</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"person"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 3. 属性和配置文件的值对应</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零拷贝原理</title>
      <link href="/2022/03/20/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8E%9F%E7%90%86/"/>
      <url>/2022/03/20/%E9%9B%B6%E6%8B%B7%E8%B4%9D%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>文章字数：548,阅读全文大约需要2分钟</p><blockquote><p>归纳自<a href="https://www.jianshu.com/p/2581342317ce" target="_blank" rel="noopener">原文</a>。</p></blockquote><p>从文件读取信息并发送到其它服务器的过程中普通文件读取和零拷贝的区别</p><h1 id="传统方式"><a href="#传统方式" class="headerlink" title="传统方式"></a>传统方式</h1><ol><li><code>File.read(file, buf, len)</code>读取文件内容到缓冲区<code>buf</code>里</li><li><code>Socket.send(socket, buf, len)</code>发送数据</li></ol><p>看上去数据只经过两次复制： 文件-&gt;buf-&gt;socket的缓冲区<br>其实底层步骤是</p><ol><li>调用<code>read()</code>方法，<code>DMA(direct memory access 直接内存存取)</code>会现将数据存储到<strong>内核空间</strong>的读取缓冲区。</li><li><code>read()</code>方法调用返回时，因为应用程序需要操作此数据(即赋值给<code>buf</code>)，因此触发了一次上下文切换（内核态-&gt;用户态）。数据被拷贝到了<strong>用户地址空间</strong>。（<code>cpu</code>需要参与操作）</li><li>调用<code>send()</code>方法，此时又触发了一次上下文切换（用户态-&gt;内核态）。<code>buf</code>里的数据被拷贝到与目标套接字相关的<strong>内核空间</strong>缓冲区，此操作需要<code>cpu</code>参与</li><li><code>send()</code>方法调用返回前会进行最后一次拷贝，由<code>DMA(direct memory access 直接内存存取)</code>将数据从缓冲区传到协议引擎进行发送。</li></ol><p>也就是总共进行了四次拷贝操作<br>dma-&gt;cpu-&gt;cpu-&gt;dma</p><h1 id="零拷贝方式"><a href="#零拷贝方式" class="headerlink" title="零拷贝方式"></a>零拷贝方式</h1><p>传统方式中<code>cpu</code>的两次操作其实是多余的。我们只是发送数据，不需要对于数据进行操作。所以无需进入用户态，直接在内核态进行数据转移即可。</p><p><code>FileChannel</code>类的<code>transferTo()</code>可以实现将在两个内核缓冲区中搭建一个传递通道，可以将传统方式的两次<code>cpu</code>操作转换成一次<code>cpu</code>操作，即<code>transferTo()</code>。</p><p>从操作系统角度来看，数据只在内核空间内传递就已经算是零拷贝。<br>内核需要复制的原因是因为通用硬件<code>DMA</code>访问需要连续的内存空间（因此需要缓冲区）。 但是，如果硬件支持<code>scatter-and-gather</code>，这是可以避免的。<br>即内部会自动将内核的数据之间发送给套接字引擎。即内核区域只存在一份数据。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 零拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC</title>
      <link href="/2022/03/20/JUC/"/>
      <url>/2022/03/20/JUC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2051,阅读全文大约需要8分钟</p><blockquote><p>Java.Util.Concurrent是JDK1.5之后推出的java并发工具包。其中有很多多线程工具类，能有效减少竞争条件，减少死锁进程。</p></blockquote><h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><blockquote><p>线程池是一组可复用的线程集合。由处理线程+任务队列组成。</p></blockquote><p>涉及对象信息</p><ol><li><code>Executor</code>: 线程池中<code>Runnable</code>任务执行者。</li><li><code>ExecutorService</code>: 管理线程池对象，能够把<code>Runnable</code>和<code>Callable</code>交到线程池中执行</li><li><code>Executors</code>: 此类的静态方法能够生成不同的线程池，并返回<code>ExecutorService</code>用于管理。</li></ol><p>常用程池类型</p><blockquote><p>可以使用ThreadPoolExecutor 的构造函数创建属性细节不同的线程池，一下为已经定义好的线程池</p></blockquote><ol><li><p><code>newFixedThreadPool</code>: 固定大小的线程池，共享的无界队列管理任务。关闭前发生异常导致线程终止，则会使用新线程代替。（如果需要）</p></li><li><p><code>newCachedThreadPool</code>: 无界线程池，当需要线程使用但是线程池内无线程，则会新建一个线程并加入线程池。60s未用的线程会被移除。</p></li><li><p><code>newSingleThreadExecutor</code>: 无界队列，单个执行线程。如果关闭前因为异常线程被迫结束，后续需要线程时会创建新的线程并替换不可用的。</p></li><li><p><code>ThreadPoolExecutor</code>: 这个类的构造方法可以生成自定义配置的线程池，可以设置<code>最大线程数</code>，<code>最小线程数</code>，<code>空闲线程keepAlive时间</code>。</p></li></ol><p>以上线程池生成后返回的都是<code>ExecutorService</code>对象</p><ol><li><p><code>ExecutorService.submit()</code>: 方法可以提交任务给线程池</p></li><li><p><code>ExecutorService.shutdown()</code>: 此方法可以结束线程池</p></li></ol><h1 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h1><h2 id="Semaphore计数信号量-许可集合"><a href="#Semaphore计数信号量-许可集合" class="headerlink" title="Semaphore计数信号量(许可集合)"></a>Semaphore计数信号量(许可集合)</h2><blockquote><p>可以初始化任意数量的许可。<code>acquire()</code>方法会拿走一个许可，如果没有许可了则阻塞。<code>release()</code>方法可以释放当前线程拿走的许可。限制同一时间可以同时执行的线程数量</p></blockquote><p>10个人抢2个位置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySemaphore</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Semaphore position;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MySemaphore</span><span class="params">(<span class="keyword">int</span> i, Semaphore s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = i;</span><br><span class="line"><span class="keyword">this</span>.position = s;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//这个方法可以判断还有多少许可</span></span><br><span class="line"><span class="keyword">if</span> (position.availablePermits() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"顾客["</span> + <span class="keyword">this</span>.id + <span class="string">"]进入厕所，有空位"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"顾客["</span> + <span class="keyword">this</span>.id + <span class="string">"]进入厕所，没空位，排队"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取到空厕所了（没许可等待许可）</span></span><br><span class="line">position.acquire();</span><br><span class="line">System.out.println(<span class="string">"顾客["</span> + <span class="keyword">this</span>.id + <span class="string">"]获得坑位"</span>);</span><br><span class="line"><span class="comment">//使用中...</span></span><br><span class="line">Thread.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>));</span><br><span class="line">System.out.println(<span class="string">"顾客["</span> + <span class="keyword">this</span>.id + <span class="string">"]使用完毕"</span>);</span><br><span class="line"><span class="comment">//厕所使用完之后释放</span></span><br><span class="line">position.release();</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">ExecutorService list = Executors.newCachedThreadPool();</span><br><span class="line">Semaphore position = <span class="keyword">new</span> Semaphore(<span class="number">2</span>);<span class="comment">//只有两个厕所</span></span><br><span class="line"><span class="comment">//有十个人</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">list.submit(<span class="keyword">new</span> MySemaphore(i + <span class="number">1</span>, position));</span><br><span class="line">&#125;</span><br><span class="line">list.shutdown();</span><br><span class="line">position.acquireUninterruptibly(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"使用完毕，需要清扫了"</span>);</span><br><span class="line">position.release(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReentrantLock可重入互斥锁"><a href="#ReentrantLock可重入互斥锁" class="headerlink" title="ReentrantLock可重入互斥锁"></a>ReentrantLock可重入互斥锁</h2><blockquote><p>一个可重入的互斥锁定 Lock，它具有与使用 synchronized 方法和语句所访问的隐式监视器锁定相同的一些基本行为和语义，但功能更强大。</p></blockquote><ol><li><p><code>ReentrantLock</code>将由最近成功获得锁定，并且还没有释放该锁定的线程所拥有。</p></li><li><p>当锁定没有被另一个线程所拥有时，调用 lock 的线程将成功获取该锁定并返回。</p></li><li><p>如果当前线程已经拥有该锁定，此方法将立即返回。可以使用 isHeldByCurrentThread() 和 getHoldCount() 方法来检查此情况是否发生。</p></li><li><p>此类的构造方法接受一个可选的公平参数。当设置为 true时，在多个线程的争用下，这些锁定倾向于将访问权授予等待时间最长的线程。否则此锁定将无法保证任何特定访问顺序。</p></li></ol><p>与采用默认设置（使用不公平锁定）相比，<code>使用公平锁定的程序在许多线程访问时表现为很低的总体吞吐量（即速度很慢，常常极其慢），但是在获得锁定和保证锁定分配的均衡性时差异较小。</code><br>不过要注意的是，公平锁定不能保证线程调度的公平性。因此，使用公平锁定的众多线程中的一员可能获得多倍的成功机会，这种情况发生在其他活动线程没有被处理并且目前并未持有锁定时。还要注意的是，未定时的 tryLock 方法并没有使用公平设置。因为即使其他线程正在等待，只要该锁定是可用的，此方法就可以获得成功。</p><p>基本使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">lock.lock(); <span class="comment">// block until condition holds</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// ... method body</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">lock.unlock()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CountDownLatch同步辅助类（计数）"><a href="#CountDownLatch同步辅助类（计数）" class="headerlink" title="CountDownLatch同步辅助类（计数）"></a>CountDownLatch同步辅助类（计数）</h2><blockquote><p>初始化锁，指定一个数量。<code>begin.await()</code>会阻塞线程，<code>begin.countDown();</code>每次计数<code>-1</code>，直到为0阻塞的线程才会释放</p></blockquote><h2 id="CyclicBarrier同步辅助类（公共屏障）"><a href="#CyclicBarrier同步辅助类（公共屏障）" class="headerlink" title="CyclicBarrier同步辅助类（公共屏障）"></a>CyclicBarrier同步辅助类（公共屏障）</h2><blockquote><p>锁初始化时指定几个<code>await()</code>之后<code>await()</code>方法才会释放当前线程</p></blockquote><p>例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.BrokenBarrierException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CyclicBarrier;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCyclicBarrier</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 徒步需要的时间: 分别代表Shenzhen, Guangzhou, Shaoguan, Changsha, Wuhan的时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] timeWalk = &#123;<span class="number">5</span>, <span class="number">8</span>, <span class="number">15</span>, <span class="number">15</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="comment">// 自驾游</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] timeSelf = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">// 旅游大巴</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] timeBus = &#123;<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> String <span class="title">now</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">return</span> sdf.format(<span class="keyword">new</span> Date()) + <span class="string">": "</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Tour</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span>[] times;</span><br><span class="line">        <span class="keyword">private</span> CyclicBarrier barrier;</span><br><span class="line">        <span class="keyword">private</span> String tourName;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Tour</span><span class="params">(CyclicBarrier barrier, String tourName, <span class="keyword">int</span>[] times)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.times = times;</span><br><span class="line">            <span class="keyword">this</span>.tourName = tourName;</span><br><span class="line">            <span class="keyword">this</span>.barrier = barrier;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(times[<span class="number">0</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Shenzhen"</span>);</span><br><span class="line">                <span class="comment">// 等三个线程执行完之后才会释放</span></span><br><span class="line">                barrier.await();</span><br><span class="line">                Thread.sleep(times[<span class="number">1</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Guangzhou"</span>);</span><br><span class="line">                barrier.await();</span><br><span class="line">                Thread.sleep(times[<span class="number">2</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Shaoguan"</span>);</span><br><span class="line">                barrier.await();</span><br><span class="line">                Thread.sleep(times[<span class="number">3</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Changsha"</span>);</span><br><span class="line">                barrier.await();</span><br><span class="line">                Thread.sleep(times[<span class="number">4</span>] * <span class="number">1000</span>);</span><br><span class="line">                System.out.println(now() + tourName + <span class="string">" Reached Wuhan"</span>);</span><br><span class="line">                barrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 三个旅行团（三个await()之后才会释放）</span></span><br><span class="line">        CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>);</span><br><span class="line">        ExecutorService exec = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        exec.submit(<span class="keyword">new</span> Tour(barrier, <span class="string">"WalkTour"</span>, timeWalk));</span><br><span class="line">        exec.submit(<span class="keyword">new</span> Tour(barrier, <span class="string">"SelfTour"</span>, timeSelf));</span><br><span class="line">        <span class="comment">// 当我们把下面的这段代码注释后，会发现，程序阻塞了，无法继续运行下去。</span></span><br><span class="line">        exec.submit(<span class="keyword">new</span> Tour(barrier, <span class="string">"BusTour"</span>, timeBus));</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h1><h2 id="BlockingQueue强化的阻塞队列"><a href="#BlockingQueue强化的阻塞队列" class="headerlink" title="BlockingQueue强化的阻塞队列"></a>BlockingQueue强化的阻塞队列</h2><blockquote><p>支持两个附加操作的 Queue，这两个操作是：检索元素时等待队列变为非空，以及存储元素时等待空间变得可用。</p></blockquote><ol><li><p>支持两个附加操作的 Queue，这两个操作是：检索元素时等待队列变为非空，以及存储元素时等待空间变得可用。</p></li><li><p>BlockingQueue 不接受 null 元素。试图 <code>add</code>、<code>put</code> 或 <code>offer</code> 一个 null 元素时，某些实现会抛出 NullPointerException。null 被用作指示 poll 操作失败的警戒值。</p></li><li><p>BlockingQueue 可以是限定容量的。它在任意给定时间都可以有一个 remainingCapacity，超出此容量，便无法无阻塞地 put 额外的元素。</p></li><li><p>没有任何内部容量约束的 BlockingQueue 总是报告 Integer.MAX_VALUE 的剩余容量。</p></li></ol><p>5.BlockingQueue 实现主要用于生产者-使用者队列，但它另外还支持 Collection 接口。因此，举例来说，使用 remove(x) 从队列中移除任意一个元素是有可能的。(最好不要使用这些操作)</p><p>然而，这种操作通常不会有效执行，<code>只能有计划地偶尔使用</code>，比如在取消排队信息时。<br>BlockingQueue 实现是线程安全的。所有排队方法都可以使用内部锁定或其他形式的并发控制来自动达到它们的目的。<br>然而，大量的 Collection 操作（addAll、containsAll、retainAll 和 removeAll）没有必要自动执行，除非在实现中特别说明。<br>因此，举例来说，在只添加了 c 中的一些元素后，addAll(c) 有可能失败（抛出一个异常）。<br>BlockingQueue 实质上不 支持使用任何一种“close”或“shutdown”操作来指示不再添加任何项。<br>这种功能的需求和使用有依赖于实现的倾向。例如，一种常用的策略是：对于生产者，插入特殊的 end-of-stream 或 poison 对象，并根据使用者获取这些对象的时间来对它们进行解释。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.BlockingQueue;    </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;   </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.LinkedBlockingQueue;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBlockingQueue</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BlockingQueue&lt;String&gt; queue = <span class="keyword">new</span> LinkedBlockingQueue&lt;String&gt;(<span class="number">3</span>);  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBlockingQueue</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.index = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            queue.put(String.valueOf(<span class="keyword">this</span>.index));  </span><br><span class="line">            System.out.println(<span class="string">"&#123;"</span> + <span class="keyword">this</span>.index + <span class="string">"&#125; in queue!"</span>);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;  </span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">            service.submit(<span class="keyword">new</span> MyBlockingQueue(i));  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                <span class="keyword">try</span> &#123;  </span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;  </span><br><span class="line">                        Thread.sleep((<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>));  </span><br><span class="line">                        <span class="keyword">if</span> (MyBlockingQueue.queue.isEmpty())  </span><br><span class="line">                            <span class="keyword">break</span>;  </span><br><span class="line">                        String str = MyBlockingQueue.queue.take();  </span><br><span class="line">                        System.out.println(str + <span class="string">" has take!"</span>);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                    e.printStackTrace();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        service.submit(thread);  </span><br><span class="line">        service.shutdown();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线程返回结果"><a href="#线程返回结果" class="headerlink" title="线程返回结果"></a>线程返回结果</h1><h2 id="CompletionService包装线程池返回结果"><a href="#CompletionService包装线程池返回结果" class="headerlink" title="CompletionService包装线程池返回结果"></a>CompletionService包装线程池返回结果</h2><blockquote><p>相比于一个个去获取线程的结果<code>Future.get()</code>会造成线程阻塞，消耗时间。循环<code>CompletionService</code>就是一个保存已经完成的线程的结果<code>Future</code>的<code>BlockingQueue</code>,<code>take()</code>方法就会从中取出一个。</p></blockquote><p>循环<code>executorCompletionService.take().get()</code>就能得到结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletionService;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorCompletionService;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCompletionService</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyCompletionService</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.id = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        ExecutorService service = Executors.newCachedThreadPool();  </span><br><span class="line">        CompletionService&lt;String&gt; completion = <span class="keyword">new</span> ExecutorCompletionService&lt;String&gt;(service);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">            completion.submit(<span class="keyword">new</span> MyCompletionService(i));  </span><br><span class="line">        &#125;  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">            System.out.println(completion.take().get());  </span><br><span class="line">        &#125;  </span><br><span class="line">        service.shutdown();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;  </span><br><span class="line">        Integer time = (<span class="keyword">int</span>) (Math.random() * <span class="number">1000</span>);  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            System.out.println(<span class="keyword">this</span>.id + <span class="string">" start"</span>);  </span><br><span class="line">            Thread.sleep(time);  </span><br><span class="line">            System.out.println(<span class="keyword">this</span>.id + <span class="string">" end"</span>);  </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.id + <span class="string">":"</span> + time;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Future异步执行结果"><a href="#Future异步执行结果" class="headerlink" title="Future异步执行结果"></a>Future异步执行结果</h2><blockquote><p>执行线程后返回的<code>Future</code>代表线程返回的结果，用于检测异步线程是否结束，如果结束获取返回值，没结束可以阻塞线程直到有结果。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Future;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFutureTask</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ExecutionException </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ExecutionException  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException </span>&#123;  </span><br><span class="line">          </span><br><span class="line">        <span class="keyword">final</span> ExecutorService exe=Executors.newFixedThreadPool(<span class="number">3</span>);  </span><br><span class="line">        Callable&lt;String&gt; call=<span class="keyword">new</span> Callable&lt;String&gt;()&#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Thread is finished"</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">        Future&lt;String&gt; task=exe.submit(call);  </span><br><span class="line">        String obj=task.get();  </span><br><span class="line">        System.out.println(obj+<span class="string">"进程结束"</span>);  </span><br><span class="line">        System.out.println(<span class="string">"总进程结束"</span>);  </span><br><span class="line">        exe.shutdown();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThreadTest</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String str;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThreadTest</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.str = str;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.setStr(<span class="string">"allen"</span>+str);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addString</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.str = <span class="string">"allen:"</span> + str;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> str;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.str = str;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="定时器延时器"><a href="#定时器延时器" class="headerlink" title="定时器延时器"></a>定时器延时器</h1><blockquote><p>创建延时任务，取消任务</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.util.concurrent.TimeUnit.SECONDS;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.Date;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledFuture;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScheduledThread</span> </span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">final</span> ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(<span class="number">2</span>);  </span><br><span class="line">        <span class="keyword">final</span> Runnable beeper = <span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                System.out.println(<span class="keyword">new</span> Date() + <span class="string">" beep "</span> + (++count));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 1秒钟后运行，并每隔2秒运行一次  </span></span><br><span class="line">        <span class="keyword">final</span> ScheduledFuture beeperHandle = scheduler.scheduleAtFixedRate(beeper, <span class="number">1</span>, <span class="number">2</span>, SECONDS);  </span><br><span class="line">        <span class="comment">// 2秒钟后运行，并每次在上次任务运行完后等待5秒后重新运行  </span></span><br><span class="line">        <span class="keyword">final</span> ScheduledFuture beeperHandle2 = scheduler.scheduleWithFixedDelay(beeper, <span class="number">2</span>, <span class="number">5</span>, SECONDS);  </span><br><span class="line">        <span class="comment">// 30秒后结束关闭任务，并且关闭Scheduler  </span></span><br><span class="line">        scheduler.schedule(<span class="keyword">new</span> Runnable() &#123;  </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">                beeperHandle.cancel(<span class="keyword">true</span>);  </span><br><span class="line">                beeperHandle2.cancel(<span class="keyword">true</span>);  </span><br><span class="line">                scheduler.shutdown();  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;, <span class="number">30</span>, SECONDS);   </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg+opencv从视频中获取人脸工具javaCV</title>
      <link href="/2022/03/20/ffmpeg+opencv%E4%BB%8E%E8%A7%86%E9%A2%91%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%BA%BA%E8%84%B8%E5%B7%A5%E5%85%B7javaCV/"/>
      <url>/2022/03/20/ffmpeg+opencv%E4%BB%8E%E8%A7%86%E9%A2%91%E4%B8%AD%E8%8E%B7%E5%8F%96%E4%BA%BA%E8%84%B8%E5%B7%A5%E5%85%B7javaCV/</url>
      
        <content type="html"><![CDATA[<p>文章字数：827,阅读全文大约需要3分钟</p><ul><li>maven</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacpp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javacv<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.bytedeco/ffmpeg --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ffmpeg<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2-1.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.bytedeco/ffmpeg-platform --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ffmpeg-platform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.2-1.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.bytedeco/opencv --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>opencv<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.1-1.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bytedeco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>opencv-platform<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.1-1.5.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bytedeco.ffmpeg.*;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.ffmpeg.global.avcodec;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.*;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.javacv.Frame;</span><br><span class="line"><span class="keyword">import</span> org.bytedeco.opencv.*;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.*;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Point;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgcodecs.Imgcodecs;</span><br><span class="line"><span class="keyword">import</span> org.opencv.imgproc.Imgproc;</span><br><span class="line"><span class="keyword">import</span> org.opencv.objdetect.CascadeClassifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.DataBufferByte;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 视频工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VidUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 人脸分类器地址 */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String HAARCASCADES = <span class="string">"F:\\test\\vid\\haarcascade_frontalface_alt_tree.xml"</span>;</span><br><span class="line">    <span class="comment">/** 分类器 */</span></span><br><span class="line">    <span class="keyword">static</span> CascadeClassifier cascade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> opencv_java();</span><br><span class="line">        <span class="keyword">new</span> ffmpeg();</span><br><span class="line">        cascade = <span class="keyword">new</span> CascadeClassifier(HAARCASCADES);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据视频获取帧信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vidPath 地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interval 获取帧的间隔</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> doFunc 每帧如何操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> indexFunc 当前执行帧数回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> totalFunc 总帧数回调</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FrameGrabber.Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFrameMatByVideo</span><span class="params">(String vidPath, <span class="keyword">int</span> interval, Consumer&lt;Mat&gt; doFunc, Consumer&lt;Integer&gt; indexFunc, Consumer&lt;Integer&gt; totalFunc)</span> <span class="keyword">throws</span> FrameGrabber.Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(FFmpegFrameGrabber fFmpegFrameGrabber = <span class="keyword">new</span> FFmpegFrameGrabber(vidPath)) &#123;</span><br><span class="line">            fFmpegFrameGrabber.start();</span><br><span class="line">            <span class="keyword">int</span> totalIndex = fFmpegFrameGrabber.getLengthInFrames();</span><br><span class="line">            <span class="keyword">if</span>(totalFunc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                totalFunc.accept(totalIndex);</span><br><span class="line">            &#125;</span><br><span class="line">            Frame frame;</span><br><span class="line">            <span class="keyword">final</span> OpenCVFrameConverter.ToOrgOpenCvCoreMat converter = <span class="keyword">new</span> OpenCVFrameConverter.ToOrgOpenCvCoreMat();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; totalIndex; i += interval) &#123;</span><br><span class="line">                <span class="keyword">if</span>(indexFunc != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    indexFunc.accept(i);</span><br><span class="line">                &#125;</span><br><span class="line">                fFmpegFrameGrabber.setFrameNumber(i);</span><br><span class="line">                frame = fFmpegFrameGrabber.grabImage();</span><br><span class="line">                doFunc.accept(converter.convert(frame));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据视频获取帧信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vidPath 地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> interval 获取帧的间隔</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> doFunc 每帧如何操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FrameGrabber.Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFrameMatByVideo</span><span class="params">(String vidPath, <span class="keyword">int</span> interval, Consumer&lt;Mat&gt; doFunc)</span> <span class="keyword">throws</span> FrameGrabber.Exception </span>&#123;</span><br><span class="line">        getFrameMatByVideo(vidPath, interval, doFunc, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将Mat保存成图片</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 图片路径 + 名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mat Mat信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">saveMatAsImg</span><span class="params">(String path, Mat mat)</span> </span>&#123;</span><br><span class="line">        Imgcodecs.imwrite(path, mat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据图片获取Mat</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mat <span class="title">getMatFromImg</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Imgcodecs.imread(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 复制Mat</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mat <span class="title">copy</span><span class="params">(Mat from)</span> </span>&#123;</span><br><span class="line">        Mat to = <span class="keyword">new</span> Mat();</span><br><span class="line">        from.copyTo(to);</span><br><span class="line">        <span class="keyword">return</span> to;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检测人脸，并返回位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcImage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MatOfRect <span class="title">faceDetect</span><span class="params">(Mat srcImage)</span> </span>&#123;</span><br><span class="line">        Mat grayImage = <span class="keyword">new</span> Mat();</span><br><span class="line">        Imgproc.cvtColor(srcImage, grayImage, Imgproc.COLOR_BGR2GRAY);</span><br><span class="line">        MatOfRect faceDetections = <span class="keyword">new</span> MatOfRect();</span><br><span class="line">        cascade.detectMultiScale(grayImage, faceDetections);</span><br><span class="line">        <span class="keyword">return</span> faceDetections;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三帧法检测运动区域</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> previousFrame 第一帧</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentFrame 第二帧</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> frame3 第三帧</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 运动区域</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mat <span class="title">mobileMonitoring</span><span class="params">(Mat previousFrame, Mat currentFrame, Mat frame3)</span> </span>&#123;</span><br><span class="line">        Imgproc.cvtColor(previousFrame, previousFrame, Imgproc.COLOR_BGR2GRAY);</span><br><span class="line">        Imgproc.cvtColor(currentFrame, currentFrame, Imgproc.COLOR_BGR2GRAY);</span><br><span class="line">        Imgproc.cvtColor(frame3, frame3, Imgproc.COLOR_BGR2GRAY);</span><br><span class="line"></span><br><span class="line">        Mat difFrame = <span class="keyword">new</span> Mat(), difFrame2 = <span class="keyword">new</span> Mat(), difFrame3 = <span class="keyword">new</span> Mat(), tempFrame = <span class="keyword">new</span> Mat();</span><br><span class="line"></span><br><span class="line">        Core.absdiff(currentFrame, previousFrame, difFrame);</span><br><span class="line">        Core.absdiff(previousFrame, frame3, difFrame2);</span><br><span class="line">        Core.bitwise_and(difFrame, difFrame2, difFrame3);</span><br><span class="line"></span><br><span class="line">        Imgproc.threshold(difFrame3, tempFrame, <span class="number">20</span>, <span class="number">255.0</span>, Imgproc.THRESH_BINARY);</span><br><span class="line">        Imgproc.dilate(tempFrame, tempFrame, <span class="keyword">new</span> Mat());</span><br><span class="line">        Imgproc.erode(tempFrame, tempFrame, <span class="keyword">new</span> Mat());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> tempFrame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三帧法运动检测</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> previousFrame</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentFrame</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> frame3</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isMove</span><span class="params">(Mat previousFrame, Mat currentFrame, Mat frame3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;MatOfPoint&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Mat hierarchy = <span class="keyword">new</span> Mat();</span><br><span class="line">        Mat moveMat = mobileMonitoring(previousFrame, currentFrame, frame3);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * mode:</span></span><br><span class="line"><span class="comment">         * RETR_EXTERNAL只检测最外围的轮廓。</span></span><br><span class="line"><span class="comment">         * RETR_LIST检测所有轮廓，不建立等级关系，彼此独立。</span></span><br><span class="line"><span class="comment">         * RETR_CCOMP检测所有轮廓，但所有轮廓都只建立两个等级关系 。</span></span><br><span class="line"><span class="comment">         * RETR_TREE检测所有轮廓，并且所有轮廓建立一个树结构，层次完整。</span></span><br><span class="line"><span class="comment">         * RETR_FLOODFILL洪水填充法</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * method:</span></span><br><span class="line"><span class="comment">         * CHAIN_APPROX_NONE 保存物体边界上所有连续的轮廓点</span></span><br><span class="line"><span class="comment">         * CHAIN_APPROX_SIMPLE 压缩水平方向，垂直方向，对角线方向的元素，只保留该方向的终点坐标，例如一个矩形轮廓只需4个点来保存轮廓信息</span></span><br><span class="line"><span class="comment">         * CV_CHAIN_APPROX_TC89_L1使用Teh-Chin 链近似算法</span></span><br><span class="line"><span class="comment">         * CV_CHAIN_APPROX_TC89_KCOS使用Teh-Chin 链近似算法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Imgproc.findContours(moveMat, list, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);</span><br><span class="line">        <span class="keyword">for</span> (MatOfPoint point : list) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">double</span> contour = Imgproc.contourArea(point);</span><br><span class="line">            <span class="keyword">if</span>(contour &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 三帧法运动检测并画框</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> previousFrame</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentFrame</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> frame3</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">moveRectangle</span><span class="params">(Mat previousFrame, Mat currentFrame, Mat frame3, String path)</span> </span>&#123;</span><br><span class="line">        Mat baseFrame = <span class="keyword">new</span> Mat();</span><br><span class="line">        currentFrame.copyTo(baseFrame);</span><br><span class="line">        <span class="keyword">final</span> ArrayList&lt;MatOfPoint&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Mat hierarchy = <span class="keyword">new</span> Mat();</span><br><span class="line">        Mat moveMat = mobileMonitoring(previousFrame, currentFrame, frame3);</span><br><span class="line">        Imgproc.findContours(moveMat, list, hierarchy, Imgproc.RETR_EXTERNAL, Imgproc.CHAIN_APPROX_SIMPLE);</span><br><span class="line">        <span class="keyword">for</span> (MatOfPoint point : list) &#123;</span><br><span class="line">            <span class="keyword">final</span> MatOfPoint2f matOfPoint2f = <span class="keyword">new</span> MatOfPoint2f(point.toArray());</span><br><span class="line">            <span class="keyword">final</span> RotatedRect rotatedRect = Imgproc.minAreaRect(matOfPoint2f);</span><br><span class="line">            <span class="keyword">final</span> Rect rect = rotatedRect.boundingRect();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">double</span> contour = Imgproc.contourArea(point);</span><br><span class="line">            <span class="keyword">if</span>(contour &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">                Imgproc.rectangle(baseFrame, <span class="keyword">new</span> Point(rect.x, rect.y), <span class="keyword">new</span> Point(rect.x + rect.width, rect.y + rect.height),<span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        saveMatAsImg(path, baseFrame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 人脸画框</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcImage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mat <span class="title">faceRectangle</span><span class="params">(Mat srcImage)</span> </span>&#123;</span><br><span class="line">        MatOfRect faceDetections = faceDetect(srcImage);</span><br><span class="line">        Mat dstImage = <span class="keyword">new</span> Mat();</span><br><span class="line">        srcImage.copyTo(dstImage);</span><br><span class="line">        <span class="keyword">for</span> (Rect rect : faceDetections.toArray()) &#123;</span><br><span class="line">            Imgproc.rectangle(dstImage, <span class="keyword">new</span> Point(rect.x, rect.y), <span class="keyword">new</span> Point(rect.x + rect.width, rect.y + rect.height),<span class="keyword">new</span> Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dstImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切割人脸</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcImage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Mat&gt; <span class="title">cutFace</span><span class="params">(Mat srcImage)</span> </span>&#123;</span><br><span class="line">        Rect[] rectArr = faceDetect(srcImage).toArray();</span><br><span class="line">        <span class="keyword">final</span> LinkedList&lt;Mat&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(rectArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Rect rect : rectArr) &#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> Mat(srcImage, rect));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切割第一张人脸</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> srcImage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mat <span class="title">cutFirstFace</span><span class="params">(Mat srcImage)</span> </span>&#123;</span><br><span class="line">        Rect[] rectArr = faceDetect(srcImage).toArray();</span><br><span class="line">        <span class="keyword">if</span>(rectArr.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Mat(srcImage, rectArr[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用直方图比对照片</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> img1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> img2</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">compareHistogram</span><span class="params">(Mat img1, Mat img2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> retVal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != img1 &amp;&amp; <span class="keyword">null</span> != img2) &#123;</span><br><span class="line">            Mat hsvImg1 = <span class="keyword">new</span> Mat();</span><br><span class="line">            Mat hsvImg2 = <span class="keyword">new</span> Mat();</span><br><span class="line">            <span class="comment">// Convert to HSV 转换为彩色模型</span></span><br><span class="line">            Imgproc.cvtColor(img1, hsvImg1, Imgproc.COLOR_BGR2HSV);</span><br><span class="line">            Imgproc.cvtColor(img2, hsvImg2, Imgproc.COLOR_BGR2HSV);</span><br><span class="line">            <span class="comment">// Set configuration for calchist()</span></span><br><span class="line">            List&lt;Mat&gt; listImg1 = <span class="keyword">new</span> ArrayList&lt;Mat&gt;();</span><br><span class="line">            List&lt;Mat&gt; listImg2 = <span class="keyword">new</span> ArrayList&lt;Mat&gt;();</span><br><span class="line">            listImg1.add(hsvImg1);</span><br><span class="line">            listImg2.add(hsvImg2);</span><br><span class="line">            MatOfFloat ranges = <span class="keyword">new</span> MatOfFloat(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">            MatOfInt histSize = <span class="keyword">new</span> MatOfInt(<span class="number">50</span>);</span><br><span class="line">            MatOfInt channels = <span class="keyword">new</span> MatOfInt(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// Histograms 直方图</span></span><br><span class="line">            Mat histImg1 = <span class="keyword">new</span> Mat();</span><br><span class="line">            Mat histImg2 = <span class="keyword">new</span> Mat();</span><br><span class="line">            <span class="comment">// Calculate the histogram for the HSV imgaes</span></span><br><span class="line">            <span class="comment">// 计算HSV imgaes的直方图。</span></span><br><span class="line">            Imgproc.calcHist(listImg1, channels, <span class="keyword">new</span> Mat(), histImg1, histSize, ranges);</span><br><span class="line">            Imgproc.calcHist(listImg2, channels, <span class="keyword">new</span> Mat(), histImg2, histSize, ranges);</span><br><span class="line">            Core.normalize(histImg1, histImg1, <span class="number">0</span>, <span class="number">1</span>, Core.NORM_MINMAX, -<span class="number">1</span>, <span class="keyword">new</span> Mat());</span><br><span class="line">            Core.normalize(histImg2, histImg2, <span class="number">0</span>, <span class="number">1</span>, Core.NORM_MINMAX, -<span class="number">1</span>, <span class="keyword">new</span> Mat());</span><br><span class="line">            <span class="comment">// Apply the histogram comparison methods</span></span><br><span class="line">            <span class="comment">// 0 - correlation: the higher the metric, the more accurate the</span></span><br><span class="line">            <span class="comment">// match</span></span><br><span class="line">            <span class="comment">// "&gt; 0.9"</span></span><br><span class="line">            <span class="comment">// 1 - chi-square: the lower the metric, the more accurate the match</span></span><br><span class="line">            <span class="comment">// "&lt;</span></span><br><span class="line">            <span class="comment">// 0.1"</span></span><br><span class="line">            <span class="comment">// 2 - intersection: the higher the metric, the more accurate the</span></span><br><span class="line">            <span class="comment">// match</span></span><br><span class="line">            <span class="comment">// "&gt; 1.5"</span></span><br><span class="line">            <span class="comment">// 3 - bhattacharyya: the lower the metric, the more accurate the</span></span><br><span class="line">            <span class="comment">// match</span></span><br><span class="line">            <span class="comment">// "&lt; 0.3"</span></span><br><span class="line">            <span class="keyword">double</span> result0, result1, result2, result3;</span><br><span class="line">            result0 = Imgproc.compareHist(histImg1, histImg2, <span class="number">0</span>);</span><br><span class="line">            result1 = Imgproc.compareHist(histImg1, histImg2, <span class="number">1</span>);</span><br><span class="line">            result2 = Imgproc.compareHist(histImg1, histImg2, <span class="number">2</span>);</span><br><span class="line">            result3 = Imgproc.compareHist(histImg1, histImg2, <span class="number">3</span>);</span><br><span class="line">            <span class="comment">// If the count that it is satisfied with the condition is over 3,</span></span><br><span class="line">            <span class="comment">// two</span></span><br><span class="line">            <span class="comment">// images is same.</span></span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (result0 &gt; <span class="number">0.9</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result1 &lt; <span class="number">0.1</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result2 &gt; <span class="number">1.5</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result3 &lt; <span class="number">0.3</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对相似度进行评判</span></span><br><span class="line">            <span class="keyword">if</span> (count &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                retVal = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> retVal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Mat转换成BufferedImage</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matrix</span></span><br><span class="line"><span class="comment">     *            要转换的Mat</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileExtension</span></span><br><span class="line"><span class="comment">     *            格式为 ".jpg", ".png", etc</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BufferedImage <span class="title">Mat2BufImg</span> <span class="params">(Mat matrix, String fileExtension)</span> </span>&#123;</span><br><span class="line">        MatOfByte mob = <span class="keyword">new</span> MatOfByte();</span><br><span class="line">        Imgcodecs.imencode(fileExtension, matrix, mob);</span><br><span class="line">        <span class="keyword">byte</span>[] byteArray = mob.toArray();</span><br><span class="line">        BufferedImage bufImage = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = <span class="keyword">new</span> ByteArrayInputStream(byteArray);</span><br><span class="line">            bufImage = ImageIO.read(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bufImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * BufferedImage转换成Mat</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> original</span></span><br><span class="line"><span class="comment">     *            要转换的BufferedImage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgType</span></span><br><span class="line"><span class="comment">     *            bufferedImage的类型 如 BufferedImage.TYPE_3BYTE_BGR</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> matType</span></span><br><span class="line"><span class="comment">     *            转换成mat的type 如 CvType.CV_8UC3</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Mat <span class="title">BufImg2Mat</span> <span class="params">(BufferedImage original, <span class="keyword">int</span> imgType, <span class="keyword">int</span> matType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (original == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"original == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Don't convert if it already has correct type</span></span><br><span class="line">        <span class="keyword">if</span> (original.getType() != imgType) &#123;</span><br><span class="line">            <span class="comment">// Create a buffered image</span></span><br><span class="line">            BufferedImage image = <span class="keyword">new</span> BufferedImage(original.getWidth(), original.getHeight(), imgType);</span><br><span class="line">            <span class="comment">// Draw the image onto the new buffer</span></span><br><span class="line">            Graphics2D g = image.createGraphics();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                g.setComposite(AlphaComposite.Src);</span><br><span class="line">                g.drawImage(original, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                g.dispose();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] pixels = ((DataBufferByte) original.getRaster().getDataBuffer()).getData();</span><br><span class="line">        Mat mat = Mat.eye(original.getHeight(), original.getWidth(), matType);</span><br><span class="line">        mat.put(<span class="number">0</span>, <span class="number">0</span>, pixels);</span><br><span class="line">        <span class="keyword">return</span> mat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        VidUtil util = <span class="keyword">new</span> VidUtil();</span><br><span class="line">        util.getMove(<span class="string">"F:\\test\\vid\\2.mp4"</span>, <span class="string">"F:\\test\\vid\\img\\res.flv"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提取移动的信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> vidPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getMove</span><span class="params">(String vidPath, String outputFile)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>(FFmpegFrameGrabber fFmpegFrameGrabber = <span class="keyword">new</span> FFmpegFrameGrabber(vidPath)) &#123;</span><br><span class="line">            fFmpegFrameGrabber.start();</span><br><span class="line"></span><br><span class="line">            FrameRecorder recorder = FrameRecorder.createDefault(outputFile, fFmpegFrameGrabber.getImageWidth(), fFmpegFrameGrabber.getImageHeight());</span><br><span class="line">            recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);</span><br><span class="line">            recorder.setFormat(<span class="string">"flv"</span>);</span><br><span class="line">            recorder.setFrameRate(fFmpegFrameGrabber.getFrameRate());</span><br><span class="line">            recorder.start();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> OpenCVFrameConverter.ToOrgOpenCvCoreMat converter = <span class="keyword">new</span> OpenCVFrameConverter.ToOrgOpenCvCoreMat();</span><br><span class="line">            Mat frame1 = <span class="keyword">null</span>, frame2 = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> total = fFmpegFrameGrabber.getLengthInFrames();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; total; i++) &#123;</span><br><span class="line">                System.out.println(i + <span class="string">"/"</span> + total);</span><br><span class="line">                Frame frame = fFmpegFrameGrabber.grab();</span><br><span class="line">                Mat mat = converter.convert(frame);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(frame1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    frame1 = <span class="keyword">new</span> Mat();</span><br><span class="line">                    mat.copyTo(frame1);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(frame2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    frame2 = <span class="keyword">new</span> Mat();</span><br><span class="line">                    mat.copyTo(frame2);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Mat f1 = <span class="keyword">new</span> Mat(), f2 = <span class="keyword">new</span> Mat(), f3 = <span class="keyword">new</span> Mat();</span><br><span class="line">                    frame1.copyTo(f1);</span><br><span class="line">                    frame2.copyTo(f2);</span><br><span class="line">                    mat.copyTo(f3);</span><br><span class="line">                    <span class="keyword">boolean</span> move = VidUtil.isMove(f1, f2, f3);</span><br><span class="line">                    <span class="keyword">if</span>(move) &#123;</span><br><span class="line">                        recorder.record(frame);</span><br><span class="line">                    &#125;</span><br><span class="line">                    frame2.copyTo(frame1);</span><br><span class="line">                    mat.copyTo(frame2);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            recorder.stop();</span><br><span class="line">            recorder.release();</span><br><span class="line">            fFmpegFrameGrabber.stop();</span><br><span class="line">            fFmpegFrameGrabber.release();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 推送rmtp服务器</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile 服务器地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> frameRate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> org.bytedeco.javacv.FrameRecorder.Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recordCamera</span><span class="params">(String outputFile, <span class="keyword">double</span> frameRate)</span><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Loader.load(opencv_objdetect<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        FrameGrabber grabber = FrameGrabber.createDefault(<span class="number">0</span>);</span><br><span class="line">        grabber.start();<span class="comment">//开启抓取器</span></span><br><span class="line"></span><br><span class="line">        OpenCVFrameConverter.ToIplImage converter = <span class="keyword">new</span> OpenCVFrameConverter.ToIplImage();</span><br><span class="line">        IplImage grabbedImage = converter.convert(grabber.grab());</span><br><span class="line">        <span class="keyword">int</span> width = grabbedImage.width();</span><br><span class="line">        <span class="keyword">int</span> height = grabbedImage.height();</span><br><span class="line"></span><br><span class="line">        FrameRecorder recorder = FrameRecorder.createDefault(outputFile, width, height);</span><br><span class="line">        recorder.setVideoCodec(avcodec.AV_CODEC_ID_H264);</span><br><span class="line">        recorder.setFormat(<span class="string">"flv"</span>);</span><br><span class="line">        recorder.setFrameRate(frameRate);</span><br><span class="line"></span><br><span class="line">        recorder.start();<span class="comment">//开启录制器</span></span><br><span class="line">        <span class="keyword">long</span> startTime=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> videoTS=<span class="number">0</span>;</span><br><span class="line">        CanvasFrame frame = <span class="keyword">new</span> CanvasFrame(<span class="string">"camera"</span>, CanvasFrame.getDefaultGamma() / grabber.getGamma());</span><br><span class="line">        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">        frame.setAlwaysOnTop(<span class="keyword">true</span>);</span><br><span class="line">        Frame rotatedFrame=converter.convert(grabbedImage);</span><br><span class="line">        <span class="keyword">while</span> (frame.isVisible() &amp;&amp; (grabbedImage = converter.convert(grabber.grab())) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rotatedFrame = converter.convert(grabbedImage);</span><br><span class="line">            frame.showImage(rotatedFrame);</span><br><span class="line">            <span class="keyword">if</span> (startTime == <span class="number">0</span>) &#123;</span><br><span class="line">                startTime = System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">            videoTS = <span class="number">1000</span> * (System.currentTimeMillis() - startTime);</span><br><span class="line">            recorder.setTimestamp(videoTS);</span><br><span class="line">            recorder.record(rotatedFrame);</span><br><span class="line">            Thread.sleep(<span class="number">40</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        frame.dispose();</span><br><span class="line">        recorder.stop();</span><br><span class="line">        recorder.release();</span><br><span class="line">        grabber.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> AI </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java连接MQTT SSL服务器</title>
      <link href="/2022/03/20/java%E8%BF%9E%E6%8E%A5MQTT%20SSL%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2022/03/20/java%E8%BF%9E%E6%8E%A5MQTT%20SSL%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1467,阅读全文大约需要5分钟</p><blockquote><p><code>java</code>用<code>ssl</code>加密方式连接<code>mqtt</code>服务器。其它<code>ssl</code>加密的也可以参考，<code>SSLSocketFactory</code>获取部分都是一样的。踩了很多坑，根据生成工具不同（<code>openssl</code>和<code>keytool</code>）以及秘钥文件编码不同有若干种方法。这里把自己遇到的所有情况都统一记录一下。</p></blockquote><h1 id="一、连接MQTT服务器"><a href="#一、连接MQTT服务器" class="headerlink" title="一、连接MQTT服务器"></a>一、连接MQTT服务器</h1><p>不加密的连接方式之前有写过，就不赘述了，这里列出不同的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mqttClient = <span class="keyword">new</span> MqttClient(host, clientId, <span class="keyword">new</span> MemoryPersistence());</span><br><span class="line">MqttConnectOptions options = <span class="keyword">new</span> MqttConnectOptions();</span><br><span class="line">options.setCleanSession(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 这里多了一步设置SSLSocketFactory的步骤</span></span><br><span class="line">options.setSocketFactory(SslUtil.getSocketFactoryByCert(caPath,certPath,privateKeyPath, privateKeyPwd));</span><br></pre></td></tr></table></figure><p>SSLSocketFactory获取方式有两种：</p><ol><li>通过<code>CA</code>证书、客户端证书、客户端私钥、私钥密码 获取（使用<code>openssl</code>生成的，<code>keytool</code>能生成证书，但是不能直接导出秘钥文件）</li><li>直接通过<code>keystore</code>和<code>truststore</code>获取（通过<code>keytool</code>生成的）</li></ol><p>读取证书和秘钥也有两种方式（证书获取的方式）</p><ol><li>使用<code>bcpkix-jdk15on</code>包提供的方法，需要引包</li><li>使用原生方法，但是不支持直接读取<code>pem</code>秘钥文件，需要先把文件<code>PKCS8</code>编码一下。(编码方法在<code>openssl</code>的文章里)</li></ol><p>稍微解释一下上面的两种方式</p><ul><li>第一种，通过证书的方式</li></ul><ol><li><code>CA</code>证书是用来验证服务端发过来的证书，因为这里是双向认证，所以需要<code>CA</code>证书来认证服务端发过来的是否是合法证书。</li><li>客户端证书，发给服务端，让服务端验证的。（需要用<code>CA</code>证书签发，这样服务端那边才能用<code>CA</code>证书验证合法）</li><li>客户端私钥，服务端拿到客户端证书后会用证书里的公钥加密信息发过来，需要用私钥解密拿到原信息</li><li>私钥密码，<code>openssl</code>生成私钥的时候设置的密码（具体生成方式之前的文章有）</li></ol><ul><li>第二种，通过<code>keystore</code>和<code>truststore</code></li></ul><ol><li><code>keystore</code>是用<code>jdk</code>自带的工具<code>keytool</code>生成的秘钥和证书管理库，用来保存自己的秘钥和证书。需要用<code>keytool</code>生成并导入客户端的证书和秘钥。具体使用之前有文章可以参考。</li><li><code>truststore</code>本质也是<code>keystore</code>，只是里面存的是受信的证书。用来验证服务端证书是否可信，将<code>CA</code>导入即可</li><li>第一种方式本质也是通过<code>keystore</code>和<code>truststore</code>验证，只不过导入的步骤用代码实现了，第二种方式使用命令实现的。</li></ol><h1 id="二、SslUtil具体实现"><a href="#二、SslUtil具体实现" class="headerlink" title="二、SslUtil具体实现"></a>二、SslUtil具体实现</h1><ol><li>导入依赖<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.bouncycastle&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;bcpkix-jdk15on&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.47&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.*;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.InvalidKeySpecException;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.KeyManagerFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.TrustManagerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.jce.provider.BouncyCastleProvider;</span><br><span class="line"><span class="keyword">import</span> org.bouncycastle.openssl.PEMReader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> *  两种方式验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-02-03 14:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SslUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用证书和私钥配置sslContext</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> caCrtFile</span></span><br><span class="line"><span class="comment">     *            CA证书（验证连接）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> crtFile</span></span><br><span class="line"><span class="comment">     *            发给对方的证书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyFile</span></span><br><span class="line"><span class="comment">     *            pem 私钥（请求连接的消息是用公钥加密的，需要用私钥解密）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     *            私钥密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title">getSocketFactoryByCert</span><span class="params">(<span class="keyword">final</span> String caCrtFile, <span class="keyword">final</span> String crtFile,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String keyFile, <span class="keyword">final</span> String password)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载CA证书（用于验证的根证书）</span></span><br><span class="line">        PEMReader reader =</span><br><span class="line">            <span class="keyword">new</span> PEMReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> ByteArrayInputStream(Files.readAllBytes(Paths.get(caCrtFile)))));</span><br><span class="line">        X509Certificate caCert = (X509Certificate)reader.readObject();</span><br><span class="line">        reader.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载自己的证书，用于发送给客户端</span></span><br><span class="line">        reader = <span class="keyword">new</span> PEMReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> ByteArrayInputStream(Files.readAllBytes(Paths.get(crtFile)))));</span><br><span class="line">        X509Certificate cert = (X509Certificate)reader.readObject();</span><br><span class="line">        reader.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加载私钥</span></span><br><span class="line">        reader = <span class="keyword">new</span> PEMReader(<span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> ByteArrayInputStream(Files.readAllBytes(Paths.get(keyFile)))),</span><br><span class="line">            () -&gt; password.toCharArray());</span><br><span class="line">        KeyPair key = (KeyPair)reader.readObject();</span><br><span class="line">        reader.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用CA证书创建TrustManagerFactory</span></span><br><span class="line">        KeyStore caKs = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">        caKs.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        caKs.setCertificateEntry(<span class="string">"ca-certificate"</span>, caCert);</span><br><span class="line">        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        tmf.init(caKs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用证书和私钥创建KeyManagerFactory</span></span><br><span class="line">        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">        ks.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        ks.setCertificateEntry(<span class="string">"certificate"</span>, cert);</span><br><span class="line">        ks.setKeyEntry(<span class="string">"private-key"</span>, key.getPrivate(), password.toCharArray(),</span><br><span class="line">            <span class="keyword">new</span> java.security.cert.Certificate[] &#123;cert&#125;);</span><br><span class="line">        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        kmf.init(ks, password.toCharArray());</span><br><span class="line"></span><br><span class="line">        SSLContext context = SSLContext.getInstance(<span class="string">"TLSv1"</span>);</span><br><span class="line">        <span class="comment">// kmf用于发送关键信息让服务端校验，tmf用于校验服务端的证书。双向认证</span></span><br><span class="line">        context.init(kmf.getKeyManagers(), tmf.getTrustManagers(), <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="keyword">return</span> context.getSocketFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过keyStore加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyStorePath</span></span><br><span class="line"><span class="comment">     *            keystore路径（保存自己的秘钥和证书）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trustKeyStorePath</span></span><br><span class="line"><span class="comment">     *            truststore路径（保存受信的证书）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ksPass</span></span><br><span class="line"><span class="comment">     *            keystore密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tsPass</span></span><br><span class="line"><span class="comment">     *            truststore密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title">getSocketFactoryByKeystore</span><span class="params">(String keyStorePath, String trustKeyStorePath,</span></span></span><br><span class="line"><span class="function"><span class="params">        String ksPass, String tsPass)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// keytool生成的keystore的类型就是JKS</span></span><br><span class="line">        KeyStore keyStore = KeyStore.getInstance(<span class="string">"JKS"</span>);</span><br><span class="line">        KeyStore trustKeyStore = KeyStore.getInstance(<span class="string">"JKS"</span>);</span><br><span class="line">        <span class="comment">// 通过密码加载keystore</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(keyStorePath);</span><br><span class="line">        keyStore.load(fis, ksPass.toCharArray());</span><br><span class="line">        fis.close();</span><br><span class="line">        <span class="comment">// 加载trustKeyStore</span></span><br><span class="line">        FileInputStream trustFis = <span class="keyword">new</span> FileInputStream(trustKeyStorePath);</span><br><span class="line">        trustKeyStore.load(trustFis, tsPass.toCharArray());</span><br><span class="line">        trustFis.close();</span><br><span class="line">        <span class="comment">// 创建管理JKS密钥库的密钥管理器 (SunX509)</span></span><br><span class="line">        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        <span class="comment">// 使用密钥内容源初始化此工厂。 提供者通常使用 KeyStore 来获取在安全套接字协商期间所使用的密钥内容</span></span><br><span class="line">        kmf.init(keyStore, ksPass.toCharArray());</span><br><span class="line">        <span class="comment">// SunX509</span></span><br><span class="line">        TrustManagerFactory tmFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        tmFactory.init(trustKeyStore);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始sslcontext</span></span><br><span class="line">        SSLContext sslContext = SSLContext.getInstance(<span class="string">"SSLv3"</span>);</span><br><span class="line">        <span class="comment">// SSLContext sslContext = SSLContext.getInstance("TLS");</span></span><br><span class="line">        sslContext.init(kmf.getKeyManagers(), tmFactory.getTrustManagers(), <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="keyword">return</span> sslContext.getSocketFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、不引包的方式"><a href="#三、不引包的方式" class="headerlink" title="三、不引包的方式"></a>三、不引包的方式</h1><ol><li>将<code>pem</code>秘钥文件<code>pkcs8</code>编码</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl pkcs8 -topk8 -in client.private.pem -out pkcs8.client.private.pem -nocrypt</span><br></pre></td></tr></table></figure><ol start="2"><li>代码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用证书和私钥配置sslContext</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> caCrtFile</span></span><br><span class="line"><span class="comment">     *            CA证书（验证连接）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> crtFile</span></span><br><span class="line"><span class="comment">     *            发给对方的证书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyFile</span></span><br><span class="line"><span class="comment">     *            私钥（请求连接的消息是用公钥加密的，需要用私钥解密）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     *            私钥密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title">getSocketFactoryByCert</span><span class="params">(<span class="keyword">final</span> String caCrtFile, <span class="keyword">final</span> String crtFile,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> String keyFile, <span class="keyword">final</span> String password)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 加载CA证书（用于验证的根证书）</span></span><br><span class="line">        X509Certificate caCert = getCertificate(caCrtFile);</span><br><span class="line">        <span class="comment">// 加载自己的证书，用于发送给客户端</span></span><br><span class="line">        X509Certificate cert = getCertificate(crtFile);</span><br><span class="line">        <span class="comment">// 加载私钥</span></span><br><span class="line">        <span class="keyword">final</span> PrivateKey privateKey = getPrivateKey(keyFile);</span><br><span class="line">        <span class="comment">// 用CA证书创建TrustManagerFactory</span></span><br><span class="line">        KeyStore caKs = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">        caKs.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        caKs.setCertificateEntry(<span class="string">"ca-certificate"</span>, caCert);</span><br><span class="line">        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        tmf.init(caKs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用证书和私钥创建KeyManagerFactory</span></span><br><span class="line">        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">        ks.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        ks.setCertificateEntry(<span class="string">"certificate"</span>, cert);</span><br><span class="line">        ks.setKeyEntry(<span class="string">"private-key"</span>, privateKey, password.toCharArray(), <span class="keyword">new</span> java.security.cert.Certificate[] &#123;cert&#125;);</span><br><span class="line">        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        kmf.init(ks, password.toCharArray());</span><br><span class="line"></span><br><span class="line">        SSLContext context = SSLContext.getInstance(<span class="string">"TLSv1"</span>);</span><br><span class="line">        <span class="comment">// kmf用于发送关键信息让服务端校验，tmf用于校验服务端的证书。双向认证</span></span><br><span class="line">        context.init(kmf.getKeyManagers(), tmf.getTrustManagers(), <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="keyword">return</span> context.getSocketFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取x509格式的证书</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> certPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CertificateException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> X509Certificate <span class="title">getCertificate</span><span class="params">(String certPath)</span> <span class="keyword">throws</span> FileNotFoundException, CertificateException </span>&#123;</span><br><span class="line">        InputStream inStream = <span class="keyword">new</span> FileInputStream(certPath);</span><br><span class="line">        CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">        X509Certificate caCert = (X509Certificate)cf.generateCertificate(inStream);</span><br><span class="line">        inStream.close();</span><br><span class="line">        <span class="keyword">return</span> caCert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取 PKCS8 编码的 RSA 秘钥文件</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InvalidKeySpecException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> PrivateKey <span class="title">getPrivateKey</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, InvalidKeySpecException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(path));</span><br><span class="line">        String s = br.readLine();</span><br><span class="line">        String str = <span class="string">""</span>;</span><br><span class="line">        s = br.readLine();</span><br><span class="line">        <span class="keyword">while</span> (s.charAt(<span class="number">0</span>) != <span class="string">'-'</span>) &#123;</span><br><span class="line">            str += s + <span class="string">"\r"</span>;</span><br><span class="line">            s = br.readLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// BASE64Decoder base64decoder = new BASE64Decoder();</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = Base64.getMimeDecoder().decode(str);</span><br><span class="line">        <span class="comment">// byte[] bytes = base64decoder.decodeBuffer(str);</span></span><br><span class="line">        br.close();</span><br><span class="line">        <span class="comment">// 生成私钥</span></span><br><span class="line">        KeyFactory kf = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(bytes);</span><br><span class="line">        PrivateKey privateKey = kf.generatePrivate(keySpec);</span><br><span class="line">        <span class="keyword">return</span> privateKey;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><p>发现项目中有生成好的<code>p12</code>证书，可以直接使用。这里再追加一种<code>p12</code>证书和<code>CA</code>证书验证的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过p12证书和ca证书双向认证</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> caCrtFile</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> p12Keystore</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> p12Pwd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title">getSocketFactoryByP12AndCA</span><span class="params">(String caCrtFile, String p12Keystore, String p12Pwd)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 加载CA证书（用于验证的根证书）</span></span><br><span class="line">    X509Certificate caCert = getCertificate(caCrtFile);</span><br><span class="line">    <span class="comment">// 用CA证书创建TrustManagerFactory</span></span><br><span class="line">    KeyStore caKs = KeyStore.getInstance(KeyStore.getDefaultType());</span><br><span class="line">    caKs.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    caKs.setCertificateEntry(<span class="string">"ca-certificate"</span>, caCert);</span><br><span class="line">    TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">    tmf.init(caKs);</span><br><span class="line"></span><br><span class="line">    KeyStore keyStore = KeyStore.getInstance(<span class="string">"pkcs12"</span>);</span><br><span class="line">    FileInputStream p12Fis = <span class="keyword">new</span> FileInputStream(p12Keystore);</span><br><span class="line">    keyStore.load(p12Fis , p12Pwd.toCharArray());</span><br><span class="line">    p12Fis.close();</span><br><span class="line">    <span class="comment">// 创建管理JKS密钥库的密钥管理器 (SunX509)</span></span><br><span class="line">    KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">    <span class="comment">// 使用密钥内容源初始化此工厂。 提供者通常使用 KeyStore 来获取在安全套接字协商期间所使用的密钥内容</span></span><br><span class="line">    kmf.init(keyStore, p12Pwd.toCharArray());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始sslcontext</span></span><br><span class="line">    SSLContext sslContext = SSLContext.getInstance(<span class="string">"SSLv3"</span>);</span><br><span class="line">    sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), <span class="keyword">new</span> SecureRandom());</span><br><span class="line">    <span class="keyword">return</span> sslContext.getSocketFactory();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>单向认证，即不认证服务端的证书</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义一个不验证的TrustManager 即可</span></span><br><span class="line">        <span class="keyword">final</span> TrustManager trustManager = <span class="keyword">new</span> X509TrustManager()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        sslContext.init(kmf.getKeyManagers(), <span class="keyword">new</span> TrustManager[] &#123;trustManager&#125;, <span class="keyword">new</span> SecureRandom());</span><br></pre></td></tr></table></figure><ul><li>不验证证书及ip是否匹配</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> TrustManager trustManager = <span class="keyword">new</span> X509ExtendedTrustManager()&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType, Socket socket)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType, Socket socket)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType, SSLEngine engine)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType, SSLEngine engine)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">sslContext.init(kmf.getKeyManagers(), <span class="keyword">new</span> TrustManager[] &#123;trustManager&#125;, <span class="keyword">new</span> SecureRandom());</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ssl </tag>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java验证码生成工具</title>
      <link href="/2022/03/20/java%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/java%E9%AA%8C%E8%AF%81%E7%A0%81%E7%94%9F%E6%88%90%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：492,阅读全文大约需要1分钟</p><h1 id="VerifyCodeUtil-代码"><a href="#VerifyCodeUtil-代码" class="headerlink" title="VerifyCodeUtil 代码"></a>VerifyCodeUtil 代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics2D;</span><br><span class="line"><span class="keyword">import</span> java.awt.RenderingHints;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VerifyCodeUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用到Algerian字体，系统里没有的话需要安装字体，字体只显示大写，去掉了1,0,i,o几个容易混淆的字符</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERIFY_CODES = <span class="string">"23456789ABCDEFGHJKLMNPQRSTUVWXYZ"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用系统默认字符源生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize    验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateVerifyCode</span><span class="params">(<span class="keyword">int</span> verifySize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> generateVerifyCode(verifySize, VERIFY_CODES);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用指定源生成验证码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize    验证码长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sources   验证码字符源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generateVerifyCode</span><span class="params">(<span class="keyword">int</span> verifySize, String sources)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sources == <span class="keyword">null</span> || sources.length() == <span class="number">0</span>)&#123;</span><br><span class="line">            sources = VERIFY_CODES;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> codesLen = sources.length();</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random(System.currentTimeMillis());</span><br><span class="line">        StringBuilder verifyCode = <span class="keyword">new</span> StringBuilder(verifySize);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; verifySize; i++)&#123;</span><br><span class="line">            verifyCode.append(sources.charAt(rand.nextInt(codesLen-<span class="number">1</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> verifyCode.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成随机验证码文件,并返回验证码值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">outputVerifyImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, File outputFile, <span class="keyword">int</span> verifySize)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, outputFile, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出随机验证码图片流,并返回验证码值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifySize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">outputVerifyImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, OutputStream os, <span class="keyword">int</span> verifySize)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        String verifyCode = generateVerifyCode(verifySize);</span><br><span class="line">        outputImage(w, h, os, verifyCode);</span><br><span class="line">        <span class="keyword">return</span> verifyCode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成指定验证码图像文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> outputFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, File outputFile, String code)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(outputFile == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        File dir = outputFile.getParentFile();</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            outputFile.createNewFile();</span><br><span class="line">            FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(outputFile);</span><br><span class="line">            outputImage(w, h, fos, code);</span><br><span class="line">            fos.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 输出指定验证码图片流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> h</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> os</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">outputImage</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, OutputStream os, String code)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> verifySize = code.length();</span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        Graphics2D g2 = image.createGraphics();</span><br><span class="line">        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);</span><br><span class="line">        Color[] colors = <span class="keyword">new</span> Color[<span class="number">5</span>];</span><br><span class="line">        Color[] colorSpaces = <span class="keyword">new</span> Color[] &#123; Color.WHITE, Color.CYAN,</span><br><span class="line">                Color.GRAY, Color.LIGHT_GRAY, Color.MAGENTA, Color.ORANGE,</span><br><span class="line">                Color.PINK, Color.YELLOW &#125;;</span><br><span class="line">        <span class="keyword">float</span>[] fractions = <span class="keyword">new</span> <span class="keyword">float</span>[colors.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; colors.length; i++)&#123;</span><br><span class="line">            colors[i] = colorSpaces[rand.nextInt(colorSpaces.length)];</span><br><span class="line">            fractions[i] = rand.nextFloat();</span><br><span class="line">        &#125;</span><br><span class="line">        Arrays.sort(fractions);</span><br><span class="line"></span><br><span class="line">        g2.setColor(Color.GRAY);<span class="comment">// 设置边框色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">0</span>, w, h);</span><br><span class="line"></span><br><span class="line">        Color c = getRandColor(<span class="number">200</span>, <span class="number">250</span>);</span><br><span class="line">        g2.setColor(c);<span class="comment">// 设置背景色</span></span><br><span class="line">        g2.fillRect(<span class="number">0</span>, <span class="number">2</span>, w, h-<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//绘制干扰线</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        g2.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));<span class="comment">// 设置线条的颜色</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = random.nextInt(w - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> y = random.nextInt(h - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> xl = random.nextInt(<span class="number">6</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>) + <span class="number">1</span>;</span><br><span class="line">            g2.drawLine(x, y, x + xl + <span class="number">40</span>, y + yl + <span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加噪点</span></span><br><span class="line">        <span class="keyword">float</span> yawpRate = <span class="number">0.05f</span>;<span class="comment">// 噪声率</span></span><br><span class="line">        <span class="keyword">int</span> area = (<span class="keyword">int</span>) (yawpRate * w * h);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; area; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = random.nextInt(w);</span><br><span class="line">            <span class="keyword">int</span> y = random.nextInt(h);</span><br><span class="line">            <span class="keyword">int</span> rgb = getRandomIntColor();</span><br><span class="line">            image.setRGB(x, y, rgb);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        shear(g2, w, h, c);<span class="comment">// 使图片扭曲</span></span><br><span class="line"></span><br><span class="line">        g2.setColor(getRandColor(<span class="number">100</span>, <span class="number">160</span>));</span><br><span class="line">        <span class="keyword">int</span> fontSize = h-<span class="number">4</span>;</span><br><span class="line">        Font font = <span class="keyword">new</span> Font(<span class="string">"Algerian"</span>, Font.ITALIC, fontSize);</span><br><span class="line">        g2.setFont(font);</span><br><span class="line">        <span class="keyword">char</span>[] chars = code.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; verifySize; i++)&#123;</span><br><span class="line">            AffineTransform affine = <span class="keyword">new</span> AffineTransform();</span><br><span class="line">            affine.setToRotation(Math.PI / <span class="number">4</span> * rand.nextDouble() * (rand.nextBoolean() ? <span class="number">1</span> : -<span class="number">1</span>), (w / verifySize) * i + fontSize/<span class="number">2</span>, h/<span class="number">2</span>);</span><br><span class="line">            g2.setTransform(affine);</span><br><span class="line">            g2.drawChars(chars, i, <span class="number">1</span>, ((w-<span class="number">10</span>) / verifySize) * i + <span class="number">5</span>, h/<span class="number">2</span> + fontSize/<span class="number">2</span> - <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        g2.dispose();</span><br><span class="line">        ImageIO.write(image, <span class="string">"jpg"</span>, os);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Color <span class="title">getRandColor</span><span class="params">(<span class="keyword">int</span> fc, <span class="keyword">int</span> bc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (fc &gt; <span class="number">255</span>)</span><br><span class="line">            fc = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">if</span> (bc &gt; <span class="number">255</span>)</span><br><span class="line">            bc = <span class="number">255</span>;</span><br><span class="line">        <span class="keyword">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Color(r, g, b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRandomIntColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] rgb = getRandomRgb();</span><br><span class="line">        <span class="keyword">int</span> color = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c : rgb) &#123;</span><br><span class="line">            color = color &lt;&lt; <span class="number">8</span>;</span><br><span class="line">            color = color | c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] getRandomRgb() &#123;</span><br><span class="line">        <span class="keyword">int</span>[] rgb = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            rgb[i] = random.nextInt(<span class="number">255</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rgb;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shear</span><span class="params">(Graphics g, <span class="keyword">int</span> w1, <span class="keyword">int</span> h1, Color color)</span> </span>&#123;</span><br><span class="line">        shearX(g, w1, h1, color);</span><br><span class="line">        shearY(g, w1, h1, color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shearX</span><span class="params">(Graphics g, <span class="keyword">int</span> w1, <span class="keyword">int</span> h1, Color color)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> period = random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> borderGap = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> frames = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> phase = random.nextInt(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; h1; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = (<span class="keyword">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="keyword">double</span>) i / (<span class="keyword">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862</span>D * (<span class="keyword">double</span>) phase)</span><br><span class="line">                    / (<span class="keyword">double</span>) frames);</span><br><span class="line">            g.copyArea(<span class="number">0</span>, i, w1, <span class="number">1</span>, (<span class="keyword">int</span>) d, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine((<span class="keyword">int</span>) d, i, <span class="number">0</span>, i);</span><br><span class="line">                g.drawLine((<span class="keyword">int</span>) d + w1, i, w1, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shearY</span><span class="params">(Graphics g, <span class="keyword">int</span> w1, <span class="keyword">int</span> h1, Color color)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> period = random.nextInt(<span class="number">40</span>) + <span class="number">10</span>; <span class="comment">// 50;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> borderGap = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> frames = <span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> phase = <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; w1; i++) &#123;</span><br><span class="line">            <span class="keyword">double</span> d = (<span class="keyword">double</span>) (period &gt;&gt; <span class="number">1</span>)</span><br><span class="line">                    * Math.sin((<span class="keyword">double</span>) i / (<span class="keyword">double</span>) period</span><br><span class="line">                    + (<span class="number">6.2831853071795862</span>D * (<span class="keyword">double</span>) phase)</span><br><span class="line">                    / (<span class="keyword">double</span>) frames);</span><br><span class="line">            g.copyArea(i, <span class="number">0</span>, <span class="number">1</span>, h1, <span class="number">0</span>, (<span class="keyword">int</span>) d);</span><br><span class="line">            <span class="keyword">if</span> (borderGap) &#123;</span><br><span class="line">                g.setColor(color);</span><br><span class="line">                g.drawLine(i, (<span class="keyword">int</span>) d, i, <span class="number">0</span>);</span><br><span class="line">                g.drawLine(i, (<span class="keyword">int</span>) d + h1, i, h1);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">"Pragma"</span>, <span class="string">"No-cache"</span>);</span><br><span class="line">response.setHeader(<span class="string">"Cache-Control"</span>, <span class="string">"no-cache"</span>);</span><br><span class="line">response.setDateHeader(<span class="string">"Expires"</span>, <span class="number">0</span>);</span><br><span class="line">response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line"><span class="comment">//生成随机字符串</span></span><br><span class="line">String verifyCode = VerifyCodeUtil.generateVerifyCode(<span class="number">4</span>);</span><br><span class="line"><span class="comment">//将字符串写入输出流 130宽 40高</span></span><br><span class="line">VerifyCodeUtil.outputImage(<span class="number">130</span>, <span class="number">40</span>, response.getOutputStream(), verifyCode);</span><br><span class="line"><span class="comment">//存入Session</span></span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line"> session.removeAttribute(<span class="string">"Code"</span>);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jna实现后台监听</title>
      <link href="/2022/03/20/jna%E5%AE%9E%E7%8E%B0%E5%90%8E%E5%8F%B0%E7%9B%91%E5%90%AC/"/>
      <url>/2022/03/20/jna%E5%AE%9E%E7%8E%B0%E5%90%8E%E5%8F%B0%E7%9B%91%E5%90%AC/</url>
      
        <content type="html"><![CDATA[<p>文章字数：252,阅读全文大约需要1分钟</p><h1 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.jna.Structure;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.Kernel32;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.HHOOK;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.MSG;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.HMODULE;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.LRESULT;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.WPARAM;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.HOOKPROC;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MouseHook</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> WM_MOUSEMOVE = <span class="number">512</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> HHOOK hhk;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LowLevelMouseProc mouseHook;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> User32 lib = User32.INSTANCE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> [] on_off=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MouseHook</span><span class="params">(<span class="keyword">boolean</span> [] on_off)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.on_off = on_off;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LowLevelMouseProc</span> <span class="keyword">extends</span> <span class="title">HOOKPROC</span> </span>&#123;</span><br><span class="line"><span class="function">LRESULT <span class="title">callback</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, MOUSEHOOKSTRUCT lParam)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MOUSEHOOKSTRUCT</span> <span class="keyword">extends</span> <span class="title">Structure</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ByReference</span> <span class="keyword">extends</span> <span class="title">MOUSEHOOKSTRUCT</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class"><span class="title">Structure</span>.<span class="title">ByReference</span> </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">public</span> User32.POINT pt;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> wHitTestCode;</span><br><span class="line"><span class="keyword">public</span> User32.ULONG_PTR dwExtraInfo;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">HMODULE hMod = Kernel32.INSTANCE.GetModuleHandle(<span class="keyword">null</span>);</span><br><span class="line">mouseHook = <span class="keyword">new</span> LowLevelMouseProc() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> LRESULT <span class="title">callback</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam,</span></span></span><br><span class="line"><span class="function"><span class="params">MOUSEHOOKSTRUCT info)</span> </span>&#123;</span><br><span class="line">SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">SimpleDateFormat df2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String fileName=df1.format(<span class="keyword">new</span> Date());</span><br><span class="line">String time=df2.format(<span class="keyword">new</span> Date());</span><br><span class="line">BufferedWriter bw1=<span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw2=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw1=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_Mouse.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line">bw2=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_Common.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (on_off[<span class="number">0</span>] == <span class="keyword">false</span>) &#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (nCode &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (wParam.intValue()) &#123;</span><br><span class="line"><span class="keyword">case</span> MouseHook.WM_MOUSEMOVE:</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw1.write(time+<span class="string">"  ####  "</span>+<span class="string">"x="</span> + info.pt.x</span><br><span class="line">+ <span class="string">" y="</span> + info.pt.y+<span class="string">"\r\n"</span>);</span><br><span class="line">bw2.write(time+<span class="string">"  ####  "</span>+<span class="string">"x="</span> + info.pt.x</span><br><span class="line">+ <span class="string">" y="</span> + info.pt.y+<span class="string">"\r\n"</span>);</span><br><span class="line">bw1.flush();</span><br><span class="line">bw2.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lib</span><br><span class="line">.CallNextHookEx(hhk, nCode, wParam, info.getPointer());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">hhk = lib.SetWindowsHookEx(User32.WH_MOUSE_LL, mouseHook, hMod, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line">MSG msg = <span class="keyword">new</span> MSG();</span><br><span class="line"><span class="keyword">while</span> ((result = lib.GetMessage(msg, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"error in get message"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.err.println(<span class="string">"got message"</span>);</span><br><span class="line">lib.TranslateMessage(msg);</span><br><span class="line">lib.DispatchMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">lib.UnhookWindowsHookEx(hhk);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听键盘"><a href="#监听键盘" class="headerlink" title="监听键盘"></a>监听键盘</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.Kernel32;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.HHOOK;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.KBDLLHOOKSTRUCT;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.LowLevelKeyboardProc;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.User32.MSG;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.HMODULE;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.LRESULT;</span><br><span class="line"><span class="keyword">import</span> com.sun.jna.examples.win32.W32API.WPARAM;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyboardHook</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> HHOOK hhk;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LowLevelKeyboardProc keyboardHook;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> User32 lib = User32.INSTANCE;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> [] on_off=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">KeyboardHook</span><span class="params">(<span class="keyword">boolean</span> [] on_off)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.on_off = on_off;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">HMODULE hMod = Kernel32.INSTANCE.GetModuleHandle(<span class="keyword">null</span>);</span><br><span class="line">keyboardHook = <span class="keyword">new</span> LowLevelKeyboardProc() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> LRESULT <span class="title">callback</span><span class="params">(<span class="keyword">int</span> nCode, WPARAM wParam, KBDLLHOOKSTRUCT info)</span> </span>&#123;</span><br><span class="line">SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">SimpleDateFormat df2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String fileName=df1.format(<span class="keyword">new</span> Date());</span><br><span class="line">String time=df2.format(<span class="keyword">new</span> Date());</span><br><span class="line">BufferedWriter bw1=<span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw2=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw1=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_Keyboard.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line">bw2=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_Common.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (on_off[<span class="number">0</span>] == <span class="keyword">false</span>) &#123;</span><br><span class="line">System.exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw1.write(time+<span class="string">"  ####  "</span>+info.vkCode+<span class="string">"\r\n"</span>);</span><br><span class="line">bw2.write(time+<span class="string">"  ####  "</span>+info.vkCode+<span class="string">"\r\n"</span>);</span><br><span class="line">bw1.flush();</span><br><span class="line">bw2.flush();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> lib.CallNextHookEx(hhk, nCode, wParam, info.getPointer());</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">hhk = lib.SetWindowsHookEx(User32.WH_KEYBOARD_LL, keyboardHook, hMod, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line">MSG msg = <span class="keyword">new</span> MSG();</span><br><span class="line"><span class="keyword">while</span> ((result = lib.GetMessage(msg, <span class="keyword">null</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (result == -<span class="number">1</span>) &#123;</span><br><span class="line">System.err.println(<span class="string">"error in get message"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.err.println(<span class="string">"got message"</span>);</span><br><span class="line">lib.TranslateMessage(msg);</span><br><span class="line">lib.DispatchMessage(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">lib.UnhookWindowsHookEx(hhk);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="监听进程信息"><a href="#监听进程信息" class="headerlink" title="监听进程信息"></a>监听进程信息</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessInfo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> [] on_off=<span class="keyword">null</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProcessInfo</span><span class="params">(<span class="keyword">boolean</span> [] on_off)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.on_off = on_off;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BufferedReader input = <span class="keyword">null</span>;</span><br><span class="line">Process process = <span class="keyword">null</span>;</span><br><span class="line">BufferedWriter bw=<span class="keyword">null</span>;</span><br><span class="line">SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">SimpleDateFormat df2 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">String fileName=<span class="keyword">null</span>;</span><br><span class="line">String time=<span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span>(on_off[<span class="number">0</span>])&#123;</span><br><span class="line">fileName=df1.format(<span class="keyword">new</span> Date());</span><br><span class="line">time=df2.format(<span class="keyword">new</span> Date());</span><br><span class="line">bw=<span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="keyword">new</span> File(<span class="string">".//log//"</span>+fileName+<span class="string">"_ProcessInfo.txt"</span>),<span class="keyword">true</span>));</span><br><span class="line">Thread.sleep(<span class="number">60000</span>);</span><br><span class="line">process = Runtime.getRuntime().exec(<span class="string">"cmd.exe   /c   tasklist"</span>);</span><br><span class="line">input =<span class="keyword">new</span> BufferedReader(</span><br><span class="line"><span class="keyword">new</span> InputStreamReader(process.getInputStream()));</span><br><span class="line">String line = <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">input.readLine();</span><br><span class="line">input.readLine();</span><br><span class="line">input.readLine();</span><br><span class="line"><span class="keyword">while</span> ((line = input.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">bw.write(time+<span class="string">"  ####  "</span>+line+<span class="string">"\r\n"</span>);</span><br><span class="line">bw.flush();</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">bw.close();</span><br><span class="line">input.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="开启以上工具类"><a href="#开启以上工具类" class="headerlink" title="开启以上工具类"></a>开启以上工具类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.AWTException;  </span><br><span class="line"><span class="keyword">import</span> java.awt.Image;  </span><br><span class="line"><span class="keyword">import</span> java.awt.MenuItem;  </span><br><span class="line"><span class="keyword">import</span> java.awt.PopupMenu;  </span><br><span class="line"><span class="keyword">import</span> java.awt.SystemTray;  </span><br><span class="line"><span class="keyword">import</span> java.awt.Toolkit;  </span><br><span class="line"><span class="keyword">import</span> java.awt.TrayIcon;  </span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;  </span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Monitor</span>  </span>&#123;  </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Monitor</span><span class="params">()</span>  </span>&#123;  </span><br><span class="line"><span class="keyword">boolean</span> [] on_off=&#123;<span class="keyword">true</span>&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> ProcessInfo(on_off)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> KeyboardHook(on_off)).start();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> MouseHook(on_off)).start();</span><br><span class="line"><span class="keyword">final</span> TrayIcon trayIcon;  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (SystemTray.isSupported()) &#123;  </span><br><span class="line"> </span><br><span class="line">SystemTray tray = SystemTray.getSystemTray();  </span><br><span class="line">Image image = Toolkit.getDefaultToolkit().getImage(<span class="string">".//lib//monitor.png"</span>);  </span><br><span class="line"> </span><br><span class="line">ActionListener exitListener = <span class="keyword">new</span> ActionListener() &#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;  </span><br><span class="line">System.out.println(<span class="string">"Exiting..."</span>);  </span><br><span class="line">System.exit(<span class="number">0</span>);  </span><br><span class="line">&#125;</span><br><span class="line">&#125;;  </span><br><span class="line"> </span><br><span class="line">PopupMenu popup = <span class="keyword">new</span> PopupMenu();  </span><br><span class="line">MenuItem defaultItem = <span class="keyword">new</span> MenuItem(<span class="string">"Exit"</span>);  </span><br><span class="line">defaultItem.addActionListener(exitListener);  </span><br><span class="line">popup.add(defaultItem);  </span><br><span class="line"> </span><br><span class="line">trayIcon = <span class="keyword">new</span> TrayIcon(image, <span class="string">"monitor"</span>, popup);  </span><br><span class="line"> </span><br><span class="line">ActionListener actionListener = <span class="keyword">new</span> ActionListener() &#123;  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;  </span><br><span class="line">trayIcon.displayMessage(<span class="string">"Action Event"</span>,   </span><br><span class="line"><span class="string">"An Action Event Has Been Peformed!"</span>,  </span><br><span class="line">TrayIcon.MessageType.INFO);  </span><br><span class="line">&#125;  </span><br><span class="line">&#125;;  </span><br><span class="line"> </span><br><span class="line">trayIcon.setImageAutoSize(<span class="keyword">true</span>);  </span><br><span class="line">trayIcon.addActionListener(actionListener);  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">tray.add(trayIcon);  </span><br><span class="line">&#125; <span class="keyword">catch</span> (AWTException e1) &#123;  </span><br><span class="line">e1.printStackTrace();  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;  </span><br><span class="line"><span class="keyword">new</span> Monitor();  </span><br><span class="line">&#125;  </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>logback使用</title>
      <link href="/2022/03/20/logback%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/logback%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1192,阅读全文大约需要4分钟</p><blockquote><p>Logback是由log4j创始人设计的另一个开源日志。</p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>依赖<code>springBoot</code>自带logback的依赖</li><li>基础配置<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 控制台日志打印debug级别的日志(默认不打印)</span><br><span class="line"># 生产环境下配置 java -jar c:&#x2F;&#x2F;sss.jar --debug</span><br><span class="line">debug&#x3D;true</span><br><span class="line"># 设置具体包的日志级别</span><br><span class="line">logging.level.root&#x3D;INFO</span><br><span class="line">logging.level.org.springframwork.web&#x3D;DEBUG</span><br><span class="line">logging.level.org.hibernate&#x3D;ERROR</span><br><span class="line"># 指定输出文件</span><br><span class="line">logging.path&#x3D;F:\\demo</span><br><span class="line">logging.file&#x3D;demo.log</span><br><span class="line">logging.level.root&#x3D;info</span><br><span class="line"># 指定配置xml</span><br><span class="line">logging.config&#x3D;classpath:log&#x2F;logback-spring.xml</span><br></pre></td></tr></table></figure></li></ul><h1 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!-- 日志级别从低到高分为TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，如果设置为WARN，则低于WARN的信息都不会输出 --&gt;</span><br><span class="line">&lt;!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true --&gt;</span><br><span class="line">&lt;!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 --&gt;</span><br><span class="line">&lt;!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 --&gt;</span><br><span class="line">&lt;configuration  scan&#x3D;&quot;true&quot; scanPeriod&#x3D;&quot;10 seconds&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--&lt;include resource&#x3D;&quot;org&#x2F;springframework&#x2F;boot&#x2F;logging&#x2F;logback&#x2F;base.xml&quot; &#x2F;&gt;--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;contextName&gt;logback&lt;&#x2F;contextName&gt;</span><br><span class="line">    &lt;!-- name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义变量后，可以使“$&#123;&#125;”来使用变量。 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;log.path&quot; value&#x3D;&quot;D:&#x2F;nmyslog&#x2F;nmys&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 彩色日志 --&gt;</span><br><span class="line">    &lt;!-- 彩色日志依赖的渲染类 --&gt;</span><br><span class="line">    &lt;conversionRule conversionWord&#x3D;&quot;clr&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.ColorConverter&quot; &#x2F;&gt;</span><br><span class="line">    &lt;conversionRule conversionWord&#x3D;&quot;wex&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot; &#x2F;&gt;</span><br><span class="line">    &lt;conversionRule conversionWord&#x3D;&quot;wEx&quot; converterClass&#x3D;&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot; &#x2F;&gt;</span><br><span class="line">    &lt;!-- 彩色日志格式 --&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;CONSOLE_LOG_PATTERN&quot; value&#x3D;&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(---)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--输出到控制台--&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;CONSOLE&quot; class&#x3D;&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</span><br><span class="line">        &lt;!--此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息--&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;info&lt;&#x2F;level&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;Pattern&gt;$&#123;CONSOLE_LOG_PATTERN&#125;&lt;&#x2F;Pattern&gt;</span><br><span class="line">            &lt;!-- 设置字符集 --&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--输出到文件--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 DEBUG 日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;DEBUG_FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;&#x2F;log_debug.log&lt;&#x2F;file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt; &lt;!-- 设置字符集 --&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 日志归档 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;debug&#x2F;log-debug-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录debug级别的 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;debug&lt;&#x2F;level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 INFO 日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;INFO_FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;&#x2F;log_info.log&lt;&#x2F;file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;!-- 每天日志归档路径以及格式 --&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;info&#x2F;log-info-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录info级别的 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;info&lt;&#x2F;level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 WARN 日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;WARN_FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;&#x2F;log_warn.log&lt;&#x2F;file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt; &lt;!-- 此处设置字符集 --&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;warn&#x2F;log-warn-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录warn级别的 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;warn&lt;&#x2F;level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 时间滚动输出 level为 ERROR 日志 --&gt;</span><br><span class="line">    &lt;appender name&#x3D;&quot;ERROR_FILE&quot; class&#x3D;&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span><br><span class="line">        &lt;!-- 正在记录的日志文件的路径及文件名 --&gt;</span><br><span class="line">        &lt;file&gt;$&#123;log.path&#125;&#x2F;log_error.log&lt;&#x2F;file&gt;</span><br><span class="line">        &lt;!--日志文件输出格式--&gt;</span><br><span class="line">        &lt;encoder&gt;</span><br><span class="line">            &lt;pattern&gt;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&lt;&#x2F;pattern&gt;</span><br><span class="line">            &lt;charset&gt;UTF-8&lt;&#x2F;charset&gt; &lt;!-- 此处设置字符集 --&gt;</span><br><span class="line">        &lt;&#x2F;encoder&gt;</span><br><span class="line">        &lt;!-- 日志记录器的滚动策略，按日期，按大小记录 --&gt;</span><br><span class="line">        &lt;rollingPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;</span><br><span class="line">            &lt;fileNamePattern&gt;$&#123;log.path&#125;&#x2F;error&#x2F;log-error-%d&#123;yyyy-MM-dd&#125;.%i.log&lt;&#x2F;fileNamePattern&gt;</span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy class&#x3D;&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                &lt;maxFileSize&gt;100MB&lt;&#x2F;maxFileSize&gt;</span><br><span class="line">            &lt;&#x2F;timeBasedFileNamingAndTriggeringPolicy&gt;</span><br><span class="line">            &lt;!--日志文件保留天数--&gt;</span><br><span class="line">            &lt;maxHistory&gt;15&lt;&#x2F;maxHistory&gt;</span><br><span class="line">        &lt;&#x2F;rollingPolicy&gt;</span><br><span class="line">        &lt;!-- 此日志文件只记录ERROR级别的 --&gt;</span><br><span class="line">        &lt;filter class&#x3D;&quot;ch.qos.logback.classic.filter.LevelFilter&quot;&gt;</span><br><span class="line">            &lt;level&gt;ERROR&lt;&#x2F;level&gt;</span><br><span class="line">            &lt;onMatch&gt;ACCEPT&lt;&#x2F;onMatch&gt;</span><br><span class="line">            &lt;onMismatch&gt;DENY&lt;&#x2F;onMismatch&gt;</span><br><span class="line">        &lt;&#x2F;filter&gt;</span><br><span class="line">    &lt;&#x2F;appender&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        &lt;logger&gt;用来设置某一个包或者具体的某一个类的日志打印级别、</span><br><span class="line">        以及指定&lt;appender&gt;。&lt;logger&gt;仅有一个name属性，</span><br><span class="line">        一个可选的level和一个可选的addtivity属性。</span><br><span class="line">        name:用来指定受此logger约束的某一个包或者具体的某一个类。</span><br><span class="line">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="line">              还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。</span><br><span class="line">              如果未设置此属性，那么当前logger将会继承上级的级别。</span><br><span class="line">        addtivity:是否向上级logger传递打印信息。默认是true。</span><br><span class="line">    --&gt;</span><br><span class="line">    &lt;!--&lt;logger name&#x3D;&quot;org.springframework.web&quot; level&#x3D;&quot;info&quot;&#x2F;&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;logger name&#x3D;&quot;org.springframework.scheduling.annotation.ScheduledAnnotationBeanPostProcessor&quot; level&#x3D;&quot;INFO&quot;&#x2F;&gt;--&gt;</span><br><span class="line">    &lt;!--</span><br><span class="line">        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：</span><br><span class="line">        第一种把&lt;root level&#x3D;&quot;info&quot;&gt;改成&lt;root level&#x3D;&quot;DEBUG&quot;&gt;这样就会打印sql，不过这样日志那边会出现很多其他消息</span><br><span class="line">        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：</span><br><span class="line">     --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性</span><br><span class="line">        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，</span><br><span class="line">        不能设置为INHERITED或者同义词NULL。默认是DEBUG</span><br><span class="line">        可以包含零个或多个元素，标识这个appender将会添加到这个logger。</span><br><span class="line">    --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--开发环境:打印控制台--&gt;</span><br><span class="line">    &lt;springProfile name&#x3D;&quot;dev&quot;&gt;</span><br><span class="line">        &lt;logger name&#x3D;&quot;com.nmys.view&quot; level&#x3D;&quot;debug&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;springProfile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;root level&#x3D;&quot;info&quot;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;CONSOLE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;DEBUG_FILE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;INFO_FILE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;WARN_FILE&quot; &#x2F;&gt;</span><br><span class="line">        &lt;appender-ref ref&#x3D;&quot;ERROR_FILE&quot; &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;root&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--生产环境:输出到文件--&gt;</span><br><span class="line">    &lt;!--&lt;springProfile name&#x3D;&quot;pro&quot;&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;root level&#x3D;&quot;info&quot;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;CONSOLE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;DEBUG_FILE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;INFO_FILE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;ERROR_FILE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">            &lt;!--&lt;appender-ref ref&#x3D;&quot;WARN_FILE&quot; &#x2F;&gt;--&gt;</span><br><span class="line">        &lt;!--&lt;&#x2F;root&gt;--&gt;</span><br><span class="line">    &lt;!--&lt;&#x2F;springProfile&gt;--&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;configuration&gt;</span><br></pre></td></tr></table></figure><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(demo<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//当前类的class,方便定位</span></span><br><span class="line">logger.info(<span class="string">"xx"</span>);</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven导出jar包</title>
      <link href="/2022/03/20/maven%E5%AF%BC%E5%87%BAjar%E5%8C%85/"/>
      <url>/2022/03/20/maven%E5%AF%BC%E5%87%BAjar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1197,阅读全文大约需要4分钟</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>常用插件有三种，对应三个配置</p><ol><li><code>maven-jar-plugin</code>: maven 默认打包插件，用来创建 project jar</li><li><code>maven-shade-plugin</code>: 打可执行包，executable(fat) jar</li><li><code>maven-assembly-plugin</code>: 支持自定义打包方式</li></ol><h1 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h1><ol><li><p>打包前需要先<code>clean</code>一下，重新加载依赖</p></li><li><p><code>maven-jar-plugin</code>配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!-- 对要打的jar包进行配置 --&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!-- Configuration of the archiver --&gt;</span><br><span class="line">        &lt;archive&gt;</span><br><span class="line">            &lt;!--生成的jar中，不要包含pom.xml和pom.properties这两个文件--&gt;</span><br><span class="line">            &lt;addMavenDescriptor&gt;false&lt;&#x2F;addMavenDescriptor&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- Manifest specific configuration --&gt;</span><br><span class="line">            &lt;manifest&gt;</span><br><span class="line">                &lt;!--是否要把第三方jar放到manifest的classpath中--&gt;</span><br><span class="line">                &lt;addClasspath&gt;true&lt;&#x2F;addClasspath&gt;</span><br><span class="line">                </span><br><span class="line">                &lt;!--生成的manifest中classpath的前缀，</span><br><span class="line">                因为要把第三方jar放到lib目录下，</span><br><span class="line">                所以classpath的前缀是lib&#x2F;--&gt;</span><br><span class="line">                &lt;classpathPrefix&gt;lib&#x2F;&lt;&#x2F;classpathPrefix&gt;</span><br><span class="line">            &lt;&#x2F;manifest&gt;</span><br><span class="line">        &lt;&#x2F;archive&gt;</span><br><span class="line">        &lt;!--过滤掉不希望包含在jar中的文件--&gt;</span><br><span class="line">        &lt;excludes&gt;</span><br><span class="line">            &lt;!-- 排除不需要的文件夹(路径是jar包内部的路径) --&gt;</span><br><span class="line">            &lt;exclude&gt;**&#x2F;assembly&#x2F;&lt;&#x2F;exclude&gt;</span><br><span class="line">        &lt;&#x2F;excludes&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>maven-assembly-plugin</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;plugin&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!-- 对项目的组装进行配置 --&gt;</span><br><span class="line">    &lt;configuration&gt;</span><br><span class="line">        &lt;!-- 指定assembly插件的配置文件所在位置 --&gt;</span><br><span class="line">        &lt;descriptors&gt;</span><br><span class="line">            &lt;descriptor&gt;src&#x2F;main&#x2F;resources&#x2F;assembly&#x2F;package.xml&lt;&#x2F;descriptor&gt;</span><br><span class="line">        &lt;&#x2F;descriptors&gt;</span><br><span class="line">    &lt;&#x2F;configuration&gt;</span><br><span class="line">    &lt;executions&gt;</span><br><span class="line">        &lt;execution&gt;</span><br><span class="line">            &lt;id&gt;make-assembly&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!-- 将组装绑定到maven生命周期的哪一阶段 --&gt;</span><br><span class="line">            &lt;phase&gt;package&lt;&#x2F;phase&gt;</span><br><span class="line">            &lt;goals&gt;</span><br><span class="line">                &lt;!-- 指定assembly插件的打包方式--&gt;</span><br><span class="line">                &lt;goal&gt;single&lt;&#x2F;goal&gt;</span><br><span class="line">            &lt;&#x2F;goals&gt;</span><br><span class="line">        &lt;&#x2F;execution&gt;</span><br><span class="line">    &lt;&#x2F;executions&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br></pre></td></tr></table></figure></li><li><p>双击<code>idea maven</code>菜单栏的<code>package</code>或者直接命令执行<code>mvn:package</code>生成两个包（可执行jar和项目压缩包）</p></li></ol><h1 id="pom配置"><a href="#pom配置" class="headerlink" title="pom配置"></a>pom配置</h1><p>包含两个文件：<br>pom.xml整体的配置<br>package.xml包含在pom.xml中，用于指定assembly装配时的配置</p><p><code>pom.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">         xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">         xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;!-- ####################### 基础设置 ###################### --&gt;</span><br><span class="line">    &lt;!--groupId:项目或者组织的唯一标志，并且配置时生成路径也是由此生成，如org.myproject.mojo生成的相对路径为：&#x2F;org&#x2F;myproject&#x2F;mojo--&gt;</span><br><span class="line">    &lt;groupId&gt;com.dong&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;!--项目的通用名称--&gt;</span><br><span class="line">    &lt;artifactId&gt;bigdata&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;!--打包机制，如pom,jar,maven-plugin,ejb,war,ear,rar,par--&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;!--项目的版本--&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- ####################### 项目信息 ###################### --&gt;</span><br><span class="line">    &lt;!--用户描述项目的名称，无关紧要的东西--&gt;</span><br><span class="line">    &lt;name&gt;bigdata&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;!--写明开发团队的网站，无关紧要--&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;http:&#x2F;&#x2F;www.dong.com&#x2F;.com&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- ####################### 环境设置 ###################### --&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;!-- 项目执行脚本目录 --&gt;</span><br><span class="line">        &lt;project.script.execute.directory&gt;src&#x2F;main&#x2F;scripts&#x2F;execute&lt;&#x2F;project.script.execute.directory&gt;</span><br><span class="line">        &lt;!-- 项目说明文档目录 --&gt;</span><br><span class="line">        &lt;project.document.directory&gt;document&lt;&#x2F;project.document.directory&gt;</span><br><span class="line">        &lt;!-- 项目配置文件目录 --&gt;</span><br><span class="line">        &lt;project.config.directory&gt;src&#x2F;main&#x2F;resources&lt;&#x2F;project.config.directory&gt;</span><br><span class="line">        &lt;!-- 项目编码 --&gt;</span><br><span class="line">        &lt;project.build.sourceEncoding&gt;UTF-8&lt;&#x2F;project.build.sourceEncoding&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 本地编译JDK版本 --&gt;</span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;&#x2F;maven.compiler.source&gt;</span><br><span class="line">        &lt;!-- 项目部署JDK版本 --&gt;</span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;&#x2F;maven.compiler.target&gt;</span><br><span class="line">    &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--</span><br><span class="line">     配置Maven的仓库, 在此处配置的仓库会优先于setting.xml里配置的仓库,</span><br><span class="line">     建议哪个仓库快,哪个配置在前面, 然后如果Maven在前面配置的仓库找不到的话会去后面的仓库找，</span><br><span class="line">     如果后面的仓库都找不到，会去setting.xml中央仓库里找</span><br><span class="line">      --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;!-- 阿里云仓库,配置Maven仓库，速度快配置在最前面 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;aliyun&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">        &lt;!-- 国内备选仓库 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;repo2&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;repo2.maven.org&#x2F;maven2&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Cloudera仓库,如果在阿里云仓库里找不到去Cloudera的仓库里找，主要是CDH版本Hadoop依赖的jar --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;cloudera&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;url&gt;https:&#x2F;&#x2F;repository.cloudera.com&#x2F;artifactory&#x2F;cloudera-repos&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- Scala仓库,如果前面两个都找不到来仓库找，如果此仓库也找不到，去中央仓库找 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;scala-tools.org&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;Scala-Tools Maven2 Repository&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;scala-tools.org&#x2F;repo-releases&lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;&#x2F;repositories&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.apache.commons&#x2F;commons-lang3 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.commons&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;commons-lang3&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;version&gt;3.4&lt;&#x2F;version&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;finalName&gt;dong&lt;&#x2F;finalName&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!-- The configuration of maven-jar-plugin --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-jar-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.4&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;!-- 对要打的jar包进行配置 --&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- Configuration of the archiver --&gt;</span><br><span class="line">                    &lt;archive&gt;</span><br><span class="line">                        &lt;!--生成的jar中，不要包含pom.xml和pom.properties这两个文件--&gt;</span><br><span class="line">                        &lt;addMavenDescriptor&gt;false&lt;&#x2F;addMavenDescriptor&gt;</span><br><span class="line"></span><br><span class="line">                        &lt;!-- Manifest specific configuration --&gt;</span><br><span class="line">                        &lt;manifest&gt;</span><br><span class="line">                            &lt;!--是否要把第三方jar放到manifest的classpath中--&gt;</span><br><span class="line">                            &lt;addClasspath&gt;true&lt;&#x2F;addClasspath&gt;</span><br><span class="line"></span><br><span class="line">                            &lt;!--</span><br><span class="line">                            生成的manifest中classpath的前缀，</span><br><span class="line">                            因为要把第三方jar放到lib目录下，</span><br><span class="line">                            所以classpath的前缀是lib&#x2F;</span><br><span class="line">                            --&gt;</span><br><span class="line">                            &lt;classpathPrefix&gt;lib&#x2F;&lt;&#x2F;classpathPrefix&gt;</span><br><span class="line">                        &lt;&#x2F;manifest&gt;</span><br><span class="line">                    &lt;&#x2F;archive&gt;</span><br><span class="line">                    &lt;!--过滤掉不希望包含在jar中的文件--&gt;</span><br><span class="line">                    &lt;excludes&gt;</span><br><span class="line">                        &lt;!-- 排除不需要的文件夹(路径是jar包内部的路径) --&gt;</span><br><span class="line">                        &lt;exclude&gt;**&#x2F;assembly&#x2F;&lt;&#x2F;exclude&gt;</span><br><span class="line">                    &lt;&#x2F;excludes&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- The configuration of maven-assembly-plugin --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.apache.maven.plugins&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;maven-assembly-plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">                &lt;version&gt;2.4&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;!-- 对项目的组装进行配置 --&gt;</span><br><span class="line">                &lt;configuration&gt;</span><br><span class="line">                    &lt;!-- 指定assembly插件的配置文件所在位置 --&gt;</span><br><span class="line">                    &lt;descriptors&gt;</span><br><span class="line">                        &lt;descriptor&gt;src&#x2F;main&#x2F;resources&#x2F;assembly&#x2F;package.xml&lt;&#x2F;descriptor&gt;</span><br><span class="line">                    &lt;&#x2F;descriptors&gt;</span><br><span class="line">                &lt;&#x2F;configuration&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id&gt;make-assembly&lt;&#x2F;id&gt;</span><br><span class="line">                        &lt;!-- 将组装绑定到maven生命周期的哪一阶段 --&gt;</span><br><span class="line">                        &lt;!--&lt;phase&gt;package&lt;&#x2F;phase&gt;--&gt;</span><br><span class="line">                        &lt;goals&gt;</span><br><span class="line">                            &lt;!-- 指定assembly插件的打包方式--&gt;</span><br><span class="line">                            &lt;goal&gt;single&lt;&#x2F;goal&gt;</span><br><span class="line">                        &lt;&#x2F;goals&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p><code>package.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;assembly&gt;</span><br><span class="line">    &lt;id&gt;full&lt;&#x2F;id&gt;</span><br><span class="line">    &lt;!-- 最终打包成一个用于发布的zip文件 --&gt;</span><br><span class="line">    &lt;formats&gt;</span><br><span class="line">        &lt;format&gt;zip&lt;&#x2F;format&gt;</span><br><span class="line">    &lt;&#x2F;formats&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 把依赖jar包打包进Zip压缩文件的lib目录下 --&gt;</span><br><span class="line">    &lt;dependencySets&gt;</span><br><span class="line">        &lt;dependencySet&gt;</span><br><span class="line">            &lt;!--不使用项目的artifact，第三方jar不要解压，打包进zip文件的lib目录--&gt;</span><br><span class="line">            &lt;useProjectArtifact&gt;false&lt;&#x2F;useProjectArtifact&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 第三方jar打包进Zip文件的lib目录下， --&gt;</span><br><span class="line">            &lt;!-- 注意此目录要与maven-jar-plugin中classpathPrefix指定的目录相同, --&gt;</span><br><span class="line">            &lt;!-- 不然这些依赖的jar包加载到ClassPath的时候会找不到--&gt;</span><br><span class="line">            &lt;outputDirectory&gt;lib&lt;&#x2F;outputDirectory&gt;</span><br><span class="line"></span><br><span class="line">            &lt;!-- 第三方jar不要解压--&gt;</span><br><span class="line">            &lt;!--&lt;unpack&gt;false&lt;&#x2F;unpack&gt;--&gt;</span><br><span class="line">        &lt;&#x2F;dependencySet&gt;</span><br><span class="line">    &lt;&#x2F;dependencySets&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 文件设置，你想把哪些文件包含进去，或者把某些文件排除掉，都是在这里配置--&gt;</span><br><span class="line">    &lt;fileSets&gt;</span><br><span class="line">        &lt;!-- 把项目自己编译出来的可执行jar，打包进zip文件的根目录 --&gt;</span><br><span class="line">        &lt;fileSet&gt;</span><br><span class="line">            &lt;directory&gt;$&#123;project.build.directory&#125;&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;outputDirectory&gt;&lt;&#x2F;outputDirectory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;*.jar&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">        &lt;&#x2F;fileSet&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">        把项目readme说明文档，打包进zip文件根目录下</span><br><span class="line">        (这里针对目录document&#x2F;readme.txt文件)</span><br><span class="line">        $&#123;projet.document.directory&#125;是pom.xml中自己配置的</span><br><span class="line">         --&gt;</span><br><span class="line">        &lt;fileSet&gt;</span><br><span class="line">            &lt;directoryl&gt;$&#123;projet.document.directory&#125;&lt;&#x2F;directoryl&gt;</span><br><span class="line">            &lt;outputDirectory&gt;&lt;&#x2F;outputDirectory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;readme.*&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">        &lt;&#x2F;fileSet&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">        把项目相关的说明文档(除了readme文档)，</span><br><span class="line">        打包进zip文件根目录下的document目录</span><br><span class="line">        (这里针对document&#x2F;exclode.txt文件)</span><br><span class="line">        $&#123;project.document.directory&#125;是在pom.xml中自己配置的</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;fileSet&gt;</span><br><span class="line">            &lt;directory&gt;$&#123;project.document.directory&#125;&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;outputDirectory&gt;document&lt;&#x2F;outputDirectory&gt;</span><br><span class="line">            &lt;excludes&gt;</span><br><span class="line">                &lt;exclude&gt;readme.*&lt;&#x2F;exclude&gt;</span><br><span class="line">            &lt;&#x2F;excludes&gt;</span><br><span class="line">        &lt;&#x2F;fileSet&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--</span><br><span class="line">        把项目的脚本文件目录(src&#x2F;main&#x2F;scripts )中的启动脚本文件，</span><br><span class="line">        打包进zip文件的根目录</span><br><span class="line">        (这里针对的是src&#x2F;scripts&#x2F;execute&#x2F;include-file.sh文件)</span><br><span class="line">        $&#123;project.script.execute.directory&#125;</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;fileSet&gt;</span><br><span class="line">            &lt;directory&gt;$&#123;project.script.execute.directory&#125;&lt;&#x2F;directory&gt;</span><br><span class="line">            &lt;outputDirectory&gt;&lt;&#x2F;outputDirectory&gt;</span><br><span class="line">            &lt;includes&gt;</span><br><span class="line">                &lt;include&gt;*&lt;&#x2F;include&gt;</span><br><span class="line">            &lt;&#x2F;includes&gt;</span><br><span class="line">        &lt;&#x2F;fileSet&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;fileSets&gt;</span><br><span class="line">&lt;&#x2F;assembly&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx</title>
      <link href="/2022/03/20/nginx/"/>
      <url>/2022/03/20/nginx/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2100,阅读全文大约需要8分钟</p><h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><ul><li><code>nginx</code>由<code>maxter</code>和<code>worker</code>线程组成，<code>master</code>接受外部信号，并发送给各个<code>worker</code>线程。监控<code>worker</code>线程的状态，重启异常结束的<code>worker</code></li></ul><h1 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h1><ul><li><code>./nginx -s stop</code>停止</li><li><code>./nginx -s quit</code>退出</li><li><code>./nginx -s reload</code>重新加载<code>nginx.conf</code></li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>结构</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">main &#x2F;&#x2F;全局设置</span><br><span class="line">   -event &#x2F;&#x2F; nginx工作模式和连接数上限</span><br><span class="line">   -http &#x2F;&#x2F; 服务器相关属性</span><br><span class="line">       -server &#x2F;&#x2F; 虚拟主机设置</span><br><span class="line">             -upstream &#x2F;&#x2F; 上有服务器设置，主要是反向代理、负载均衡相关</span><br><span class="line">             -location &#x2F;&#x2F; url匹配特定位置后的设置</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">#user www; &#x2F;&#x2F;work进程的用户权限</span><br><span class="line">worker_processes 1;&#x2F;&#x2F; 启用一个worker进程，一般和cpu数量一致</span><br><span class="line"></span><br><span class="line">#error_log logs&#x2F;error.log notice; &#x2F;&#x2F; 日志级别 常用: debug notice warn error crit</span><br><span class="line"></span><br><span class="line">events &#123; &#x2F;&#x2F; 主要配置工作模式和连接数</span><br><span class="line">    use epoll; &#x2F;&#x2F; 默认就是这个，一般不用配置</span><br><span class="line">    worker_connections 1024;&#x2F;&#x2F; 线程都文件限制，不配会默认使用linux的默认值</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">  include mine.types; &#x2F;&#x2F; 引入mine.types这个文件</span><br><span class="line">  #log_format main ·remote_addr - $remote_user... &#x2F;&#x2F; 定义访问日志格式（下面由表格）</span><br><span class="line">  # access_log logs&#x2F;access.log main;&#x2F;&#x2F; 访问日志及格式，main就是上面定义的那个</span><br><span class="line">  sendfile     on;&#x2F;&#x2F; 启用高效文件下载</span><br><span class="line">  #tcp_nopush on;&#x2F;&#x2F; 高效下载使用tcp_nopush</span><br><span class="line">  </span><br><span class="line">  #keepalive_timeout 65;</span><br><span class="line"></span><br><span class="line">  #gzip  on;&#x2F;&#x2F;开启压缩支持</span><br><span class="line">  </span><br><span class="line">upstream nginx &#123; &#x2F;&#x2F; 申明一个负载</span><br><span class="line">    # ip_hash;</span><br><span class="line">    server 192.168.1.1:8098 weight&#x3D;2; &#x2F;&#x2F; 权重为2的负载</span><br><span class="line">    server 192.168.1.2:8098 weight&#x3D;1; &#x2F;&#x2F; 权重为1的负载</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  server &#123; &#x2F;&#x2F; 虚拟主机</span><br><span class="line">    listen    80;&#x2F;&#x2F; 监听端口</span><br><span class="line">    server_name localhost;&#x2F;&#x2F; 主机名（域名访问时匹配）</span><br><span class="line">    ...</span><br><span class="line">    location &#x2F; &#123;&#x2F;&#x2F; 匹配url</span><br><span class="line">        root html; &#x2F;&#x2F; 根目录路径，即最终取的文件是html&#x2F;location的url</span><br><span class="line">        index index.html index.htm;&#x2F;&#x2F; 等url以&#x2F;结尾时，取那个文件。不以&#x2F;结尾则是location指定的</span><br><span class="line">        # root路径+location路径，root代表读取文件的根目录名（nginx目录下的）再加上url后面指定的路径，读取具体文件</span><br><span class="line">        # alias html; &#x2F;&#x2F;  当location &#x3D;&#x2F;xxx 时，因为url后面的第一个已经指定了（即location的值），所以root不能指定具体的根目录，此时就能用alias。</span><br><span class="line">        # 例如 url: 127.0.0.1&#x2F;zzz&#x2F;a.html，设置 alias html;就会读取 html&#x2F;a.html</span><br><span class="line">        # return 500; &#x2F;&#x2F; 可以直接返回错误</span><br><span class="line">        # set $a 32; &#x2F;&#x2F; 设置变量 nginx 先执行rewrite（定义）相关指令，再执行access（执行）,最后是content（读文件）相关命令，所以多次set变量，echo时只会取最后一次的值，不是按照书写顺序执行的。</span><br><span class="line">        # echo $a;&#x2F;&#x2F; 输出a的值到http res</span><br><span class="line">        # proxy_pass http:&#x2F;&#x2F;xxx.xxx.xxx&#x2F;aaa&#x2F;yyy&#x2F; &#x2F;&#x2F;反向代理，末尾有 &#x2F; 的情况下将 location匹配的字符之后的内容补充到 yyy&#x2F; 后面，没有 &#x2F; 的情况补充location匹配的字符及后面的字符到 yyy&#x2F;之后</span><br><span class="line">        # proxy_pass http:&#x2F;&#x2F;nginx; &#x2F;&#x2F; 使用负载</span><br><span class="line">        # rewrite ^&#x2F; a.html break&#x2F;replacement &#x2F;&#x2F; 匹配正则“^&#x2F;”指定的路径，转发（break，服务器内部转发）或重定向（replacement，url切换）</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    error_page    500 502 503 504 &#x2F;50x.html  &#x2F;&#x2F; 配置错误页面</span><br><span class="line">    location &#x3D; &#x2F;50x.html &#123;</span><br><span class="line">        root html;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">名称</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">$remote_addr</td><td align="left">客户端ip</td></tr><tr><td align="left">$remote_user</td><td align="left">远程客户端的用户名（一般是‘-’）</td></tr><tr><td align="left">$time_local</td><td align="left">访问时间和时区</td></tr><tr><td align="left">$request</td><td align="left">url及请求方法</td></tr><tr><td align="left">$status</td><td align="left">响应码</td></tr><tr><td align="left">$body_bytes_sent</td><td align="left">给客户的发送的文件主题内容字节数</td></tr><tr><td align="left">$http_user_agent</td><td align="left">用户使用的代理（一般是浏览器）</td></tr><tr><td align="left">$http_x_forwarded_for</td><td align="left">可以记录客户端ip</td></tr><tr><td align="left">$http_referer</td><td align="left">用户从那个链接过来的</td></tr></tbody></table><h1 id="url路由配置"><a href="#url路由配置" class="headerlink" title="url路由配置"></a>url路由配置</h1><table><thead><tr><th>优先级</th><th>表达式</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>location =/</td><td>精准匹配/</td></tr><tr><td>2</td><td>location /xxx</td><td>开头是/xxx，正常匹配（^~）</td></tr><tr><td>2</td><td>location ^~/static/</td><td>^~ 正常匹配，以/static/ 开头</td></tr><tr><td>3</td><td>location ~ /a</td><td>正则匹配，严格匹配，区分大小写</td></tr><tr><td>3</td><td>location ~*  /a</td><td>不区分大小写正则</td></tr></tbody></table><ul><li>同级别会取最长值作为匹配结果</li><li>精准匹配会直接返回结果，普通匹配结束后还会再进行正则匹配，如果正则有结果，会返回正则匹配到的结果，正则匹配会覆盖普通匹配。</li></ul><ul><li>匹配多条则会进入最长的规则中</li></ul><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><ol><li>默认使用轮询，逐个转发到配置的服务器中，如果服务器挂了，能够自动剔除</li><li>weight，指定轮询记录，和被访问几率成正比</li><li>ip_hash 每个请求按访问的ip结果分配，这样每个访客固定再一个服务器上，解决session问题</li></ol><h1 id="运作原理"><a href="#运作原理" class="headerlink" title="运作原理"></a>运作原理</h1><ul><li>url: 域名+端口(port)+路径(path)+参数(param)</li></ul><ol><li>匹配server虚拟主机</li><li>匹配location，根据path从前往后匹配。根据匹配结果分为 <strong>匹配到的path1</strong>和<strong>剩余path2</strong></li><li>代理转发</li></ol><ul><li><code>root</code>转，整个path1+path2</li><li><code>alias</code>只转<code>path2</code></li><li><code>proxy_pass</code>,如果port后面有/则只传path2，没有/则传path1 + path2</li><li><code>response</code>根据传过来的信息，生成内容，返回页面</li></ul><ol><li><code>echo</code>内容生成的命令，echo信息到response (需要echo-nginx-module第三方插件)</li></ol><h1 id="rewrite"><a href="#rewrite" class="headerlink" title="rewrite"></a>rewrite</h1><ul><li><code>rewrite regex replacement [flag]</code></li><li><code>regex</code>正则，<code>^/</code>代表总是匹配</li><li><code>replacement</code>替换值，新值</li><li><code>flag</code>处理标志，可选</li></ul><ol><li><code>break</code>内部转发，替换新值，然后走后续的执行阶段</li><li><code>last</code>内部转发，用替换值重新走location，警惕死循环</li><li><code>redirect</code> 301重定向</li><li><code>permanent</code> 302重定向</li><li>没有<code>flag</code>的时候最后一个rewrite会覆盖之前的，有<code>flag</code>则第一个生效</li></ol><h1 id="location"><a href="#location" class="headerlink" title="location"></a>location</h1><ul><li>nginx配置<code>location [=|~|~*|^~] /uri/ { … }</code>用法</li></ul><ol><li>= 严格匹配。如果这个查询匹配，那么将停止搜索并立即处理此请求。</li><li>~ 为区分大小写匹配(可用正则表达式)</li><li>!~为区分大小写不匹配</li><li>~* 为不区分大小写匹配(可用正则表达式)</li><li>!~*为不区分大小写不匹配</li><li>^~ 如果把这个前缀用于一个常规字符串,那么告诉nginx 如果路径匹配那么不测试正则表达式。</li></ol><h1 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line"></span><br><span class="line">listen 80;</span><br><span class="line">server_name xxx.xx.com;</span><br><span class="line"></span><br><span class="line"># set $flag 0;</span><br><span class="line"># if($flag &#x3D; 0) &#123;</span><br><span class="line">#     return 501;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># 客户端完整请求($request_uri)  不区分大小写(~*) 匹配php结尾的正则时返回502</span><br><span class="line">if( $request_uri ~* &#x2F;(.*)\.php ) &#123;</span><br><span class="line">      return 502;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 自动读取linux文件目录，当没有请求的文件时，返回414</span><br><span class="line">if(!-f $request_filename) &#123;</span><br><span class="line">      return 414;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 拦截chrome浏览器的请求</span><br><span class="line">if($http_user_agent ~ Chrome) &#123;</span><br><span class="line">        return 503;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    # 开启目录显示</span><br><span class="line">    autoindex on;</span><br><span class="line">    autoindex_exact_size off;</span><br><span class="line">    autoindex_localtime on;</span><br><span class="line">    charset utf-8;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line"></span><br><span class="line">    # 选择文件存储的根目录</span><br><span class="line">    root   &#x2F;mnt&#x2F;d&#x2F;TDDownload;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">...</span><br><span class="line">if($http_origin ~ http:&#x2F;&#x2F;(.*).xx.com) &#123;</span><br><span class="line">    # http_origin是nginx内置变量，代表请求的origin值，即请求的网址，将它保存为变量http_origin</span><br><span class="line">    set $allpw_url $http_origin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 是否允许请求带验证信息</span><br><span class="line">add_header Access-Controller-Allow-Credentials true;</span><br><span class="line"># 允许跨域的域名，可以是列表也可以是 * 全部允许跨域</span><br><span class="line">add_header Access-Control-Allow-Origin $allow_url;</span><br><span class="line"># 允许脚本访问的返回头</span><br><span class="line">add_header Access-Control-Allow-Headers &#39;x-requested-whith,content-type,Cache-Control,paragma,Date,x-timestamp&#39;;</span><br><span class="line"># 允许请求的方法</span><br><span class="line">add_header Access-Control-Allow-Methods &#39;POST,GET,OPTIONS,PUT,DELETE&#39;;</span><br><span class="line"># 允许自定义的头部</span><br><span class="line">add_header Access-Control-Expose-Headers &#39;WWW-Autenticate,Server-Authorization&#39;;</span><br><span class="line"># P3P支持跨域cookie操作</span><br><span class="line">add_header P3P &#39;policyref&#x3D;&quot;&#x2F;w3c&#x2F;p3p.xml&quot;, CP&#x3D;&quot;NOI DSP PSAa OUR IND ONL UNI COM NAV INT LOC&quot;&#39;;</span><br><span class="line"></span><br><span class="line">if($request_method &#x3D; &#39;OPTIONS&#39;) &#123;</span><br><span class="line">    return 204;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;xxx.png &#123;</span><br><span class="line"></span><br><span class="line">    valid_referers xx.com;</span><br><span class="line">    if($invalid_referer) &#123;</span><br><span class="line">        return 404;</span><br><span class="line">    &#125;</span><br><span class="line">    return ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="缓存静态文件"><a href="#缓存静态文件" class="headerlink" title="缓存静态文件"></a>缓存静态文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location xxx &#123;</span><br><span class="line"># s秒，m分，h小时，d天</span><br><span class="line">  expires 2m; # 缓存时间</span><br><span class="line">  root img&#x2F;src;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="压缩传输"><a href="#压缩传输" class="headerlink" title="压缩传输"></a>压缩传输</h1><ol><li>浏览器请求时会携带支持的解压缩格式<code>Accept-Encoding: gzip, deflate</code></li><li>nginx压缩文件，并携带<code>Content-Encoding: gzip</code>的返回给浏览器，表示当前是用什么方式压缩的。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">location xx &#123;</span><br><span class="line">    gzip on; # 启用gzip压缩，默认off</span><br><span class="line">    # 那些文件开启压缩功能</span><br><span class="line">    gzip_types application&#x2F;javascript text&#x2F;css image&#x2F;jpeg image&#x2F;png image&#x2F;gif;</span><br><span class="line">    gzip_min_length 1024;# 超过多少大小才压缩</span><br><span class="line">    gzip_buffers 4 1k;# 压缩相应的缓冲块大小和数量，默认是内存一个页大小</span><br><span class="line">    gzip_comp_level 1;# 压缩等级，1-9，默认1，取值越大压缩比例越大，越耗时</span><br><span class="line">    </span><br><span class="line">    root src;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="https"><a href="#https" class="headerlink" title="https"></a>https</h1><p>conf文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssl_certificate &#x2F;xxx&#x2F;xxx&#x2F;xx.crt;</span><br><span class="line">ssl_certificate_key &#x2F;xx&#x2F;x&#x2F;server.key;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 8080 ssl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h1><ul><li>使用<code>keepalive</code>解决高可用问题</li><li><code>lvs</code>思想</li></ul><p>多个Nginx配置keepalive，就会生成一个虚拟网关（固定ip），虚拟网关按照策略将流量分发给各个Nginx，虚拟网关不是真实网关所以不会挂掉。</p><ol><li>下载对应nginx版本的keepalived压缩包</li><li><code>./configure --prefix=/data/program/keepalived --sysconf=/etc/</code>指定文件位置（prefix）和配置文件位置(sysconf)</li><li><code>make</code>执行安装</li><li><code>keepalived.conf</code>是配置文件<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_1 # 设置当前lvs的id</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_script chk_http_port &#123;</span><br><span class="line">    script &quot;&#x2F;xxx&#x2F;chk_nginx_pid.sh&quot;# 设置执行的脚本</span><br><span class="line">    interval 2 # 脚本执行时间，秒</span><br><span class="line">    weight 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER # 主还是从</span><br><span class="line">    interface eth0 # 系统网卡</span><br><span class="line">    virtual_router_id 51 # 主备机器一致</span><br><span class="line">    priority 100 # 优先级 值大的胜出</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.100.1 # 虚拟ip，可以是多个</span><br><span class="line">    &#125;</span><br><span class="line">    srack_script &#123;</span><br><span class="line">        chk_http_port # 调用检测脚本</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li>keepalive监控Nginx</li></ul><p>chk_http_port.sh内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">A&#x3D;&#96;ps -C nginx --no-header |wc -l&#96;  # 统计nginx数量</span><br><span class="line">if [$A -eq 0];then</span><br><span class="line">    &#x2F;user&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;nginx # 重启nginx</span><br><span class="line">    if[ &#96;ps -C nginx --no-header |wc -l&#96; -eq 0 ];then # 如果重启失败，则关闭keepalived服务，进行VIP（虚拟ip）转移(本机keepalived杀死，则流量就会自动转移到其他机子上)</span><br><span class="line">        killall keepalived</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot整合shiro</title>
      <link href="/2022/03/20/springBoot%E6%95%B4%E5%90%88shiro/"/>
      <url>/2022/03/20/springBoot%E6%95%B4%E5%90%88shiro/</url>
      
        <content type="html"><![CDATA[<p>文章字数：455,阅读全文大约需要1分钟</p><blockquote><p><code>shiro</code>是一个可以管理项目权限的框架</p></blockquote><h1 id="springBoot中引入"><a href="#springBoot中引入" class="headerlink" title="springBoot中引入"></a>springBoot中引入</h1><p><code>maven</code>依赖添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.shiro&lt;&#x2F;groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;shiro-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.4.0&lt;&#x2F;version&gt;</span><br><span class="line"> &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><h1 id="密码加密工具类"><a href="#密码加密工具类" class="headerlink" title="密码加密工具类"></a>密码加密工具类</h1><p><code>shiro</code>提供了加密、生成随机盐的方法，封装成工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.SecureRandomNumberGenerator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.RandomNumberGenerator;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.crypto.hash.SimpleHash;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.ByteSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 密码加密工具类</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PasswordHelper</span></span>&#123;</span><br><span class="line">    <span class="comment">//随机字符串生成器</span></span><br><span class="line">    <span class="keyword">private</span> RandomNumberGenerator randomOb = <span class="keyword">new</span> RandomNumberGenerator();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//散列算法名（md5方式）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ALGORITHM_NAME = <span class="string">"md5"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//散列迭代次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_ITERATION = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      *  加密用户</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> user 用户，用户名(name)、密码(pwd)、盐\加密因子(salt)</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encryptPassword</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">        <span class="comment">//生成加密因子，保存盐。</span></span><br><span class="line">        user.setSalt(randomOb.nextBytes().toHex());</span><br><span class="line">        <span class="comment">//加密密码 SimpleHash（算法名，密码，盐的byte，次数）.toHex()</span></span><br><span class="line">        String newPassword = <span class="keyword">new</span> SimpleHash(ALGORITHM_NAME ,user.getPwd,ByteSource.Util.bytes(user.getSalt()),HASH_ITERATION).toHex();</span><br><span class="line">        <span class="comment">//更新密码</span></span><br><span class="line">        user.setPwd(newPassword );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自定义Realm"><a href="#自定义Realm" class="headerlink" title="自定义Realm"></a>自定义Realm</h1><p><code>shiro</code>需要我们提供<code>doGetAuthenticationInfo</code>和<code>doGetAuthorizationInfo</code>的实现，已完成登录认证和权限信息。<br>自定义<code>Realm</code>，继承与<code>AuthorizingRealm</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 为shiro提供登录验证和权限提取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnceladusShiroRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span></span>&#123;</span><br><span class="line">    <span class="comment">//用户操作业务层</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 提供用户角色和权限获取的逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//需要返回的权限信息</span></span><br><span class="line">         SimpleAuthorizationInfo authorizationInfo = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">         String userName = (String) principals.getPrimaryPrincipal();</span><br><span class="line">         User user = userService.findUserByName(userName);</span><br><span class="line">         <span class="keyword">for</span> (SysRole role : user.getRoles()) &#123;</span><br><span class="line">            <span class="comment">//设置角色</span></span><br><span class="line">            authorizationInfo.addRole(role.getRole());</span><br><span class="line">            <span class="keyword">for</span> (SysPermission permission : role.getPermissions()) &#123;</span><br><span class="line">                <span class="comment">//设置权限</span></span><br><span class="line">                authorizationInfo.addStringPermission(permission.getName());</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> authorizationInfo;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">     <span class="comment">//通过token获取用户名</span></span><br><span class="line">     String userName = (String) token.getPrincipal();</span><br><span class="line">     User user = userService.findUserByName(username);</span><br><span class="line">     <span class="keyword">if</span> (user == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     SimpleAuthenticationInfo authenticationInfo = <span class="keyword">new</span> SimpleAuthenticationInfo(</span><br><span class="line">                                         user.getUsername(),</span><br><span class="line">                                         user.getPassword(),</span><br><span class="line">                                         ByteSource.Util.bytes(user.getCredentialsSalt()),</span><br><span class="line">                                         getName());</span><br><span class="line">      <span class="keyword">return</span> authenticationInfo;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="shiro配置"><a href="#shiro配置" class="headerlink" title="shiro配置"></a>shiro配置</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//配置权限</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shirFilter</span><span class="params">(SecurityManager securityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">"/login"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">"/unauthc"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setSuccessUrl(<span class="string">"/home/index"</span>);</span><br><span class="line">        </span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/*"</span>, <span class="string">"anon"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/authc/index"</span>, <span class="string">"authc"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/authc/admin"</span>, <span class="string">"roles[admin]"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/authc/renewable"</span>, <span class="string">"perms[Create,Update]"</span>);</span><br><span class="line">        filterChainDefinitionMap.put(<span class="string">"/authc/removable"</span>, <span class="string">"perms[Delete]"</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 提供散列算法的信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HashedCredentialsMatcher <span class="title">hashedCredentialsMatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        HashedCredentialsMatcher hashedCredentialsMatcher = <span class="keyword">new</span> HashedCredentialsMatcher();</span><br><span class="line">        hashedCredentialsMatcher.setHashAlgorithmName(PasswordHelper.ALGORITHM_NAME); <span class="comment">// 散列算法</span></span><br><span class="line">        hashedCredentialsMatcher.setHashIterations(PasswordHelper.HASH_ITERATIONS); <span class="comment">// 散列次数</span></span><br><span class="line">        <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 设置加密算法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EnceladusShiroRealm <span class="title">shiroRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//自己实现的Realm</span></span><br><span class="line">        EnceladusShiroRealm shiroRealm = <span class="keyword">new</span> EnceladusShiroRealm();</span><br><span class="line">        shiroRealm.setCredentialsMatcher(hashedCredentialsMatcher()); <span class="comment">// 设置加密算法</span></span><br><span class="line">        <span class="keyword">return</span> shiroRealm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 设置安全管理类的realm为上面写的realm</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SecurityManager <span class="title">securityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager securityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        securityManager.setRealm(shiroRealm());</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PasswordHelper <span class="title">passwordHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PasswordHelper();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">常用的过滤器如下：</span><br><span class="line">authc：所有已登陆用户可访问</span><br><span class="line">roles：有指定角色的用户可访问，通过[ ]指定具体角色，这里的角色名称与数据库中配置一致</span><br><span class="line">perms：有指定权限的用户可访问，通过[ ]指定具体权限，这里的权限名称与数据库中配置一致</span><br><span class="line">anon：所有用户可访问，通常作为指定页面的静态资源时使用</span><br></pre></td></tr></table></figure><h1 id="test"><a href="#test" class="headerlink" title="test"></a>test</h1><p>获取权限的操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.shiro.SecurityUtils;</span><br><span class="line">import org.apache.shiro.authc.IncorrectCredentialsException;</span><br><span class="line">import org.apache.shiro.authc.UnknownAccountException;</span><br><span class="line">import org.apache.shiro.authc.UsernamePasswordToken;</span><br><span class="line">import org.apache.shiro.subject.Subject;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">import com.learnhow.springboot.web.PasswordHelper;</span><br><span class="line">import com.learnhow.springboot.web.entity.User;</span><br><span class="line">import com.learnhow.springboot.web.service.UserService;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping</span><br><span class="line">public class HomeController &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line">    @Autowired</span><br><span class="line">    private PasswordHelper passwordHelper;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;login&quot;)</span><br><span class="line">    public Object login() &#123;</span><br><span class="line">        return &quot;Here is Login page&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;unauthc&quot;)</span><br><span class="line">    public Object unauthc() &#123;</span><br><span class="line">        return &quot;Here is Unauthc page&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;doLogin&quot;)</span><br><span class="line">    public Object doLogin(@RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line">        UsernamePasswordToken token &#x3D; new UsernamePasswordToken(username, password);</span><br><span class="line">        Subject subject &#x3D; SecurityUtils.getSubject();</span><br><span class="line">        try &#123;</span><br><span class="line">            subject.login(token);</span><br><span class="line">        &#125; catch (IncorrectCredentialsException ice) &#123;</span><br><span class="line">            return &quot;password error!&quot;;</span><br><span class="line">        &#125; catch (UnknownAccountException uae) &#123;</span><br><span class="line">            return &quot;username error!&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        User user &#x3D; userService.findUserByName(username);</span><br><span class="line">        subject.getSession().setAttribute(&quot;user&quot;, user);</span><br><span class="line">        return &quot;SUCCESS&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;register&quot;)</span><br><span class="line">    public Object register(@RequestParam String username, @RequestParam String password) &#123;</span><br><span class="line">        User user &#x3D; new User();</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setPassword(password);</span><br><span class="line">        passwordHelper.encryptPassword(user);</span><br><span class="line"></span><br><span class="line">        userService.saveUser(user);</span><br><span class="line">        return &quot;SUCCESS&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>权限拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.learnhow.springboot.web.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"authc"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthcController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        User user = (User) subject.getSession().getAttribute(<span class="string">"user"</span>);</span><br><span class="line">        <span class="keyword">return</span> user.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"admin"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">admin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Welcome Admin"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// delete</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"removable"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"removable"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// insert &amp; update</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"renewable"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">renewable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"renewable"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Spring </tag>
            
            <tag> 安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssl连接工具类</title>
      <link href="/2022/03/20/ssl%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/03/20/ssl%E8%BF%9E%E6%8E%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>文章字数：632,阅读全文大约需要2分钟</p><blockquote><p>该工具类主要收集了研究ssl连接时用到的相关知识点</p></blockquote><h1 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h1><ol><li>通过证书创建<code>keystore</code></li><li>从<code>keystore</code>中取证书</li><li>通过证书、<code>keystore</code>等多种方式创建<code>SSLSocketFactory</code></li><li>单向认证、双向认证</li><li>通过证书链创建<code>SSLSocketFactory</code></li><li>通过<code>trustStore</code>验证证书及证书链<br>…</li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.*;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStore;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.Certificate;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * ssl工具类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-02-03 14:39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SslUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取x509格式的证书</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> certPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CertificateException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> X509Certificate <span class="title">getX509Certificate</span><span class="params">(String certPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream inStream = <span class="keyword">new</span> FileInputStream(certPath)) &#123;</span><br><span class="line">            <span class="keyword">return</span> getX509Certificate(inStream);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过输入流获取证书</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inStream</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> X509Certificate <span class="title">getX509Certificate</span><span class="params">(InputStream inStream)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line">        X509Certificate caCert = (X509Certificate)cf.generateCertificate(inStream);</span><br><span class="line">        <span class="keyword">return</span> caCert;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从keystore中获取证书</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyStorePath keystore位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyStorePwd keyStore密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyStoreType keyStore类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> alias 证书存储的别名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Certificate <span class="title">getCertificate</span><span class="params">(String keyStorePath, String keyStorePwd, String keyStoreType, String alias)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> KeyStore keyStore = getKeyStore(keyStorePath, keyStorePwd, keyStoreType);</span><br><span class="line">        <span class="keyword">return</span> keyStore.getCertificate(alias);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取KeyStore</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyStorePath 路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyStorePwd 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyStoreType 类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> KeyStore <span class="title">getKeyStore</span><span class="params">(String keyStorePath, String keyStorePwd, String keyStoreType)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (InputStream inputStream = <span class="keyword">new</span> FileInputStream(keyStorePath)) &#123;</span><br><span class="line">            KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class="line">            keyStore.load(inputStream, keyStorePwd.toCharArray());</span><br><span class="line">            <span class="keyword">return</span> keyStore;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载DER格式的私钥证书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrivateKey <span class="title">getDERPrivateKey</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] keyBytes = Files.readAllBytes(Paths.get(filename));</span><br><span class="line">        PKCS8EncodedKeySpec spec = <span class="keyword">new</span> PKCS8EncodedKeySpec(keyBytes);</span><br><span class="line">        KeyFactory kf = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        <span class="keyword">return</span> kf.generatePrivate(spec);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据证书库和受信证书库构建双向认证sslSocket工厂</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p12TrustStore p12受信库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p12KeyStore p12证书库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ksPwd 证书库密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title">getSocketFactoryByPKCS12</span><span class="params">(String p12TrustStore, String tsPwd, String p12KeyStore,</span></span></span><br><span class="line"><span class="function"><span class="params">        String ksPwd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String P12_TYPE = <span class="string">"pkcs12"</span>;</span><br><span class="line">        KeyStore trustStore = getKeyStore(p12TrustStore, tsPwd, P12_TYPE);</span><br><span class="line">        TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        tmf.init(trustStore);</span><br><span class="line">        KeyStore keyStore = getKeyStore(p12KeyStore, ksPwd, P12_TYPE);</span><br><span class="line">        <span class="comment">// 创建管理JKS密钥库的密钥管理器 (SunX509)</span></span><br><span class="line">        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        <span class="comment">// 使用密钥内容源初始化此工厂。 提供者通常使用 KeyStore 来获取在安全套接字协商期间所使用的密钥内容</span></span><br><span class="line">        kmf.init(keyStore, ksPwd.toCharArray());</span><br><span class="line">        <span class="comment">// 初始sslcontext</span></span><br><span class="line">        SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLSv1.2"</span>);</span><br><span class="line">        sslContext.init(kmf.getKeyManagers(), tmf.getTrustManagers(), <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="keyword">return</span> sslContext.getSocketFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过证书链构造SSLSocketFactory（单向认证）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ca</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> crt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SSLSocketFactory <span class="title">getSocketFactoryByCrtList</span><span class="params">(String keyPath, String pwd, String ca, String crt)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> KeyStore keyStore = KeyStore.getInstance(<span class="string">"pkcs12"</span>);</span><br><span class="line">        keyStore.load(<span class="keyword">null</span>);</span><br><span class="line">        PrivateKey privateKey = getDERPrivateKey(keyPath);</span><br><span class="line">        keyStore.setKeyEntry(<span class="string">"cert"</span>, privateKey, pwd.toCharArray(), <span class="keyword">new</span> Certificate[]&#123;getX509Certificate(crt), getX509Certificate(ca)&#125;);</span><br><span class="line">        <span class="comment">// 创建管理JKS密钥库的密钥管理器 (SunX509)</span></span><br><span class="line">        KeyManagerFactory kmf = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());</span><br><span class="line">        <span class="comment">// 使用密钥内容源初始化此工厂。 提供者通常使用 KeyStore 来获取在安全套接字协商期间所使用的密钥内容</span></span><br><span class="line">        kmf.init(keyStore, <span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">// 初始sslcontext</span></span><br><span class="line">        SSLContext sslContext = SSLContext.getInstance(<span class="string">"TLSv1.2"</span>);</span><br><span class="line">        <span class="comment">// 单向认证，不验证证书以及ip。方便测试</span></span><br><span class="line">        <span class="keyword">final</span> TrustManager trustManager = <span class="keyword">new</span> X509ExtendedTrustManager()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType, Socket socket)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType, Socket socket)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType, SSLEngine engine)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType, SSLEngine engine)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        sslContext.init(kmf.getKeyManagers(), <span class="keyword">new</span> TrustManager[] &#123;trustManager&#125;, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">        <span class="keyword">return</span> sslContext.getSocketFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要添加受信的证书</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> certAlias 证书别名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cert 证书</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trustStore 受信库路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd 受信库密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">trustCert</span><span class="params">(String certAlias, Certificate cert, String trustStore, String pwd,</span></span></span><br><span class="line"><span class="function"><span class="params">        String storeType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isOk = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            initTrustStoreIfNotExist(trustStore, pwd, storeType);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"create trustStore error"</span>, e);</span><br><span class="line">            isOk = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isOk) &#123;</span><br><span class="line">            <span class="keyword">try</span> (FileInputStream ips = <span class="keyword">new</span> FileInputStream(trustStore)) &#123;</span><br><span class="line">                KeyStore ks = KeyStore.getInstance(storeType);</span><br><span class="line">                ks.load(ips, pwd.toCharArray());</span><br><span class="line">                ks.deleteEntry(certAlias);</span><br><span class="line">                ks.setCertificateEntry(certAlias, cert);</span><br><span class="line">                <span class="keyword">try</span> (FileOutputStream ops = <span class="keyword">new</span> FileOutputStream(trustStore)) &#123;</span><br><span class="line">                    ks.store(ops, pwd.toCharArray());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                log.error(<span class="string">"authorization certificate error"</span>, e);</span><br><span class="line">                isOk = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> isOk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果不存在创建文件</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> trustStore 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否新建</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initTrustStoreIfNotExist</span><span class="params">(String trustStore, String pwd, String storeType)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        File trustStoreFile = <span class="keyword">new</span> File(trustStore);</span><br><span class="line">        <span class="keyword">if</span> (!trustStoreFile.getParentFile().exists()) &#123;</span><br><span class="line">            trustStoreFile.getParentFile().mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!trustStoreFile.exists()) &#123;</span><br><span class="line">            trustStoreFile.createNewFile();</span><br><span class="line">            KeyStore ks = KeyStore.getInstance(storeType);</span><br><span class="line">            <span class="keyword">try</span> (FileOutputStream ops = <span class="keyword">new</span> FileOutputStream(trustStoreFile)) &#123;</span><br><span class="line">                ks.load(<span class="keyword">null</span>);</span><br><span class="line">                ks.store(ops, pwd.toCharArray());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用TrustStore检测证书（链）是否受信</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> crt</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> certPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">authCertByTrustStore</span><span class="params">(String crt, String... certPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> res = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 需要校验的证书</span></span><br><span class="line">            X509Certificate[] crts = <span class="keyword">new</span> X509Certificate[certPath.length];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; certPath.length; i++) &#123;</span><br><span class="line">                crts[i] = getX509Certificate(certPath[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            KeyStore trustStore = KeyStore.getInstance(<span class="string">"pkcs12"</span>);</span><br><span class="line">            trustStore.load(<span class="keyword">null</span>);</span><br><span class="line">            trustStore.setCertificateEntry(<span class="string">"ca"</span>, getX509Certificate(crt));</span><br><span class="line">            TrustManagerFactory tmf = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());</span><br><span class="line">            tmf.init(trustStore);</span><br><span class="line">            <span class="keyword">final</span> TrustManager[] trustManagers = tmf.getTrustManagers();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; trustManagers.length; i++) &#123;</span><br><span class="line">                X509TrustManager manager = (X509TrustManager)trustManagers[i];</span><br><span class="line">                <span class="comment">// 检测不成功会抛出异常</span></span><br><span class="line"><span class="comment">//                manager.checkClientTrusted(new X509Certificate[] &#123;certificate&#125;, "RSA");</span></span><br><span class="line">                manager.checkServerTrusted(crts, <span class="string">"RSA"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"auth cert error "</span>, e);</span><br><span class="line">            res = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ssl </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows下批处理BAT简单用法</title>
      <link href="/2022/03/20/windows%E4%B8%8B%E6%89%B9%E5%A4%84%E7%90%86BAT%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/"/>
      <url>/2022/03/20/windows%E4%B8%8B%E6%89%B9%E5%A4%84%E7%90%86BAT%E7%AE%80%E5%8D%95%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1850,阅读全文大约需要7分钟</p><blockquote><p>bat是windows的dos界面下对于各种命令操作的一中批处理语言，可以作为胶水语言连接其他语言，也可以处理简单的操作以及执行操作系统命令。<br>普通文本文件后缀改成<code>.bat</code>就可以成为批处理文件</p></blockquote><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><ul><li><code>REM xxx</code></li><li><code>:: xxx</code></li></ul><h1 id="基础美观操作"><a href="#基础美观操作" class="headerlink" title="基础美观操作"></a>基础美观操作</h1><ul><li><code>title newTitle</code>设置标题</li><li><code>color 01</code>设置颜色，0是黑色背景，1是蓝色前景。其他搭配见<code>color /?</code></li><li><code>mode con cols=113 lines=15 &amp; color 9f</code>设置列113、行15、颜色9f</li><li><code>pause</code>暂停，提示任意输入继续</li></ul><p>#转义</p><ul><li><code>,</code>相当空格</li><li><code>^</code>转义字符</li><li><code>命令1；命令2</code>报错后会继续执行</li></ul><h1 id="基础输入输出"><a href="#基础输入输出" class="headerlink" title="基础输入输出"></a>基础输入输出</h1><ul><li><code>echo &quot;你想说什么&quot;</code>输出文字</li><li><code>echo off</code>关闭c:\user&gt;_ 的前缀及其他提示，只留下光标</li><li><code>echo on</code>恢复回显</li><li><code>@echo off</code>连自身的命令回显都不要</li><li><code>echo.</code>输出空行，换行</li><li><code>echo &quot;somethine&quot;&gt;filename</code>把信息写入文件（覆盖）</li><li><code>echo &quot;somethine&quot;&gt;&gt;filename</code>把信息写入文件（追加）</li><li><code>echo (Ctrl+G)</code>喇叭鸣响，对个ctrl+G可响多次</li><li><code>%0 %1 %2</code>调用批处理时传的参数，<code>%0</code>自身<code>%1</code>第1个<blockquote><p>例：复制自身<code>copy %0 d:\wind.bat</code></p></blockquote></li><li><code>set /p choice=          输入一个字符:</code>获取输入</li></ul><h1 id="组合命令"><a href="#组合命令" class="headerlink" title="组合命令"></a>组合命令</h1><ul><li><code>第一个命令|第二个命令</code>管道命令，第一个的输出当成第二个的输入。<blockquote><p>例：<code>dir c:\|find “txt”</code></p></blockquote></li><li><code>命令一&amp;命令二</code>组合执行等于<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line">命令一</span><br><span class="line">命令二</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><code>&amp;&amp; 和 ||</code> 同java短路</li></ul><h1 id="循环for"><a href="#循环for" class="headerlink" title="循环for"></a>循环for</h1><ul><li><code>for %%i in (set) do somthing</code>有/d /l /r /f 四个属性</li></ul><p><strong>/D属性</strong></p><ul><li><code>for /d %%i in (c:\*) do echo %%i</code>搜索C盘下的文件</li><li><code>for /d %%i in (???) do echo %%i</code>搜索当前目录下有1-3个字母的文件</li></ul><p><strong>/R属性</strong></p><ul><li><code>FOR /R [[drive:]path] %%variable IN (set) DO command [command-parameters]</code>/r后制定根目录，遍历目录树，如果没有路径默认当前目录。set为匹配规则</li><li><code>for /r c:\ %%i in (*.exe) do echo %%i</code>找c盘下的exe文件</li></ul><p><strong>/L属性</strong></p><ul><li><code>for /l %%i in (0,2,6) do @echo %%i</code>从0开始，每次加2，直到6.</li></ul><p><strong>/F属性</strong></p><ul><li><code>FOR /F “eol=; tokens=1,3* delims=,- ” %%i in (test.txt) do echo %%i %%j %%k</code>处理文件test.txt<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eol&#x3D;;          分号开头的行为注释行</span><br><span class="line">tokens&#x3D;1,3*    将每行第1段,第3段和剩余字段分别赋予变量%%i，%%j，%%k</span><br><span class="line">delims&#x3D;,-     （减号后有一空格）以逗号减号和空格为分隔符，空格必须放在最后</span><br></pre></td></tr></table></figure><h1 id="循环if"><a href="#循环if" class="headerlink" title="循环if"></a>循环if</h1></li><li>判断<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set &#x2F;p p&#x3D;请输入</span><br><span class="line">if %p% LEQ 9 (</span><br><span class="line"> echo %p%</span><br><span class="line">) else (</span><br><span class="line"> echo 9</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li>关系符</li></ul><table><thead><tr><th>含义</th><th>关系符</th></tr></thead><tbody><tr><td>等于</td><td>equ</td></tr><tr><td>大于</td><td>gtr</td></tr><tr><td>大于或等于</td><td>geq</td></tr><tr><td>小于</td><td>lss</td></tr><tr><td>小于或等于</td><td>leq</td></tr><tr><td>不等于</td><td>neq</td></tr><tr><td>- 存在</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if exist %cd%\test.LOG (</span><br><span class="line">echo 存在！</span><br><span class="line">)</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td>- 不存在</td><td></td></tr><tr><td><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if not exist %cd%\test.LOG (</span><br><span class="line">echo 不存在！</span><br><span class="line">)</span><br></pre></td></tr></table></figure></td><td></td></tr><tr><td># 跳转</td><td></td></tr><tr><td>- <code>:start</code>标注一个叫start的点</td><td></td></tr><tr><td>- <code>GOTO start</code>跳转到start</td><td></td></tr></tbody></table><h1 id="文件关联"><a href="#文件关联" class="headerlink" title="文件关联"></a>文件关联</h1><ul><li><code>assoc</code>设置’文件扩展名’关联，关联到’文件类型’</li><li><code>ftype</code>设置’文件类型’关联，关联到’执行程序和参数’</li><li><code>assoc</code>显示所有’文件扩展名’关联</li><li><code>assoc .txt</code>显示.txt代表的’文件类型’，结果显示 .txt=txtfile</li><li><code>assoc .doc</code>显示.doc代表的’文件类型’，结果显示 .doc=Word.Document.8</li><li><code>assoc .exe</code>显示.exe代表的’文件类型’，结果显示 .exe=exefile</li><li><code>ftype</code>显示所有’文件类型’关联</li><li><code>ftype exefile</code>显示exefile类型关联的命令行，结果显示 exefile=”%1” %* </li><li><code>assoc .txt=Word.Document.8</code>设置.txt为word类型的文档，可以看到.txt文件的图标都变了</li></ul><blockquote><p>ftype exefile=”%1” %*<br>恢复 exefile 的正确关联<br>如果该关联已经被破坏，可以运行 command.com ，再输入这条命令</p></blockquote><h1 id="变量延迟"><a href="#变量延迟" class="headerlink" title="变量延迟"></a>变量延迟</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">set a&#x3D;4</span><br><span class="line">set a&#x3D;5 &amp; echo !a!</span><br><span class="line">pause </span><br><span class="line">结果：5</span><br></pre></td></tr></table></figure><h1 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ATTRIB [+R|-R] [+A|-A] [+S|-S] [+H|-H] [[drive:] [path] filename] [&#x2F;S [&#x2F;D]]</span><br><span class="line">  +   设置属性。</span><br><span class="line">  -    清除属性。</span><br><span class="line">  R   只读文件属性。</span><br><span class="line">  A   存档文件属性。</span><br><span class="line">  S   系统文件属性。</span><br><span class="line">  H   隐藏文件属性。</span><br><span class="line">  [drive:][path][filename]</span><br><span class="line">      指定要处理的文件属性。</span><br><span class="line">  &#x2F;S  处理当前文件夹及其子文件夹中的匹配文件。</span><br><span class="line">  &#x2F;D  也处理文件夹。</span><br></pre></td></tr></table></figure><h1 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h1><ul><li><code>%ALLUSERSPROFILE%</code>本地 返回“所有用户”配置文件的位置。</li><li><code>%APPDATA%</code>本地 返回默认情况下应用程序存储数据的位置。</li><li><code>%CD%</code>本地 返回当前目录字符串。</li><li><code>%CMDCMDLINE%</code>本地 返回用来启动当前的 Cmd.exe 的准确命令行。</li><li><code>%CMDEXTVERSION%</code>系统 返回当前的“命令处理程序扩展”的版本号。</li><li><code>%COMPUTERNAME%</code>系统 返回计算机的名称。</li><li><code>%COMSPEC%</code>系统 返回命令行解释器可执行程序的准确路径。</li><li><code>%DATE%</code>系统 返回当前日期。使用与 date /t 命令相同的格式。由 Cmd.exe 生成。有关<br>date 命令的详细信息，请参阅 Date。</li><li><code>%ERRORLEVEL%</code>系统 返回上一条命令的错误代码。通常用非零值表示错误。</li><li><code>%HOMEDRIVE%</code>系统 返回连接到用户主目录的本地工作站驱动器号。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</li><li><code>%HOMEPATH%</code>系统 返回用户主目录的完整路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</li><li><code>%HOMESHARE%</code>系统 返回用户的共享主目录的网络路径。基于主目录值而设置。用户主目录是在“本地用户和组”中指定的。</li><li><code>%LOGONSERVER%</code>本地 返回验证当前登录会话的域控制器的名称。</li><li><code>%NUMBER_OF_PROCESSORS%</code>系统 指定安装在计算机上的处理器的数目。</li><li><code>%OS%</code>系统 返回操作系统名称。Windows 2000 显示其操作系统为 Windows_NT。</li><li><code>%PATH%</code>系统 指定可执行文件的搜索路径。</li><li><code>%PATHEXT%</code>系统 返回操作系统认为可执行的文件扩展名的列表。</li><li><code>%PROCESSOR_ARCHITECTURE%</code>系统 返回处理器的芯片体系结构。值：x86 或 IA64 基于Itanium</li><li><code>%PROCESSOR_IDENTFIER%</code>系统 返回处理器说明。</li><li><code>%PROCESSOR_LEVEL%</code>系统 返回计算机上安装的处理器的型号。</li><li><code>%PROCESSOR_REVISION%</code>系统 返回处理器的版本号。</li><li><code>%PROMPT%</code>本地 返回当前解释程序的命令提示符设置。由 Cmd.exe 生成。</li><li><code>%RANDOM%</code>系统 返回 0 到 32767 之间的任意十进制数字。由 Cmd.exe 生成。</li><li><code>%SYSTEMDRIVE%</code>系统 返回包含 Windows server operating system 根目录（即系统根目录）的驱动器。</li><li><code>%SYSTEMROOT%</code>系统 返回 Windows server operating system 根目录的位置。</li><li><code>%TEMP%</code>和<code>%TMP%</code>系统和用户 返回对当前登录用户可用的应用程序所使用的默认临时目录。有些应用程序需要 TEMP，而其他应用程序则需要 TMP。</li><li><code>%TIME%</code>系统 返回当前时间。使用与 time /t 命令相同的格式。由 Cmd.exe 生成。有关<br>time 命令的详细信息，请参阅 Time。</li><li><code>%USERDOMAIN%</code>本地 返回包含用户帐户的域的名称。</li><li><code>%USERNAME%</code>本地 返回当前登录的用户的名称。</li><li><code>%USERPROFILE%</code>本地 返回当前用户的配置文件的位置。</li><li><code>%WINDIR%</code>系统 返回操作系统目录的位置。</li></ul><h1 id="自动ftp下载"><a href="#自动ftp下载" class="headerlink" title="自动ftp下载"></a>自动ftp下载</h1><p><code>ftp  -n -s:[[drive:]path]filename</code><br>filename文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">open 90.52.8.3   ＃打开ip</span><br><span class="line">user iware       ＃用户为iware</span><br><span class="line">password8848    ＃密码</span><br><span class="line">bin             ＃二进制传输模式</span><br><span class="line">prompt</span><br><span class="line">cd tmp1         ＃切换至iware用户下的tmp1目录</span><br><span class="line">pwd</span><br><span class="line">lcd d:\download   ＃本地目录</span><br><span class="line">mget *          ＃下载tmp1目录下的所有文件</span><br><span class="line">bye             ＃退出ftp</span><br></pre></td></tr></table></figure><h1 id="通过ping实现延迟，完成进度条"><a href="#通过ping实现延迟，完成进度条" class="headerlink" title="通过ping实现延迟，完成进度条"></a>通过ping实现延迟，完成进度条</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">mode con cols&#x3D;113 lines&#x3D;15 &amp;color 9f</span><br><span class="line">cls</span><br><span class="line">echo.</span><br><span class="line">echo  程序正在初始化… </span><br><span class="line">echo.</span><br><span class="line">echo  ┌──────────────────────────────────────┐</span><br><span class="line">set&#x2F;p&#x3D;  ■&lt;nul</span><br><span class="line">for &#x2F;L %%i in (1 1 38) do set &#x2F;p a&#x3D;■&lt;nul&amp;ping &#x2F;n 1 127.0.0.1&gt;nul</span><br><span class="line">echo   100%%</span><br><span class="line">echo  └──────────────────────────────────────┘</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><h1 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h1><p>生成5个100以内的随机数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">setlocal enabledelayedexpansion</span><br><span class="line">for &#x2F;L %%i in (1 1 5) do (</span><br><span class="line">   set &#x2F;a randomNum&#x3D;!random!%%100</span><br><span class="line">   echo 随机数：!randomNum!</span><br><span class="line">)</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper简单使用</title>
      <link href="/2022/03/20/zookeeper%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/zookeeper%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2606,阅读全文大约需要10分钟</p><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><table><thead><tr><th>序号</th><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>7</td><td><code>snapCount</code></td><td>设置多少次事务日志输出后，触发一次快照(snapshot)，此时ZK会生产一个<code>snapshot.*</code>文件，同时创建一个新的事务日志文件<code>log.*</code>,默认100000，真实实现会增加一定的随机数，避免所有服务器同一时间快照影响性能</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h1><ul><li><p><code>create /aaa val</code>创建节点<code>aaa</code>并赋予值<code>val</code>。节点必须有值，否则不能创建</p></li><li><p><code>zk</code>视图结构和标准<code>unix</code>文件系统类似，从<code>/</code>根节点出发。</p></li><li><p>节点成为<code>ZNode</code>,每个节点可存储数据，也可以挂载子节点。因此可以成为树</p></li><li><p>节点类型(不同类型节点名也不能重复)</p></li></ul><ol><li>持久节点，和客户端连接，断开后数据还在（<code>ZNode</code>）</li><li>临时节点，和客户端断开后，数据不在</li><li>顺序节点，临时节点和持久节点都能创建顺序节点，每次创建节点名都会自动递增(名字+自动生成的序列)</li></ol><p>节点状态属性</p><table><thead><tr><th>序号</th><th>属性</th><th>数据结构</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>czxid</code></td><td><code>long</code></td><td>节点被创建的<code>Zxid</code>值</td></tr><tr><td>2</td><td><code>mzxid</code></td><td><code>long</code></td><td>节点被修改的<code>Zxid</code>值</td></tr><tr><td>3</td><td><code>paxid</code></td><td><code>long</code></td><td>节点最后一次被修改时的事务ID</td></tr><tr><td>4</td><td><code>ctime</code></td><td><code>long</code></td><td>节点被创建的时间</td></tr><tr><td>5</td><td><code>mtime</code></td><td><code>long</code></td><td>节点最后一次被修改时间</td></tr><tr><td>6</td><td><code>dataVersoin</code></td><td><code>long</code></td><td>节点被修改的版本号(每次修改+1)(<code>CAS</code>保证分布式数据原子性)</td></tr><tr><td>7</td><td><code>cversion</code></td><td><code>long</code></td><td>节点所拥有子节点被修改的版本号</td></tr><tr><td>8</td><td><code>aversion</code></td><td><code>long</code></td><td>节点的<code>ACL</code>被修改的版本号</td></tr><tr><td>9</td><td><code>emphemeralOwner</code></td><td><code>long</code></td><td>如果此阶段为临时节点，这个值就是节点拥有者会话ID,否则0</td></tr><tr><td>10</td><td><code>dataLength</code></td><td><code>long</code></td><td>节点数据域长度</td></tr><tr><td></td><td><code>umChildren</code></td><td><code>long</code></td><td>节点拥有的子节点个数</td></tr></tbody></table><h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><ul><li><p><code>getAcl /xxx</code>查看xxx的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">'world',anyone</span><br><span class="line">:cdrwa</span><br></pre></td></tr></table></figure></li><li><p><code>scheme</code>授权机制,  <code>id</code>用户id给谁授权,  <code>permissions</code>权限，只读、读写、管理等。</p><ul><li>create(c)</li><li>delete(d)</li><li>read(r)</li><li>write(w)</li><li>admin(a) 是否能给子节点设置权限</li></ul><p>机制有</p></li><li><p><code>world</code>，下面只有一个<code>id</code>,叫<code>anyone</code>, <code>world:anyone</code>代表任何人，<code>ZK</code>中对搜有人有权限的节点就是属于<code>world:anyone</code>的</p></li><li><p><code>auth</code>, 它不需要<code>id</code>, 只需要通过<code>authentication</code>的<code>user</code>都有权限。<code>ZK</code>支持通过<code>kerberos</code>来进行<code>authencation</code>，也支持<code>username/password</code>形式的<code>authentication</code>（明文）</p></li><li><p><code>digest</code>, 通过对应的id为<code>username:BASE64(SHA1(password))</code>, 它需要先通过<code>username:password</code>形式的<code>authentication</code>（密文）</p></li><li><p><code>ip</code>, 它对应的<code>id</code>为客户机的<code>IP</code>地址，设置的时候可以设置一个<code>ip</code>段，比如<code>ip:192.168.1.0/16</code>,表示匹配<code>16</code>个<code>bit</code>的<code>IP</code>段</p></li></ul><p>常用<code>ACL</code>命令</p><ul><li><p><code>getAcl</code>获取指定节点的<code>ACL</code>信息</p></li><li><p><code>setAcl</code>设置指定节点的<code>ACL</code>信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addauth digest username:pwd # 添加用户(会话级别的，退出需要重新操作)</span><br><span class="line">setAcl /xxx/zzz auth:username:pwd:crwa #给用户添加 auth机制的crwa权限</span><br><span class="line">setAcl /xxx/zzz digest:username:xxxxmd5:crwa #digest机制的权限添加，密文生产在zookeeper自带的java类 DigestAuthenticationProvider里</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>addauth</code>注册绘画授权信息</p></li><li><p>注册超级管理员用户可以解决没有权限不能删除的问题</p></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><code>zkCli.sh -server ip</code>连接<code>ZooKeeper</code>服务，连接成功后系统会输出相关环境及配置</li><li>基本操作<ul><li>显示根目录下、文件：<code>ls /</code> 查看当前<code>ZooKeeper</code>包含的内容</li><li>显示根目录下、文件：<code>ls2 /</code>查看当前节点数据并能看到更新次数等数据</li><li>创建文件，并设置初始内容。<code>create /zk &quot;val&quot;</code> 创建一个新的<code>znode</code>节点<code>zk</code> ，以及初始化内容 <code>-e 临时节点</code>(客户端端口就删除)   <code>-s 顺序节点</code>(名字自增)</li><li>获取内容<code>get /zk</code> 确认<code>znode</code>是否包含我们所创建的字符串</li><li>修改<code>set /zk &quot;val2&quot;</code>修改节点内容</li><li>删除<code>delete /zk</code>将指定<code>znode</code>删除，如果有子节点，删除失败</li><li>递归删除<code>rmr /zk</code>删除节点及子节点</li><li>退出<code>quit</code> </li></ul></li></ol><h1 id="四字命令"><a href="#四字命令" class="headerlink" title="四字命令"></a>四字命令</h1><blockquote><p><code>zk</code>支持使用某些特点四字的命令交互获取服务当前状态，可通过<code>telnet</code>或<code>nc</code>提交命令</p></blockquote><ol><li><code>echo stat|nc ip port</code>查看那个节点被选择作为<code>follower</code>或者<code>leader</code></li><li>使用<code>echo ruok|nc ip port</code>测试是否启动了该<code>server</code>若回复<code>imok</code>表示已经启动</li><li><code>echo dump|nc ip port</code>列出未经处理的会话和临时节点</li><li><code>echo kill |nc ip port</code>关闭server</li><li><code>echo conf | nc ip port</code>输出相关服务配置的详细信息</li><li><code>echo cons | nc ip port</code>列出所有连接到服务器的客户端完全的连接/会话的详细信息</li><li><code>echo envi|nc ip port</code>输出关于服务环境的详细信息</li><li><code>echo reqs|nc ip port</code>列出未经处理的请求</li><li><code>echo wchs|nc ip port</code>列出服务器<code>watch</code>的详细信息</li><li><code>echo wchc|nc ip port</code>通过<code>session</code>列出服务器的<code>watch</code>详细信息，输出的是一个与<code>watch</code>相关会话的列表</li><li><code>echo wchp|nc ip port</code>通过路径列出服务器的<code>watch</code>的详细信息，输出的是与<code>session</code>相关的路径</li></ol><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><ol><li><p>事务日志可视化<code>LogFormatter</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ..&#x2F;..&#x2F;zookeeper-3.4.5.jar;..&#x2F;..&#x2F;lib&#x2F;slf4j-api-1.6.1.jar org.apache.zookeeper.server.logFormatter log.xxx</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>数据快照可视化<code>SnapshotFormatter</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ..&#x2F;..&#x2F;zookeeper-3.4.5.jar;..&#x2F;..&#x2F;lib&#x2F;slf4j-api-1.6.1.jar org.apache.zookeeper.server.SnapshotFormatter snapshot.xxx</span><br></pre></td></tr></table></figure></li></ol><h1 id="一致性原理"><a href="#一致性原理" class="headerlink" title="一致性原理"></a>一致性原理</h1><h2 id="2pc"><a href="#2pc" class="headerlink" title="2pc"></a>2pc</h2><p>2pc 两段提交，强一致性算法。常用于分布式数据库中。</p><ul><li>术语</li></ul><ol><li><code>undo</code>记录原始数据，用于回滚。</li><li><code>redo</code>正常提交数据</li></ol><ul><li><p>流程</p><ol><li>第一阶段，所有资源数据库都写入<code>undo</code>和<code>redo</code>到事务日志<ol start="2"><li>第二阶段，所有资源都返回ok，则全部执行commit,否则rollback</li></ol></li></ol></li><li><p>缺点</p><ol><li>同步阻塞，所有都成功才能成功。<ol start="2"><li>单点故障，一个返回失败，都失败</li><li>数据不一致，网络延迟导致一个资源commit了，另一个没有commit</li><li>容错机制不完善，一个失败都失败</li></ol></li></ol></li></ul><h2 id="3pc"><a href="#3pc" class="headerlink" title="3pc"></a>3pc</h2><p>先询问资源是否可以访问再进行2pc相同步骤</p><p>不一样的是第三阶段协调者如果网络超时或异常，参与者也会commit</p><p>优点</p><pre><code>1. 改善同步阻塞（不会因为某些访问超时占用时间）   2. 解决单点故障</code></pre><h2 id="paxos算法"><a href="#paxos算法" class="headerlink" title="paxos算法"></a>paxos算法</h2><p>少数服从多数，角色轮换避免单点故障</p><p> 第一阶段，提议者订一个K值，然后访问所有资源（prepare请求），多数回应ok就进行下一阶段，否则k+1再重新请求</p><p> 第二阶段， 提交数据，绝大部分返回ok则整体成功，否则重新进行第一阶段</p><p>问题</p><ol><li>主导者故障（单点故障）</li><li>最终一致性</li></ol><p>协议要求</p><ol><li>资源端必须接受第一个prepare</li><li>第一个prepare的数据必须要接受</li></ol><p>多提议者情况下（解决单点故障）</p><p>若干提议者发起prepare,若多数资源同意则进入下一阶段。若同意没超过半数，则k增加再进行prepare。资源会同意更高K的prepare。当提议者认为自己的支持者超过半数就会进行第二阶段，</p><p>提交accept,如果资源在次期间遇到更高k的prepare，则会拒绝当前accept，等待最高k发起的提议者的accept。accept接受超过半数则成功，否则k增加，重新prepare。成功后全体接受成功的accept。</p><h1 id="ZK使用"><a href="#ZK使用" class="headerlink" title="ZK使用"></a>ZK使用</h1><p>Zookeeper原生客户端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECT = <span class="string">"192.168.1.1:8088,xxxx"</span>;<span class="comment">// 多个用逗号隔开</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch cdl = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(CONNECT, <span class="number">5000</span>, <span class="keyword">new</span> Watch()&#123;<span class="comment">// 5000超时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果获取到了连接</span></span><br><span class="line">        <span class="keyword">if</span>(watchedEvent.getState() == Event.keeperState.SyncConnected) &#123;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">countDownLatch.watch();<span class="comment">//等待连接</span></span><br><span class="line">zookeeper.create(<span class="string">"/path"</span>, <span class="string">"val"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">Stat stat = <span class="keyword">new</span> Stat();<span class="comment">// 节点状态</span></span><br><span class="line"><span class="comment">// watch为true代表监听此节点，节点内容发生变化会回调连接时注册的watch。watch是一致性的</span></span><br><span class="line"><span class="comment">// watch之后只会返回当前session最后一次修改此节点的内容，即多个setData,只会最后一次回调</span></span><br><span class="line"><span class="keyword">byte</span>[] data = zookeeper.getData(<span class="string">"/path"</span>, <span class="keyword">true</span>, stat);<span class="comment">// 返回值</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; childrens = zookeeper.getChildren(<span class="string">"/path"</span>, <span class="keyword">true</span>);<span class="comment">//[a,b,c]的形式返回子节点</span></span><br><span class="line"></span><br><span class="line">ACL acl = <span class="keyword">new</span> ACL(ZooDefs.Perms.ALL, <span class="keyword">new</span> Id(<span class="string">"digest"</span>, DigestAuthenticationProvicer.generateDigest(<span class="string">"root:root"</span>)));</span><br><span class="line">ACL acl2 = <span class="keyword">new</span> ACL(ZooDefs.Perms.CREATE, <span class="keyword">new</span> Id(<span class="string">"ip"</span>, <span class="string">"192.168.1.1"</span>));</span><br><span class="line">List&lt;ACL&gt; acls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">acls.add(acl);</span><br><span class="line">acls.add(acl2);</span><br><span class="line"><span class="comment">// 创建持久节点</span></span><br><span class="line">zookeeper.create(<span class="string">"path"</span>, <span class="string">"val"</span>.getBytes(), acls, CreateMode.PERSISTENT);</span><br><span class="line"><span class="comment">// 添加digest方案的权限</span></span><br><span class="line">zookeeper.addAuthInfo(<span class="string">"digest"</span>, <span class="string">"root:root"</span>.getBytes());</span><br></pre></td></tr></table></figure><p>问题</p><ol><li>会话连接是异步的</li><li>watch需要重复注册，一次watch只能监听一个</li><li>缺少session重连机制</li><li>复杂，缺少很多功能，例如级联新增</li></ol><p>ZkClient</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECT_HOST = <span class="string">"192.168.1.1:8000"</span>;</span><br><span class="line"><span class="comment">// zkClient不用监听</span></span><br><span class="line">ZkClient zkClient = <span class="keyword">new</span> ZkClient(CONNECT_HOST, <span class="number">4000</span>);</span><br><span class="line"><span class="comment">// 提供了递归创建父节点的功能,true代表级联新增，false代表不允许（父节点不存在就会报错）</span></span><br><span class="line">zkClient.createPersistent(<span class="string">"/zk/zkclient/zkclient1"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 获取子节点 [node1,node2,node3]</span></span><br><span class="line">List&lt;String&gt; list = zkClient.getChildren(<span class="string">"/zkclient"</span>);</span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line"><span class="comment">// 节点内容修改</span></span><br><span class="line">zkClient.subscribeDataChange(<span class="string">"/nodeName"</span>, <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String nodeName, Object newVal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// nodeName节点名称  newVal修改后的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String nodeName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// nodeName中的子节点发升变化触发</span></span><br><span class="line">zkClient.subscribeChildChanges(<span class="string">"/nodeName"</span>, <span class="keyword">new</span> IZkChildListener()) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleChildChange</span><span class="params">(String nodeName, List&lt;String&gt; list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// nodeName节点名 list节点列表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监听器</span></span><br><span class="line"><span class="comment">// subscriptStateChanges</span></span><br><span class="line"><span class="comment">// 权限</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAuthInfo</span><span class="params">(String scheme, <span class="keyword">final</span> <span class="keyword">byte</span>[] auth)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcl</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">final</span> List&lt;ACL&gt; acl)</span></span>;</span><br></pre></td></tr></table></figure><p>Curator</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECT_HOST=<span class="string">"192.168.1.1:8000"</span>;</span><br><span class="line"><span class="comment">// 尝试三次连接，失败1000毫秒后重试，第二次重试时间2*1000毫秒，第三次3*1000</span></span><br><span class="line">CuratorFramework curatorFramework = CuratorFrameworkFactory.</span><br><span class="line">    newCliebt(CONNECT_HOST, <span class="number">5000</span>, <span class="number">5000</span>, <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">curatorFramework.start();<span class="comment">// 启动连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line">CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(CONNECT_HOST).sessionTimeoutMs(<span class="number">5000</span>).retryPolicy(<span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>)).build();</span><br><span class="line">curatorFramework.start();<span class="comment">// 启动连接</span></span><br><span class="line"><span class="comment">// 创建节点,返回节点路径</span></span><br><span class="line">String val = curatorFramework.create()</span><br><span class="line">    .createingParentsIfNeeded()<span class="comment">//级联创建父节点</span></span><br><span class="line">    .withMode(CreateMode.PERSISTENT)<span class="comment">//持久节点</span></span><br><span class="line">    .forPath(<span class="string">"/path/path1/path2"</span>, <span class="string">"val"</span>.getBytes());</span><br><span class="line"><span class="comment">// 删除节点,级联删除</span></span><br><span class="line">curatorFramework.delete().deleteChildrenIfNeed().forPath(<span class="string">"/path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步执行</span></span><br><span class="line"><span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">ExcutorService service = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">curatorFramework.create().createingParentsIfNeeded().withMode(CreateMode.PERSISTENT)</span><br><span class="line">    .inBackground(<span class="keyword">new</span> BackgroundCallback()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(CuratorFramework curatorFramework, CuratorEvent curatorEvent)</span> throw Exception </span>&#123;</span><br><span class="line">            curatorFramework.getResultCode();<span class="comment">// 结果</span></span><br><span class="line">            curatorFramework.getType();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,server).forPath(<span class="string">"/path/path1/path2"</span>, <span class="string">"val"</span>.getBytes());    </span><br><span class="line"><span class="comment">// 事务, 同时成功才成功</span></span><br><span class="line">Collection&lt;CuratorTransactionResult&gt; resultCollections = curatorFramework.inTransaction()</span><br><span class="line">    .create().forPath(<span class="string">"/path/path1/path2"</span>, <span class="string">"val"</span>.getBytes()).and()</span><br><span class="line">    .setData().forPath(<span class="string">"/path/path1/path2"</span>, <span class="string">"v1"</span>.getBytes()).and().commit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(CuratorTransactionResult res: resultCollections) &#123;</span><br><span class="line">    res.getForPath();<span class="comment">// 节点路径</span></span><br><span class="line">    res.getType();<span class="comment">// 结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch机制</span></span><br><span class="line"><span class="comment">// Pathcache 监听一个路径下子节点的创建、删除、数据更新</span></span><br><span class="line"><span class="comment">// NodeCache 节点的创建、删除、更新</span></span><br><span class="line"><span class="comment">// TreeCache Pathcache+NodeCache</span></span><br><span class="line">NodeCache nodeCache = <span class="keyword">new</span> NodeCache(curatorFramework, <span class="string">"/curator"</span>, <span class="keyword">false</span>);</span><br><span class="line">nodeCache.start(<span class="keyword">true</span>);</span><br><span class="line">nodeCache.getListenable().addListener(()-&gt;System.out.println(<span class="string">"节点变化，变成了"</span> + <span class="keyword">new</span> String(nodeCache.getCurrentData().getData())));</span><br><span class="line"></span><br><span class="line">pathCache.getListenable().addListener((framework, event)-&gt;&#123;</span><br><span class="line">    event.getType();<span class="comment">//CHILD_ADD CHILD_REMOVED CHILD_UPDATE 子节点增加、删除、更新</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><p>特点</p><ol><li>顺序一致性，命令执行顺序一致</li><li>原子性，集群中所有机器都成功，否则失败</li><li>单一视图，连接集群任意一个机器数据一致</li><li>可靠性，一个更新被操作之前，数据不变</li><li>实时性，一个节点更改，其他节点很短时间内同步</li><li>角色轮换，避免故障</li></ol><p>角色</p><ol><li><code>leader</code>任务调度，事务处理(增，删，改)</li><li><code>follower</code>非事务请求，读。参与投票</li><li><code>observer</code>观察者，读，不参与投票。（3.30以上提供，增加效率）</li></ol><p>配置集群</p><p><code>zoo.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.0&#x3D;192.168.1.2:2333:2444 # 选举端口：通讯端口</span><br><span class="line">server.1&#x3D;192.168.1.3:2333:2444 # 1代表 myid ，集群名称，必须是数字</span><br><span class="line">server.2&#x3D;192.168.1.4:2333:2444</span><br></pre></td></tr></table></figure><h1 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h1><p>类似<code>paxos</code>,<code>zk</code>自己实现的协议</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划</title>
      <link href="/2022/03/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/03/20/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1887,阅读全文大约需要7分钟</p><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>动态规划是运筹学的一个分支。（管理学的重要专业基础课，利用统计学、数学模型、算法等寻找复杂问题的最佳或近似最佳的答案）<br>动态规划的核心是以局部最优解求全局最优解<br>重点</p><ol><li>子问题<br> 原问题由多个子问题组成<br> 例如 <code>1+2+4+8</code>，原问题是求四个数的和，子问题是<code>当前数+之前数的和</code></li><li>动态规划状态<br> 即子问题可能的结果，最优解</li><li>边界状态值<br> 无法用子问题概括的值，例如 <code>1+2+4+8</code>中第一个和第二个值，需要先<code>1+2</code>之后的值才能用<code>当前数+之前数的和</code>来概括</li><li>状态转移方程<br> 上一个子问题解如何转换成另一个子问题的解</li></ol><h1 id="一、最大子序和"><a href="#一、最大子序和" class="headerlink" title="一、最大子序和"></a>一、最大子序和</h1><ul><li><p>题目<br>给定一个整数数组<code>nums</code>，找到一个具有最大和的连续子数组（子数组至少包含一个元素），返回其最大和。</p></li><li><p>分析</p><ol><li>子问题，以<code>i</code>个位置上的数结尾的子数组最大和，求出每个位置的最大和，最大子数组就是其中最大的值。</li><li>动态规划状态<br> <code>i</code>个位置结尾的子数组最大和</li><li>边界状态<br> <code>1</code>位置结尾的数组最大和</li><li>状态转移方程<br> 对于每一个位置结尾的子数组，其最大值只有两种可能<br> 第一种，上一个位置结尾的连续数组最大值+当前位置值（连续之前的数组）<br> 第二种，当前位置的值（从新开始子数组）<br>求这两种操作的最大值就是当前位置结尾的连贯子数组最大值<br><code>dp[i] = max(dp[i - 1] + num[i], mun[i])</code></li></ol></li><li><p>解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">1</span>] + nums[i], nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = dp[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : dp) &#123;</span><br><span class="line">            max = Math.max(i, max);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、爬楼梯"><a href="#二、爬楼梯" class="headerlink" title="二、爬楼梯"></a>二、爬楼梯</h1><ul><li><p>题目<br>假设你在爬楼梯，需要<code>n</code>(整数)阶才能到达楼顶。<br>每次可以爬1或者2个台阶。<br>问：<br>有多少种方法爬到楼顶</p></li><li><p>分析</p><ol><li>子问题：原问题是到达<code>n</code>阶有多少种走法，<code>n</code>阶的走法由<code>n-1</code>阶台阶走法数量和<code>n-2</code>阶台阶走法数量组成。因为一次只能走<code>1</code>或者<code>2</code>个台阶，所以第<code>n</code>个台阶只能是由<code>n-1</code>或者<code>n-2</code>台阶走上来的，且<code>n-1</code>和<code>n-2</code>走上来都只有一种方法。所以子问题就是登上<code>n-1</code>个台阶走法数量。</li><li>动态规划状态，第<code>i</code>个状态就是<code>i</code>个阶梯的走法数量</li><li>边界值状态，第<code>1</code>和第<code>2</code>阶台阶的走法</li><li>状态转移方程，<code>dp[i] = dp[i-1] + dp[i-2]</code></li></ol></li><li><p>解</p></li></ul><ol><li>设置递推数组 dp[n]，dp[i]代表到达第<code>i</code>阶时有多少种走法</li><li>设置<code>dp[1]</code>和<code>dp[2]</code>的值，即第一阶和第二阶的走法数量</li><li>利用<code>i</code>循环递推，从<code>3</code>到<code>n</code>阶计算结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>; i&lt;n ;i++) &#123;</span><br><span class="line">            dp[i] = dp[i-<span class="number">1</span>] + dp[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、打家劫舍"><a href="#三、打家劫舍" class="headerlink" title="三、打家劫舍"></a>三、打家劫舍</h1><ul><li><p>问题<br>你是一个专业的小偷，计划沿街窃取钱财。街上排列有若干房屋，相邻房屋装有相同的防盗系统，如果两个房屋都失窃会自动报警。<br>问：<br>给定一个代表存放金额的非负数数组，计算不触发报警情况下能达到最高金额</p></li><li><p>分析</p><ol><li>子问题，原问题是盗窃到最后一家或倒数第二家时能够获得的最大财宝数量。子问题就是求每个房间的最优解</li><li>动态规划状态，<code>i</code>个房间的状态就是该房间能获得财宝的最大值</li><li>边界， 第一个房间，第二个房间能获得的最大财宝</li><li>转移方程，<code>i</code>个房间最大值有两种可能，一种是选择当前房间，另一种是不选择当前房间<br>选择：不能盗窃相邻房间，所以值为<code>i-2</code>间房最大值+当前房间财宝值<br>不选择：上一间的最大值<br>再挑选选择和不选择中的最大值就是当前房间的最大值<br><code>dp[i] = max(dp[i-2] + num[i], dp[i-1])</code></li></ol></li><li><p>解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">rob</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 边界情况</span></span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">2</span>] + nums[i], dp[i - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、零钱兑换"><a href="#四、零钱兑换" class="headerlink" title="四、零钱兑换"></a>四、零钱兑换</h1><ul><li><p>题目<br>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。<br><code>coins[1, 2, 5], amount = 11</code></p></li><li><p>分析</p><ol><li>子问题，<code>1...amount</code>最少硬币组合数，例如<code>amount = 11</code>时最小组合就是<code>amount = 10</code>、<code>amount = 9</code>、<code>amount = 6</code>时组合数+1中最小的。子问题就是总金额1到<code>amount</code>的最优解</li><li>动态规划状态， <code>amount = i</code>时的最小组合数</li><li>边界，当硬币数额等于<code>amount</code>时<code>dp[amount] = 1</code>,即一枚硬币就能组合成总金额</li><li>转移方程，<code>min(dp[i] = dp[i-coin])</code>，<code>coins</code>数组中元素带入方程后的最小值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (amount == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> coinsMin = coins[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : coins) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt;= amount) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            coinsMin = Math.min(coinsMin, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = coinsMin * <span class="number">2</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j : coins) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - j &gt; <span class="number">0</span> &amp;&amp; i - j &lt;= amount &amp;&amp; dp[i - j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i] = dp[i - j] + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i] = Math.min(dp[i], dp[i - j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[amount] == <span class="number">0</span> ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="五、地下城游戏"><a href="#五、地下城游戏" class="headerlink" title="五、地下城游戏"></a>五、地下城游戏</h1><ul><li><p>题目<br>一些恶魔抓住了公主（P）并将她关在了地下城的右下角。地下城是由 M x N 个房间组成的二维网格。我们英勇的骑士（K）最初被安置在左上角的房间里，他必须穿过地下城并通过对抗恶魔来拯救公主。<br>骑士的初始健康点数为一个正整数。如果他的健康点数在某一时刻降至 0 或以下，他会立即死亡。<br>有些房间由恶魔守卫，因此骑士在进入这些房间时会失去健康点数（若房间里的值为负整数，则表示骑士将损失健康点数）；其他房间要么是空的（房间里的值为 0），要么包含增加骑士健康点数的魔法球（若房间里的值为正整数，则表示骑士将增加健康点数）。<br>为了尽快到达公主，骑士决定每次只向右或向下移动一步。</p></li><li><p>分析<br>  看到题目首先想到的是从 <code>dungeon[0][0]</code>开始，计算向右或向下过程中扣除或增加的总血量，但是制定转移方程的时候却有个问题，判断向右或是向下的时候需要考虑两个变量，一个是总血量，另一个是最低血量。需要在追求总血量最小的时候保证路径中任意一格时血量都在0之上。<br>  看了官方解答，正确的解法是从<code>dungeon[m - 1][n - 1]</code>也就是公主所在处规划。计算每个格子达到终点需要多少初始值，则有转移方程<code>dp[i][j] = min(1 - dp[i - 1][j], dp[i][j - 1])</code>。意为从下一步需要的初始值推算当前需要的初始值。又因为初始值必须大于<code>1</code>，所以调整一下转移方程<code>dp[i][j] = max(1, min(1 - dp[i - 1][j], dp[i][j - 1]))</code>,使其小于<code>1</code>则初始值为<code>1</code>。</p></li><li><p>解</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculateMinimumHP</span><span class="params">(<span class="keyword">int</span>[][] dungeon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = dungeon.length;</span><br><span class="line">        <span class="keyword">int</span> m = dungeon[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span>[][] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n][m];</span><br><span class="line">        dp[n - <span class="number">1</span>][m - <span class="number">1</span>] = Math.max((<span class="number">1</span> - dungeon[n - <span class="number">1</span>][m - <span class="number">1</span>]), <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = m - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[n - <span class="number">1</span>][i] = Math.max(dp[n - <span class="number">1</span>][i + <span class="number">1</span>] - dungeon[n - <span class="number">1</span>][i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 只有一行的情况下，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (dungeon.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[i][m - <span class="number">1</span>] = Math.max(dp[i + <span class="number">1</span>][m - <span class="number">1</span>] - dungeon[i][m - <span class="number">1</span>], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = m - <span class="number">2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                dp[i][j] = Math.max(<span class="number">1</span>, Math.min(dp[i + <span class="number">1</span>][j] - dungeon[i][j], dp[i][j + <span class="number">1</span>] - dungeon[i][j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于nio的javaTcp服务器及客户端</title>
      <link href="/2022/03/20/%E5%9F%BA%E4%BA%8Enio%E7%9A%84javaTcp%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2022/03/20/%E5%9F%BA%E4%BA%8Enio%E7%9A%84javaTcp%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%8A%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：120,阅读全文大约需要1分钟</p><ul><li><code>SocketChannelProcessorThread.class</code></li><li>使用<code>Select</code>监听<code>socketChannel</code>的通用类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-10-30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketChannelProcessorThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bufferSize;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> ExecutorService workerPool;</span><br><span class="line">    <span class="keyword">private</span> Function&lt;String, String&gt; dealPackage;</span><br><span class="line">    <span class="keyword">private</span> Charset defaultCharset = StandardCharsets.UTF_8;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketChannelProcessorThread</span><span class="params">(Function&lt;String, String&gt; dealPackage, <span class="keyword">int</span> bufferSize, <span class="keyword">int</span> workerSize, Selector selector)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"TcpServer-MessageProcessor-Thread"</span>);</span><br><span class="line">        <span class="keyword">this</span>.selector = selector;</span><br><span class="line">        <span class="keyword">this</span>.dealPackage = dealPackage;</span><br><span class="line">        <span class="keyword">this</span>.bufferSize = bufferSize;</span><br><span class="line">        <span class="keyword">this</span>.workerPool = Executors.newFixedThreadPool(workerSize, <span class="keyword">new</span> ThreadFactory() &#123;</span><br><span class="line">            <span class="keyword">final</span> AtomicInteger index = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable runnable)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> Thread(runnable, <span class="string">"TcpServer-MessageProcessor-Worker"</span> + index.getAndIncrement());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> readyChannels = <span class="keyword">this</span>.selector.select(<span class="number">100</span>);</span><br><span class="line">                <span class="keyword">if</span>(readyChannels == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                Set&lt;SelectionKey&gt; selectedKeys = <span class="keyword">this</span>.selector.selectedKeys();</span><br><span class="line">                Iterator&lt;SelectionKey&gt; keyIterator = selectedKeys.iterator();</span><br><span class="line">                <span class="keyword">while</span>(keyIterator.hasNext()) &#123;</span><br><span class="line">                    <span class="keyword">final</span> SelectionKey selectionKey = keyIterator.next();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        dealSelectedKey(selectionKey);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    keyIterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.selector.close();</span><br><span class="line">        <span class="keyword">this</span>.workerPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dealSelectedKey</span><span class="params">(SelectionKey key)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(key.isConnectable()) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[bufferSize];</span><br><span class="line">            bytes[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            bytes[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">final</span> ByteBuffer buffer = ByteBuffer.wrap(bytes);</span><br><span class="line">            SocketChannel channel = (SocketChannel)key.channel();</span><br><span class="line">            <span class="keyword">int</span> len = channel.read(buffer);</span><br><span class="line">            <span class="keyword">if</span>(len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> String str = <span class="keyword">new</span> String(buffer.array(), defaultCharset);</span><br><span class="line">                workerPool.execute(()-&gt;&#123;</span><br><span class="line">                    <span class="keyword">final</span> String res = dealPackage.apply(str);</span><br><span class="line">                    <span class="keyword">if</span>(res != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        ((Deque&lt;String&gt;)key.attachment()).addLast(res);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(key.isWritable()) &#123;</span><br><span class="line">            SocketChannel channel = (SocketChannel)key.channel();</span><br><span class="line">            Deque&lt;String&gt; messList = (Deque&lt;String&gt;)key.attachment();</span><br><span class="line">            <span class="keyword">final</span> Iterator&lt;String&gt; iterator = messList.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                String str = iterator.next();</span><br><span class="line">                System.out.println(<span class="string">"send &gt;&gt; "</span> + str);</span><br><span class="line">                channel.write(ByteBuffer.wrap(str.getBytes(defaultCharset)));</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>TcpClient.class</code></li><li>客户端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SelectionKey;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.Selector;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.SocketChannel;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Deque;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-10-30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SocketChannel socketChannel;</span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> SelectionKey selectionKey;</span><br><span class="line">    <span class="keyword">private</span> SocketChannelProcessorThread socketChannelProcessorThread;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TcpClient</span><span class="params">(String ip, <span class="keyword">int</span> port, Function&lt;String, String&gt; dealPackage, <span class="keyword">int</span> bufferSize, <span class="keyword">int</span> workerSize)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socketChannel = SocketChannel.open();</span><br><span class="line">        <span class="keyword">this</span>.socketChannel.connect(<span class="keyword">new</span> InetSocketAddress(ip, port));</span><br><span class="line">        <span class="keyword">this</span>.socketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.selector = Selector.open();</span><br><span class="line">        <span class="keyword">this</span>.selectionKey = <span class="keyword">this</span>.socketChannel.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE);</span><br><span class="line">        <span class="keyword">this</span>.selectionKey.attach(<span class="keyword">new</span> ConcurrentLinkedDeque&lt;&gt;());</span><br><span class="line">        <span class="keyword">this</span>.socketChannelProcessorThread = <span class="keyword">new</span> SocketChannelProcessorThread(dealPackage, bufferSize, workerSize, selector);</span><br><span class="line">        <span class="keyword">this</span>.socketChannelProcessorThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(String mess)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Deque&lt;String&gt; list = (Deque&lt;String&gt;)<span class="keyword">this</span>.selectionKey.attachment();</span><br><span class="line">        list.add(mess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.socketChannelProcessorThread.close();</span><br><span class="line">        <span class="keyword">this</span>.socketChannel.close();</span><br><span class="line">        <span class="keyword">this</span>.selector.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>TcpServer.java</code></li><li>服务端</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetSocketAddress;</span><br><span class="line"><span class="keyword">import</span> java.nio.channels.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ConcurrentLinkedDeque;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-10-30</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Selector selector;</span><br><span class="line">    <span class="keyword">private</span> BindPortThread bindThread;</span><br><span class="line">    <span class="keyword">private</span> SocketChannelProcessorThread messageProcessorThread;</span><br><span class="line">    <span class="keyword">private</span> ServerSocketChannel serverSocketChannel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TcpServer</span><span class="params">(<span class="keyword">int</span> port, Function&lt;String, String&gt; dealPackage, <span class="keyword">int</span> bufferSize, <span class="keyword">int</span> workerSize)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.selector = Selector.open();</span><br><span class="line">        <span class="keyword">this</span>.serverSocketChannel = ServerSocketChannel.open();</span><br><span class="line">        <span class="keyword">this</span>.serverSocketChannel.socket().bind(<span class="keyword">new</span> InetSocketAddress(port));</span><br><span class="line">        <span class="keyword">this</span>.serverSocketChannel.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">this</span>.messageProcessorThread = <span class="keyword">new</span> SocketChannelProcessorThread(dealPackage, bufferSize, workerSize, selector);</span><br><span class="line">        <span class="keyword">this</span>.messageProcessorThread.start();</span><br><span class="line">        <span class="keyword">this</span>.bindThread = <span class="keyword">new</span> BindPortThread(selector, serverSocketChannel);</span><br><span class="line">        <span class="keyword">this</span>.bindThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.bindThread.close();</span><br><span class="line">        <span class="keyword">this</span>.messageProcessorThread.close();</span><br><span class="line">        <span class="keyword">this</span>.serverSocketChannel.close();</span><br><span class="line">        <span class="keyword">this</span>.selector.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">BindPortThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Selector selector;</span><br><span class="line">        <span class="keyword">private</span> ServerSocketChannel serverSocketChannel;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BindPortThread</span><span class="params">(Selector selector, ServerSocketChannel serverSocketChannel)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(<span class="string">"TcpServer-BindPort-Thread"</span>);</span><br><span class="line">            <span class="keyword">this</span>.selector = selector;</span><br><span class="line">            <span class="keyword">this</span>.serverSocketChannel = serverSocketChannel;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(serverSocketChannel.isOpen()) &#123;</span><br><span class="line">                        <span class="keyword">final</span> SocketChannel accept = serverSocketChannel.accept();</span><br><span class="line">                        <span class="keyword">if</span>(accept != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            accept.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">                            accept.register(selector, SelectionKey.OP_READ | SelectionKey.OP_WRITE).attach(<span class="keyword">new</span> ConcurrentLinkedDeque&lt;&gt;());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClosedChannelException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.serverSocketChannel.close();</span><br><span class="line">            <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TcpServer server = <span class="keyword">new</span> TcpServer(<span class="number">8111</span>, mess-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"server收到 ["</span> + mess + <span class="string">"]"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"来自server的回复=》"</span> + mess;</span><br><span class="line">        &#125;, <span class="number">1024</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        TcpClient client = <span class="keyword">new</span> TcpClient(<span class="string">"127.0.0.1"</span>, <span class="number">8111</span>, mess-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"client收到 ["</span> + mess + <span class="string">"]"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;, <span class="number">1024</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        client.write(<span class="string">"test1"</span>);</span><br><span class="line">        client.write(<span class="string">"test2"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 网络 </tag>
            
            <tag> socket </tag>
            
            <tag> tcp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复利计算工具</title>
      <link href="/2022/03/20/%E5%A4%8D%E5%88%A9%E8%AE%A1%E7%AE%97%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/%E5%A4%8D%E5%88%A9%E8%AE%A1%E7%AE%97%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1392,阅读全文大约需要5分钟</p><blockquote><p>根据复利计算总数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复利增长模型<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">html, body &#123;    </span><br><span class="line">height: 100%;</span><br><span class="line">margin: 0px;</span><br><span class="line">padding: 0px;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#f5faff</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">input&#123;</span><br><span class="line">width: 190px;</span><br><span class="line">height: 27px;</span><br><span class="line"><span class="css"><span class="selector-tag">background</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">outline</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">font-size: 14px;</span><br><span class="line">font-weight: 700;</span><br><span class="line">font-family: "Microsoft soft";</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.inputContent</span> &#123;</span></span><br><span class="line">overflow: hidden;</span><br><span class="line">background-color: white;</span><br><span class="line">border-radius: 3px;</span><br><span class="line">outline-style: none ;</span><br><span class="line"><span class="css"><span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line">margin: 5px auto;</span><br><span class="line">width: 300px;</span><br><span class="line">height: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.inputLabel</span> &#123;</span></span><br><span class="line">padding: 0 5px;</span><br><span class="line">font-size: 14px;</span><br><span class="line">font-weight: 700;</span><br><span class="line">color: grey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.inputContentClick</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border-color</span>: <span class="selector-id">#66afe9</span> !<span class="selector-tag">important</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 0 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.075</span>),0 0 8<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(102,175,233,<span class="selector-class">.6</span>)!<span class="selector-tag">important</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.flexBottom</span>&#123;</span></span><br><span class="line">position: fixed !important;</span><br><span class="line">bottom: 0px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.fullScreen</span> &#123;</span></span><br><span class="line">width: 100%;</span><br><span class="line">height: 100%;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#f5faff</span>;</span></span><br><span class="line">position: fixed !important;</span><br><span class="line">bottom: 0px;</span><br><span class="line">z-index: 100;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.closeFullScreen</span> &#123;</span></span><br><span class="line">position: fixed;</span><br><span class="line"><span class="css"><span class="selector-tag">bottom</span>: 0<span class="selector-class">.5rem</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">right</span>: 0<span class="selector-class">.5rem</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.openFullScreen</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">font-size</span>: 1<span class="selector-class">.5rem</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">user-select</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">position: fixed;</span><br><span class="line"><span class="css"><span class="selector-tag">top</span>: 0<span class="selector-class">.5rem</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">right</span>: 0<span class="selector-class">.5rem</span>;</span></span><br><span class="line">z-index: 99;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.fullScreenShowDiv</span> &#123;</span></span><br><span class="line">height: calc(100% - 3rem);</span><br><span class="line">width: calc(100% - 2rem);</span><br><span class="line">margin: 1rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-class">.button</span>&#123;</span></span><br><span class="line">width: 140px;</span><br><span class="line">line-height: 38px;</span><br><span class="line">text-align: center;</span><br><span class="line">font-weight: bold;</span><br><span class="line"><span class="css"><span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-shadow</span><span class="selector-pseudo">:1px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#333</span>;</span></span><br><span class="line">border-radius: 5px;</span><br><span class="line"><span class="css"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 20<span class="selector-tag">px</span> 20<span class="selector-tag">px</span> 0;</span></span><br><span class="line">position: relative;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.button</span><span class="selector-pseudo">:nth-child(6n)</span>&#123;</span></span><br><span class="line">margin-right: 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.button</span><span class="selector-class">.gray</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span>: <span class="selector-id">#8c96a0</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-shadow</span><span class="selector-pseudo">:1px</span> 1<span class="selector-tag">px</span> 1<span class="selector-tag">px</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:1px</span> <span class="selector-tag">solid</span> <span class="selector-id">#dce1e6</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">box-shadow</span>: 0 1<span class="selector-tag">px</span> 2<span class="selector-tag">px</span> <span class="selector-id">#fff</span> <span class="selector-tag">inset</span>,0 <span class="selector-tag">-1px</span> 0 <span class="selector-id">#a8abae</span> <span class="selector-tag">inset</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-tag">-webkit-linear-gradient</span>(<span class="selector-tag">top</span>,<span class="selector-id">#f2f3f7</span>,<span class="selector-id">#e4e8ec</span>);</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-tag">-moz-linear-gradient</span>(<span class="selector-tag">top</span>,<span class="selector-id">#f2f3f7</span>,<span class="selector-id">#e4e8ec</span>);</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-tag">top</span>,<span class="selector-id">#f2f3f7</span>,<span class="selector-id">#e4e8ec</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.round</span>,<span class="selector-class">.side</span>,<span class="selector-class">.tags</span>&#123;</span></span><br><span class="line">padding-right: 30px;</span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.tags</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line">font-weight: normal;</span><br><span class="line">position: absolute;</span><br><span class="line">display: inline-block;</span><br><span class="line">content: "ADD TO";</span><br><span class="line"><span class="css"><span class="selector-tag">top</span><span class="selector-pseudo">:-3px</span>;</span></span><br><span class="line">right: -33px;</span><br><span class="line"><span class="css"><span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">text-shadow</span><span class="selector-pseudo">:none</span>;</span></span><br><span class="line">width: 85px;</span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:25px</span>;</span></span><br><span class="line">line-height: 28px;</span><br><span class="line"><span class="css"><span class="selector-tag">-webkit-transform</span><span class="selector-pseudo">:rotate(45deg)</span> <span class="selector-tag">scale</span>(<span class="selector-class">.7</span>,<span class="selector-class">.7</span>);</span></span><br><span class="line"><span class="css"><span class="selector-tag">-moz-transform</span><span class="selector-pseudo">:rotate(45deg)</span> <span class="selector-tag">scale</span>(<span class="selector-class">.7</span>,<span class="selector-class">.7</span>);</span></span><br><span class="line"><span class="css"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotate(45deg)</span> <span class="selector-tag">scale</span>(<span class="selector-class">.7</span>,<span class="selector-class">.7</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.gray</span><span class="selector-class">.tags</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background</span>: <span class="selector-id">#8c96a0</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">border</span><span class="selector-pseudo">:2px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fff</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fullScreen"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fullScreenShowDiv"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fullScreenMain"</span> <span class="attr">style</span>=<span class="string">"transform:rotate(90deg);transform-origin:0 100%;position: relative;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"closeFullScreen"</span> <span class="attr">onclick</span>=<span class="string">"document.getElementsByClassName('fullScreen')[0].style.display='none'"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">style</span>=<span class="string">"width: 1em;height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 1024 1024"</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">p-id</span>=<span class="string">"569"</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M354.133333 682.666667H256v-42.666667h170.666667v170.666667H384v-98.133334L243.2 853.333333l-29.866667-29.866666L354.133333 682.666667z m358.4 0l140.8 140.8-29.866666 29.866666-140.8-140.8V810.666667h-42.666667v-170.666667h170.666667v42.666667h-98.133334zM354.133333 384L213.333333 243.2l29.866667-29.866667L384 354.133333V256h42.666667v170.666667H256V384h98.133333z m358.4 0H810.666667v42.666667h-170.666667V256h42.666667v98.133333L823.466667 213.333333l29.866666 29.866667L712.533333 384z"</span> <span class="attr">fill</span>=<span class="string">"#444444"</span> <span class="attr">p-id</span>=<span class="string">"570"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"openFullScreen"</span> <span class="attr">onclick</span>=<span class="string">"document.getElementsByClassName('fullScreen')[0].style.display=''"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">"icon"</span> <span class="attr">style</span>=<span class="string">"width: 1em;height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;"</span> <span class="attr">viewBox</span>=<span class="string">"0 0 1024 1024"</span> <span class="attr">version</span>=<span class="string">"1.1"</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span> <span class="attr">p-id</span>=<span class="string">"533"</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M285.866667 810.666667H384v42.666666H213.333333v-170.666666h42.666667v98.133333l128-128 29.866667 29.866667-128 128z m494.933333 0l-128-128 29.866667-29.866667 128 128V682.666667h42.666666v170.666666h-170.666666v-42.666666h98.133333zM285.866667 256l128 128-29.866667 29.866667-128-128V384H213.333333V213.333333h170.666667v42.666667H285.866667z m494.933333 0H682.666667V213.333333h170.666666v170.666667h-42.666666V285.866667l-128 128-29.866667-29.866667 128-128z"</span> <span class="attr">fill</span>=<span class="string">"#444444"</span> <span class="attr">p-id</span>=<span class="string">"534"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">style</span>=<span class="string">"width: 100%; height:calc(100% - 300px);clear: both"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> = <span class="string">"width: 100%; height: 256px"</span> <span class="attr">class</span>=<span class="string">"flexBottom"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span> = <span class="string">"width: 305px; margin: auto"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputContent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"name"</span> <span class="attr">class</span>=<span class="string">"inputLabel"</span>&gt;</span>组合名<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"name"</span> <span class="attr">onfocus</span>=<span class="string">"inputfocus(this)"</span> <span class="attr">onblur</span>=<span class="string">"inputBlur(this)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputContent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"principal"</span> <span class="attr">class</span>=<span class="string">"inputLabel"</span>&gt;</span>初始值<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"principal"</span> <span class="attr">onfocus</span>=<span class="string">"inputfocus(this)"</span> <span class="attr">onblur</span>=<span class="string">"inputBlur(this)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputContent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"interestRate"</span> <span class="attr">class</span>=<span class="string">"inputLabel"</span>&gt;</span>利率/年<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"interestRate"</span> <span class="attr">onfocus</span>=<span class="string">"inputfocus(this)"</span> <span class="attr">onblur</span>=<span class="string">"inputBlur(this)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputContent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"time"</span> <span class="attr">class</span>=<span class="string">"inputLabel"</span>&gt;</span>周期/月<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"time"</span> <span class="attr">onfocus</span>=<span class="string">"inputfocus(this)"</span> <span class="attr">onblur</span>=<span class="string">"inputBlur(this)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inputContent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"append"</span> <span class="attr">class</span>=<span class="string">"inputLabel"</span>&gt;</span>周期追加<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"append"</span> <span class="attr">onfocus</span>=<span class="string">"inputfocus(this)"</span> <span class="attr">onblur</span>=<span class="string">"inputBlur(this)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 325px"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"margin: auto"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"button gray"</span> <span class="attr">onclick</span>=<span class="string">"defaultShow()"</span>&gt;</span>重新展示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"button gray tags"</span> <span class="attr">onclick</span>=<span class="string">"defaultAppend()"</span>&gt;</span>追加展示<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/echarts@5.2.2/dist/echarts.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> fullScreenH = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'fullScreenShowDiv'</span>)[<span class="number">0</span>].offsetHeight;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> fullScreenW = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'fullScreenShowDiv'</span>)[<span class="number">0</span>].offsetWidth;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"fullScreenMain"</span>).style.height = fullScreenW + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"fullScreenMain"</span>).style.bottom = fullScreenW + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"fullScreenMain"</span>).style.width = fullScreenH + <span class="string">'px'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementsByClassName(<span class="string">'fullScreen'</span>)[<span class="number">0</span>].style.display=<span class="string">'none'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> nameIndex = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'main'</span>));</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> fullScreenChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">'fullScreenMain'</span>));</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.currentData = [];</span></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 计算周期值</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getCompoundInterest</span><span class="params">(principal, interestRate, time, append)</span> </span>&#123;</span></span><br><span class="line">        interestRate = formatRate(interestRate);</span><br><span class="line"><span class="actionscript">        <span class="comment">//interestRate = interestRate + 1;</span></span></span><br><span class="line"><span class="javascript">interestRate = <span class="built_in">Math</span>.pow(interestRate + <span class="number">1</span>, <span class="number">1</span>/<span class="number">12</span>);</span></span><br><span class="line">        append = isNumber(append) ? append : 0;</span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> principals = [principal];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> title = [<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> calculationProcess = [principal];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= time; i++) &#123;</span></span><br><span class="line"><span class="actionscript">            calculationProcess[i] = principal + <span class="string">"*"</span> + interestRate + <span class="string">"+"</span> + append + <span class="string">"="</span> + principal;</span></span><br><span class="line">            principal = principal * interestRate + append;</span><br><span class="line"><span class="javascript">            principals[i] = <span class="built_in">Math</span>.floor(principal * <span class="number">100</span>) / <span class="number">100</span>;</span></span><br><span class="line">title[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> data = &#123;&#125;;</span></span><br><span class="line"><span class="actionscript">data.legend = [<span class="string">"周期"</span>];</span></span><br><span class="line">data.xAxis = title;</span><br><span class="line">data.value = principals;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> [principals, calculationProcess];</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"> * 显示值到视图，覆盖之前的</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">showCompoundInterest</span><span class="params">(principal, interestRate, time, append, name)</span></span>&#123;</span></span><br><span class="line">nameIndex = 1;</span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> res = getCompoundInterest(principal, interestRate, time, append);</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.currentData = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.currentData = [resToData(res[<span class="number">0</span>], name, principal, interestRate, time, append)];</span></span><br><span class="line"><span class="javascript">myChart.setOption(getOptionByData(<span class="built_in">window</span>.currentData), <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">fullScreenChart.setOption(getOptionByData(<span class="built_in">window</span>.currentData), <span class="literal">true</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 追加值到视图</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">appendShowCompoundInterest</span><span class="params">(principal, interestRate, time, append, name)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> res = getCompoundInterest(principal, interestRate, time, append);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> appendData = resToData(res[<span class="number">0</span>], name, principal, interestRate, time, append);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">window</span>.currentData.length; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="built_in">window</span>.currentData[i].name == appendData.name) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.currentData[i] = appendData;</span></span><br><span class="line"><span class="actionscript">                flag = <span class="literal">false</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">if(flag) &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.currentData.push(appendData);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">myChart.setOption(getOptionByData(<span class="built_in">window</span>.currentData));</span></span><br><span class="line"><span class="javascript">fullScreenChart.setOption(getOptionByData(<span class="built_in">window</span>.currentData));</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 构造值</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">resToData</span><span class="params">(res, name, principal, interestRate, time, append)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(name==<span class="literal">null</span>)&#123;</span></span><br><span class="line"><span class="actionscript">name = <span class="string">"default"</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> &#123;</span></span><br><span class="line">name: name,</span><br><span class="line">data: res,</span><br><span class="line">            principal: principal,</span><br><span class="line">            interestRate: interestRate,</span><br><span class="line">            time: time,</span><br><span class="line">            append: append</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 检测是否是数值型</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">isNumber</span><span class="params">(value)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">"number"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"> * 格式化利率</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">formatRate</span><span class="params">(rate)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> rate == <span class="literal">null</span>? <span class="number">1</span> :rate;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 构造Echart配置</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">getOptionByData</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> maxAxis = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> legends = [];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> datas = [];</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> dataXAxis = [];</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">let</span> index=<span class="number">0</span>; index&lt;data.length; index++)&#123;</span></span><br><span class="line">legends[index] = data[index].name;</span><br><span class="line"><span class="javascript"><span class="keyword">let</span> one = data[index];</span></span><br><span class="line"><span class="actionscript">one.type = <span class="string">'line'</span>;</span></span><br><span class="line">datas[index] = one;</span><br><span class="line">maxAxis = one.data.length &gt; maxAxis ? one.data.length : maxAxis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;maxAxis;i++)&#123;</span></span><br><span class="line">dataXAxis[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        option = &#123;</span><br><span class="line">title: &#123;</span><br><span class="line"><span class="actionscript">text: <span class="string">'增长趋势'</span></span></span><br><span class="line">&#125;,</span><br><span class="line">tooltip: &#123;</span><br><span class="line"><span class="actionscript">trigger: <span class="string">'axis'</span></span></span><br><span class="line">&#125;,</span><br><span class="line">legend: &#123;</span><br><span class="line">data: legends</span><br><span class="line">&#125;,</span><br><span class="line">grid: &#123;</span><br><span class="line"><span class="actionscript">left: <span class="string">'3%'</span>,</span></span><br><span class="line"><span class="actionscript">right: <span class="string">'4%'</span>,</span></span><br><span class="line"><span class="actionscript">bottom: <span class="string">'3%'</span>,</span></span><br><span class="line"><span class="actionscript">containLabel: <span class="literal">true</span></span></span><br><span class="line">&#125;,</span><br><span class="line">toolbox: &#123;</span><br><span class="line">feature: &#123;</span><br><span class="line"><span class="actionscript">saveAsImage: &#123;show: <span class="literal">false</span>&#125;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">xAxis: &#123;</span><br><span class="line"><span class="actionscript">type: <span class="string">'category'</span>,</span></span><br><span class="line"><span class="actionscript">boundaryGap: <span class="literal">false</span>,</span></span><br><span class="line">data: dataXAxis</span><br><span class="line">&#125;,</span><br><span class="line">yAxis: &#123;</span><br><span class="line"><span class="actionscript">type: <span class="string">'value'</span></span></span><br><span class="line">&#125;,</span><br><span class="line">series: datas</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(option);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> option;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"> * 获取对象的值，空则返回默认值</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getInputValOrElse</span><span class="params">(id, defaultVal)</span></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ob = <span class="built_in">document</span>.getElementById(id);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> value = ob.value;</span></span><br><span class="line"><span class="actionscript">ob.value = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">if</span>(value == <span class="literal">null</span> || value == <span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">value = defaultVal + <span class="string">""</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> execStringExpression(value)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取名称的值，空则给默认值</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getNameOrDefault</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ob = <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> value = ob.value;</span></span><br><span class="line"><span class="actionscript">        ob.value = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(value == <span class="literal">null</span> || value == <span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            value = <span class="string">"未命名组合"</span> + nameIndex++;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> value;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"> * 将字符当做命令执行（输入框可以输入简单公式）</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">execStringExpression</span><span class="params">(expr, info)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">let</span> exprF = expr.replace(<span class="regexp">/\$\&#123;([^&#125;]+)\&#125;/g</span>, <span class="string">'$&#123;this[\'$1\'] || \'\'&#125;'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">const</span> fn = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">`return \`<span class="subst">$&#123;exprF&#125;</span>\``</span>).bind(info || &#123;&#125;);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span>  <span class="built_in">eval</span>(fn())</span></span><br><span class="line"><span class="javascript">&#125; <span class="keyword">catch</span>(e) &#123; <span class="built_in">console</span>.log(e); &#125;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">return</span> <span class="string">''</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 获取输入值并执行回调函数</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">getValueOrDefault</span><span class="params">(doFun)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> name = getNameOrDefault();</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> principal = getInputValOrElse(<span class="string">"principal"</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> interestRate = getInputValOrElse(<span class="string">"interestRate"</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> time = getInputValOrElse(<span class="string">"time"</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="actionscript"><span class="keyword">var</span> append = getInputValOrElse(<span class="string">"append"</span>, <span class="number">0</span>);</span></span><br><span class="line"><span class="javascript">doFun(<span class="built_in">parseInt</span>(principal), <span class="built_in">parseFloat</span>(interestRate), <span class="built_in">parseInt</span>(time), <span class="built_in">parseFloat</span>(append), name);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 展示方法入口</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">defaultShow</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">getValueOrDefault(showCompoundInterest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 追加方法入口</span><br><span class="line"> */</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">defaultAppend</span><span class="params">()</span></span>&#123;</span></span><br><span class="line">getValueOrDefault(appendShowCompoundInterest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line"> * 点击趋势数据的时候回填输入信息</span><br><span class="line">     */</span><br><span class="line"><span class="actionscript">myChart.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(param)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> name = param.seriesName;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">window</span>.currentData.length; i++) &#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(<span class="built_in">window</span>.currentData[i].name == name) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> crt = <span class="built_in">window</span>.currentData[i];</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"name"</span>).value = crt.name;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"principal"</span>).value = crt.principal;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"interestRate"</span>).value = crt.interestRate;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"time"</span>).value = crt.time;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">"append"</span>).value = crt.append;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">break</span>;</span></span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 输入框样式</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">inputfocus</span><span class="params">(ob)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        ob.parentNode.className = <span class="string">"inputContent inputContentClick"</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">inputBlur</span><span class="params">(ob)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        ob.parentNode.className = <span class="string">"inputContent"</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">// 初始化显示</span></span></span><br><span class="line"><span class="actionscript">showCompoundInterest(<span class="number">100</span>, <span class="number">0.8</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="string">"演示组合"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用加密算法</title>
      <link href="/2022/03/20/%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/20/%E5%B8%B8%E7%94%A8%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>文章字数：510,阅读全文大约需要2分钟</p><h1 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h1><ul><li>对称加密：<code>DES</code>、<code>3DES</code>、<code>AES</code>等(安全等级中，速度很快，每秒数M比特)</li><li>非对称加密：<code>RSA</code>、<code>DSA</code>等(安全等级高，速度比较慢，适合小数据量或数据签名)</li><li>散列算法：<code>SHA-1</code>、<code>MD5</code>等</li></ul><h1 id="二、散列"><a href="#二、散列" class="headerlink" title="二、散列"></a>二、散列</h1><h2 id="2-1-MD5"><a href="#2-1-MD5" class="headerlink" title="2.1 MD5"></a>2.1 MD5</h2><ul><li>使用哈希函数，对信息进行摘要</li><li>无论多长，都会输出一个长度为<code>128bits</code>的串(通常用 16 进制 表示为 32 个字符）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] computeMD5(<span class="keyword">byte</span>[] content) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MessageDigest md5 = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">        <span class="keyword">return</span> md5.digest(content);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-SHA1算法"><a href="#2-2-SHA1算法" class="headerlink" title="2.2 SHA1算法"></a>2.2 SHA1算法</h2><ul><li>相对于MD5更安全</li><li>对于长度小于<code>2^64</code>位的消息，会产生一个160位的信息摘要</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] computeSHA1(<span class="keyword">byte</span>[] content) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MessageDigest sha1 = MessageDigest.getInstance(<span class="string">"SHA1"</span>);</span><br><span class="line">        <span class="keyword">return</span> sha1.digest(content);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-HMAC算法"><a href="#2-3-HMAC算法" class="headerlink" title="2.3 HMAC算法"></a>2.3 HMAC算法</h2><ul><li>相当于对称加密+散列</li><li>发送发通过密钥和原文计算出加密的散列，接收方也需要通过原文密钥解密得到正确的散列</li><li>多个线程同时使用一个实例会导致线程不安全的问题，需要加锁或者使用<code>ThreadLocal</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HMacHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HMacHelper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> Mac mac;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * MAC算法可选以下多种算法</span></span><br><span class="line"><span class="comment">     * HmacMD5/HmacSHA1/HmacSHA256/HmacSHA384/HmacSHA512</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_MAC = <span class="string">"HmacMD5"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HMacHelper</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(key.getBytes(ConstField.UTF8), KEY_MAC);</span><br><span class="line">            mac = Mac.getInstance(secretKey.getAlgorithm());</span><br><span class="line">            mac.init(secretKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"create hmac helper failed."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] sign(<span class="keyword">byte</span>[] content) &#123;</span><br><span class="line">        <span class="keyword">return</span> mac.doFinal(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(<span class="keyword">byte</span>[] signature, <span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] result = mac.doFinal(content);</span><br><span class="line">            <span class="keyword">return</span> Arrays.equals(signature, result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"verify sig failed."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、对称加密"><a href="#三、对称加密" class="headerlink" title="三、对称加密"></a>三、对称加密</h1><h2 id="3-1-AES"><a href="#3-1-AES" class="headerlink" title="3.1 AES"></a>3.1 AES</h2><ul><li>高级别的加密标准，区块加密标准</li><li>对称分组密码机制</li><li>分组密码，<code>128</code>位是一个分组。</li><li>秘钥长度最少支持为<code>128</code>位、<code>192</code>位、<code>256</code>位</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AesHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SecretKeySpec keySpec;</span><br><span class="line">    <span class="keyword">private</span> IvParameterSpec iv;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AesHelper</span><span class="params">(<span class="keyword">byte</span>[] aesKey, <span class="keyword">byte</span>[] iv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (aesKey == <span class="keyword">null</span> || aesKey.length &lt; <span class="number">16</span> || (iv != <span class="keyword">null</span> &amp;&amp; iv.length &lt; <span class="number">16</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"错误的初始密钥"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (iv == <span class="keyword">null</span>) &#123;</span><br><span class="line">            iv = Md5Util.compute(aesKey);</span><br><span class="line">        &#125;</span><br><span class="line">        keySpec = <span class="keyword">new</span> SecretKeySpec(aesKey, <span class="string">"AES"</span>);</span><br><span class="line">        <span class="keyword">this</span>.iv = <span class="keyword">new</span> IvParameterSpec(iv);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AesHelper</span><span class="params">(<span class="keyword">byte</span>[] aesKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (aesKey == <span class="keyword">null</span> || aesKey.length &lt; <span class="number">16</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"错误的初始密钥"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        keySpec = <span class="keyword">new</span> SecretKeySpec(aesKey, <span class="string">"AES"</span>);</span><br><span class="line">        <span class="keyword">this</span>.iv = <span class="keyword">new</span> IvParameterSpec(Md5Util.compute(aesKey));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] data) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">null</span>;</span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"AES/CFB/NoPadding"</span>);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, keySpec, iv);</span><br><span class="line">            result = cipher.doFinal(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] secret) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">null</span>;</span><br><span class="line">        Cipher cipher = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cipher = Cipher.getInstance(<span class="string">"AES/CFB/NoPadding"</span>);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, keySpec, iv);</span><br><span class="line">            result = cipher.doFinal(secret);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] randomKey(<span class="keyword">int</span> size) &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyGenerator gen = KeyGenerator.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">            gen.init(size, <span class="keyword">new</span> SecureRandom());</span><br><span class="line">            result = gen.generateKey().getEncoded();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、非对称加密"><a href="#四、非对称加密" class="headerlink" title="四、非对称加密"></a>四、非对称加密</h1><h2 id="4-1-RSA"><a href="#4-1-RSA" class="headerlink" title="4.1 RSA"></a>4.1 RSA</h2><ul><li>目前最有影响力的公钥加密算法，可同时用于加密和数字签名</li><li>能抵抗已知所有的密码攻击</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RsaHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(RsaHelper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="keyword">private</span> RSAPublicKey publicKey;</span><br><span class="line">    <span class="keyword">private</span> RSAPrivateCrtKey privateKey;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        Security.addProvider(<span class="keyword">new</span> BouncyCastleProvider()); <span class="comment">//使用bouncycastle作为加密算法实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RsaHelper</span><span class="params">(String publicKey, String privateKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Base64Util.decode(publicKey), Base64Util.decode(privateKey));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RsaHelper</span><span class="params">(<span class="keyword">byte</span>[] publicKey, <span class="keyword">byte</span>[] privateKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="keyword">if</span> (publicKey != <span class="keyword">null</span> &amp;&amp; publicKey.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.publicKey = (RSAPublicKey)keyFactory.generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(publicKey));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (privateKey != <span class="keyword">null</span> &amp;&amp; privateKey.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.privateKey = (RSAPrivateCrtKey)keyFactory.generatePrivate(<span class="keyword">new</span> PKCS8EncodedKeySpec(privateKey));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RsaHelper</span><span class="params">(String publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Base64Util.decode(publicKey));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RsaHelper</span><span class="params">(<span class="keyword">byte</span>[] publicKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">            <span class="keyword">if</span> (publicKey != <span class="keyword">null</span> &amp;&amp; publicKey.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.publicKey = (RSAPublicKey)keyFactory.generatePublic(<span class="keyword">new</span> X509EncodedKeySpec(publicKey));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] content) &#123;</span><br><span class="line">        <span class="keyword">if</span> (publicKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"public key is null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (content == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</span><br><span class="line">            cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">            <span class="keyword">int</span> size = publicKey.getModulus().bitLength() / <span class="number">8</span> - <span class="number">11</span>;</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream((content.length + size - <span class="number">1</span>) / size * (size + <span class="number">11</span>));</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.length; ) &#123;</span><br><span class="line">                left = content.length - i;</span><br><span class="line">                <span class="keyword">if</span> (left &gt; size) &#123;</span><br><span class="line">                    cipher.update(content, i, size);</span><br><span class="line">                    i += size;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cipher.update(content, i, left);</span><br><span class="line">                    i += left;</span><br><span class="line">                &#125;</span><br><span class="line">                baos.write(cipher.doFinal());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] secret) &#123;</span><br><span class="line">        <span class="keyword">if</span> (privateKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"private key is null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (secret == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Cipher cipher = Cipher.getInstance(<span class="string">"RSA/ECB/PKCS1Padding"</span>);</span><br><span class="line">            cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line">            <span class="keyword">int</span> size = privateKey.getModulus().bitLength() / <span class="number">8</span>;</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream((secret.length + size - <span class="number">12</span>) / (size - <span class="number">11</span>) * size);</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; secret.length; ) &#123;</span><br><span class="line">                left = secret.length - i;</span><br><span class="line">                <span class="keyword">if</span> (left &gt; size) &#123;</span><br><span class="line">                    cipher.update(secret, i, size);</span><br><span class="line">                    i += size;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cipher.update(secret, i, left);</span><br><span class="line">                    i += left;</span><br><span class="line">                &#125;</span><br><span class="line">                baos.write(cipher.doFinal());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"rsa decrypt failed."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] sign(<span class="keyword">byte</span>[] content) &#123;</span><br><span class="line">        <span class="keyword">if</span> (privateKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"private key is null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (content == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Signature signature = Signature.getInstance(<span class="string">"SHA1WithRSA"</span>);</span><br><span class="line">            signature.initSign(privateKey);</span><br><span class="line">            signature.update(content);</span><br><span class="line">            <span class="keyword">return</span> signature.sign();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(<span class="keyword">byte</span>[] sign, <span class="keyword">byte</span>[] content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (publicKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"public key is null."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sign == <span class="keyword">null</span> || content == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Signature signature = Signature.getInstance(<span class="string">"SHA1WithRSA"</span>);</span><br><span class="line">            signature.initVerify(publicKey);</span><br><span class="line">            signature.update(content);</span><br><span class="line">            <span class="keyword">return</span> signature.verify(sign);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"rsa verify failed."</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 见识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提取视频关键帧并前端展示</title>
      <link href="/2022/03/20/%E6%8F%90%E5%8F%96%E8%A7%86%E9%A2%91%E5%85%B3%E9%94%AE%E5%B8%A7%E5%B9%B6%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA/"/>
      <url>/2022/03/20/%E6%8F%90%E5%8F%96%E8%A7%86%E9%A2%91%E5%85%B3%E9%94%AE%E5%B8%A7%E5%B9%B6%E5%89%8D%E7%AB%AF%E5%B1%95%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<p>文章字数：232,阅读全文大约需要1分钟</p><blockquote><p>后端使用<code>java</code>截取视频关键帧，并组装成带进度的图片。前端用<code>js</code>视频内容展示</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.img;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022-01-17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ImageBuilder <span class="title">getComicStrip</span><span class="params">(<span class="keyword">int</span> outWidth, <span class="keyword">int</span> outHeight, List&lt;BufferedImage&gt; imageList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> showW = outWidth, showH = outHeight;</span><br><span class="line">        <span class="keyword">double</span> outScale = outHeight / outWidth;</span><br><span class="line">        <span class="keyword">final</span> ImageBuilder imageBuilder = <span class="keyword">new</span> ImageBuilder(showW * imageList.size(), showH, Color.BLACK);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imageList.size(); i++) &#123;</span><br><span class="line">            BufferedImage image = imageList.get(i);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">double</span> height = image.getHeight();</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">double</span> width = image.getWidth();</span><br><span class="line">            <span class="keyword">double</span> scale = height / width;</span><br><span class="line">            <span class="keyword">if</span>(scale == outScale) &#123;</span><br><span class="line">                imageBuilder.drawImg(image, i * showW, <span class="number">0</span>, showW, showH);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(scale &gt; outHeight) &#123;</span><br><span class="line">                    <span class="keyword">double</span> n = height / showH;</span><br><span class="line">                    <span class="keyword">double</span> w = width / n;</span><br><span class="line">                    imageBuilder.drawImg(image, (<span class="keyword">int</span>)(showW * i + (showW - w) / <span class="number">2</span>), <span class="number">0</span>, (<span class="keyword">int</span>)w, showH);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">double</span> n = width / showW;</span><br><span class="line">                    <span class="keyword">double</span> h = height / n;</span><br><span class="line">                    imageBuilder.drawImg(image, showW * i, (<span class="keyword">int</span>)((showH - h) / <span class="number">2</span>), showW, (<span class="keyword">int</span>)h);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imageBuilder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用<code>ffmpeg</code>截取关键帧并调用上面的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.ffm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.colin.tool.img.ImageBuilder;</span><br><span class="line"><span class="keyword">import</span> com.colin.tool.img.ImageUtil;</span><br><span class="line"><span class="keyword">import</span> org.opencv.core.Mat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-11-17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String base = <span class="string">"F:\\test\\vid\\resource"</span>;</span><br><span class="line">        String name = <span class="string">"1.mp4"</span>;</span><br><span class="line">        String path = base + File.separator + name;</span><br><span class="line">        <span class="keyword">int</span> frameIndexLength = <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = VidUtil.countFrame(path);</span><br><span class="line">        <span class="keyword">final</span> LinkedList&lt;Mat&gt; mats = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        VidUtil.getFrameMatByVideo(path, count / <span class="number">5</span>, mat -&gt; mats.add(VidUtil.copy(mat)));</span><br><span class="line">        <span class="keyword">if</span>(mats.size() &gt; frameIndexLength) &#123;</span><br><span class="line">            mats.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">        ImageBuilder imageBuilder = ImageUtil.getComicStrip(<span class="number">200</span>, <span class="number">120</span>,mats.stream().map(mat-&gt;VidUtil.mat2BufImg(mat, <span class="string">".png"</span>)).collect(Collectors.toList()));</span><br><span class="line">        imageBuilder.writeToFile(<span class="keyword">new</span> File(base + File.separator + <span class="string">"res.png"</span>), <span class="string">"png"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><h2 id="2-1-通用样式"><a href="#2-1-通用样式" class="headerlink" title="2.1 通用样式"></a>2.1 通用样式</h2><ul><li><code>200 * 120</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.vidContent</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.vidItem</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.vidComicStrip</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">120px</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.vidComicStrip</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.vidTitle</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">display</span>: inherit;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progressBar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">21px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">30</span>,<span class="number">144</span>,<span class="number">254</span>,<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">25px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-两种展示方式"><a href="#2-2-两种展示方式" class="headerlink" title="2.2 两种展示方式"></a>2.2 两种展示方式</h2><ol><li>通过鼠标移动改变进度</li></ol><ul><li><code>comicStrip.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> frameLength = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> itemWidth = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> currIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> vidContentSelect = <span class="string">".vidContent"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendVidComicStrip</span>(<span class="params">id, img, title</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vidItem = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    vidItem.setAttribute(<span class="string">"class"</span>, <span class="string">"vidItem"</span>);</span><br><span class="line">    <span class="keyword">var</span> vidComicStrip = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    vidComicStrip.setAttribute(<span class="string">"class"</span>, <span class="string">"vidComicStrip"</span>);</span><br><span class="line">    <span class="keyword">var</span> vidTitle = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    vidTitle.setAttribute(<span class="string">"class"</span>, <span class="string">"vidTitle"</span>);</span><br><span class="line">    vidItem.appendChild(vidComicStrip);</span><br><span class="line">    vidItem.appendChild(vidTitle);</span><br><span class="line">    <span class="keyword">var</span> vidImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">    vidImg.src = img;</span><br><span class="line">    vidComicStrip.appendChild(vidImg);</span><br><span class="line">    <span class="keyword">var</span> progressBar = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    progressBar.setAttribute(<span class="string">"class"</span>, <span class="string">"progressBar"</span>);</span><br><span class="line">    vidComicStrip.appendChild(progressBar);</span><br><span class="line">    vidTitle.innerText = title;</span><br><span class="line">    vidItem.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clickVidComicStrip(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(vidContentSelect).appendChild(vidItem);</span><br><span class="line">    <span class="comment">// 事件</span></span><br><span class="line">    vidImg.onmousemove = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">        showVidComicStrip(event, <span class="keyword">this</span>);</span><br><span class="line">        event.stopPropagation();</span><br><span class="line">    &#125;</span><br><span class="line">    vidImg.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        stopVidComicStrip(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showVidComicStrip</span>(<span class="params">event, ob</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> offset = event.pageX - ob.parentNode.offsetLeft;</span><br><span class="line">    <span class="keyword">var</span> index = (offset / itemWidth) * frameLength</span><br><span class="line">    showFrame(ob, <span class="built_in">parseInt</span>(index));</span><br><span class="line">    ob.parentNode.getElementsByClassName(<span class="string">"progressBar"</span>)[<span class="number">0</span>].style.width = offset + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showFrame</span>(<span class="params">ob, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt;= frameLength &amp;&amp; currIndex != i) &#123;</span><br><span class="line">        currIndex = i;</span><br><span class="line">        ob.style.left = (<span class="number">0</span> - i * itemWidth) + <span class="string">"px"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopVidComicStrip</span>(<span class="params">ob</span>) </span>&#123;</span><br><span class="line">    ob.style.left = <span class="number">0</span>;</span><br><span class="line">    currIndex = <span class="number">0</span>;</span><br><span class="line">    ob.parentNode.getElementsByClassName(<span class="string">"progressBar"</span>)[<span class="number">0</span>].style.width = <span class="string">"0px"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickVidComicStrip</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>鼠标移入后自动展示</li></ol><ul><li><code>comicStripAuto.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> frameLength = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> itemWidth = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">var</span> frameInterval = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">//var progressBarShow = true;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> vidContentSelect = <span class="string">".vidContent"</span>;</span><br><span class="line"><span class="keyword">var</span> timeOut = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> currentShow = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendVidComicStrip</span>(<span class="params">id, img, title</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> vidItem = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    vidItem.setAttribute(<span class="string">"class"</span>, <span class="string">"vidItem"</span>);</span><br><span class="line">    <span class="keyword">var</span> vidComicStrip = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    vidComicStrip.setAttribute(<span class="string">"class"</span>, <span class="string">"vidComicStrip"</span>);</span><br><span class="line">    <span class="keyword">var</span> vidTitle = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    vidTitle.setAttribute(<span class="string">"class"</span>, <span class="string">"vidTitle"</span>);</span><br><span class="line">    vidItem.appendChild(vidComicStrip);</span><br><span class="line">    vidItem.appendChild(vidTitle);</span><br><span class="line">    <span class="keyword">var</span> vidImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">    vidImg.src = img;</span><br><span class="line">    vidComicStrip.appendChild(vidImg);</span><br><span class="line">    <span class="keyword">var</span> progressBar = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    progressBar.setAttribute(<span class="string">"class"</span>, <span class="string">"progressBar"</span>);</span><br><span class="line">    vidComicStrip.appendChild(progressBar);</span><br><span class="line">    vidTitle.innerText = title;</span><br><span class="line">    vidItem.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clickVidComicStrip(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(vidContentSelect).appendChild(vidItem);</span><br><span class="line">    <span class="comment">// 事件</span></span><br><span class="line">    vidImg.onmouseover = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        showVidComicStrip(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    vidImg.onmouseout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        stopVidComicStrip(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showVidComicStrip</span>(<span class="params">ob</span>) </span>&#123;</span><br><span class="line">    currentShow = ob;</span><br><span class="line">    showFrame(ob, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showFrame</span>(<span class="params">ob, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(currentShow == ob &amp;&amp; i &lt;= frameLength) &#123;</span><br><span class="line">        ob.style.left = (<span class="number">0</span> - i * itemWidth) + <span class="string">"px"</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(ob.parentNode.getElementsByClassName(<span class="string">"progressBar"</span>)[<span class="number">0</span>])</span><br><span class="line">        ob.parentNode.getElementsByClassName(<span class="string">"progressBar"</span>)[<span class="number">0</span>].style.width = i / frameLength * itemWidth + <span class="string">"px"</span>;</span><br><span class="line">        timeOut = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            showFrame(ob, i + <span class="number">1</span>);</span><br><span class="line">        &#125;, frameInterval)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        timeOut = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopVidComicStrip</span>(<span class="params">ob</span>) </span>&#123;</span><br><span class="line">    ob.style.left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(timeOut != <span class="literal">null</span>) &#123;</span><br><span class="line">        clearTimeout(timeOut);</span><br><span class="line">    &#125;</span><br><span class="line">    currentShow = <span class="literal">null</span>;</span><br><span class="line">    ob.parentNode.getElementsByClassName(<span class="string">"progressBar"</span>)[<span class="number">0</span>].style.width = <span class="string">"0px"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clickVidComicStrip</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h2><ol><li>添加一个<code>vidContent</code></li><li>调用<code>appendVidComicStrip</code>方法添加一个视频图标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"./comicStrip.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"vidContent"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"./comicStrip.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        appendVidComicStrip(<span class="string">"id"</span>, <span class="string">"imgUrl"</span>, <span class="string">"title"</span>);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>查看JVM信息</title>
      <link href="/2022/03/20/%E6%9F%A5%E7%9C%8BJVM%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/03/20/%E6%9F%A5%E7%9C%8BJVM%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>文章字数：577,阅读全文大约需要2分钟</p><blockquote><p>网上复制的 <a href="https://blog.csdn.net/tian6318/article/details/86485899" target="_blank" rel="noopener">原文链接</a></p></blockquote><h1 id="经检验，此方法在不同的操作系统下不稳定。有些参数获取失败，目前使用的方式是OSHI开源工具获取信息"><a href="#经检验，此方法在不同的操作系统下不稳定。有些参数获取失败，目前使用的方式是OSHI开源工具获取信息" class="headerlink" title="经检验，此方法在不同的操作系统下不稳定。有些参数获取失败，目前使用的方式是OSHI开源工具获取信息"></a>经检验，此方法在不同的操作系统下不稳定。有些参数获取失败，目前使用的方式是OSHI开源工具获取信息</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.management.ClassLoadingMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.CompilationMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.GarbageCollectorMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ManagementFactory;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.MemoryPoolMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.MemoryUsage;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.OperatingSystemMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.RuntimeMXBean;</span><br><span class="line"><span class="keyword">import</span> java.lang.management.ThreadMXBean;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.DecimalFormatSymbols;</span><br><span class="line"><span class="keyword">import</span> java.text.NumberFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> NumberFormat fmtI = <span class="keyword">new</span> DecimalFormat(<span class="string">"###,###"</span>, <span class="keyword">new</span> DecimalFormatSymbols(Locale.ENGLISH));</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> NumberFormat fmtD = <span class="keyword">new</span> DecimalFormat(<span class="string">"###,##0.000"</span>, <span class="keyword">new</span> DecimalFormatSymbols(Locale.ENGLISH));</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//运行时情况</span></span><br><span class="line">RuntimeMXBean runtime = ManagementFactory.getRuntimeMXBean();</span><br><span class="line"><span class="comment">//操作系统情况</span></span><br><span class="line">        OperatingSystemMXBean os = ManagementFactory.getOperatingSystemMXBean();</span><br><span class="line">        <span class="comment">//线程使用情况</span></span><br><span class="line">        ThreadMXBean threads = ManagementFactory.getThreadMXBean();</span><br><span class="line">        <span class="comment">//堆内存使用情况</span></span><br><span class="line">        MemoryUsage heapMemoryUsage = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();</span><br><span class="line">        <span class="comment">//非堆内存使用情况</span></span><br><span class="line">        MemoryUsage nonHeapMemoryUsage = ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage();</span><br><span class="line">        <span class="comment">//类加载情况</span></span><br><span class="line">        ClassLoadingMXBean cl = ManagementFactory.getClassLoadingMXBean();</span><br><span class="line">        <span class="comment">//内存池对象</span></span><br><span class="line">        List&lt;MemoryPoolMXBean&gt; pools = ManagementFactory.getMemoryPoolMXBeans();</span><br><span class="line">        <span class="comment">//编译器和编译情况</span></span><br><span class="line">        CompilationMXBean cm = ManagementFactory.getCompilationMXBean();</span><br><span class="line">        <span class="comment">//获取GC对象（不好用）</span></span><br><span class="line">        List&lt;GarbageCollectorMXBean&gt; gcmList = ManagementFactory.getGarbageCollectorMXBeans();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">        <span class="comment">//运行时情况</span></span><br><span class="line">        System.out.printf(<span class="string">"jvm.name (JVM名称-版本号-供应商):%s | version: %s | vendor: %s  %n"</span>, runtime.getVmName(), runtime.getVmVersion(), runtime.getVmVendor());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.spec.name (JVM规范名称-版本号-供应商):%s | version: %s | vendor: %s  %n"</span>, runtime.getSpecName(), runtime.getSpecVersion(), runtime.getSpecVendor());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.java.version (JVM JAVA版本):%s%n"</span>, System.getProperty(<span class="string">"java.version"</span>));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.start.time (Java虚拟机的启动时间):%s%n"</span>, toDuration(runtime.getStartTime()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.uptime (Java虚拟机的正常运行时间):%s%n"</span>, toDuration(runtime.getUptime()));</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//编译情况</span></span><br><span class="line">        System.out.printf(<span class="string">"compilation.name(编译器名称)：%s%n"</span>,cm.getName());</span><br><span class="line">        System.out.printf(<span class="string">"compilation.total.time(编译器耗时)：%d毫秒%n"</span>,cm.getTotalCompilationTime());</span><br><span class="line">        <span class="keyword">boolean</span> isSupport=cm.isCompilationTimeMonitoringSupported();  </span><br><span class="line">        <span class="keyword">if</span>(isSupport)&#123;  </span><br><span class="line">            System.out.println(<span class="string">"支持即时编译器编译监控"</span>);  </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">            System.out.println(<span class="string">"不支持即时编译器编译监控"</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.printf(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//JVM 线程情况</span></span><br><span class="line">        System.out.printf(<span class="string">"jvm.threads.total.count (总线程数(守护+非守护)):%d%n"</span>, threads.getThreadCount());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.threads.daemon.count (守护进程线程数):%d%n"</span>, threads.getDaemonThreadCount());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.threads.peak.count (峰值线程数):%d%n"</span>, threads.getPeakThreadCount());</span><br><span class="line">        System.out.printf(<span class="string">"jvm.threads.total.start.count(Java虚拟机启动后创建并启动的线程总数):%d%n"</span>, threads.getTotalStartedThreadCount());</span><br><span class="line">        <span class="keyword">for</span>(Long threadId : threads.getAllThreadIds()) &#123;</span><br><span class="line">        System.out.printf(<span class="string">"threadId: %d | threadName: %s%n"</span>, threadId, threads.getThreadInfo(threadId).getThreadName());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//获取GC信息</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        <span class="comment">//堆内存情况</span></span><br><span class="line">        System.out.printf(<span class="string">"jvm.heap.init (初始化堆内存):%s %n"</span>,  bytesToMB(heapMemoryUsage.getInit()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.heap.used (已使用堆内存):%s %n"</span>, bytesToMB(heapMemoryUsage.getUsed()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.heap.committed (可使用堆内存):%s %n"</span>, bytesToMB(heapMemoryUsage.getCommitted()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.heap.max (最大堆内存):%s %n"</span>, bytesToMB(heapMemoryUsage.getMax()));</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//非堆内存使用情况</span></span><br><span class="line">        System.out.printf(<span class="string">"jvm.noheap.init (初始化非堆内存):%s %n"</span>,  bytesToMB(nonHeapMemoryUsage.getInit()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.noheap.used (已使用非堆内存):%s %n"</span>,  bytesToMB(nonHeapMemoryUsage.getUsed()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.noheap.committed (可使用非堆内存):%s %n"</span>,  bytesToMB(nonHeapMemoryUsage.getCommitted()));</span><br><span class="line">        System.out.printf(<span class="string">"jvm.noheap.max (最大非堆内存):%s %n"</span>, bytesToMB(nonHeapMemoryUsage.getMax()));</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//系统概况</span></span><br><span class="line">        System.out.printf(<span class="string">"os.name(操作系统名称-版本号):%s %s %s %n"</span>, os.getName(), <span class="string">"version"</span>, os.getVersion());</span><br><span class="line">        System.out.printf(<span class="string">"os.arch(操作系统内核):%s%n"</span>, os.getArch());</span><br><span class="line">        System.out.printf(<span class="string">"os.cores(可用的处理器数量):%s %n"</span>, os.getAvailableProcessors());</span><br><span class="line">        System.out.printf(<span class="string">"os.loadAverage(系统负载平均值):%s %n"</span>, os.getSystemLoadAverage());</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//类加载情况</span></span><br><span class="line">        System.out.printf(<span class="string">"class.current.load.count(当前加载类数量):%s %n"</span>, cl.getLoadedClassCount());</span><br><span class="line">        System.out.printf(<span class="string">"class.unload.count(未加载类数量):%s %n"</span>, cl.getUnloadedClassCount());</span><br><span class="line">        System.out.printf(<span class="string">"class.total.load.count(总加载类数量):%s %n"</span>, cl.getTotalLoadedClassCount());</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(MemoryPoolMXBean pool : pools) &#123;</span><br><span class="line">        <span class="keyword">final</span> String kind = pool.getType().name(); </span><br><span class="line">        <span class="keyword">final</span> MemoryUsage usage = pool.getUsage(); </span><br><span class="line">        System.out.println(<span class="string">"内存模型： "</span> + getKindName(kind) + <span class="string">", 内存空间名称： "</span> + getPoolName(pool.getName()) + <span class="string">", jvm."</span> + pool.getName() + <span class="string">".init(初始化):"</span> + bytesToMB(usage.getInit())); </span><br><span class="line">        System.out.println(<span class="string">"内存模型： "</span> + getKindName(kind) + <span class="string">", 内存空间名称： "</span> + getPoolName(pool.getName()) + <span class="string">", jvm."</span> + pool.getName() + <span class="string">".used(已使用): "</span> + bytesToMB(usage.getUsed())); </span><br><span class="line">        System.out.println(<span class="string">"内存模型： "</span> + getKindName(kind) + <span class="string">", 内存空间名称： "</span> + getPoolName(pool.getName()) + <span class="string">", jvm."</span> + pool.getName()+ <span class="string">".committed(可使用):"</span> + bytesToMB(usage.getCommitted())); </span><br><span class="line">        System.out.println(<span class="string">"内存模型： "</span> + getKindName(kind) + <span class="string">", 内存空间名称： "</span> + getPoolName(pool.getName()) + <span class="string">", jvm."</span> + pool.getName() + <span class="string">".max(最大):"</span> + bytesToMB(usage.getMax()));</span><br><span class="line">        System.out.println(<span class="string">"------------------------------------------------------------------------------------------------------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">getKindName</span><span class="params">(String kind)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"NON_HEAP"</span>.equals(kind)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"NON_HEAP(非堆内存)"</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"HEAP(堆内存)"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">getPoolName</span><span class="params">(String poolName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (poolName) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Code Cache"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(代码缓存区)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Metaspace"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(元空间)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"Compressed Class Space"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(类指针压缩空间)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"PS Eden Space"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(伊甸园区)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"PS Survivor Space"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(幸存者区)"</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"PS Old Gen"</span>:</span><br><span class="line"><span class="keyword">return</span> poolName +<span class="string">"(老年代)"</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">return</span> poolName;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">bytesToMB</span><span class="params">(<span class="keyword">long</span> bytes)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> fmtI.format((<span class="keyword">long</span>)(bytes / <span class="number">1024</span> / <span class="number">1024</span>)) + <span class="string">" MB"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">printSizeInKb</span><span class="params">(<span class="keyword">double</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fmtI.format((<span class="keyword">long</span>) (size / <span class="number">1024</span>)) + <span class="string">" kbytes"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> String <span class="title">toDuration</span><span class="params">(<span class="keyword">double</span> uptime)</span> </span>&#123;</span><br><span class="line">        uptime /= <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">if</span> (uptime &lt; <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fmtD.format(uptime) + <span class="string">" seconds"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        uptime /= <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">if</span> (uptime &lt; <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> minutes = (<span class="keyword">long</span>) uptime;</span><br><span class="line">            String s = fmtI.format(minutes) + (minutes &gt; <span class="number">1</span> ? <span class="string">" minutes"</span> : <span class="string">" minute"</span>);</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        uptime /= <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">if</span> (uptime &lt; <span class="number">24</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> hours = (<span class="keyword">long</span>) uptime;</span><br><span class="line">            <span class="keyword">long</span> minutes = (<span class="keyword">long</span>) ((uptime - hours) * <span class="number">60</span>);</span><br><span class="line">            String s = fmtI.format(hours) + (hours &gt; <span class="number">1</span> ? <span class="string">" hours"</span> : <span class="string">" hour"</span>);</span><br><span class="line">            <span class="keyword">if</span> (minutes != <span class="number">0</span>) &#123;</span><br><span class="line">                s += <span class="string">" "</span> + fmtI.format(minutes) + (minutes &gt; <span class="number">1</span> ? <span class="string">" minutes"</span> : <span class="string">" minute"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">        uptime /= <span class="number">24</span>;</span><br><span class="line">        <span class="keyword">long</span> days = (<span class="keyword">long</span>) uptime;</span><br><span class="line">        <span class="keyword">long</span> hours = (<span class="keyword">long</span>) ((uptime - days) * <span class="number">24</span>);</span><br><span class="line">        String s = fmtI.format(days) + (days &gt; <span class="number">1</span> ? <span class="string">" days"</span> : <span class="string">" day"</span>);</span><br><span class="line">        <span class="keyword">if</span> (hours != <span class="number">0</span>) &#123;</span><br><span class="line">            s += <span class="string">" "</span> + fmtI.format(hours) + (hours &gt; <span class="number">1</span> ? <span class="string">" hours"</span> : <span class="string">" hour"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行为型模式（11种）</title>
      <link href="/2022/03/20/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%8811%E7%A7%8D%EF%BC%89/"/>
      <url>/2022/03/20/%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F%EF%BC%8811%E7%A7%8D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2627,阅读全文大约需要10分钟</p><h1 id="一、责任链模式-Chain-of-Responsibility-Pattern"><a href="#一、责任链模式-Chain-of-Responsibility-Pattern" class="headerlink" title="一、责任链模式(Chain of Responsibility Pattern)"></a>一、责任链模式(Chain of Responsibility Pattern)</h1><p>意图：创建一个处理请求的对象链，对象发送者和对象接受者解耦。责任链上的对象如果不能处理请求，就会把请求发送给下一个责任链节点。</p><p>实现：</p><ol><li>创建责任链节点的抽象类</li><li>使用抽象类生成若干处理节点</li><li>节点依次连接，保存下一个节点的地址</li><li>当请求进入时判断是否是自己处理的类型，不是传给下一个节点。</li><li>请求发送给责任链头节点即可</li></ol><h1 id="二、命令模式-Command-Pattern"><a href="#二、命令模式-Command-Pattern" class="headerlink" title="二、命令模式(Command Pattern)"></a>二、命令模式(Command Pattern)</h1><p>意图：将请求（可以是调用方法的请求）封装成一个对象，再创建一个执行类，可以向执行类中添加请求对象，然后再统一执行。执行前可以任意添加和删除命令。过程有点类似建造者模式，添加添加然后统一执行。</p><p>实现：</p><ol><li>创建一个命令的接口，声明一个<code>execute()</code>执行方法</li><li>创建一个请求类，里面有若干方法。这个方法原本是直接被调用的，现在要被外面包裹成命令，然后多个命令放到一个执行类中按顺序执行。</li><li>实现命令接口，每个命令类代表不同的操作。构造方法接收一个请求类，然后在<code>execute()</code>方法中对于具体执行操作封装。</li><li>创建一个命令调用类，类中包含一个列表存储放入的命令类。其中主要包含</li></ol><ul><li>命令列表（list）</li><li>添加命令的方法</li><li>删除命令的方法</li><li>循环调用命令列表中的命令的执行方法</li><li>还可以有记录执行了那些命令的方法…（可以根据记录还原）</li><li>还可以加上<code>undo()</code>方法，用于撤销执行的命令。具体实现要结合业务。</li></ul><ol start="5"><li>向命令盗用类中添加若干命令，然后调用执行方法统一执行所以的命令</li></ol><h1 id="三、解释器模式（Interpreter-Pattern）"><a href="#三、解释器模式（Interpreter-Pattern）" class="headerlink" title="三、解释器模式（Interpreter Pattern）"></a>三、解释器模式（Interpreter Pattern）</h1><p>意图：将语言或者表达式解析成具体的操作，例如<code>sql</code>解析，数学公式计算（符号处理引擎）等</p><p>实现：</p><ol><li>创建表达式接口<code>Expression</code>，声明一个解析方法<code>interpret</code></li><li>创建终结符类（不能再分割的元素）比如 <code>1 + 2</code>中的<code>1</code>和<code>2</code>都是终结符</li><li>创建非终结符（还能再被分割）<code>1 + 2</code>中的<code>+</code>。<code>+</code>号左右都可以有元素，在语法树上就是父节点，拥有左右两个子节点。而终结符就是叶子节点。</li><li>终结符和非终结符都在解析里定义好自己的功能，<br>如<code>1 + 1</code>中的终结符就是构造函数接受字符串并转化成<code>int</code>类型保存。<br>非终结符<code>+</code>就是构造函数中接收两个终结符，并调用其解析方法结果相加返回</li><li>将需要解释的字符串构建成语法树，即非终结符是父节点，终结符是叶子节点的树。然后深度遍历并解析。</li></ol><h1 id="四、迭代器模式（Iterator-Pattern）"><a href="#四、迭代器模式（Iterator-Pattern）" class="headerlink" title="四、迭代器模式（Iterator Pattern）"></a>四、迭代器模式（Iterator Pattern）</h1><p>意图: 提供一个方便的遍历集合的方法，但是不用暴露内部结构。</p><p>例子： Java中的集合迭代器</p><p>实现：</p><ol><li>创建一个迭代器接口，内部声明<code>hasNext()</code>和<code>next()</code>方法</li><li>创建一个集合类，内部构件好存储的结构，并实现迭代器接口</li><li>内部使用一个游标存储当前访问位置，<code>int index</code></li><li><code>hasNext</code>方法返回游标是否到了结尾</li><li><code>next</code>方法返回当前游标所在的元素，并且游标下移。</li></ol><h1 id="五、中介者模式（Mediator-Pattern）"><a href="#五、中介者模式（Mediator-Pattern）" class="headerlink" title="五、中介者模式（Mediator Pattern）"></a>五、中介者模式（Mediator Pattern）</h1><p>用于降低对象和类之间的通信复杂性。遵循迪米特原则，即最少知道原则。<br>将原来网状的通信方式转换成星型的结构，所有的类都通过一个中介类进行交流。</p><p>实现：</p><ol><li>创建一个中介类，其中有发送信息的方法</li><li>创建沟通的类，其中的发送方法使用的就是中介类的方法进行发送</li></ol><h1 id="六、备忘录模式（Memento-Pattern）"><a href="#六、备忘录模式（Memento-Pattern）" class="headerlink" title="六、备忘录模式（Memento Pattern）"></a>六、备忘录模式（Memento Pattern）</h1><p>允许获取类的内部状态，并且可以设置状态以便回复到导出时的状态。<br>在不破坏封装的前提下可以完成类的备份还原，可以用作游戏存档、撤销操作、历史、事务等。</p><p>实现： </p><ol><li>创建状态的类，其中的成员变量就是从需要还原的类中提取出来的变量。</li><li>创建用于存储和获取状态的类，其中用集合保存状态类。</li><li>需要还原的类中实现提取状态和通过状态类还原的操作，提取也就是把相应的变量赋值给状态类，还原就是把状态类的信息保存到相应变量。</li></ol><h1 id="七、观察者模式（Observer-Pattern）"><a href="#七、观察者模式（Observer-Pattern）" class="headerlink" title="七、观察者模式（Observer Pattern）"></a>七、观察者模式（Observer Pattern）</h1><p>订阅/发布 的模式，发布消息后会通知所有订阅了这个主题<code>topic</code>的类。<br>和中介模式的区别是这个是很明显的主体和客体的结构，一个主体发送信息，多个客体接收。<br>中介模式是所有的类只关心自己和中介类之间的关系，沟通全部交给中介处理。</p><p>实现（mqtt的例子）：</p><ol><li>设备连接<code>mqtt</code>服务器时维持连接（tcp）</li><li>设备主动订阅主题，服务器根据主题保存相应设备信息（在集合里保存观察者的信息）</li><li>主题有新的发布后推送给订阅了此主题的设备</li></ol><h1 id="八、状态模式（State-Pattern）"><a href="#八、状态模式（State-Pattern）" class="headerlink" title="八、状态模式（State Pattern）"></a>八、状态模式（State Pattern）</h1><p>意图：<br>允许类的内部在状态发生改变时改变他的行为<br>代码中有很多改变对象状态的条件语句时，可以使用状态模式将部分条件语句隐藏在类中<br>把类的可能出现的状态都列举并封装了</p><p>缺点：<br>结构较为复杂<br>对于开闭原则的支持不是很好，增加状态一定要修改逻辑<br>类会变庞大</p><p>实现：<br>在类中声明一个状态的属性<br>进行操作之前判断一下状态，然后再执行相应的动作</p><h1 id="九、策略模式（Strategy-Pattern）"><a href="#九、策略模式（Strategy-Pattern）" class="headerlink" title="九、策略模式（Strategy Pattern）"></a>九、策略模式（Strategy Pattern）</h1><p>策略模式就是把操作逻辑封装成不同的类，通过选择不同的类实例化就是选择不同的策略。<br>这种模式可以减少<code>if...else</code>的判断次数，逻辑清晰。<br>算法自由切换，并且拓展性良好<br>缺点是会增加代码量<br>spring中可以直接把类注册为组件，然后再通过名字注入。很方便就能实现</p><p>实现：<br>创建策略的接口，内部有具体的操作方法<br>创建不同的策略实现类，例如<code>+</code>的策略，就是把传入值相加。<code>-</code>的策略就是把传入值相减。<br>实例化策略类，并使用接口操作，执行操作方法。<br>因为是使用接口操作，所以策略类可以更换成其它的策略也可以正常运行</p><h1 id="十、模板模式（Template-Pattern）"><a href="#十、模板模式（Template-Pattern）" class="headerlink" title="十、模板模式（Template Pattern）"></a>十、模板模式（Template Pattern）</h1><p>意图：在抽象类中写好其它几个抽象方法直接的调用关系，具体方法让子类实现。即搭建好累的框架，细节让子类自己实现。</p><p>实现：</p><ol><li>创建一个游戏的抽象类，内部有初始游戏、开始游戏、结束游戏三个抽象方法</li><li>增加一个<code>final play</code>方法，按顺序调用初始、开始、结束三个抽象方法。以指明子类的执行顺序也是这样</li><li>创建子类，实现此抽象类。实现具体的抽象方法</li><li>通过父类执行<code>play</code>方法</li></ol><h1 id="十一、访问者模式（Visitor-Pattern）"><a href="#十一、访问者模式（Visitor-Pattern）" class="headerlink" title="十一、访问者模式（Visitor Pattern）"></a>十一、访问者模式（Visitor Pattern）</h1><p>意图：当一个类的数据结构很稳固，但是操作容易改变。或者类中有很多和结构无关的操作，防止这些操作改变类的数据。所以采用访问者模式进行数据和操作的分离。<br>有良好的拓展性，符合单一职责原则，灵活</p><p>关键：数据类中实现一个接收访问的方法，并调用访问者的访问方法，传入自身<br>访问者根据传入的数据类进行操作</p><p>实现：</p><ol><li>创建一个被访问接口，内部有一个被访问的方法，入参是访问者接口</li><li>访问者接口，内部有访问的方法，入参是被访问者接口</li><li>实现接口</li><li>访问者需要访问时就直接调用被访问者的被访问方法，并使用入参操作值。</li></ol><hr><p>其它设计模式</p><h1 id="空对象模式（Null-Object-Pattern）"><a href="#空对象模式（Null-Object-Pattern）" class="headerlink" title="空对象模式（Null Object Pattern）"></a>空对象模式（Null Object Pattern）</h1><p>意图：用一个代表空的对象代替<code>null</code>，空对象相对于<code>null</code>可以拥有默认的行为。</p><p>实现：<br>创建一个对象接口，有<code>isNil</code>和相应操作的方法<br>创建一个空对象，并实现<code>isNil</code>方法，用于判断当前方法是否为空。并赋予默认方法，例如输出当前为空<br>创建非空对象，实现<code>isNil</code>方法，并实现操作方法，如输出非空<br>然后就可以使用了，比如从集合中取出非空元素并执行。<br>-》 遍历集合，判断是否为空，并执行默认方法</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium</title>
      <link href="/2022/03/20/selenium/"/>
      <url>/2022/03/20/selenium/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2483,阅读全文大约需要9分钟</p><blockquote><p><code>selenium</code>是一款<code>Headless Browser</code>无头浏览器。没有图形化用户界面，通常使用编程或者命令行的方式进行控制。整理自<a href="https://www.jianshu.com/p/20526e2ac3b1" target="_blank" rel="noopener">原文</a></p></blockquote><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ol><li><p><code>ChromeDriver</code>: <code>chrome</code>浏览器驱动，下载和浏览器对应的驱动并放到<code>Google\Chrome\Application\</code>目录下。<br>或者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, <span class="string">"/Applications/Google Chrome.app/Contents/MacOS/chromedriver"</span>);</span><br></pre></td></tr></table></figure></li><li><p>依赖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.seleniumhq.selenium&lt;&#x2F;groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;selenium-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">        &lt;version&gt;...&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置环境变量</p></li></ol><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><p>前置设置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//设置google浏览器选项</span></span><br><span class="line">ChromeOptions chromeOptions = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line"><span class="comment">//指定浏览器全屏</span></span><br><span class="line">chromeOptions.addArguments(<span class="string">"--start-fullscreen"</span>);</span><br></pre></td></tr></table></figure></li><li><p>操作封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jna.platform.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.*;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.chrome.ChromeDriver;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.interactions.Actions;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.ExpectedCondition;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.Select;</span><br><span class="line"><span class="keyword">import</span> org.openqa.selenium.support.ui.WebDriverWait;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by moooke on 2017/8/21.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloSelenium</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        WebDriver driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">        driver.get(<span class="string">"http://www.baidu.com/"</span>);</span><br><span class="line"></span><br><span class="line">        String title = driver.getTitle();</span><br><span class="line">        System.out.println(title);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("改变浏览器窗口大小");</span></span><br><span class="line"><span class="comment">//        Borwser(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("浏览器前进后退");</span></span><br><span class="line"><span class="comment">//        BrowserGo(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("浏览器元素操作");</span></span><br><span class="line"><span class="comment">//        BrowserOperation(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("模拟鼠标操作");</span></span><br><span class="line"><span class="comment">//        MouseOperation(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("模拟键盘操作");</span></span><br><span class="line"><span class="comment">//        KeyBoardOperation(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("获取断言信息");</span></span><br><span class="line"><span class="comment">//        Assert(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("设置元素等待");</span></span><br><span class="line"><span class="comment">//        ElementWait(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("定位一组元素");</span></span><br><span class="line"><span class="comment">//        ElementsPositioning(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("多表单切换");</span></span><br><span class="line"><span class="comment">//        SwitchTable(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("多窗口切换");</span></span><br><span class="line"><span class="comment">//        WindowsSwitch(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("下拉框选择");</span></span><br><span class="line"><span class="comment">//        SelectWindow(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("警告框处理");</span></span><br><span class="line"><span class="comment">//        AlertDemo(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("文件上传");</span></span><br><span class="line"><span class="comment">//        FileUpload(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("浏览器Cookie操作");</span></span><br><span class="line"><span class="comment">//        BorwserCookie(driver);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        System.out.println("执行JavaScript代码");</span></span><br><span class="line"><span class="comment">//        JavaScript(driver);</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"获取窗口截图"</span>);</span><br><span class="line">        ScreenShot(driver);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//改变窗口大小</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Borwser</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver1;</span><br><span class="line">        driver1 = driver;</span><br><span class="line"></span><br><span class="line">        driver1.manage().window().maximize();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        driver1.get("https://m.baidu.cn");</span></span><br><span class="line">        driver1.manage().window().setSize(<span class="keyword">new</span> Dimension(<span class="number">1200</span>,<span class="number">720</span>));</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        driver1.quit();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//前进后退</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BrowserGo</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver2;</span><br><span class="line">        driver2 = driver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//看看链接地址</span></span><br><span class="line">        System.out.printf(<span class="string">"now accesss %s \n"</span>, driver.getCurrentUrl());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点击新闻链接</span></span><br><span class="line">        driver2.findElement(By.linkText(<span class="string">"新闻"</span>)).click();</span><br><span class="line">        System.out.printf(<span class="string">"now accesss %s \n"</span>, driver.getCurrentUrl());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//试试浏览器后退</span></span><br><span class="line">        driver2.navigate().back();</span><br><span class="line">        System.out.printf(<span class="string">"back to %s \n"</span>, driver2.getCurrentUrl());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//试试浏览器往前</span></span><br><span class="line">        driver2.navigate().forward();</span><br><span class="line">        System.out.printf(<span class="string">"forward to %s \n"</span>, driver2.getCurrentUrl());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//试试浏览器刷新</span></span><br><span class="line">        driver2.navigate().refresh();</span><br><span class="line">        System.out.printf(<span class="string">"refresh broswer"</span>, driver2.getCurrentUrl());</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        driver2.quit();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览器元素操作</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BrowserOperation</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver3;</span><br><span class="line">        driver3 = driver;</span><br><span class="line"></span><br><span class="line">        WebElement search_text = driver3.findElement(By.id(<span class="string">"kw"</span>));</span><br><span class="line">        WebElement search_button = driver3.findElement(By.id(<span class="string">"su"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// clear() 清除文本 | sendKeys(*value) 模拟按键输入</span></span><br><span class="line">        search_text.sendKeys(<span class="string">"试一下输入"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        search_text.clear();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        search_text.sendKeys(<span class="string">"Selenium"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        search_button.click();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//sendKeys()方法模拟键盘向输入框里输入内容。我们还可以用它发送键盘按键，甚至用它来指定上传的文件。</span></span><br><span class="line"></span><br><span class="line">        driver3.navigate().back();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//搜索到内容以后我回到百度首页，这时候要重新定位元素，不然会报错</span></span><br><span class="line">        WebElement search_text2 = driver3.findElement(By.id(<span class="string">"kw"</span>));</span><br><span class="line">        WebElement search_button2 = driver3.findElement(By.id(<span class="string">"su"</span>));</span><br><span class="line"></span><br><span class="line">        search_text2.sendKeys(<span class="string">"Java"</span>);</span><br><span class="line">        search_text2.submit();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        search_text2.submit();</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//submit()方法用于提交表单。例如，在搜索框输入关键字之后的“回车” 操作，就可以通过 submit()方法模拟.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getSize()</span></span><br><span class="line">        <span class="comment">//getText()</span></span><br><span class="line">        <span class="comment">//getAttribute(name) 获取属性值</span></span><br><span class="line">        <span class="comment">//isDisplayed() 设置元素是否用户可见</span></span><br><span class="line">        System.out.println(<span class="string">"输入框尺寸："</span> + search_text2.getSize());</span><br><span class="line">        System.out.println(<span class="string">"提交按钮尺寸："</span> + search_button2.getSize());</span><br><span class="line">        System.out.println(<span class="string">"提交按钮文本："</span> + search_button2.getText());</span><br><span class="line">        System.out.println(<span class="string">"输入框id："</span> + search_text2.getAttribute(<span class="string">"id"</span>) +</span><br><span class="line">                <span class="string">"     输入框Type："</span> + search_text2.getAttribute(<span class="string">"Type"</span>));</span><br><span class="line">        System.out.println(<span class="string">"输入框是否可见："</span> + search_text2.isDisplayed());</span><br><span class="line"></span><br><span class="line">        driver3.quit();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//鼠标操作</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在WebDriver中，这些关于鼠标操作的方法封装在ActionChains类中：</span></span><br><span class="line"><span class="comment">     * ⬇️⬇⬇️</span></span><br><span class="line"><span class="comment">     * contextClick() 右击</span></span><br><span class="line"><span class="comment">     * clickAndHold() 鼠标点击并控制</span></span><br><span class="line"><span class="comment">     * doubleClick() 双击</span></span><br><span class="line"><span class="comment">     * dragAndDrop() 拖动</span></span><br><span class="line"><span class="comment">     * release() 释放鼠标</span></span><br><span class="line"><span class="comment">     * perform() 执行所有Actions中存储的行为,可以理解成是对整个操作的提交动作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">MouseOperation</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver4;</span><br><span class="line">        driver4 = driver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到百度首页设置按钮，并悬停在按钮上</span></span><br><span class="line">        WebElement search_setting = driver4.findElement(By.linkText(<span class="string">"设置"</span>));</span><br><span class="line">        Actions action = <span class="keyword">new</span> Actions(driver4);</span><br><span class="line">        action.clickAndHold(search_setting).perform();</span><br><span class="line">        Thread.sleep(<span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        //鼠标右键点击指定元素</span></span><br><span class="line"><span class="comment">//        action.contextClick(driver4.findElement(By.id("kw"))).perform();</span></span><br><span class="line"><span class="comment">//        action.click(driver4.findElement(By.id("kw"))).perform();</span></span><br><span class="line"><span class="comment">//        Thread.sleep(2000);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//鼠标双击指定的元素</span></span><br><span class="line">        action.doubleClick(driver4.findElement(By.id(<span class="string">"su"</span>))).perform();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//鼠标拖拽动作，将 search_setting 元素拖放到 search_text 元素的位置</span></span><br><span class="line">        WebElement search_text = driver4.findElement(By.id(<span class="string">"kw"</span>));</span><br><span class="line">        WebElement search_setting2 = driver4.findElement(By.linkText(<span class="string">"设置"</span>));</span><br><span class="line">        action.dragAndDrop(search_setting2, search_text).perform();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放鼠标</span></span><br><span class="line">        action.release().perform();</span><br><span class="line"></span><br><span class="line">        driver4.quit();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//PS：这里我发现 search_setting 被操作以后如果我在后面的 dragAndDrop 中直接</span></span><br><span class="line">        <span class="comment">//    使用 search_setting 会报错，但是我重新建立一个对象就不会报错 -..-</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//键盘操作</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以模拟键盘按键</span></span><br><span class="line"><span class="comment">     * 以及组合键,例如 Ctrl+A、 Ctrl+C 等</span></span><br><span class="line"><span class="comment">     * 键盘操作都放在 org.openqa.selenium.Keys 里</span></span><br><span class="line"><span class="comment">     * ⬇️⬇⬇️</span></span><br><span class="line"><span class="comment">     * (Keys.BACK_SPACE) 回格键</span></span><br><span class="line"><span class="comment">     * (Keys.SPACE) 空格键(Space)</span></span><br><span class="line"><span class="comment">     * (Keys.TAB) 制表键(Tab)</span></span><br><span class="line"><span class="comment">     * (Keys.ESCAPE) 回退键（Esc）</span></span><br><span class="line"><span class="comment">     * (Keys.ENTER) 回车键（Enter）</span></span><br><span class="line"><span class="comment">     * (Keys.F1) 键盘 F1</span></span><br><span class="line"><span class="comment">     * ...</span></span><br><span class="line"><span class="comment">     * (Keys.F12) 键盘 F12</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">KeyBoardOperation</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver5;</span><br><span class="line">        driver5 = driver;</span><br><span class="line"></span><br><span class="line">        WebElement input = driver5.findElement(By.id(<span class="string">"kw"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入下准备数据</span></span><br><span class="line">        input.sendKeys(<span class="string">"Seleniumm"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//按下删除键,删除一个 "m"</span></span><br><span class="line">        input.sendKeys(Keys.BACK_SPACE);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输入空格键</span></span><br><span class="line">        input.sendKeys(Keys.SPACE);</span><br><span class="line">        input.sendKeys(<span class="string">" + Java"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟 Ctrl + a ,全选</span></span><br><span class="line">        input.sendKeys(Keys.CONTROL, <span class="string">"a"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟 Ctrl + x ,剪切</span></span><br><span class="line">        input.sendKeys(Keys.CONTROL, <span class="string">"x"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟 Ctrl + v ,粘贴</span></span><br><span class="line">        input.sendKeys(Keys.CONTROL, <span class="string">"v"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//模拟回车键</span></span><br><span class="line">        input.sendKeys(Keys.ENTER);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        driver5.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Assert</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver6;</span><br><span class="line">        driver6 = driver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前的 title 和 url</span></span><br><span class="line">        System.out.printf(<span class="string">"title of current page is %s\n"</span>, driver6.getTitle());</span><br><span class="line">        System.out.printf(<span class="string">"url of current page is %s\n"</span>, driver6.getCurrentUrl());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//百度搜索</span></span><br><span class="line">        WebElement search = driver6.findElement(By.id(<span class="string">"kw"</span>));</span><br><span class="line">        search.sendKeys(<span class="string">"Selenium"</span>);</span><br><span class="line">        search.sendKeys(Keys.ENTER);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"======== After search ========"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前的 title 和 url 看看</span></span><br><span class="line">        System.out.printf(<span class="string">"title of current page is %s\n"</span>, driver6.getTitle());</span><br><span class="line">        System.out.printf(<span class="string">"url of current page is %s\n"</span>, driver6.getCurrentUrl());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取第一条搜索结果的标题</span></span><br><span class="line">        WebElement result = driver6.findElement(By.xpath(<span class="string">"//*[@id=\"1\"]/h3/a"</span>));</span><br><span class="line">        System.out.println(result.getText());</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        driver6.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置页面元素等待</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ElementWait</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver7;</span><br><span class="line">        driver7 = driver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//显示等待，针对某个元素</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * WebDriverWait(driver, 10, 1)</span></span><br><span class="line"><span class="comment">         * driver： 浏览器驱动。 10： 最长超时时间， 默认以秒为单位。 1： 检测的的间隔（步长） 时间， 默认为 0.5s</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        WebDriverWait wait = <span class="keyword">new</span> WebDriverWait(driver7, <span class="number">10</span>,<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        wait.until(<span class="keyword">new</span> ExpectedCondition&lt;WebElement&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> WebElement <span class="title">apply</span><span class="params">(WebDriver webDriver)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> webDriver.findElement(By.id(<span class="string">"kw"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).sendKeys(<span class="string">"Selenium"</span>);</span><br><span class="line"></span><br><span class="line">        driver7.findElement(By.id(<span class="string">"su"</span>)).click();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        driver7.quit();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//隐式等待</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * WebDriver提供的几种方法</span></span><br><span class="line"><span class="comment">         * 1. implicitlyWait (识别对象时的超时时间,过了这个时间如果对象还没找到的话就会抛出NoSuchElement异常)</span></span><br><span class="line"><span class="comment">         * 2. setScriptTimeout (异步脚本的超时时间,WebDriver可以异步执行脚本，这个是设置异步执行脚本脚本返回结果的超时时间)</span></span><br><span class="line"><span class="comment">         * 3. pageLoadTimeout (页面加载时的超时时间,因为WebDriver会等页面加载完毕再进行后面的操作,所以如果页面超过设置时间依然没有加载完成,那么WebDriver就会抛出异常)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//页面加载超时时间设置为 5s</span></span><br><span class="line">        driver7.manage().timeouts().pageLoadTimeout(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">        driver7.get(<span class="string">"https://www.baidu.com/"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//每一个隐式等待都只对下一个对应的 driver 操作有效</span></span><br><span class="line">        driver7.manage().timeouts().pageLoadTimeout(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">        driver7.get(<span class="string">"https://www.google.com"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定位对象给定 3s 的时间,如果 3s 内没有定位到则抛出异常</span></span><br><span class="line">        driver7.manage().timeouts().implicitlyWait(<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        driver7.findElement(By.id(<span class="string">"kw"</span>)).sendKeys(<span class="string">"selenium"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//异步脚本的超时时间设置为 3s</span></span><br><span class="line">        driver7.manage().timeouts().setScriptTimeout(<span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line">        driver7.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定位『一组』元素</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定位一组元素其实就类似于定位元素,只不过用的方法是 findElements ,多一个 "s"</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ElementsPositioning</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver8;</span><br><span class="line">        driver8 = driver;</span><br><span class="line"></span><br><span class="line">        WebElement search_text = driver8.findElement(By.id(<span class="string">"kw"</span>));</span><br><span class="line">        search_text.sendKeys(<span class="string">"Selenium"</span>);</span><br><span class="line">        search_text.submit();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 通过 xpath ,我们找到匹配到的第一页搜索结果 循环打印</span></span><br><span class="line"><span class="comment">         * 这里打印的是第一页搜索的搜索结果，因为搜索结果展示都可以通过 //div/div/h3 定位到</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;WebElement&gt; search_result = driver8.findElements(By.xpath(<span class="string">"//div/div/h3"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印元素的个数</span></span><br><span class="line">        System.out.println(search_result.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环打印搜索结果的标题</span></span><br><span class="line">        <span class="keyword">for</span> (WebElement result : search_result)&#123;</span><br><span class="line">            System.out.println(result.getText());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------- *..* --------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打印第 n 结果的标题</span></span><br><span class="line">        WebElement text = search_result.get(search_result.size() - <span class="number">10</span>);</span><br><span class="line">        System.out.println(text.getText());</span><br><span class="line"></span><br><span class="line">        driver8.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//多表单切换</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebDriver 只能在一个页面上对元素识别与定位,但是对于 frame/iframe 表单内嵌页面上的元素无法直接定位</span></span><br><span class="line"><span class="comment">     * 这时就需要通过 switchTo().frame()方法将当前定 位的主体切换为 frame/iframe 表单的内嵌页面中</span></span><br><span class="line"><span class="comment">     * iframe 基本已经被h5淘汰,不过我们还是要了解一下,以126邮箱登录为例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SwitchTable</span><span class="params">(WebDriver driver)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver9;</span><br><span class="line">        driver9 = driver;</span><br><span class="line"></span><br><span class="line">        driver9.get(<span class="string">"http://www.126.com"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里等待 5s ,因为 iframe 的创建比其它包括 scripts 和 css 的 DOM 元素的创建要慢 1-2 个数量级</span></span><br><span class="line">        driver9.manage().timeouts().implicitlyWait(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">        WebElement frame = driver9.findElement(By.xpath(<span class="string">"//*[@id='loginDiv']/iframe"</span>));</span><br><span class="line">        driver9.switchTo().frame(frame);    <span class="comment">//switchTo 还可以切换到弹出框等</span></span><br><span class="line"></span><br><span class="line">        driver.findElement(By.name(<span class="string">"email"</span>)).clear();</span><br><span class="line">        driver.findElement(By.name(<span class="string">"email"</span>)).sendKeys(<span class="string">"username"</span>);</span><br><span class="line">        driver.findElement(By.name(<span class="string">"password"</span>)).clear();</span><br><span class="line">        driver.findElement(By.name(<span class="string">"password"</span>)).sendKeys(<span class="string">"password"</span>);</span><br><span class="line">        driver.findElement(By.id(<span class="string">"dologin"</span>)).click();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//切换回默认页面</span></span><br><span class="line">        driver.switchTo().defaultContent();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//多窗口切换</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * getWindowHandle()： 获得当前窗口句柄</span></span><br><span class="line"><span class="comment">     * getWindowHandles()： 返回的所有窗口的句柄到当前会话</span></span><br><span class="line"><span class="comment">     * switchTo().window()： 用于切换到相应的窗口,与上面的switchTo().frame()类似</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">WindowsSwitch</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver10;</span><br><span class="line">        driver10 = driver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得当前窗口句柄</span></span><br><span class="line">        String search_handle = driver10.getWindowHandle();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开百度注册窗口</span></span><br><span class="line">        driver10.findElement(By.linkText(<span class="string">"登录"</span>)).click();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        driver10.findElement(By.linkText(<span class="string">"立即注册"</span>)).click();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得当前窗口的句柄</span></span><br><span class="line">        String search_handle_register = driver10.getWindowHandle();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有窗口句柄</span></span><br><span class="line">        Set&lt;String&gt; handles = driver10.getWindowHandles();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否为注册窗口， 并操作注册窗口上的元素</span></span><br><span class="line">        <span class="keyword">for</span> (String handle : handles)&#123;</span><br><span class="line">            <span class="keyword">if</span> (handle.equals(search_handle_register) == <span class="keyword">false</span>)&#123;</span><br><span class="line">                driver10.switchTo().window(handle);</span><br><span class="line">                System.out.println(<span class="string">"现在在注册页面"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                driver10.findElement(By.name(<span class="string">"userName"</span>)).clear();</span><br><span class="line">                driver.findElement(By.name(<span class="string">"userName"</span>)).sendKeys(<span class="string">"用户名"</span>);</span><br><span class="line">                driver.findElement(By.name(<span class="string">"phone"</span>)).clear();</span><br><span class="line">                driver.findElement(By.name(<span class="string">"phone"</span>)).sendKeys(<span class="string">"电话号码"</span>);</span><br><span class="line">                <span class="comment">//......</span></span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="comment">//关闭当前窗口</span></span><br><span class="line">                driver10.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        driver10.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//下拉框选择</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebDriver提供了 Select 类来处理下拉框</span></span><br><span class="line"><span class="comment">     * Select类用于定位&lt;select&gt;标签。selectByValue()方法符用于选取&lt;option&gt;标签的value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SelectWindow</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver11;</span><br><span class="line">        driver11 = driver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以百度搜索设置页面的下拉框为例</span></span><br><span class="line">        driver11.findElement(By.linkText(<span class="string">"设置"</span>)).click();</span><br><span class="line">        driver11.findElement(By.linkText(<span class="string">"搜索设置"</span>)).click();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//&lt;select&gt;标签的下拉框选择</span></span><br><span class="line">        WebElement el = driver11.findElement(By.xpath(<span class="string">"//select"</span>));</span><br><span class="line">        Select sel = <span class="keyword">new</span> Select(el);</span><br><span class="line">        sel.selectByValue(<span class="string">"20"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        driver11.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//警告框处理</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在WebDriver中处理JavaScript所生成的alert、confirm以及prompt</span></span><br><span class="line"><span class="comment">     * 1. 使用switchTo().alert()方法定位到alert/confirm/prompt</span></span><br><span class="line"><span class="comment">     * 2. 使用text/accept/dismiss/sendKeys等方法进行操作</span></span><br><span class="line"><span class="comment">     * -----------------------------------------------</span></span><br><span class="line"><span class="comment">     * getText()： 返回 alert/confirm/prompt 中的文字信息</span></span><br><span class="line"><span class="comment">     * accept()： 接受现有警告框</span></span><br><span class="line"><span class="comment">     * dismiss()： 解散现有警告框</span></span><br><span class="line"><span class="comment">     * sendKeys(keysToSend)： 发送文本至警告框</span></span><br><span class="line"><span class="comment">     * keysToSend： 将文本发送至警告框</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AlertDemo</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver12;</span><br><span class="line">        driver12 = driver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//类似百度设置的弹出框是不能通过前端工具对其进行定位的，这时候就要用到switchTo().alert()了</span></span><br><span class="line">        driver.findElement(By.linkText(<span class="string">"设置"</span>)).click();</span><br><span class="line">        driver.findElement(By.linkText(<span class="string">"搜索设置"</span>)).click();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//点击保存设置</span></span><br><span class="line">        driver12.findElement(By.linkText(<span class="string">"保存设置"</span>)).click();</span><br><span class="line"></span><br><span class="line">        System.out.println(driver12.switchTo().alert().getText());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收弹框</span></span><br><span class="line">        driver12.switchTo().alert().accept();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        driver12.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件上传 *</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于通过input标签实现的上传功能,可以将其看作是一个输入框,可通过sendKeys()指定本地文件路径的方式实现文件上传</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">FileUpload</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver13;</span><br><span class="line">        driver13 = driver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到绝对路径</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">" ./xxx(路径)/xxx(路径)/文件"</span>);</span><br><span class="line">        String filePath = file.getAbsolutePath();</span><br><span class="line">        driver13.get(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定位上传按钮,添加本地文件</span></span><br><span class="line">        driver13.findElement(By.name(<span class="string">"file"</span>)).sendKeys(<span class="string">"E:\\\\upload_file.txt"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        driver13.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//浏览器Cookie操作</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebDriver操作Cookie相关方法</span></span><br><span class="line"><span class="comment">     * getCookies(): 获得所有cookie信息</span></span><br><span class="line"><span class="comment">     * getCookieNamed(String name): 返回字典的key为"name"的Cookie信息</span></span><br><span class="line"><span class="comment">     * addCookie(cookie dict): 添加Cookie, "cookie dict"指字典对象,必须有 name和 value值</span></span><br><span class="line"><span class="comment">     * deleteCookieNamed(String name): 删除Cookie信息, "name"是要删除的 cookie的名称; "optionsString"是该Cookie 的选项, 目前支持"路径"、"域"</span></span><br><span class="line"><span class="comment">     * deleteAllCookies(): 删除所有的cookie 信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">BorwserCookie</span><span class="params">(WebDriver driver)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver14;</span><br><span class="line">        driver14 = driver;</span><br><span class="line"></span><br><span class="line">        Cookie cookie1 = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>, <span class="string">"key-aaaaa"</span>);</span><br><span class="line">        Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">"value"</span>, <span class="string">"value-bbbbb"</span>);</span><br><span class="line">        driver14.manage().addCookie(cookie1);</span><br><span class="line">        driver14.manage().addCookie(cookie2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得 Cookie</span></span><br><span class="line">        Set&lt;Cookie&gt; cookies = driver14.manage().getCookies();</span><br><span class="line">        System.out.println(cookies);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除所有 cookie</span></span><br><span class="line">        <span class="comment">//driver.manage().deleteAllCookies();</span></span><br><span class="line">        driver14.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用JavaScript代码</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebDriver提供了 executeScript()方法来执行 JavaScript代码</span></span><br><span class="line"><span class="comment">     * 以调整浏览器滚动条位置为例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">JavaScript</span><span class="params">(WebDriver driver)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver15;</span><br><span class="line">        driver15 = driver;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置浏览器窗口大小</span></span><br><span class="line">        driver15.manage().window().setSize(<span class="keyword">new</span> Dimension(<span class="number">700</span>, <span class="number">600</span>));</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//百度搜索</span></span><br><span class="line">        driver15.findElement(By.id(<span class="string">"kw"</span>)).sendKeys(<span class="string">"Selenium"</span>);</span><br><span class="line">        driver15.findElement(By.id(<span class="string">"su"</span>)).click();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将页面滚动条拖动</span></span><br><span class="line">        ((JavascriptExecutor)driver15).executeScript(<span class="string">"window.scrollTo(100,410)"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        ((JavascriptExecutor)driver15).executeScript(<span class="string">"window.scrollTo(100,420)"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        ((JavascriptExecutor)driver15).executeScript(<span class="string">"window.scrollTo(100,430)"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        ((JavascriptExecutor)driver15).executeScript(<span class="string">"window.scrollTo(100,440)"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line">        ((JavascriptExecutor)driver15).executeScript(<span class="string">"window.scrollTo(100,450)"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        driver15.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//窗口截图</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ScreenShot</span><span class="params">(WebDriver driver)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        WebDriver driver16;</span><br><span class="line">        driver16 = driver;</span><br><span class="line"></span><br><span class="line">        File srcFile = ((TakesScreenshot)driver16).getScreenshotAs(OutputType.FILE);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            org.apache.commons.io.FileUtils.copyFile(srcFile, <span class="keyword">new</span> File(<span class="string">"/Users/moooke/screenshot.png"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        driver16.quit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper</title>
      <link href="/2022/03/20/zookeeper/"/>
      <url>/2022/03/20/zookeeper/</url>
      
        <content type="html"><![CDATA[<p>文章字数：3504,阅读全文大约需要14分钟</p><h1 id="分布式特点"><a href="#分布式特点" class="headerlink" title="分布式特点"></a>分布式特点</h1><ol><li>分布性，硬件或软件组件分布在不同网络机器上，彼此间仅仅通过消息传递进行通信和协调的系统</li><li>对等性，服务冗余，微服务有多个副本，彼此直接完全一样</li><li>并发性，</li><li>缺乏全局时钟，每个节点都有自己的本地时间（使用共同的时间服务器解决）</li><li>故障随时发生</li></ol><h1 id="分布式系统问题"><a href="#分布式系统问题" class="headerlink" title="分布式系统问题"></a>分布式系统问题</h1><ol><li>通讯异常， 节点间网络异常，会导致脑裂。（多个master）</li><li>网络分区</li><li>三态，正确、错误、超时三种状态。</li><li>节点故障</li></ol><h1 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h1><p>C 一致性，数据在多个副本中一致（强一致性只能将数据放在一个节点上）<br>A 可用， 请求总能得到返回<br>P 分区容错性（冗余数据），除非整个网络故障，分布式系统在任何网络或节点故障时，仍然能满足一致性(最终一致)和可用的服务</p><p>AC，放弃P|数据放在一个节点上，充分保证了一致性和系统可用性，放弃拓展性（P）。放弃分区一致性就不是分布式了<br>PC，放弃A|当节点故障或网络故障时，受到影响的服务需要等一定时间，等待时间内无法提供服务。一般不会这么做<br>AP，放弃C|无法保证实时一致，承诺最终一致。</p><h1 id="BASE"><a href="#BASE" class="headerlink" title="BASE"></a>BASE</h1><p>即使无法做到强一致性，但分布式系统可以根据业务特点，采用适当方式达到最终一致性</p><ul><li><code>Basically Avaliable</code>基本可用，当分布式系统出现不可预见故障时，允许损失部分可用性，保障系统基本可用。例如双十一高峰，部分用户会出现页面卡顿或降级处理(换成功能没这么强的服务·)。</li><li><code>Soft state</code>软状态，允许系统中的数据存在中间状态，即系统的不同节点数据副本间数据同步存在延时，并认为延时不影响系统可用性。例如买票的正在抢票</li><li><code>Eventually consistent</code>最终一致，所有数据经过一段时间的数据同步，最终达到一个一致状态。</li></ul><h1 id="分布式一致性算法"><a href="#分布式一致性算法" class="headerlink" title="分布式一致性算法"></a>分布式一致性算法</h1><table><thead><tr><th>算法</th><th>说明</th></tr></thead><tbody><tr><td>2p</td><td>两段提交，数据库分布式事务常用。算法简单，容易出现阻塞。某些情况下不一致</td></tr><tr><td>3p</td><td>对于2p的改进，三段提交，完善了阻塞以及可用性。2p,3p都属于强一致性算法。</td></tr><tr><td>paxos算法</td><td>两个阶段，少数服从多数。并不需要所有参与者都同一某一协议</td></tr><tr><td>zab</td><td>借鉴paxos思路，zookeeper解决分布式一致性的算法</td></tr></tbody></table><h1 id="zookeeper"><a href="#zookeeper" class="headerlink" title="zookeeper"></a>zookeeper</h1><p>高性能，高可用，严格顺序访问控制能力的分布式协调服务。是hadoop和Hbase重要组件</p><ul><li>简单数据结构，共享的树形结构，类似文件系统，存储与内存</li><li>可构建集群，避免单点故障，3-5台机器就可用组成集群，超过半数正常工作就能对外提供服务</li><li>顺序访问，每个写请求，zk会分配一个全局唯一的递增编号，利用这个特性可用实现高级协调服务</li><li>高性能，基于内存操作，服务于非事务请求，适用于读操作为主的业务请求。3台kz集群能达到13w QPS</li></ul><p>使用场景</p><ol><li>发布订阅</li><li>负载均衡（客户端负载均衡）</li><li>命名服务，注册中心</li><li>Master选举</li><li>集群管理，检测集群节点是否健康</li><li>配置管理，配置中心</li><li>分布式队列</li><li>分布式锁</li></ol><h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><table><thead><tr><th>序号</th><th>参数名</th><th>说明</th></tr></thead><tbody><tr><td>7</td><td><code>snapCount</code></td><td>设置多少次事务日志输出后，触发一次快照(snapshot)，此时ZK会生产一个<code>snapshot.*</code>文件，同时创建一个新的事务日志文件<code>log.*</code>,默认100000，真实实现会增加一定的随机数，避免所有服务器同一时间快照影响性能</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h1 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h1><ul><li><p><code>create /aaa val</code>创建节点<code>aaa</code>并赋予值<code>val</code>。节点必须有值，否则不能创建</p></li><li><p><code>zk</code>视图结构和标准<code>unix</code>文件系统类似，从<code>/</code>根节点出发。</p></li><li><p>节点成为<code>ZNode</code>,每个节点可存储数据，也可以挂载子节点。因此可以成为树</p></li><li><p>节点类型(不同类型节点名也不能重复)</p></li></ul><ol><li>持久节点，和客户端连接，断开后数据还在（<code>ZNode</code>）</li><li>临时节点，和客户端断开后，数据不在</li><li>顺序节点，临时节点和持久节点都能创建顺序节点，每次创建节点名都会自动递增(名字+自动生成的序列)</li></ol><p>节点状态属性</p><table><thead><tr><th>序号</th><th>属性</th><th>数据结构</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td><code>czxid</code></td><td><code>long</code></td><td>节点被创建的<code>Zxid</code>值</td></tr><tr><td>2</td><td><code>mzxid</code></td><td><code>long</code></td><td>节点被修改的<code>Zxid</code>值</td></tr><tr><td>3</td><td><code>paxid</code></td><td><code>long</code></td><td>节点最后一次被修改时的事务ID</td></tr><tr><td>4</td><td><code>ctime</code></td><td><code>long</code></td><td>节点被创建的时间</td></tr><tr><td>5</td><td><code>mtime</code></td><td><code>long</code></td><td>节点最后一次被修改时间</td></tr><tr><td>6</td><td><code>dataVersoin</code></td><td><code>long</code></td><td>节点被修改的版本号(每次修改+1)(<code>CAS</code>保证分布式数据原子性)</td></tr><tr><td>7</td><td><code>cversion</code></td><td><code>long</code></td><td>节点所拥有子节点被修改的版本号</td></tr><tr><td>8</td><td><code>aversion</code></td><td><code>long</code></td><td>节点的<code>ACL</code>被修改的版本号</td></tr><tr><td>9</td><td><code>emphemeralOwner</code></td><td><code>long</code></td><td>如果此阶段为临时节点，这个值就是节点拥有者会话ID,否则0</td></tr><tr><td>10</td><td><code>dataLength</code></td><td><code>long</code></td><td>节点数据域长度</td></tr><tr><td></td><td><code>umChildren</code></td><td><code>long</code></td><td>节点拥有的子节点个数</td></tr></tbody></table><h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><ul><li><p><code>getAcl /xxx</code>查看xxx的权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">'world',anyone</span><br><span class="line">:cdrwa</span><br></pre></td></tr></table></figure></li><li><p><code>scheme</code>授权机制,  <code>id</code>用户id给谁授权,  <code>permissions</code>权限，只读、读写、管理等。</p><ul><li>create(c)</li><li>delete(d)</li><li>read(r)</li><li>write(w)</li><li>admin(a) 是否能给子节点设置权限</li></ul><p>机制有</p></li><li><p><code>world</code>，下面只有一个<code>id</code>,叫<code>anyone</code>, <code>world:anyone</code>代表任何人，<code>ZK</code>中对搜有人有权限的节点就是属于<code>world:anyone</code>的</p></li><li><p><code>auth</code>, 它不需要<code>id</code>, 只需要通过<code>authentication</code>的<code>user</code>都有权限。<code>ZK</code>支持通过<code>kerberos</code>来进行<code>authencation</code>，也支持<code>username/password</code>形式的<code>authentication</code>（明文）</p></li><li><p><code>digest</code>, 通过对应的id为<code>username:BASE64(SHA1(password))</code>, 它需要先通过<code>username:password</code>形式的<code>authentication</code>（密文）</p></li><li><p><code>ip</code>, 它对应的<code>id</code>为客户机的<code>IP</code>地址，设置的时候可以设置一个<code>ip</code>段，比如<code>ip:192.168.1.0/16</code>,表示匹配<code>16</code>个<code>bit</code>的<code>IP</code>段</p></li></ul><p>常用<code>ACL</code>命令</p><ul><li><p><code>getAcl</code>获取指定节点的<code>ACL</code>信息</p></li><li><p><code>setAcl</code>设置指定节点的<code>ACL</code>信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addauth digest username:pwd # 添加用户(会话级别的，退出需要重新操作)</span><br><span class="line">setAcl /xxx/zzz auth:username:pwd:crwa #给用户添加 auth机制的crwa权限</span><br><span class="line">setAcl /xxx/zzz digest:username:xxxxmd5:crwa #digest机制的权限添加，密文生产在zookeeper自带的java类 DigestAuthenticationProvider里</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>addauth</code>注册绘画授权信息</p></li><li><p>注册超级管理员用户可以解决没有权限不能删除的问题</p></li></ul><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><ol><li><code>zkCli.sh -server ip</code>连接<code>ZooKeeper</code>服务，连接成功后系统会输出相关环境及配置</li><li>基本操作<ul><li>显示根目录下、文件：<code>ls /</code> 查看当前<code>ZooKeeper</code>包含的内容</li><li>显示根目录下、文件：<code>ls2 /</code>查看当前节点数据并能看到更新次数等数据</li><li>创建文件，并设置初始内容。<code>create /zk &quot;val&quot;</code> 创建一个新的<code>znode</code>节点<code>zk</code> ，以及初始化内容 <code>-e 临时节点</code>(客户端端口就删除)   <code>-s 顺序节点</code>(名字自增)</li><li>获取内容<code>get /zk</code> 确认<code>znode</code>是否包含我们所创建的字符串</li><li>修改<code>set /zk &quot;val2&quot;</code>修改节点内容</li><li>删除<code>delete /zk</code>将指定<code>znode</code>删除，如果有子节点，删除失败</li><li>递归删除<code>rmr /zk</code>删除节点及子节点</li><li>退出<code>quit</code> </li></ul></li></ol><h1 id="四字命令"><a href="#四字命令" class="headerlink" title="四字命令"></a>四字命令</h1><blockquote><p><code>zk</code>支持使用某些特点四字的命令交互获取服务当前状态，可通过<code>telnet</code>或<code>nc</code>提交命令</p></blockquote><ol><li><code>echo stat|nc ip port</code>查看那个节点被选择作为<code>follower</code>或者<code>leader</code></li><li>使用<code>echo ruok|nc ip port</code>测试是否启动了该<code>server</code>若回复<code>imok</code>表示已经启动</li><li><code>echo dump|nc ip port</code>列出未经处理的会话和临时节点</li><li><code>echo kill |nc ip port</code>关闭server</li><li><code>echo conf | nc ip port</code>输出相关服务配置的详细信息</li><li><code>echo cons | nc ip port</code>列出所有连接到服务器的客户端完全的连接/会话的详细信息</li><li><code>echo envi|nc ip port</code>输出关于服务环境的详细信息</li><li><code>echo reqs|nc ip port</code>列出未经处理的请求</li><li><code>echo wchs|nc ip port</code>列出服务器<code>watch</code>的详细信息</li><li><code>echo wchc|nc ip port</code>通过<code>session</code>列出服务器的<code>watch</code>详细信息，输出的是一个与<code>watch</code>相关会话的列表</li><li><code>echo wchp|nc ip port</code>通过路径列出服务器的<code>watch</code>的详细信息，输出的是与<code>session</code>相关的路径</li></ol><h1 id="可视化"><a href="#可视化" class="headerlink" title="可视化"></a>可视化</h1><ol><li><p>事务日志可视化<code>LogFormatter</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ..&#x2F;..&#x2F;zookeeper-3.4.5.jar;..&#x2F;..&#x2F;lib&#x2F;slf4j-api-1.6.1.jar org.apache.zookeeper.server.logFormatter log.xxx</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>数据快照可视化<code>SnapshotFormatter</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp ..&#x2F;..&#x2F;zookeeper-3.4.5.jar;..&#x2F;..&#x2F;lib&#x2F;slf4j-api-1.6.1.jar org.apache.zookeeper.server.SnapshotFormatter snapshot.xxx</span><br></pre></td></tr></table></figure></li></ol><h1 id="一致性原理"><a href="#一致性原理" class="headerlink" title="一致性原理"></a>一致性原理</h1><h2 id="2pc"><a href="#2pc" class="headerlink" title="2pc"></a>2pc</h2><p>2pc 两段提交，强一致性算法。常用于分布式数据库中。</p><ul><li>术语</li></ul><ol><li><code>undo</code>记录原始数据，用于回滚。</li><li><code>redo</code>正常提交数据</li></ol><ul><li><p>流程</p><ol><li>第一阶段，所有资源数据库都写入<code>undo</code>和<code>redo</code>到事务日志<ol start="2"><li>第二阶段，所有资源都返回ok，则全部执行commit,否则rollback</li></ol></li></ol></li><li><p>缺点</p><ol><li>同步阻塞，所有都成功才能成功。<ol start="2"><li>单点故障，一个返回失败，都失败</li><li>数据不一致，网络延迟导致一个资源commit了，另一个没有commit</li><li>容错机制不完善，一个失败都失败</li></ol></li></ol></li></ul><h2 id="3pc"><a href="#3pc" class="headerlink" title="3pc"></a>3pc</h2><p>先询问资源是否可以访问再进行2pc相同步骤</p><p>不一样的是第三阶段协调者如果网络超时或异常，参与者也会commit</p><p>优点</p><pre><code>1. 改善同步阻塞（不会因为某些访问超时占用时间）   2. 解决单点故障</code></pre><h2 id="paxos算法"><a href="#paxos算法" class="headerlink" title="paxos算法"></a>paxos算法</h2><p>少数服从多数，角色轮换避免单点故障</p><p> 第一阶段，提议者订一个K值，然后访问所有资源（prepare请求），多数回应ok就进行下一阶段，否则k+1再重新请求</p><p> 第二阶段， 提交数据，绝大部分返回ok则整体成功，否则重新进行第一阶段</p><p>问题</p><ol><li>主导者故障（单点故障）</li><li>最终一致性</li></ol><p>协议要求</p><ol><li>资源端必须接受第一个prepare</li><li>第一个prepare的数据必须要接受</li></ol><p>多提议者情况下（解决单点故障）</p><p>若干提议者发起prepare,若多数资源同意则进入下一阶段。若同意没超过半数，则k增加再进行prepare。资源会同意更高K的prepare。当提议者认为自己的支持者超过半数就会进行第二阶段，</p><p>提交accept,如果资源在次期间遇到更高k的prepare，则会拒绝当前accept，等待最高k发起的提议者的accept。accept接受超过半数则成功，否则k增加，重新prepare。成功后全体接受成功的accept。</p><h1 id="ZK使用"><a href="#ZK使用" class="headerlink" title="ZK使用"></a>ZK使用</h1><p>Zookeeper原生客户端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECT = <span class="string">"192.168.1.1:8088,xxxx"</span>;<span class="comment">// 多个用逗号隔开</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch cdl = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(CONNECT, <span class="number">5000</span>, <span class="keyword">new</span> Watch()&#123;<span class="comment">// 5000超时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 如果获取到了连接</span></span><br><span class="line">        <span class="keyword">if</span>(watchedEvent.getState() == Event.keeperState.SyncConnected) &#123;</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">countDownLatch.watch();<span class="comment">//等待连接</span></span><br><span class="line">zookeeper.create(<span class="string">"/path"</span>, <span class="string">"val"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</span><br><span class="line">Stat stat = <span class="keyword">new</span> Stat();<span class="comment">// 节点状态</span></span><br><span class="line"><span class="comment">// watch为true代表监听此节点，节点内容发生变化会回调连接时注册的watch。watch是一致性的</span></span><br><span class="line"><span class="comment">// watch之后只会返回当前session最后一次修改此节点的内容，即多个setData,只会最后一次回调</span></span><br><span class="line"><span class="keyword">byte</span>[] data = zookeeper.getData(<span class="string">"/path"</span>, <span class="keyword">true</span>, stat);<span class="comment">// 返回值</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; childrens = zookeeper.getChildren(<span class="string">"/path"</span>, <span class="keyword">true</span>);<span class="comment">//[a,b,c]的形式返回子节点</span></span><br><span class="line"></span><br><span class="line">ACL acl = <span class="keyword">new</span> ACL(ZooDefs.Perms.ALL, <span class="keyword">new</span> Id(<span class="string">"digest"</span>, DigestAuthenticationProvicer.generateDigest(<span class="string">"root:root"</span>)));</span><br><span class="line">ACL acl2 = <span class="keyword">new</span> ACL(ZooDefs.Perms.CREATE, <span class="keyword">new</span> Id(<span class="string">"ip"</span>, <span class="string">"192.168.1.1"</span>));</span><br><span class="line">List&lt;ACL&gt; acls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">acls.add(acl);</span><br><span class="line">acls.add(acl2);</span><br><span class="line"><span class="comment">// 创建持久节点</span></span><br><span class="line">zookeeper.create(<span class="string">"path"</span>, <span class="string">"val"</span>.getBytes(), acls, CreateMode.PERSISTENT);</span><br><span class="line"><span class="comment">// 添加digest方案的权限</span></span><br><span class="line">zookeeper.addAuthInfo(<span class="string">"digest"</span>, <span class="string">"root:root"</span>.getBytes());</span><br></pre></td></tr></table></figure><p>问题</p><ol><li>会话连接是异步的</li><li>watch需要重复注册，一次watch只能监听一个</li><li>缺少session重连机制</li><li>复杂，缺少很多功能，例如级联新增</li></ol><p>ZkClient</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECT_HOST = <span class="string">"192.168.1.1:8000"</span>;</span><br><span class="line"><span class="comment">// zkClient不用监听</span></span><br><span class="line">ZkClient zkClient = <span class="keyword">new</span> ZkClient(CONNECT_HOST, <span class="number">4000</span>);</span><br><span class="line"><span class="comment">// 提供了递归创建父节点的功能,true代表级联新增，false代表不允许（父节点不存在就会报错）</span></span><br><span class="line">zkClient.createPersistent(<span class="string">"/zk/zkclient/zkclient1"</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 获取子节点 [node1,node2,node3]</span></span><br><span class="line">List&lt;String&gt; list = zkClient.getChildren(<span class="string">"/zkclient"</span>);</span><br><span class="line"><span class="comment">// 监听</span></span><br><span class="line"><span class="comment">// 节点内容修改</span></span><br><span class="line">zkClient.subscribeDataChange(<span class="string">"/nodeName"</span>, <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String nodeName, Object newVal)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// nodeName节点名称  newVal修改后的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String nodeName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// nodeName中的子节点发升变化触发</span></span><br><span class="line">zkClient.subscribeChildChanges(<span class="string">"/nodeName"</span>, <span class="keyword">new</span> IZkChildListener()) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleChildChange</span><span class="params">(String nodeName, List&lt;String&gt; list)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// nodeName节点名 list节点列表</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 监听器</span></span><br><span class="line"><span class="comment">// subscriptStateChanges</span></span><br><span class="line"><span class="comment">// 权限</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addAuthInfo</span><span class="params">(String scheme, <span class="keyword">final</span> <span class="keyword">byte</span>[] auth)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAcl</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">final</span> List&lt;ACL&gt; acl)</span></span>;</span><br></pre></td></tr></table></figure><p>Curator</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.curator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>curator-framework<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String CONNECT_HOST=<span class="string">"192.168.1.1:8000"</span>;</span><br><span class="line"><span class="comment">// 尝试三次连接，失败1000毫秒后重试，第二次重试时间2*1000毫秒，第三次3*1000</span></span><br><span class="line">CuratorFramework curatorFramework = CuratorFrameworkFactory.</span><br><span class="line">    newCliebt(CONNECT_HOST, <span class="number">5000</span>, <span class="number">5000</span>, <span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>));</span><br><span class="line">curatorFramework.start();<span class="comment">// 启动连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line">CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(CONNECT_HOST).sessionTimeoutMs(<span class="number">5000</span>).retryPolicy(<span class="keyword">new</span> ExponentialBackoffRetry(<span class="number">1000</span>, <span class="number">3</span>)).build();</span><br><span class="line">curatorFramework.start();<span class="comment">// 启动连接</span></span><br><span class="line"><span class="comment">// 创建节点,返回节点路径</span></span><br><span class="line">String val = curatorFramework.create()</span><br><span class="line">    .createingParentsIfNeeded()<span class="comment">//级联创建父节点</span></span><br><span class="line">    .withMode(CreateMode.PERSISTENT)<span class="comment">//持久节点</span></span><br><span class="line">    .forPath(<span class="string">"/path/path1/path2"</span>, <span class="string">"val"</span>.getBytes());</span><br><span class="line"><span class="comment">// 删除节点,级联删除</span></span><br><span class="line">curatorFramework.delete().deleteChildrenIfNeed().forPath(<span class="string">"/path"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步执行</span></span><br><span class="line"><span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">ExcutorService service = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">curatorFramework.create().createingParentsIfNeeded().withMode(CreateMode.PERSISTENT)</span><br><span class="line">    .inBackground(<span class="keyword">new</span> BackgroundCallback()&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processResult</span><span class="params">(CuratorFramework curatorFramework, CuratorEvent curatorEvent)</span> throw Exception </span>&#123;</span><br><span class="line">            curatorFramework.getResultCode();<span class="comment">// 结果</span></span><br><span class="line">            curatorFramework.getType();</span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,server).forPath(<span class="string">"/path/path1/path2"</span>, <span class="string">"val"</span>.getBytes());    </span><br><span class="line"><span class="comment">// 事务, 同时成功才成功</span></span><br><span class="line">Collection&lt;CuratorTransactionResult&gt; resultCollections = curatorFramework.inTransaction()</span><br><span class="line">    .create().forPath(<span class="string">"/path/path1/path2"</span>, <span class="string">"val"</span>.getBytes()).and()</span><br><span class="line">    .setData().forPath(<span class="string">"/path/path1/path2"</span>, <span class="string">"v1"</span>.getBytes()).and().commit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(CuratorTransactionResult res: resultCollections) &#123;</span><br><span class="line">    res.getForPath();<span class="comment">// 节点路径</span></span><br><span class="line">    res.getType();<span class="comment">// 结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// watch机制</span></span><br><span class="line"><span class="comment">// Pathcache 监听一个路径下子节点的创建、删除、数据更新</span></span><br><span class="line"><span class="comment">// NodeCache 节点的创建、删除、更新</span></span><br><span class="line"><span class="comment">// TreeCache Pathcache+NodeCache</span></span><br><span class="line">NodeCache nodeCache = <span class="keyword">new</span> NodeCache(curatorFramework, <span class="string">"/curator"</span>, <span class="keyword">false</span>);</span><br><span class="line">nodeCache.start(<span class="keyword">true</span>);</span><br><span class="line">nodeCache.getListenable().addListener(()-&gt;System.out.println(<span class="string">"节点变化，变成了"</span> + <span class="keyword">new</span> String(nodeCache.getCurrentData().getData())));</span><br><span class="line"></span><br><span class="line">pathCache.getListenable().addListener((framework, event)-&gt;&#123;</span><br><span class="line">    event.getType();<span class="comment">//CHILD_ADD CHILD_REMOVED CHILD_UPDATE 子节点增加、删除、更新</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><p>特点</p><ol><li>顺序一致性，命令执行顺序一致</li><li>原子性，集群中所有机器都成功，否则失败</li><li>单一视图，连接集群任意一个机器数据一致</li><li>可靠性，一个更新被操作之前，数据不变</li><li>实时性，一个节点更改，其他节点很短时间内同步</li><li>角色轮换，避免故障</li></ol><p>角色</p><ol><li><code>leader</code>任务调度，事务处理(增，删，改)</li><li><code>follower</code>非事务请求，读。参与投票</li><li><code>observer</code>观察者，读，不参与投票。（3.30以上提供，增加效率）</li></ol><p>配置集群</p><p><code>zoo.cfg</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">server.0&#x3D;192.168.1.2:2333:2444 # 选举端口：通讯端口</span><br><span class="line">server.1&#x3D;192.168.1.3:2333:2444 # 1代表 myid ，集群名称，必须是数字</span><br><span class="line">server.2&#x3D;192.168.1.4:2333:2444</span><br></pre></td></tr></table></figure><h1 id="ZAB协议"><a href="#ZAB协议" class="headerlink" title="ZAB协议"></a>ZAB协议</h1><p>类似<code>paxos</code>,<code>zk</code>自己实现的协议</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 分布式 </tag>
            
            <tag> 微服务 </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 注册中心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>功能菜单自动生成</title>
      <link href="/2022/03/20/%E5%8A%9F%E8%83%BD%E8%8F%9C%E5%8D%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/"/>
      <url>/2022/03/20/%E5%8A%9F%E8%83%BD%E8%8F%9C%E5%8D%95%E8%87%AA%E5%8A%A8%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1278,阅读全文大约需要5分钟</p><blockquote><p>一个用于整合不同功能的工具，在指定的包里创建功能类，并声明分类名称、功能名称、参数名称。就能自动生成调用菜单，是小工具的通用入口。</p></blockquote><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><ul><li>创建包<code>com.colin.tool.invokeableAnnotation</code></li><li>使用三个注解区分不同功能</li><li><code>categoryInfo</code>注释在类上，表示类下的所有方法属于什么分类</li><li><code>functionInfo</code>注释在方法上，表示该方法的名称及详细信息(输入帮助时展示)</li><li><code>paramName</code>注释在方法参数，参数名</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.invokeableAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于注释类的分类名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-12-09 10:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//运行环境可用</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> categoryInfo &#123;</span><br><span class="line">    <span class="comment">/** 分类名称 */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.invokeableAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标记该方法为可调用的功能，并且添加说明</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> colin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/12/5 22:29</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0k</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//运行环境可用</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> functionInfo &#123;</span><br><span class="line">    <span class="comment">/** 功能名称 */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/** 简介 */</span></span><br><span class="line">    <span class="function">String <span class="title">info</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.invokeableAnnotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标记参数名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> colin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/12/5 22:35</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) <span class="comment">//运行环境可用</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> paramName &#123;</span><br><span class="line">    <span class="comment">/** 参数名 */</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><ul><li>创建包<code>com.colin.tool.model</code></li><li>改类存储功能菜单需要的相关信息</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 菜单数据内容</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-12-06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokeMenu</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String functionName;</span><br><span class="line">    <span class="keyword">private</span> String functionTitle;</span><br><span class="line">    <span class="keyword">private</span> String functionInfo;</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line">    <span class="keyword">private</span> Object instance;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; paramInfo = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokeMenu</span><span class="params">(String functionName, String functionTitle, String functionInfo, String categoryName, Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.functionName = functionName;</span><br><span class="line">        <span class="keyword">this</span>.functionTitle = functionTitle;</span><br><span class="line">        <span class="keyword">this</span>.functionInfo = functionInfo;</span><br><span class="line">        <span class="keyword">this</span>.categoryName = categoryName;</span><br><span class="line">        <span class="keyword">this</span>.instance = instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCategoryName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> categoryName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCategoryName</span><span class="params">(String categoryName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.categoryName = categoryName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInstance</span><span class="params">(Object instance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.instance = instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFunctionTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> functionTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFunctionTitle</span><span class="params">(String functionTitle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.functionTitle = functionTitle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFunctionName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> functionName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFunctionName</span><span class="params">(String functionName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.functionName = functionName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFunctionInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> functionInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFunctionInfo</span><span class="params">(String functionInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.functionInfo = functionInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getParamInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> paramInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParamInfo</span><span class="params">(String paramInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.paramInfo.add(paramInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"InvokeMenu&#123;"</span> +</span><br><span class="line">                <span class="string">"functionName='"</span> + functionName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", functionTitle='"</span> + functionTitle + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", functionInfo='"</span> + functionInfo + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", paramInfo="</span> + paramInfo +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="菜单界面展示"><a href="#菜单界面展示" class="headerlink" title="菜单界面展示"></a>菜单界面展示</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.colin.tool.model.InvokeMenu;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制台界面</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-12-06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsoleMenu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewMenu</span><span class="params">(List&lt;InvokeMenu&gt; menus)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------------------------菜单------------------------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"请输入序号以选择功能:"</span>);</span><br><span class="line">        System.out.println(<span class="string">"\t[-1] 退出"</span>);</span><br><span class="line">        System.out.println(<span class="string">"\t[0] 帮助"</span>);</span><br><span class="line">        String currentCategory = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; menus.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> InvokeMenu menu = menus.get(i);</span><br><span class="line">            <span class="keyword">if</span>(!menu.getCategoryName().equals(currentCategory)) &#123;</span><br><span class="line">                currentCategory = menu.getCategoryName();</span><br><span class="line">                System.out.println(<span class="string">"功能分类["</span> + currentCategory + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"\t["</span> + (i + <span class="number">1</span>) + <span class="string">"] "</span> + menu.getFunctionTitle());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------------结束------------------------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">viewHelp</span><span class="params">(List&lt;InvokeMenu&gt; menus)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"--------------------------帮助------------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; menus.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> InvokeMenu menu = menus.get(i);</span><br><span class="line">            System.out.println(<span class="string">"["</span> + (i + <span class="number">1</span>) + <span class="string">"] "</span> +menu.getFunctionTitle() + <span class="string">"["</span> + menu.getFunctionName() + <span class="string">"]"</span>);</span><br><span class="line">            System.out.println(<span class="string">"\t\t"</span> + menu.getFunctionInfo());</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; menu.getParamInfo().size(); j++) &#123;</span><br><span class="line">                System.out.println(<span class="string">"\t\t参数["</span> + (j + <span class="number">1</span>) + <span class="string">"]: "</span> + menu.getParamInfo().get(j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------------------结束------------------------"</span>);</span><br><span class="line">        pause(<span class="string">"任意输入返回菜单..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.print(str);</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        scanner.hasNextLine();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInput</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(str);</span><br><span class="line">        <span class="keyword">return</span> scanner.next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="主类"><a href="#主类" class="headerlink" title="主类"></a>主类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.colin.tool.invokeableAnnotation.*;</span><br><span class="line"><span class="keyword">import</span> com.colin.tool.model.InvokeMenu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Parameter;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工具通用调用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> colin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021/12/5 22:02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UtilToolInvoke</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String packageName = <span class="string">"com.colin.tool.function"</span>;</span><br><span class="line">        String packagePath = packageName.replace(<span class="string">"."</span>, <span class="string">"/"</span>);</span><br><span class="line">        <span class="keyword">final</span> ClassLoader loader = UtilToolInvoke<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        <span class="keyword">final</span> URL resource = loader.getResource(packagePath);</span><br><span class="line">        System.out.println(resource);</span><br><span class="line">        <span class="keyword">final</span> File packageFile = <span class="keyword">new</span> File(resource.getFile());</span><br><span class="line">        List&lt;Class&gt; funClass = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(packageFile.isDirectory()) &#123;</span><br><span class="line">            <span class="keyword">final</span> File[] files = packageFile.listFiles();</span><br><span class="line">            <span class="keyword">if</span> (files != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (File classFile : files) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(classFile.getName().endsWith(<span class="string">".class"</span>)) &#123;</span><br><span class="line">                        <span class="keyword">final</span> Class&lt;?&gt; aClass = loader.loadClass(packageName + <span class="string">"."</span> + classFile.getName().replace(<span class="string">".class"</span>, <span class="string">""</span>));</span><br><span class="line">                        funClass.add(aClass);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                startWithConsole(funClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(funClass.size() &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"---------暂无功能----------"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"---------end--------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">startWithConsole</span><span class="params">(List&lt;Class&gt; functionClasses)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ConsoleMenu consoleMenu = <span class="keyword">new</span> ConsoleMenu();</span><br><span class="line">        <span class="keyword">final</span> List&lt;InvokeMenu&gt; menus = getFunctionList(functionClasses);</span><br><span class="line">        <span class="keyword">boolean</span> isContinue = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (isContinue) &#123;</span><br><span class="line">            consoleMenu.viewMenu(menus);</span><br><span class="line">            <span class="keyword">final</span> String input = consoleMenu.getInput(<span class="string">"请输入您的选择，回车确认:"</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"-1"</span>.equals(input)) &#123;</span><br><span class="line">                isContinue = <span class="keyword">false</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"0"</span>.equals(input)) &#123;</span><br><span class="line">                consoleMenu.viewHelp(menus);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(Integer.parseInt(input) - <span class="number">1</span> &lt; menus.size()) &#123;</span><br><span class="line">                <span class="keyword">final</span> InvokeMenu invokeMenu = menus.get(Integer.parseInt(input) - <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">final</span> String functionName = invokeMenu.getFunctionName();</span><br><span class="line">                System.out.println(<span class="string">"正在执行功能["</span> + invokeMenu.getFunctionTitle() + <span class="string">"]"</span>);</span><br><span class="line">                String[] values = <span class="keyword">new</span> String[invokeMenu.getParamInfo().size()];</span><br><span class="line">                Class[] types = <span class="keyword">new</span> Class[invokeMenu.getParamInfo().size()];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; invokeMenu.getParamInfo().size(); i++) &#123;</span><br><span class="line">                    values[i] = consoleMenu.getInput(<span class="string">"请输入"</span> + invokeMenu.getParamInfo().get(i) + <span class="string">":"</span>);</span><br><span class="line">                    types[i] = String<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> Method method = invokeMenu.getInstance().getClass().getMethod(functionName, types);</span><br><span class="line">                String res = method.invoke(invokeMenu.getInstance(), values) + <span class="string">""</span>;</span><br><span class="line">                consoleMenu.pause(res + <span class="string">", 任意输入返回..."</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                consoleMenu.pause(<span class="string">"输入错误，任意输入返回..."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;InvokeMenu&gt; <span class="title">getFunctionList</span><span class="params">(List&lt;Class&gt; targetClasses)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        List&lt;InvokeMenu&gt; menuList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Class targetClass : targetClasses) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> hasAnnotation = targetClass.isAnnotationPresent(categoryInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="keyword">if</span>(hasAnnotation) &#123;</span><br><span class="line">                categoryInfo categoryAnnotation = (categoryInfo)targetClass.getAnnotation(categoryInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                Object instance = targetClass.newInstance();</span><br><span class="line">                <span class="keyword">for</span> (Method method : targetClass.getMethods()) &#123;</span><br><span class="line">                    hasAnnotation = method.isAnnotationPresent(functionInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                    <span class="keyword">if</span>(hasAnnotation) &#123;</span><br><span class="line">                        functionInfo funcAnnotation = method.getAnnotation(functionInfo<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                        InvokeMenu menu = <span class="keyword">new</span> InvokeMenu(method.getName(), funcAnnotation.value(), funcAnnotation.info(), categoryAnnotation.value(), instance);</span><br><span class="line">                        <span class="keyword">for</span> (Parameter parameter : method.getParameters()) &#123;</span><br><span class="line">                            paramName paramName = parameter.getAnnotation(paramName<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                            menu.setParamInfo(paramName.value());</span><br><span class="line">                        &#125;</span><br><span class="line">                        menuList.add(menu);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> menuList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="声明功能"><a href="#声明功能" class="headerlink" title="声明功能"></a>声明功能</h1><p>上面的代码已经是完整的了，但是还没添加功能</p><ul><li>创建<code>com.colin.tool.function</code>包，这个包下的类会自动扫描并加载</li><li>声明有哪些功能，及功能简介</li></ul><ol><li>之前写的加密相关功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.colin.tool.ConsoleMenu;</span><br><span class="line"><span class="keyword">import</span> com.colin.tool.invokeableAnnotation.*;</span><br><span class="line"><span class="keyword">import</span> com.colin.tool.file.EncryptionDirectoryProcessor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件加密相关功能入口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-12-06 15:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@categoryInfo</span>(<span class="string">"文件加密"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CryptoFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EncryptionDirectoryProcessor processor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"全局密码设置"</span>, info = <span class="string">"加密相关功能需要预先设置该密码然后才能正常使用"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">setGloblePwd</span><span class="params">(@paramName(<span class="string">"密码"</span>)</span> String pwd) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            processor =  <span class="keyword">new</span> EncryptionDirectoryProcessor(pwd).defaultLog();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"设置失败"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"设置成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"开启加密功能日志打印"</span>, info = <span class="string">"打印扫描文件及处理进度，默认开启"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">enableCryptoLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        processor.defaultLog();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"开启成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"关闭加密功能日志打印"</span>, info = <span class="string">"关闭后将静默处理"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">disableCryptoLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        processor.setSearchLog(<span class="keyword">null</span>);</span><br><span class="line">        processor.setProcessorLog(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"已关闭"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"加密文件夹"</span>, info = <span class="string">"将指定文件夹内文件加密"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encryptDirectory</span><span class="params">(@paramName(value = <span class="string">"文件夹路径"</span>)</span>String path) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ConsoleMenu consoleMenu = <span class="keyword">new</span> ConsoleMenu();</span><br><span class="line">            path = path.trim();</span><br><span class="line">            <span class="keyword">final</span> String input = consoleMenu.getInput(<span class="string">"确认加密路径["</span> + path + <span class="string">"] 么？ 输入y 确认，其它取消:"</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"y"</span>.equals(input)) &#123;</span><br><span class="line">                processor.encryptDirectory(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"加密失败,请检查是否设置全局密码"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"加密成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"解密文件夹"</span>, info = <span class="string">"将指定文件夹内文件解密"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decryptDirectory</span><span class="params">(@paramName(value = <span class="string">"文件夹路径"</span>)</span>String path) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> ConsoleMenu consoleMenu = <span class="keyword">new</span> ConsoleMenu();</span><br><span class="line">            path = path.trim();</span><br><span class="line">            <span class="keyword">final</span> String input = consoleMenu.getInput(<span class="string">"确认解密路径["</span> + path + <span class="string">"] 么？ 输入y 确认，其它取消:"</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">"y"</span>.equals(input)) &#123;</span><br><span class="line">                processor.decryptDirectory(path);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"解密失败,请检查是否设置全局密码"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"解密成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"查看加密文件列表"</span>, info = <span class="string">"查看指定的加密文件夹内文件列表"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">listEncryptDirectory</span><span class="params">(@paramName(value = <span class="string">"文件夹路径"</span>)</span>String path) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            path = path.trim();</span><br><span class="line">            processor.listDirectory(path, <span class="keyword">true</span>).forEach(System.out::println);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"解密失败,请检查是否设置全局密码"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"搜索成功"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>文件搜索相关功能</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.colin.tool.file.FileSearchStream;</span><br><span class="line"><span class="keyword">import</span> com.colin.tool.invokeableAnnotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件搜索入口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-12-09 10:37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@categoryInfo</span>(<span class="string">"文件搜索"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSearch</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"搜索整个文件夹"</span>, info = <span class="string">"列出文件夹内所有文件"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">searchFileByPath</span><span class="params">(@paramName(<span class="string">"需要搜索的路径"</span>)</span> String path) </span>&#123;</span><br><span class="line">        AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">new</span> FileSearchStream(<span class="keyword">new</span> File(path)).forEach(file -&gt; &#123;</span><br><span class="line">            System.out.println(file.getPath());</span><br><span class="line">            count.getAndIncrement();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"搜索结束, 一共["</span> + count + <span class="string">"]个文件"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"按文件名模糊搜索"</span>, info = <span class="string">"正则匹配路径内所有文件"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">searchFileLike</span><span class="params">(@paramName(<span class="string">"搜索路径"</span>)</span> String path, @<span class="title">paramName</span><span class="params">(<span class="string">"文件名搜索正则规则"</span>)</span> String regex) </span>&#123;</span><br><span class="line">        AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        Pattern p = Pattern.compile(regex);</span><br><span class="line">        <span class="keyword">new</span> FileSearchStream(<span class="keyword">new</span> File(path)).forEach(file -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(p.matcher(file.getName()).matches()) &#123;</span><br><span class="line">                System.out.println(file.getPath());</span><br><span class="line">                count.getAndIncrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"搜索结束, 一共["</span> + count + <span class="string">"]个文件"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"按文件后缀搜索"</span>, info = <span class="string">"所搜指定后缀(结尾)的文件"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">searchFileBySuffix</span><span class="params">(@paramName(<span class="string">"搜索路径"</span>)</span> String path, @<span class="title">paramName</span><span class="params">(<span class="string">"后缀"</span>)</span> String suffix) </span>&#123;</span><br><span class="line">        AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">new</span> FileSearchStream(<span class="keyword">new</span> File(path)).forEach(file -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(file.getName().endsWith(suffix)) &#123;</span><br><span class="line">                System.out.println(file.getPath());</span><br><span class="line">                count.getAndIncrement();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"搜索结束, 一共["</span> + count + <span class="string">"]个文件"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@functionInfo</span>(value = <span class="string">"搜索指定类型的文件(img/document/application/audio/video)"</span>, info = <span class="string">"img[psd,pdd,gif,jpeg,jpg,png] document[doc,docx,xls,xlsx,csv,ppt,pptx,txt] application[exe,bat,cmd,sh,ink,py,class,java] audio[mp3,flac,ape,cd,wave,aiff] video[avi,mov,qt,asf,rm,navi,divX,mpeg,mpg,ogg,mod,rmvb,flv,mp4,3gp]"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">searchFileByType</span><span class="params">(@paramName(<span class="string">"搜索路径"</span>)</span> String path, @<span class="title">paramName</span><span class="params">(<span class="string">"文件类型"</span>)</span> String type) </span>&#123;</span><br><span class="line">        FileSearchStream.FileSuffix suffix = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">switch</span> (type.toLowerCase()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"img"</span>: suffix = FileSearchStream.FileSuffix.IMG; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"document"</span>: suffix = FileSearchStream.FileSuffix.DOCUMENT; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"application"</span>: suffix = FileSearchStream.FileSuffix.APPLICATION; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"audio"</span>: suffix = FileSearchStream.FileSuffix.AUDIO; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">"video"</span>: suffix = FileSearchStream.FileSuffix.VIDEO; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">"文件类型["</span> + type + <span class="string">"]未定义"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">        <span class="keyword">final</span> FileSearchStream.FileSuffix checkSuffix = suffix;</span><br><span class="line">        <span class="keyword">if</span>(suffix != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">new</span> FileSearchStream(<span class="keyword">new</span> File(path)).forEach(file -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(checkSuffix.check(file.getName())) &#123;</span><br><span class="line">                    System.out.println(file.getPath());</span><br><span class="line">                    count.getAndIncrement();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"搜索结束, 一共["</span> + count + <span class="string">"]个文件"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>运行<code>UtilToolInvoke.class</code>的<code>main</code>方法即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">--------------------------菜单------------------------</span><br><span class="line">请输入序号以选择功能:</span><br><span class="line">[-1] 退出</span><br><span class="line">[0] 帮助</span><br><span class="line">功能分类[文件加密]</span><br><span class="line">[1] 查看加密文件列表</span><br><span class="line">[2] 加密文件夹</span><br><span class="line">[3] 解密文件夹</span><br><span class="line">[4] 全局密码设置</span><br><span class="line">[5] 开启加密功能日志打印</span><br><span class="line">[6] 关闭加密功能日志打印</span><br><span class="line">功能分类[文件搜索]</span><br><span class="line">[7] 按文件后缀搜索</span><br><span class="line">[8] 按文件名模糊搜索</span><br><span class="line">[9] 搜索整个文件夹</span><br><span class="line">[10] 搜索指定类型的文件(img&#x2F;document&#x2F;application&#x2F;audio&#x2F;video)</span><br><span class="line">--------------------------结束------------------------</span><br><span class="line">请输入您的选择，回车确认:</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自动翻译工具（baidu）</title>
      <link href="/2022/03/20/%E8%87%AA%E5%8A%A8%E7%BF%BB%E8%AF%91%E5%B7%A5%E5%85%B7%EF%BC%88baidu%EF%BC%89/"/>
      <url>/2022/03/20/%E8%87%AA%E5%8A%A8%E7%BF%BB%E8%AF%91%E5%B7%A5%E5%85%B7%EF%BC%88baidu%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>文章字数：935,阅读全文大约需要3分钟</p><blockquote><p>抓取百度翻译接口，将一个国际化文件翻译成若干指定语言的国际化文件</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyManagementException;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyStoreException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.CertificateException;</span><br><span class="line"><span class="keyword">import</span> java.security.cert.X509Certificate;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLContext;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngine;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptEngineManager;</span><br><span class="line"><span class="keyword">import</span> javax.script.ScriptException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.NoopHostnameVerifier;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.conn.ssl.SSLConnectionSocketFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClients;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.SSLContextBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.ssl.TrustStrategy;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.StringHttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.LinkedMultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.MultiValueMap;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.client.RestTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 源文件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String basePath = <span class="string">"D:\\test\\translate\\123\\"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String fromName = <span class="string">"eventCenter_en_US.properties"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 百度翻译接口相关</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String path = <span class="string">"https://fanyi.baidu.com/v2transapi?"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String token = <span class="string">"5a9892b6584a2fed08f75bed87736039"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String windowgtk = <span class="string">"'320305.131321201'"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Charset fileCharset = StandardCharsets.UTF_8;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String fileSuffix = fromName.split(<span class="string">"\\."</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果目标语言国际化存在，是否覆盖。默认跳过。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> override = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">// 每次翻译之后休眠时间，太快会被封禁ip</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sleepTime = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 网络异常后继续上次的进度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Integer lastLine = <span class="number">13</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LanguageEnum lastLanguage = LanguageEnum.AR;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;LanguageEnum&gt; to = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            LanguageEnum from;</span><br><span class="line">            String modelName = fromName.split(<span class="string">"\\."</span>)[<span class="number">0</span>];</span><br><span class="line">            modelName = modelName.split(<span class="string">"_"</span>)[<span class="number">0</span>];</span><br><span class="line">            from = LanguageEnum.getByZKName(fromName.split(<span class="string">"\\."</span>)[<span class="number">0</span>].replace(modelName + <span class="string">"_"</span>, <span class="string">""</span>));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 翻译成那些语言</span></span><br><span class="line">            <span class="comment">// 指定某个文件</span></span><br><span class="line">            <span class="comment">// to.add(LanguageEnum.ZH_TW);</span></span><br><span class="line">            <span class="comment">// 或者全部翻译</span></span><br><span class="line">            to.addAll(from.getOther());</span><br><span class="line"></span><br><span class="line">            List&lt;String&gt; fromLine = getLineByFile(basePath + fromName);</span><br><span class="line">            <span class="keyword">for</span> (LanguageEnum toLang : to) &#123;</span><br><span class="line">                createToFile(from, toLang, modelName, fromLine);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"处理完毕，总共翻译 ["</span> + count.get() + <span class="string">"] 次"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ScriptEngine scriptEngine;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">enum</span> LanguageEnum &#123;</span><br><span class="line">        <span class="comment">// 中文</span></span><br><span class="line">        ZH_CN(<span class="string">"zh_CN"</span>, <span class="string">"zh"</span>),</span><br><span class="line">        <span class="comment">// 英文</span></span><br><span class="line">        EN(<span class="string">"en_US"</span>, <span class="string">"en"</span>),</span><br><span class="line">        <span class="comment">// 繁体</span></span><br><span class="line">        ZH_TW(<span class="string">"zh_TW"</span>, <span class="string">"cht"</span>),</span><br><span class="line">        <span class="comment">// 越南语</span></span><br><span class="line">        VI(<span class="string">"vi"</span>, <span class="string">"vie"</span>),</span><br><span class="line">        <span class="comment">// 泰语</span></span><br><span class="line">        TH(<span class="string">"th"</span>, <span class="string">"th"</span>),</span><br><span class="line">        <span class="comment">// 俄语</span></span><br><span class="line">        RU(<span class="string">"ru_RU"</span>, <span class="string">"ru"</span>),</span><br><span class="line">        <span class="comment">// 罗马尼亚</span></span><br><span class="line">        RO(<span class="string">"ro"</span>, <span class="string">"rom"</span>),</span><br><span class="line">        <span class="comment">// 葡萄牙</span></span><br><span class="line">        PT(<span class="string">"pt_BR"</span>, <span class="string">"pt"</span>),</span><br><span class="line">        <span class="comment">// 波兰语</span></span><br><span class="line">        PL(<span class="string">"pl"</span>, <span class="string">"pl"</span>),</span><br><span class="line">        <span class="comment">// 韩语</span></span><br><span class="line">        KO(<span class="string">"ko_KR"</span>, <span class="string">"kor"</span>),</span><br><span class="line">        <span class="comment">// 日语</span></span><br><span class="line">        JA(<span class="string">"ja_JP"</span>, <span class="string">"jp"</span>),</span><br><span class="line">        <span class="comment">// 意大利</span></span><br><span class="line">        IT(<span class="string">"it"</span>, <span class="string">"it"</span>),</span><br><span class="line">        <span class="comment">// 印尼</span></span><br><span class="line">        IN(<span class="string">"in_ID"</span>, <span class="string">"id"</span>),</span><br><span class="line">        <span class="comment">// 法语</span></span><br><span class="line">        FR(<span class="string">"fr"</span>, <span class="string">"fra"</span>),</span><br><span class="line">        <span class="comment">// 西班牙</span></span><br><span class="line">        ES(<span class="string">"es"</span>, <span class="string">"spa"</span>),</span><br><span class="line">        <span class="comment">// 德语</span></span><br><span class="line">        DE(<span class="string">"de"</span>, <span class="string">"de"</span>),</span><br><span class="line">        <span class="comment">// 阿拉伯</span></span><br><span class="line">        AR(<span class="string">"ar"</span>, <span class="string">"ara"</span>),</span><br><span class="line">        <span class="comment">// 土耳其语</span></span><br><span class="line">        TR(<span class="string">"tr"</span>, <span class="string">"tr"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String zkName;</span><br><span class="line">        <span class="keyword">public</span> String bdName;</span><br><span class="line"></span><br><span class="line">        LanguageEnum(String zkName, String bdName) &#123;</span><br><span class="line">            <span class="keyword">this</span>.bdName = bdName;</span><br><span class="line">            <span class="keyword">this</span>.zkName = zkName;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LanguageEnum <span class="title">getByZKName</span><span class="params">(String zkName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (LanguageEnum value : LanguageEnum.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value.zkName.equals(zkName)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;LanguageEnum&gt; <span class="title">getOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            List&lt;LanguageEnum&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (LanguageEnum value : LanguageEnum.values()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value != <span class="keyword">this</span>) &#123;</span><br><span class="line">                    list.add(value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 翻译</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fromEnum 当前语言</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toEnmu 需要翻译的语言</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> val 需要翻译的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTranslate</span><span class="params">(LanguageEnum fromEnum, LanguageEnum toEnmu, String val)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String from = fromEnum.bdName, to = toEnmu.bdName;</span><br><span class="line">        String url = path + <span class="string">"from="</span> + from + <span class="string">"&amp;to="</span> + to;</span><br><span class="line">        JSONObject res =</span><br><span class="line">            postFromUrl(url, <span class="keyword">new</span> Object[] &#123;<span class="string">"from"</span>, from&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"to"</span>, to&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"query"</span>, val&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;<span class="string">"transtype"</span>, <span class="string">"translang"</span>&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"simple_means_flag"</span>, <span class="string">"3"</span>&#125;,</span><br><span class="line">                <span class="keyword">new</span> Object[] &#123;<span class="string">"sign"</span>, sign(val)&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"token"</span>, token&#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">"domain"</span>, <span class="string">"common"</span>&#125;);</span><br><span class="line">        String resStr = res.getJSONObject(<span class="string">"trans_result"</span>).getJSONArray(<span class="string">"data"</span>).getJSONObject(<span class="number">0</span>).getString(<span class="string">"dst"</span>);</span><br><span class="line">        System.out</span><br><span class="line">            .println(<span class="string">"正在翻译 ["</span> + val + <span class="string">"] , translate = ["</span> + from + <span class="string">" =&gt; "</span> + to + <span class="string">"]"</span> + <span class="string">" , 翻译结果 ["</span> + resStr + <span class="string">"]"</span>);</span><br><span class="line">        count.getAndIncrement();</span><br><span class="line">        <span class="keyword">return</span> resStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">sign</span><span class="params">(String v)</span> <span class="keyword">throws</span> ScriptException </span>&#123;</span><br><span class="line">        v = v.replace(<span class="string">"'"</span>, <span class="string">"\\'"</span>);</span><br><span class="line">        scriptEngine.eval(<span class="string">"var sign = e('"</span> + v + <span class="string">"')"</span>);</span><br><span class="line">        String sign = scriptEngine.get(<span class="string">"sign"</span>) + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">return</span> sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> JSONObject <span class="title">postFromUrl</span><span class="params">(String url, Object[]... param)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> HttpEntity&lt;MultiValueMap&lt;Object, Object&gt;&gt; request = getRequestByParam(param);</span><br><span class="line">        ResponseEntity&lt;String&gt; entity;</span><br><span class="line">        entity = restTemplate.postForEntity(url, request, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (entity.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSONObject.parseObject(entity.getBody());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"err"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createToFile</span><span class="params">(LanguageEnum from, LanguageEnum to, String modelName, List&lt;String&gt; lines)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String name = basePath + modelName + <span class="string">"_"</span> + to.zkName + <span class="string">"."</span> + fileSuffix;</span><br><span class="line">        <span class="keyword">if</span> (!override &amp;&amp; Files.exists(Paths.get(name))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastLanguage == <span class="keyword">null</span> || lastLine == <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"文件 ["</span> + name + <span class="string">"] 已存在，跳过"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isAppend(to, lastLanguage)) &#123;</span><br><span class="line">                System.out.println(<span class="string">"文件 ["</span> + name + <span class="string">"] 已存在，跳过"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"当前处理文件为 ["</span> + name + <span class="string">"]"</span>);</span><br><span class="line">        <span class="keyword">try</span> (FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(name, isAppend(to, lastLanguage))) &#123;</span><br><span class="line">            <span class="keyword">try</span> (OutputStreamWriter writer = <span class="keyword">new</span> OutputStreamWriter(outputStream, fileCharset)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; lines.size(); index++) &#123;</span><br><span class="line">                    String line = lines.get(index);</span><br><span class="line">                    System.out.println(<span class="string">"当前文件进度: "</span> + index + <span class="string">"/"</span> + lines.size());</span><br><span class="line">                    <span class="keyword">if</span> (to.equals(lastLanguage) &amp;&amp; index &lt; lastLine) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (line.startsWith(<span class="string">"#"</span>) || StringUtils.isEmpty(line)) &#123;</span><br><span class="line">                        writer.write(line + <span class="string">"\r\n"</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        String key = line.split(<span class="string">"="</span>)[<span class="number">0</span>];</span><br><span class="line">                        String val = line.split(<span class="string">"="</span>)[<span class="number">1</span>];</span><br><span class="line">                        writer.write(key + <span class="string">"="</span> + getTranslate(from, to, val) + <span class="string">"\r\n"</span>);</span><br><span class="line">                        TimeUnit.SECONDS.sleep(sleepTime);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAppend</span><span class="params">(LanguageEnum to, LanguageEnum lastLanguage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastLanguage != <span class="keyword">null</span> &amp;&amp; to.equals(lastLanguage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getLineByFile</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> (FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(path)) &#123;</span><br><span class="line">            <span class="keyword">try</span> (InputStreamReader reader = <span class="keyword">new</span> InputStreamReader(inputStream, fileCharset)) &#123;</span><br><span class="line">                <span class="keyword">try</span> (BufferedReader bufferedReader = <span class="keyword">new</span> BufferedReader(reader)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> bufferedReader.lines().collect(Collectors.toList());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HttpEntity&lt;MultiValueMap&lt;Object, Object&gt;&gt; getRequestByParam(Object[]... params) &#123;</span><br><span class="line">        <span class="keyword">final</span> HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">        <span class="keyword">final</span> LinkedMultiValueMap&lt;Object, Object&gt; map = <span class="keyword">new</span> LinkedMultiValueMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (params != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object[] param : params) &#123;</span><br><span class="line">                map.add(param[<span class="number">0</span>], param[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String paramStr = <span class="string">"Host: fanyi.baidu.com\n"</span></span><br><span class="line">            + <span class="string">"User-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:93.0) Gecko/20100101 Firefox/93.0\n"</span></span><br><span class="line">            + <span class="string">"Accept: */*\n"</span> + <span class="string">"Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\n"</span></span><br><span class="line">            + <span class="string">"Accept-Encoding: gzip, deflate, br\n"</span></span><br><span class="line">            + <span class="string">"Content-Type: application/x-www-form-urlencoded; charset=UTF-8\n"</span> + <span class="string">"X-Requested-With: XMLHttpRequest\n"</span></span><br><span class="line">            + <span class="string">"Origin: https://fanyi.baidu.com\n"</span> + <span class="string">"Connection: keep-alive\n"</span> + <span class="string">"Referer: https://fanyi.baidu.com/\n"</span></span><br><span class="line">            + <span class="string">"Cookie: BAIDUID=1F3AA9B69AA7D53DE31F86572B715FAE:FG=1; BIDUPSID=1F3AA9B69AA7D53DDA50BBE8079D1BC7; PSTM=1630997334; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; td_cookie=2315277960; __yjs_duid=1_580e46fc7808cbbe7243e345c691bd4c1635751328621; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1635751323,1635822756,1635904954; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; H_PS_PSSID=34889_34068_31253_34862_34599_34584_34505_34916_34606_26350_34972_34868; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1635904954; delPer=0; PSINO=5\n"</span></span><br><span class="line">            + <span class="string">"Sec-Fetch-Dest: empty\n"</span> + <span class="string">"Sec-Fetch-Mode: cors\n"</span> + <span class="string">"Sec-Fetch-Site: same-origin"</span>;</span><br><span class="line">        <span class="keyword">final</span> String[] split = paramStr.split(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String paramVal : split) &#123;</span><br><span class="line">            <span class="keyword">final</span> String[] split1 = paramVal.split(<span class="string">": "</span>);</span><br><span class="line">            headers.set(split1[<span class="number">0</span>], split1[<span class="number">1</span>].trim());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpEntity&lt;&gt;(map, headers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RestTemplate <span class="title">getRestTemplate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> KeyStoreException, NoSuchAlgorithmException, KeyManagementException </span>&#123;</span><br><span class="line">        SSLContext sslContext = <span class="keyword">new</span> SSLContextBuilder().loadTrustMaterial(<span class="keyword">null</span>, <span class="keyword">new</span> TrustStrategy() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrusted</span><span class="params">(X509Certificate[] arg0, String arg1)</span> <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).build();</span><br><span class="line">        SSLConnectionSocketFactory csf =</span><br><span class="line">            <span class="keyword">new</span> SSLConnectionSocketFactory(sslContext, <span class="keyword">new</span> String[] &#123;<span class="string">"TLSv1.2"</span>&#125;, <span class="keyword">null</span>, NoopHostnameVerifier.INSTANCE);</span><br><span class="line">        CloseableHttpClient httpClient = HttpClients.custom().setSSLSocketFactory(csf).build();</span><br><span class="line">        HttpComponentsClientHttpRequestFactory requestFactory = <span class="keyword">new</span> HttpComponentsClientHttpRequestFactory();</span><br><span class="line">        requestFactory.setHttpClient(httpClient);</span><br><span class="line">        RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(requestFactory);</span><br><span class="line">        <span class="keyword">return</span> restTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ScriptEngineManager sem = <span class="keyword">new</span> ScriptEngineManager();</span><br><span class="line">            scriptEngine = sem.getEngineByName(<span class="string">"javascript"</span>);</span><br><span class="line">            String signFunc = <span class="string">"var window = [];\n"</span> + <span class="string">"\tfunction e(r) &#123;\n"</span> + <span class="string">"\tvar i = null;\n"</span></span><br><span class="line">                + <span class="string">"    var o = r.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g);\n"</span> + <span class="string">"    if (null === o) &#123;\n"</span></span><br><span class="line">                + <span class="string">"      var t = r.length;\n"</span></span><br><span class="line">                + <span class="string">"      t &gt; 30 &amp;&amp; (r = '' + r.substr(0, 10) + r.substr(Math.floor(t / 2) - 5, 10) + r.substr( - 10, 10))\n"</span></span><br><span class="line">                + <span class="string">"    &#125; else &#123;\n"</span></span><br><span class="line">                + <span class="string">"      for (var e = r.split(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/), C = 0, h = e.length, f = [\n"</span></span><br><span class="line">                + <span class="string">"      ]; h &gt; C; C++) '' !== e[C] &amp;&amp; f.push.apply(f, a(e[C].split(''))),\n"</span></span><br><span class="line">                + <span class="string">"      C !== h - 1 &amp;&amp; f.push(o[C]);\n"</span> + <span class="string">"      var g = f.length;\n"</span></span><br><span class="line">                + <span class="string">"      g &gt; 30 &amp;&amp; (r = f.slice(0, 10).join('') + f.slice(Math.floor(g / 2) - 5, Math.floor(g / 2) + 5).join('') + f.slice( - 10).join(''))\n"</span></span><br><span class="line">                + <span class="string">"    &#125;\n"</span> + <span class="string">"    var u = void 0,\n"</span></span><br><span class="line">                + <span class="string">"    l = '' + String.fromCharCode(103) + String.fromCharCode(116) + String.fromCharCode(107);\n"</span></span><br><span class="line">                + <span class="string">"    u = null !== i ? i : (i = "</span> + windowgtk + <span class="string">" || '') || '';\n"</span></span><br><span class="line">                + <span class="string">"    for (var d = u.split('.'), m = Number(d[0]) || 0, s = Number(d[1]) || 0, S = [\n"</span></span><br><span class="line">                + <span class="string">"    ], c = 0, v = 0; v &lt; r.length; v++) &#123;\n"</span> + <span class="string">"      var A = r.charCodeAt(v);\n"</span></span><br><span class="line">                + <span class="string">"      128 &gt; A ? S[c++] = A : (2048 &gt; A ? S[c++] = A &gt;&gt; 6 | 192 : (55296 === (64512 &amp; A) &amp;&amp; v + 1 &lt; r.length &amp;&amp; 56320 === (64512 &amp; r.charCodeAt(v + 1)) ? (A = 65536 + ((1023 &amp; A) &lt;&lt; 10) + (1023 &amp; r.charCodeAt(++v)), S[c++] = A &gt;&gt; 18 | 240, S[c++] = A &gt;&gt; 12 &amp; 63 | 128) : S[c++] = A &gt;&gt; 12 | 224, S[c++] = A &gt;&gt; 6 &amp; 63 | 128), S[c++] = 63 &amp; A | 128)\n"</span></span><br><span class="line">                + <span class="string">"    &#125;\n"</span></span><br><span class="line">                + <span class="string">"    for (var p = m, F = '' + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(97) + ('' + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(54)), D = '' + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(51) + ('' + String.fromCharCode(94) + String.fromCharCode(43) + String.fromCharCode(98)) + ('' + String.fromCharCode(43) + String.fromCharCode(45) + String.fromCharCode(102)), b = 0; b &lt; S.length; b++) p += S[b],\n"</span></span><br><span class="line">                + <span class="string">"    p = n(p, F);\n"</span> + <span class="string">"    return p = n(p, D),\n"</span> + <span class="string">"    p ^= s,\n"</span></span><br><span class="line">                + <span class="string">"    0 &gt; p &amp;&amp; (p = (2147483647 &amp; p) + 2147483648),\n"</span> + <span class="string">"    p %= 1000000,\n"</span></span><br><span class="line">                + <span class="string">"    p.toString() + '.' + (p ^ m)\n"</span> + <span class="string">"  &#125;\n"</span> + <span class="string">"  \n"</span> + <span class="string">"  function a(r) &#123;\n"</span></span><br><span class="line">                + <span class="string">"    if (Array.isArray(r)) &#123;\n"</span></span><br><span class="line">                + <span class="string">"      for (var o = 0, t = Array(r.length); o &lt; r.length; o++) t[o] = r[o];\n"</span> + <span class="string">"      return t\n"</span></span><br><span class="line">                + <span class="string">"    &#125;\n"</span> + <span class="string">"    return Array.from(r)\n"</span> + <span class="string">"  &#125;\n"</span> + <span class="string">"  function n(r, o) &#123;\n"</span></span><br><span class="line">                + <span class="string">"    for (var t = 0; t &lt; o.length - 2; t += 3) &#123;\n"</span> + <span class="string">"      var a = o.charAt(t + 2);\n"</span></span><br><span class="line">                + <span class="string">"      a = a &gt;= 'a' ? a.charCodeAt(0) - 87 : Number(a),\n"</span></span><br><span class="line">                + <span class="string">"      a = '+' === o.charAt(t + 1) ? r &gt;&gt;&gt; a : r &lt;&lt; a,\n"</span></span><br><span class="line">                + <span class="string">"      r = '+' === o.charAt(t) ? r + a &amp; 4294967295 : r ^ a\n"</span> + <span class="string">"    &#125;\n"</span> + <span class="string">"    return r\n"</span> + <span class="string">"  &#125;"</span>;</span><br><span class="line">            scriptEngine.eval(signFunc);</span><br><span class="line">            restTemplate = getRestTemplate();</span><br><span class="line">            List&lt;HttpMessageConverter&lt;?&gt;&gt; list = restTemplate.getMessageConverters();</span><br><span class="line">            <span class="keyword">for</span> (HttpMessageConverter&lt;?&gt; httpMessageConverter : list) &#123;</span><br><span class="line">                <span class="keyword">if</span> (httpMessageConverter <span class="keyword">instanceof</span> StringHttpMessageConverter) &#123;</span><br><span class="line">                    ((StringHttpMessageConverter)httpMessageConverter).setDefaultCharset(StandardCharsets.UTF_8);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一些js实用到码片段</title>
      <link href="/2022/03/20/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9Bjs%E5%AE%9E%E7%94%A8%E5%88%B0%E7%A0%81%E7%89%87%E6%AE%B5/"/>
      <url>/2022/03/20/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9Bjs%E5%AE%9E%E7%94%A8%E5%88%B0%E7%A0%81%E7%89%87%E6%AE%B5/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1200,阅读全文大约需要4分钟</p><blockquote><p>摘自<a href="https://www.toutiao.com/i6691917043509232139/" target="_blank" rel="noopener">今日头条</a>，一些以后可能会用到的代码片段。</p></blockquote><ol><li>原生JavaScript实现字符串长度截取<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cutstr</span>(<span class="params">str, len</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> temp;</span><br><span class="line"> <span class="keyword">var</span> icount = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> patrn = <span class="regexp">/[^\x00-\xff]/</span>; <span class="comment">// 匹配双字节字符(包括汉字在内)</span></span><br><span class="line"> <span class="keyword">var</span> strren = <span class="string">""</span>;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">   <span class="keyword">if</span> (icount &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">   temp = str.substr(i, <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">if</span> (patrn.exec(temp) == <span class="literal">null</span>) &#123;</span><br><span class="line">   icount = icount + <span class="number">1</span>;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   icount = icount + <span class="number">2</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> strre + <span class="string">"..."</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取域名主机<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHost</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> host = <span class="string">"null"</span>;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> url == <span class="literal">undefined</span> || url === <span class="literal">null</span>) &#123;</span><br><span class="line"> url = <span class="built_in">window</span>.location.href;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> regex = <span class="regexp">/^w+:/</span><span class="regexp">/([^/]*).*/</span>;</span><br><span class="line"> <span class="keyword">var</span> match = url.match(regex);</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> match != <span class="literal">undefined</span> &amp;&amp; match != <span class="literal">null</span>) &#123;</span><br><span class="line"> host = match[<span class="number">1</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> host;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript清除空格<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> reExtraSpace = <span class="regexp">/^s*(.*?)s+$/</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.replace(reExtraSpace, <span class="string">"$1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript替换全部<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">s1, s2</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(s1, <span class="string">"gm"</span>), s2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript转义html标签<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlEncode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> text.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;amp'</span>)</span><br><span class="line"> .replace(<span class="regexp">/"/g</span>, <span class="string">'&amp;quot'</span>)</span><br><span class="line"> .replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&amp;lt'</span>)</span><br><span class="line"> .replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&amp;gt'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript还原html标签<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlDecode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> text.replace(<span class="string">'&amp;amp'</span>, /&amp;<span class="regexp">/g)</span></span><br><span class="line"><span class="regexp"> .replace('&amp;quot', /</span><span class="string">"/g)</span></span><br><span class="line"><span class="string"> .replace('&amp;lt', /&lt;/g)</span></span><br><span class="line"><span class="string"> .replace('&amp;gt', /&gt;/g);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">7. 原生JavaScript时间日期格式替换</span></span><br><span class="line"><span class="string">```javascript</span></span><br><span class="line"><span class="string">Date.prototype.Format = function(formatStr) &#123;</span></span><br><span class="line"><span class="string"> var str = formatStr;</span></span><br><span class="line"><span class="string"> var Week = ['日', '一', '二', '三', '四', '五', '六'];</span></span><br><span class="line"><span class="string"> str = str.replace(/yyyy|YYYY/, this.getFullYear());</span></span><br><span class="line"><span class="string"> str = str.replace(/yy|YY/, (this.getYear() % 100) &gt; 9 ? (this.getYear() % 100).toString() : '0' + (this.getYear() % 100));</span></span><br><span class="line"><span class="string"> str = str.replace(/MM/, (this.getMonth() + 1) &gt; 9 ? (this.getMonth() + 1).toString() : '0' + (this.getMonth() + 1));</span></span><br><span class="line"><span class="string"> str = str.replace(/M/g, (this.getMonth() + 1));</span></span><br><span class="line"><span class="string"> str = str.replace(/w|W/g, Week[this.getDay()]);</span></span><br><span class="line"><span class="string"> str = str.replace(/dd|DD/, this.getDate() &gt; 9 ? this.getDate().toString() : '0' + this.getDate());</span></span><br><span class="line"><span class="string"> str = str.replace(/d|D/g, this.getDate());</span></span><br><span class="line"><span class="string"> str = str.replace(/hh|HH/, this.getHours() &gt; 9 ? this.getHours().toString() : '0' + this.getHours());</span></span><br><span class="line"><span class="string"> str = str.replace(/h|H/g, this.getHours());</span></span><br><span class="line"><span class="string"> str = str.replace(/mm/, this.getMinutes() &gt; 9 ? this.getMinutes().toString() : '0' + this.getMinutes());</span></span><br><span class="line"><span class="string"> str = str.replace(/m/g, this.getMinutes());</span></span><br><span class="line"><span class="string"> str = str.replace(/ss|SS/, this.getSeconds() &gt; 9 ? this.getSeconds().toString() : '0' + this.getSeconds());</span></span><br><span class="line"><span class="string"> str = str.replace(/s|S/g, this.getSeconds());</span></span><br><span class="line"><span class="string"> return str</span></span><br><span class="line"><span class="string"> &#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否为数字类型<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDigit</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> patrn = <span class="regexp">/^[0-9]*$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (patrn.exec(value) == <span class="literal">null</span> || value == <span class="string">""</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript设置cookie值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, Hours</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"> <span class="keyword">var</span> offset = <span class="number">8</span>;</span><br><span class="line"> <span class="keyword">var</span> utc = d.getTime() + (d.getTimezoneOffset() * <span class="number">60000</span>);</span><br><span class="line"> <span class="keyword">var</span> nd = utc + (<span class="number">3600000</span> * offset);</span><br><span class="line"> <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>(nd);</span><br><span class="line"> exp.setTime(exp.getTime() + Hours * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line"> <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + <span class="string">";path=/;expires="</span> + exp.toGMTString() + <span class="string">";domain=360doc.com;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取cookie值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>));</span><br><span class="line"> <span class="keyword">if</span> (arr != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript加入收藏夹<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddFavorite</span>(<span class="params">sURL, sTitle</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="built_in">window</span>.external.addFavorite(sURL, sTitle)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="built_in">window</span>.sidebar.addPanel(sTitle, sURL, <span class="string">""</span>)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> alert(<span class="string">"加入收藏失败，请使用Ctrl+D进行添加"</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript设为首页<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHomepage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</span><br><span class="line"> <span class="built_in">document</span>.body.style.behavior = <span class="string">'url(#default#homepage)'</span>;</span><br><span class="line"> <span class="built_in">document</span>.body.setHomePage(<span class="string">'http://***'</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.sidebar) &#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">window</span>.netscape) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> netscape.security.PrivilegeManager.enablePrivilege(<span class="string">"UniversalXPConnect"</span>)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> alert(<span class="string">"该操作被浏览器拒绝，如果想启用该功能，请在地址栏内输入 about:config,然后将项 signed.applets.codebase_principal_support 值该为true"</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> prefs = Components.classes[<span class="string">'@mozilla.org/preferences-service;1'</span>].getService(Components.interfaces.nsIPrefBranch);</span><br><span class="line"> prefs.setCharPref(<span class="string">'browser.startup.homepage'</span>, <span class="string">'http://***'</span>)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断IE6<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">var</span> isIE6 = ua.indexOf(<span class="string">"msie 6"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span> (isIE6) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="built_in">document</span>.execCommand(<span class="string">"BackgroundImageCache"</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript加载样式文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoadStyle</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="built_in">document</span>.createStyleSheet(url)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> <span class="keyword">var</span> cssLink = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line"> cssLink.rel = <span class="string">'stylesheet'</span>;</span><br><span class="line"> cssLink.type = <span class="string">'text/css'</span>;</span><br><span class="line"> cssLink.href = url;</span><br><span class="line"> <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line"> head.appendChild(cssLink)</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript返回脚本内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evalscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(s.indexOf(<span class="string">'&lt;script'</span>) == <span class="number">-1</span>) <span class="keyword">return</span> s;</span><br><span class="line"> <span class="keyword">var</span> p = <span class="regexp">/&lt;script[^&gt;]*?&gt;([^\x00]*?)&lt;/</span>script&gt;<span class="regexp">/ig;</span></span><br><span class="line"><span class="regexp"> var arr = [];</span></span><br><span class="line"><span class="regexp"> while(arr = p.exec(s)) &#123;</span></span><br><span class="line"><span class="regexp"> var p1 = /</span><span class="xml"><span class="tag">&lt;<span class="name">script[^</span>&gt;</span>]*?src="([^&gt;]*?)"[^&gt;]*?(reload="1")?(?:charset="([w-]+?)")?&gt;<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="regexp">/i;</span></span><br><span class="line"><span class="regexp"> var arr1 = [];</span></span><br><span class="line"><span class="regexp"> arr1 = p1.exec(arr[0]);</span></span><br><span class="line"><span class="regexp"> if(arr1) &#123;</span></span><br><span class="line"><span class="regexp"> appendscript(arr1[1], '', arr1[2], arr1[3]);</span></span><br><span class="line"><span class="regexp"> &#125; else &#123;</span></span><br><span class="line"><span class="regexp"> p1 = /</span><span class="xml"><span class="tag">&lt;<span class="name">script(.*?)</span>&gt;</span>([^\x00]+?)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><span class="regexp">/i;</span></span><br><span class="line"><span class="regexp"> arr1 = p1.exec(arr[0]);</span></span><br><span class="line"><span class="regexp"> appendscript('', arr1[2], arr1[1].indexOf('reload=') != -1);</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp"> &#125;</span></span><br><span class="line"><span class="regexp"> return s;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript清除脚本内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> s.replace(<span class="regexp">/&lt;script.*?&gt;.*?&lt;/</span>script&gt;<span class="regexp">/ig, '');</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript动态加载脚本文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendscript</span>(<span class="params">src, text, reload, charset</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> id = hash(src + text);</span><br><span class="line"> <span class="keyword">if</span>(!reload &amp;&amp; in_array(id, evalscripts)) <span class="keyword">return</span>;</span><br><span class="line"> <span class="keyword">if</span>(reload &amp;&amp; $(id)) &#123;</span><br><span class="line"> $(id).parentNode.removeChild($(id));</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> evalscripts.push(id);</span><br><span class="line"> <span class="keyword">var</span> scriptNode = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line"> scriptNode.type = <span class="string">"text/javascript"</span>;</span><br><span class="line"> scriptNode.id = id;</span><br><span class="line"> scriptNode.charset = charset ? charset : (BROWSER.firefox ? <span class="built_in">document</span>.characterSet : <span class="built_in">document</span>.charset);</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">if</span>(src) &#123;</span><br><span class="line"> scriptNode.src = src;</span><br><span class="line"> scriptNode.onloadDone = <span class="literal">false</span>;</span><br><span class="line"> scriptNode.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line"> JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line"> &#125;;</span><br><span class="line"> scriptNode.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>((scriptNode.readyState == <span class="string">'loaded'</span> || scriptNode.readyState == <span class="string">'complete'</span>) &amp;&amp; !scriptNode.onloadDone) &#123;</span><br><span class="line"> scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line"> JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(text)&#123;</span><br><span class="line"> scriptNode.text = text;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(scriptNode);</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript返回按ID检索的元素对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> !id ? <span class="literal">null</span> : <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript返回浏览器版本内容<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">browserVersion</span>(<span class="params">types</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> other = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span>(i <span class="keyword">in</span> types) &#123;</span><br><span class="line"> <span class="keyword">var</span> v = types[i] ? types[i] : i;</span><br><span class="line"> <span class="keyword">if</span>(USERAGENT.indexOf(v) != <span class="number">-1</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(v + <span class="string">'(\/|\s)([\d\.]+)'</span>, <span class="string">'ig'</span>);</span><br><span class="line"> <span class="keyword">var</span> matches = re.exec(USERAGENT);</span><br><span class="line"> <span class="keyword">var</span> ver = matches != <span class="literal">null</span> ? matches[<span class="number">2</span>] : <span class="number">0</span>;</span><br><span class="line"> other = ver !== <span class="number">0</span> &amp;&amp; v != <span class="string">'mozilla'</span> ? <span class="number">0</span> : other;</span><br><span class="line"> &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> ver = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">eval</span>(<span class="string">'BROWSER.'</span> + i + <span class="string">'= ver'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> BROWSER.other = other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript元素显示的通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> !id ? <span class="literal">null</span> : <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> obj = $(id);</span><br><span class="line"> <span class="keyword">if</span>(obj.style.visibility) &#123;</span><br><span class="line"> obj.style.visibility = obj.style.visibility == <span class="string">'visible'</span> ? <span class="string">'hidden'</span> : <span class="string">'visible'</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> obj.style.display = obj.style.display == <span class="string">''</span> ? <span class="string">'none'</span> : <span class="string">''</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript中有insertBefore方法,可惜却没有insertAfter方法?用如下函数实现<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertAfter</span>(<span class="params">newChild, refChild</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> parElem = refChild.parentNode; </span><br><span class="line"> <span class="keyword">if</span>(parElem.lastChild == refChild)&#123; </span><br><span class="line"> refChild.appendChild(newChild); </span><br><span class="line"> &#125;<span class="keyword">else</span>&#123; </span><br><span class="line"> parElem.insertBefore(newChild, refChild.nextSibling); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript中兼容浏览器绑定元素事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventSamp</span>(<span class="params">obj, evt, fn</span>)</span>&#123; </span><br><span class="line"> <span class="keyword">if</span> (obj.addEventListener) &#123; </span><br><span class="line"> obj.addEventListener(evt, fn, <span class="literal">false</span>); </span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123; </span><br><span class="line"> obj.attachEvent(<span class="string">'on'</span> + evt, fn); </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript光标停在文字的后面，文本框获得焦点时调用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">focusLast</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> e = event.srcElement; </span><br><span class="line"> <span class="keyword">var</span> r =e.createTextRange(); </span><br><span class="line"> r.moveStart(<span class="string">'character'</span>,e.value.length); </span><br><span class="line"> r.collapse(<span class="literal">true</span>); </span><br><span class="line"> r.select(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript检验URL链接是否有效<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlState</span>(<span class="params">URL</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"microsoft.xmlhttp"</span>); </span><br><span class="line"> xmlhttp.Open(<span class="string">"GET"</span>, URL, <span class="literal">false</span>); </span><br><span class="line"> <span class="keyword">try</span> &#123; </span><br><span class="line"> xmlhttp.Send(); </span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> </span><br><span class="line"> &#125; <span class="keyword">finally</span> &#123; </span><br><span class="line"> <span class="keyword">var</span> result = xmlhttp.responseText; </span><br><span class="line"> <span class="keyword">if</span>(result) &#123; </span><br><span class="line"> <span class="keyword">if</span>(xmlhttp.Status==<span class="number">200</span>)&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line"> &#125;<span class="keyword">else</span>&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript格式化CSS样式代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCss</span>(<span class="params">s</span>)</span>&#123; <span class="comment">//格式化代码</span></span><br><span class="line"> s = s.replace(<span class="regexp">/s*([&#123;&#125;:;,])s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/;s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line"> s = s.replace(<span class="regexp">/,[s.#d]*&#123;/g</span>, <span class="string">"&#123;"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/([^s])&#123;([^s])/g</span>, <span class="string">"$1 &#123;</span></span><br><span class="line"><span class="string">$2"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/([^s])&#125;([^</span></span><br><span class="line"><span class="regexp">]*)/g</span>, <span class="string">"$1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">$2"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/([^s]);([^s&#125;])/g</span>, <span class="string">"$1;</span></span><br><span class="line"><span class="string">$2"</span>);</span><br><span class="line"> <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript压缩CSS样式代码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">yasuoCss</span> (<span class="params">s</span>) </span>&#123; <span class="comment">//压缩代码</span></span><br><span class="line"> s = s.replace(<span class="comment">//*(.|</span></span><br><span class="line">)*?*<span class="comment">//g, ""); //删除注释</span></span><br><span class="line"> s = s.replace(<span class="regexp">/s*([&#123;&#125;:;,])s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line"> s = s.replace(<span class="regexp">/,[s.#d]*&#123;/g</span>, <span class="string">"&#123;"</span>); <span class="comment">//容错处理</span></span><br><span class="line"> s = s.replace(<span class="regexp">/;s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line"> s = s.match(<span class="regexp">/^s*(S+(s+S+)*)s*$/</span>); <span class="comment">//去掉首尾空白</span></span><br><span class="line"> <span class="keyword">return</span> (s == <span class="literal">null</span>) ? <span class="string">""</span> : s[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取当前路径<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPageUrl = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.href === <span class="literal">undefined</span>) &#123;</span><br><span class="line"> currentPageUrl = <span class="built_in">document</span>.location.toString().toLowerCase();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"> currentPageUrl = <span class="keyword">this</span>.href.toString().toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript将IP地址转成整型<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_ip2int</span>(<span class="params">ip</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"> ip = ip.split(<span class="string">"."</span>);</span><br><span class="line"> num = <span class="built_in">Number</span>(ip[<span class="number">0</span>]) * <span class="number">256</span> * <span class="number">256</span> * <span class="number">256</span> + <span class="built_in">Number</span>(ip[<span class="number">1</span>]) * <span class="number">256</span> * <span class="number">256</span> + <span class="built_in">Number</span>(ip[<span class="number">2</span>]) * <span class="number">256</span> + <span class="built_in">Number</span>(ip[<span class="number">3</span>]);</span><br><span class="line"> num = num &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript整型解析为IP地址<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_int2iP</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> str;</span><br><span class="line"> <span class="keyword">var</span> tt = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"> tt[<span class="number">0</span>] = (num &gt;&gt;&gt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"> tt[<span class="number">1</span>] = ((num &lt;&lt; <span class="number">8</span>) &gt;&gt;&gt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line"> tt[<span class="number">2</span>] = (num &lt;&lt; <span class="number">16</span>) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line"> tt[<span class="number">3</span>] = (num &lt;&lt; <span class="number">24</span>) &gt;&gt;&gt; <span class="number">24</span>;</span><br><span class="line"> str = <span class="built_in">String</span>(tt[<span class="number">0</span>]) + <span class="string">"."</span> + <span class="built_in">String</span>(tt[<span class="number">1</span>]) + <span class="string">"."</span> + <span class="built_in">String</span>(tt[<span class="number">2</span>]) + <span class="string">"."</span> + <span class="built_in">String</span>(tt[<span class="number">3</span>]);</span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现checkbox全选与全不选<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAll</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> selectall = <span class="built_in">document</span>.getElementById(<span class="string">"selectall"</span>);</span><br><span class="line"> <span class="keyword">var</span> allbox = <span class="built_in">document</span>.getElementsByName(<span class="string">"allbox"</span>);</span><br><span class="line"> <span class="keyword">if</span> (selectall.checked) &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++) &#123;</span><br><span class="line"> allbox[i].checked = <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; allbox.length; i++) &#123;</span><br><span class="line"> allbox[i].checked = <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否移动设备<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>._isMobile === <span class="string">'boolean'</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> screenWidth = <span class="keyword">this</span>.getScreenWidth();</span><br><span class="line"> <span class="keyword">var</span> fixViewPortsExperiment = rendererModel.runningExperiments.FixViewport || rendererModel.runningExperiments.fixviewport;</span><br><span class="line"> <span class="keyword">var</span> fixViewPortsExperimentRunning = fixViewPortsExperiment &amp;&amp; (fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>);</span><br><span class="line"> <span class="keyword">if</span>(!fixViewPortsExperiment)&#123;</span><br><span class="line"> <span class="keyword">if</span>(!<span class="keyword">this</span>.isAppleMobileDevice())&#123;</span><br><span class="line"> screenWidth = screenWidth/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> isMobileScreenSize = screenWidth &lt; <span class="number">600</span>;</span><br><span class="line"> <span class="keyword">var</span> isMobileUserAgent = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">this</span>._isMobile = isMobileScreenSize &amp;&amp; <span class="keyword">this</span>.isTouchScreen();</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否移动设备访问<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobileUserAgent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (<span class="regexp">/iphone|ipod|android.*mobile|windows.*phone|blackberry.*mobile/i</span>.test(<span class="built_in">window</span>.navigator.userAgent.toLowerCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否苹果移动设备访问<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAppleMobileDevice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (<span class="regexp">/iphone|ipod|ipad|Macintosh/i</span>.test(navigator.userAgent.toLowerCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否安卓移动设备访问<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroidMobileDevice</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> (<span class="regexp">/android/i</span>.test(navigator.userAgent.toLowerCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否Touch屏幕<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTouchScreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> ((<span class="string">'ontouchstart'</span> <span class="keyword">in</span> <span class="built_in">window</span>) || <span class="built_in">window</span>.DocumentTouch &amp;&amp; <span class="built_in">document</span> <span class="keyword">instanceof</span> DocumentTouch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否在安卓上的谷歌浏览器<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNewChromeOnAndroid</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice())&#123;</span><br><span class="line"> <span class="keyword">var</span> userAgent = navigator.userAgent.toLowerCase();</span><br><span class="line"> <span class="keyword">if</span>((<span class="regexp">/chrome/i</span>.test(userAgent)))&#123;</span><br><span class="line"> <span class="keyword">var</span> parts = userAgent.split(<span class="string">'chrome/'</span>);</span><br><span class="line"> <span class="keyword">var</span> fullVersionString = parts[<span class="number">1</span>].split(<span class="string">" "</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">var</span> versionString = fullVersionString.split(<span class="string">'.'</span>)[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">var</span> version = <span class="built_in">parseInt</span>(versionString);</span><br><span class="line"> <span class="keyword">if</span>(version &gt;= <span class="number">27</span>)&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否打开视窗<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isViewportOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> !!<span class="built_in">document</span>.getElementById(<span class="string">'wixMobileViewport'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取移动设备初始化大小<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInitZoom</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(!<span class="keyword">this</span>._initZoom) &#123;</span><br><span class="line"> <span class="keyword">var</span> screenWidth = <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid()) &#123;</span><br><span class="line"> screenWidth = screenWidth / <span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">this</span>._initZoom = screenWidth /<span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>._initZoom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取移动设备最大化大小<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getZoom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> screenWidth = (<span class="built_in">Math</span>.abs(<span class="built_in">window</span>.orientation) === <span class="number">90</span>) ? <span class="built_in">Math</span>.max(screen.height, screen.width) : <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid())&#123;</span><br><span class="line"> screenWidth = screenWidth/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> FixViewPortsExperiment = rendererModel.runningExperiments.FixViewport || rendererModel.runningExperiments.fixviewport;</span><br><span class="line"> <span class="keyword">var</span> FixViewPortsExperimentRunning = FixViewPortsExperiment &amp;&amp; (FixViewPortsExperiment === <span class="string">"New"</span> || FixViewPortsExperiment === <span class="string">"new"</span>);</span><br><span class="line"> <span class="keyword">if</span>(FixViewPortsExperimentRunning)&#123;</span><br><span class="line"> <span class="keyword">return</span> screenWidth / <span class="built_in">window</span>.innerWidth;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> screenWidth / <span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取移动设备屏幕宽度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScreenWidth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> smallerSide = <span class="built_in">Math</span>.min(screen.width, screen.height);</span><br><span class="line"> <span class="keyword">var</span> fixViewPortsExperiment = rendererModel.runningExperiments.FixViewport || rendererModel.runningExperiments.fixviewport;</span><br><span class="line"> <span class="keyword">var</span> fixViewPortsExperimentRunning = fixViewPortsExperiment &amp;&amp; (fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>);</span><br><span class="line"> <span class="keyword">if</span>(fixViewPortsExperiment)&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid())&#123;</span><br><span class="line"> smallerSide = smallerSide/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> smallerSide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript完美判断是否为网址<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsURL</span>(<span class="params">strUrl</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> regular = <span class="regexp">/^(((https?|ftp):/</span><span class="regexp">/)?[-a-z0-9]+(.[-a-z0-9]+)*.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]d)|(1dd)|([1-9]d)|d))(/</span>[-a-z0<span class="number">-9</span>_:@&amp;?=+,.!<span class="regexp">/~%$]*)?)$/i</span></span><br><span class="line"> <span class="keyword">if</span> (regular.test(strUrl)) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript根据样式名称检索元素对象<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementsByClassName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> tags = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>) || <span class="built_in">document</span>.all;</span><br><span class="line"> <span class="keyword">var</span> els = [];</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tags.length; i++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (tags[i].className) &#123;</span><br><span class="line"> <span class="keyword">var</span> cs = tags[i].className.split(<span class="string">' '</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; cs.length; j++) &#123;</span><br><span class="line"> <span class="keyword">if</span> (name == cs[j]) &#123;</span><br><span class="line"> els.push(tags[i]);</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> els;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否以某个字符串开头<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.startWith = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.indexOf(s) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否以某个字符串结束<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.endWith = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d = <span class="keyword">this</span>.length - s.length;</span><br><span class="line"> <span class="keyword">return</span> (d &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.lastIndexOf(s) == d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript返回IE浏览器的版本号<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getIE</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">window</span>.ActiveXObject)&#123;</span><br><span class="line"> <span class="keyword">var</span> v = navigator.userAgent.match(<span class="regexp">/MSIE ([^;]+)/</span>)[<span class="number">1</span>];</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">parseFloat</span>(v.substring(<span class="number">0</span>, v.indexOf(<span class="string">"."</span>)));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面高度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> g = <span class="built_in">document</span>, a = g.body, f = g.documentElement, d = g.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line"> ? a</span><br><span class="line"> : g.documentElement;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollHeight, a.scrollHeight, d.clientHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面scrollLeft<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollLeft</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line"> <span class="keyword">return</span> a.documentElement.scrollLeft || a.body.scrollLeft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面可视宽度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewWidth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d = <span class="built_in">document</span>, a = d.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line"> ? d.body</span><br><span class="line"> : d.documentElement;</span><br><span class="line"> <span class="keyword">return</span> a.clientWidth; <span class="comment">// 可视宽度为clientWidth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面宽度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 考虑带滚动条的全部宽度</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageWidth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> g = <span class="built_in">document</span>, a = g.body, f = g.documentElement, d = g.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line"> ? a</span><br><span class="line"> : g.documentElement;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollWidth, a.scrollWidth, d.clientWidth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取页面scrollTop<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollTop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line"> <span class="keyword">return</span> a.documentElement.scrollTop || a.body.scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件加密工具</title>
      <link href="/2022/03/20/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2022/03/20/%E6%96%87%E4%BB%B6%E5%8A%A0%E5%AF%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>文章字数：1045,阅读全文大约需要4分钟</p><blockquote><p>主要功能是将指定文件加密到加密库中，以及从加密库中解密相应文件</p></blockquote><h1 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h1><ul><li><code>ShaUtil.java</code> sha256工具类，主要用于密码签名成<code>aes256</code>的秘钥</li><li><code>AesUtil.java</code>加密工具类</li><li><code>EncryptionFileProcessor.java</code>单个文件加密，调用前面的工具类加密文件</li><li><code>FileSearchStream.java</code>文件搜索主类，搜索根目录下的文件</li><li><code>EncryptionDirectoryProcessor.java</code>调用搜索和加密类完成文件夹加密解密，查看操作</li><li><code>Test.java</code>测试及演示类</li></ul><h1 id="加密相关工具"><a href="#加密相关工具" class="headerlink" title="加密相关工具"></a>加密相关工具</h1><ul><li><code>ShaUtil.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.crypto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * sha256工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-11-11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShaUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_ALGORITHM = <span class="string">"SHA-256"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CHARSET = <span class="string">"UTF-8"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * sha256签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encodingStr(String str) <span class="keyword">throws</span> NoSuchAlgorithmException, UnsupportedEncodingException &#123;</span><br><span class="line">        MessageDigest messageDigest;</span><br><span class="line">        messageDigest = MessageDigest.getInstance(KEY_ALGORITHM);</span><br><span class="line">        messageDigest.update(str.getBytes(DEFAULT_CHARSET));</span><br><span class="line">        <span class="keyword">return</span> messageDigest.digest();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>AesUtil.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.crypto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.*;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AES加密工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-11-11 10:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AesUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 算法名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_ALGORITHM = <span class="string">"AES"</span>;</span><br><span class="line">    <span class="comment">/** 默认的加密算法及模式 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_CIPHER_ALGORITHM = <span class="string">"AES/ECB/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES 加密操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byteContent</span></span><br><span class="line"><span class="comment">     *            待加密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            加密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 加密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(<span class="keyword">byte</span>[] byteContent, <span class="keyword">byte</span>[] key) <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</span><br><span class="line">        <span class="comment">// 创建密码器</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">        <span class="comment">// 初始化为加密模式的密码器</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, getSecretKey(key));</span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(byteContent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encryptByStream</span><span class="params">(InputStream from, OutputStream to, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 创建密码器</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">        <span class="comment">// 初始化为加密模式的密码器</span></span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, getSecretKey(key));</span><br><span class="line">        <span class="keyword">try</span> (CipherInputStream cipherInputStream = <span class="keyword">new</span> CipherInputStream(from, cipher)) &#123;</span><br><span class="line">            <span class="keyword">int</span> l;</span><br><span class="line">            <span class="keyword">byte</span>[] cache = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span> * <span class="number">100</span>];</span><br><span class="line">            <span class="keyword">while</span> ((l = cipherInputStream.read(cache)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                to.write(cache, <span class="number">0</span>, l);</span><br><span class="line">                to.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decryptByStream</span><span class="params">(InputStream from, OutputStream to, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, IOException </span>&#123;</span><br><span class="line">        Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, getSecretKey(key));</span><br><span class="line">        <span class="keyword">try</span> (CipherOutputStream cipherOutputStream = <span class="keyword">new</span> CipherOutputStream(to, cipher))&#123;</span><br><span class="line">            <span class="keyword">int</span> l;</span><br><span class="line">            <span class="keyword">byte</span>[] cache = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span> * <span class="number">100</span>];</span><br><span class="line">            <span class="keyword">while</span> ((l = from.read(cache)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                cipherOutputStream.write(cache, <span class="number">0</span>, l);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES 加密操作，返回Base64字符串</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byteContent</span></span><br><span class="line"><span class="comment">     *            待加密内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            加密密钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Base64转码后的加密数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">base64Encrypt</span><span class="params">(<span class="keyword">byte</span>[] byteContent, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] encrypt = encrypt(byteContent, key);</span><br><span class="line">        <span class="keyword">if</span> (encrypt != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Base64.getEncoder().encodeToString(encrypt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES 解密操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] content, <span class="keyword">byte</span>[] key) <span class="keyword">throws</span> NoSuchPaddingException, NoSuchAlgorithmException, InvalidKeyException, BadPaddingException, IllegalBlockSizeException &#123;</span><br><span class="line">        <span class="comment">// 实例化</span></span><br><span class="line">        Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);</span><br><span class="line">        <span class="comment">// 使用密钥初始化，设置为解密模式</span></span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, getSecretKey(key));</span><br><span class="line">        <span class="comment">// 执行操作</span></span><br><span class="line">        <span class="keyword">return</span> cipher.doFinal(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * AES 解密操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     *            base64形式的密文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     *            秘钥</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 解密后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(String content, <span class="keyword">byte</span>[] key) <span class="keyword">throws</span> IllegalBlockSizeException, InvalidKeyException, BadPaddingException, NoSuchAlgorithmException, NoSuchPaddingException &#123;</span><br><span class="line">        <span class="keyword">if</span> (content != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] decode = Base64.getDecoder().decode(content);</span><br><span class="line">            <span class="keyword">return</span> decrypt(decode, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成指定算法密钥生成器的 KeyGenerator 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SecretKeySpec <span class="title">getSecretKey</span><span class="params">(<span class="keyword">final</span> <span class="keyword">byte</span>[] key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(key, KEY_ALGORITHM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="文件加密相关工具类"><a href="#文件加密相关工具类" class="headerlink" title="文件加密相关工具类"></a>文件加密相关工具类</h1><ul><li><code>EncryptionFileProcessor.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.colin.tool.crypto.AesUtil;</span><br><span class="line"><span class="keyword">import</span> com.colin.tool.crypto.ShaUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单个文件加密解密相关工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-11-11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptionFileProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 全局秘钥 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] key = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">/** 默认是否保存源文件 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> saveResource = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">/** 默认保存位置为源文件所在文件夹，可以自定义 */</span></span><br><span class="line">    <span class="keyword">private</span> String toPath = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String cryptoSuffix = <span class="string">".cl"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String cryptoPrefix = <span class="string">"cry-"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncryptionFileProcessor</span><span class="params">(String pwd)</span> <span class="keyword">throws</span> UnsupportedEncodingException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = pwd != <span class="keyword">null</span> ? ShaUtil.encodingStr(pwd) : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置全局秘钥</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EncryptionFileProcessor <span class="title">setPwd</span><span class="params">(String pwd)</span> <span class="keyword">throws</span> UnsupportedEncodingException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = pwd != <span class="keyword">null</span> ? ShaUtil.encodingStr(pwd) : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置加密、解密生成的文件存放文件夹</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toPath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToPath</span><span class="params">(String toPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.toPath = toPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置是否保存源文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saveResource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EncryptionFileProcessor <span class="title">setSaveResource</span><span class="params">(<span class="keyword">boolean</span> saveResource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.saveResource = saveResource;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encryptFile</span><span class="params">(File resource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        encryptFile(resource, key, saveResource, <span class="keyword">this</span>.toPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decryptFile</span><span class="params">(File resource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        decryptFile(resource, key, saveResource, <span class="keyword">this</span>.toPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密文件名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encryptFileName</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> encryptFileName(fileName, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密文件名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decryptFileName</span><span class="params">(String fileName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> decryptFileName(fileName, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource 源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saveResource 加密之后是否删除源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toPath 存放位置，空则放在源文件所在文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encryptFile</span><span class="params">(File resource, String pwd, <span class="keyword">boolean</span> saveResource, String toPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] key = ShaUtil.encodingStr(pwd);</span><br><span class="line">        encryptFile(resource, key, saveResource, toPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> resource 加密文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saveResource 解密之后是否删除加密文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toPath 存放位置，空则放在源文件所在文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decryptFile</span><span class="params">(File resource, String pwd, <span class="keyword">boolean</span> saveResource, String toPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] key = ShaUtil.encodingStr(pwd);</span><br><span class="line">        decryptFile(resource, key, saveResource, toPath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密文件名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encryptFileName</span><span class="params">(String fileName, String pwd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] key = ShaUtil.encodingStr(pwd);</span><br><span class="line">        <span class="keyword">return</span> encryptFileName(fileName, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密文件名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decryptFileName</span><span class="params">(String fileName, String pwd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] key = ShaUtil.encodingStr(pwd);</span><br><span class="line">        <span class="keyword">return</span> decryptFileName(fileName, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decryptFile</span><span class="params">(File resource, <span class="keyword">byte</span>[] key, <span class="keyword">boolean</span> saveResource, String toPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resource.exists() &amp;&amp; isEncryptedFileName(resource.getName())) &#123;</span><br><span class="line">            <span class="keyword">assert</span> key != <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> (InputStream inputStream = <span class="keyword">new</span> FileInputStream(resource)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String encryptName = resource.getName();</span><br><span class="line">                <span class="keyword">final</span> String fileName = decryptFileName(encryptName, key);</span><br><span class="line">                <span class="keyword">if</span>(toPath == <span class="keyword">null</span> || <span class="string">""</span>.equals(toPath.trim())) &#123;</span><br><span class="line">                    toPath = resource.getParent();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> File file = <span class="keyword">new</span> File(toPath + File.separator + fileName);</span><br><span class="line">                <span class="keyword">if</span>(file.exists()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"decrypt file is exists, encrypt name = ["</span> + encryptName + <span class="string">"], decrypt name = ["</span> + fileName + <span class="string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> (<span class="keyword">final</span> FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(file)) &#123;</span><br><span class="line">                    AesUtil.decryptByStream(inputStream, outputStream, key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!saveResource) &#123;</span><br><span class="line">                resource.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encryptFile</span><span class="params">(File resource, <span class="keyword">byte</span>[] key, <span class="keyword">boolean</span> saveResource, String toPath)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(resource.exists() &amp;&amp; !isEncryptedFileName(resource.getName())) &#123;</span><br><span class="line">            <span class="keyword">assert</span> key != <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> (FileInputStream inputStream = <span class="keyword">new</span> FileInputStream(resource)) &#123;</span><br><span class="line">                <span class="keyword">final</span> String fileName = encryptFileName(resource.getName(), key);</span><br><span class="line">                <span class="keyword">if</span>(toPath == <span class="keyword">null</span> || <span class="string">""</span>.equals(toPath.trim())) &#123;</span><br><span class="line">                    toPath = resource.getParent();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> File encryptFile = <span class="keyword">new</span> File(toPath + File.separator + fileName);</span><br><span class="line">                <span class="keyword">if</span>(encryptFile.exists()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"encrypt file is exists! resource name = ["</span> + fileName + <span class="string">"]"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> (<span class="keyword">final</span> FileOutputStream outputStream = <span class="keyword">new</span> FileOutputStream(encryptFile))&#123;</span><br><span class="line">                    AesUtil.encryptByStream(inputStream, outputStream, key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!saveResource) &#123;</span><br><span class="line">                resource.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">encryptFileName</span><span class="params">(String fileName, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> key != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(!isEncryptedFileName(fileName)) &#123;</span><br><span class="line">            String encrypt = AesUtil.base64Encrypt(fileName.getBytes(StandardCharsets.UTF_8), key);</span><br><span class="line">            <span class="keyword">assert</span> encrypt != <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> cryptoPrefix + encrypt.replace(<span class="string">"/"</span>, <span class="string">"#"</span>) + cryptoSuffix;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">decryptFileName</span><span class="params">(String fileName, <span class="keyword">byte</span>[] key)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> key != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(isEncryptedFileName(fileName)) &#123;</span><br><span class="line">            fileName = fileName.replace(<span class="string">"#"</span>, <span class="string">"/"</span>).replace(cryptoSuffix, <span class="string">""</span>).replace(cryptoPrefix, <span class="string">""</span>);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">byte</span>[] decrypt = AesUtil.decrypt(fileName, key);</span><br><span class="line">            <span class="keyword">assert</span> decrypt != <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(decrypt, StandardCharsets.UTF_8);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEncryptedFileName</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fileName.startsWith(cryptoPrefix) &amp;&amp; fileName.endsWith(cryptoSuffix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>FileSearchStream.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件搜索流</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSearchStream</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> File[] root;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> parallel;</span><br><span class="line">    <span class="keyword">private</span> Consumer&lt;File&gt; afterConsumer;</span><br><span class="line">    <span class="keyword">private</span> Function&lt;File, Boolean&gt; filter;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> deep = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FileSearchStream</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FileSearchStream</span><span class="params">(File... root)</span> </span>&#123;</span><br><span class="line">        init(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个查询对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FileSearchStream <span class="title">of</span><span class="params">(File... root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FileSearchStream(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDeep</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deep;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 如果是文件夹，是否遍历 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileSearchStream <span class="title">setDeep</span><span class="params">(<span class="keyword">boolean</span> deep)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.deep = deep;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取本地所有盘符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> File[] getSystemRoot() &#123;</span><br><span class="line">        <span class="keyword">return</span> File.listRoots();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤条件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filter</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileSearchStream <span class="title">filter</span><span class="params">(Function&lt;File, Boolean&gt; filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.filter = filter;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找到之后如何处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> afterConsumer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;File&gt; afterConsumer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.afterConsumer = afterConsumer;</span><br><span class="line">        searchRoot();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换成list</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listFunction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">toList</span><span class="params">(Function&lt;File, T&gt; listFunction)</span> </span>&#123;</span><br><span class="line">        List&lt;T&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.afterConsumer = file -&gt; list.add(listFunction.apply(file));</span><br><span class="line">        searchRoot();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分组保存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> keyFunction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> valFunction</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T, R&gt; Map&lt;T, List&lt;R&gt;&gt; groupingBy(Function&lt;File, T&gt; keyFunction, Function&lt;File, R&gt; valFunction) &#123;</span><br><span class="line">        Map&lt;T, List&lt;R&gt;&gt; res = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">this</span>.afterConsumer = file -&gt; &#123;</span><br><span class="line">            T key = keyFunction.apply(file);</span><br><span class="line">            R val = valFunction.apply(file);</span><br><span class="line">            <span class="keyword">if</span> (res.containsKey(key)) &#123;</span><br><span class="line">                res.get(key).add(val);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                List&lt;R&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">                list.add(val);</span><br><span class="line">                res.put(key, list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        searchRoot();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据父级文件夹分组</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, List&lt;String&gt;&gt; groupingByPath() &#123;</span><br><span class="line">        <span class="keyword">return</span> groupingBy(File::getParent, File::getName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FileSearchStream <span class="title">reset</span><span class="params">(File... root)</span> </span>&#123;</span><br><span class="line">        init(root);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> root</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(File... root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.root = root;</span><br><span class="line">        <span class="keyword">this</span>.parallel = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.afterConsumer = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.filter = (file) -&gt; <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始搜索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">searchRoot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Stream&lt;File&gt; fileStream = Arrays.stream(root);</span><br><span class="line">        <span class="keyword">if</span> (parallel) &#123;</span><br><span class="line">            fileStream.parallel().forEach(<span class="keyword">this</span>::search);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            fileStream.forEach(<span class="keyword">this</span>::search);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应盘符下符合要求的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        File[] f = file.listFiles();</span><br><span class="line">        <span class="keyword">if</span> (f != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (f.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (File files : f) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(deep) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (files.isDirectory()) &#123;</span><br><span class="line">                            search(files);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (filter.apply(files)) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (afterConsumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    afterConsumer.accept(files);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (filter.apply(files)) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (afterConsumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                afterConsumer.accept(files);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件后缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> FileSuffix &#123;</span><br><span class="line">        <span class="comment">/** 图片 */</span></span><br><span class="line">        IMG(<span class="string">"psd"</span>, <span class="string">"pdd"</span>, <span class="string">"gif"</span>, <span class="string">"jpeg"</span>, <span class="string">"jpg"</span>, <span class="string">"png"</span>),</span><br><span class="line">        <span class="comment">/** 文档 */</span></span><br><span class="line">        DOCUMENT(<span class="string">"doc"</span>, <span class="string">"docx"</span>, <span class="string">"xls"</span>, <span class="string">"xlsx"</span>, <span class="string">"csv"</span>, <span class="string">"ppt"</span>, <span class="string">"pptx"</span>, <span class="string">"txt"</span>),</span><br><span class="line">        <span class="comment">/** 程序 */</span></span><br><span class="line">        APPLICATION(<span class="string">"exe"</span>, <span class="string">"bat"</span>, <span class="string">"cmd"</span>, <span class="string">"sh"</span>, <span class="string">"ink"</span>, <span class="string">"py"</span>, <span class="string">"class"</span>, <span class="string">"java"</span>),</span><br><span class="line">        <span class="comment">/** 音频 */</span></span><br><span class="line">        AUDIO(<span class="string">"mp3"</span>, <span class="string">"flac"</span>, <span class="string">"ape"</span>, <span class="string">"cd"</span>, <span class="string">"wave"</span>, <span class="string">"aiff"</span>),</span><br><span class="line">        <span class="comment">/** 视频 */</span></span><br><span class="line">        VIDEO(</span><br><span class="line">            <span class="string">"avi"</span>, <span class="string">"mov"</span>, <span class="string">"qt"</span>, <span class="string">"asf"</span>, <span class="string">"rm"</span>, <span class="string">"navi"</span>, <span class="string">"divX"</span>, <span class="string">"mpeg"</span>, <span class="string">"mpg"</span>, <span class="string">"ogg"</span>, <span class="string">"mod"</span>, <span class="string">"rmvb"</span>, <span class="string">"flv"</span>, <span class="string">"mp4"</span>, <span class="string">"3gp"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String[] suffix;</span><br><span class="line"></span><br><span class="line">        FileSuffix(String... suffix) &#123;</span><br><span class="line">            <span class="keyword">this</span>.suffix = suffix;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (fileName.contains(<span class="string">"."</span>)) &#123;</span><br><span class="line">                String fileSuffix = fileName.split(<span class="string">"\\."</span>)[<span class="number">1</span>];</span><br><span class="line">                fileSuffix = fileSuffix.toLowerCase();</span><br><span class="line">                <span class="keyword">for</span> (String s : suffix) &#123;</span><br><span class="line">                    String b = s.toLowerCase();</span><br><span class="line">                    <span class="keyword">if</span> (fileSuffix.equals(b)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> String[] getSuffix() &#123;</span><br><span class="line">            <span class="keyword">return</span> suffix;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>EncryptionDirectoryProcessor.java</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Consumer;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件夹加密解密工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-12-03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptionDirectoryProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EncryptionFileProcessor processor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Consumer&lt;File&gt; searchLog = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Consumer&lt;File&gt; processorLog = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新建一个文件夹加密处理器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pwd 密码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchAlgorithmException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncryptionDirectoryProcessor</span><span class="params">(String pwd)</span> <span class="keyword">throws</span> UnsupportedEncodingException, NoSuchAlgorithmException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processor = <span class="keyword">new</span> EncryptionFileProcessor(pwd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否保存源文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> saveResource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EncryptionDirectoryProcessor <span class="title">setSaveResource</span><span class="params">(<span class="keyword">boolean</span> saveResource)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processor.setSaveResource(saveResource);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置文件存放位置，默认是源文件所在文件夹</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> toPath</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EncryptionDirectoryProcessor <span class="title">setToPath</span><span class="params">(String toPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processor.setToPath(toPath);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加密文件夹</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encryptDirectory</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">this</span>.processor != <span class="keyword">null</span>;</span><br><span class="line">        encryptDirectory(path, <span class="keyword">this</span>.processor, <span class="keyword">this</span>.searchLog, <span class="keyword">this</span>.processorLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密文件夹</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decryptDirectory</span><span class="params">(String path)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">assert</span> <span class="keyword">this</span>.processor != <span class="keyword">null</span>;</span><br><span class="line">        decryptDirectory(path, <span class="keyword">this</span>.processor, <span class="keyword">this</span>.searchLog, <span class="keyword">this</span>.processorLog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密并查看文件夹内文件名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deep 如果内部包含文件夹，是否遍历文件夹</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">listDirectory</span><span class="params">(String path, <span class="keyword">boolean</span> deep)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> listDirectory(path, <span class="keyword">this</span>.processor, deep);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Consumer&lt;File&gt; <span class="title">getSearchLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> searchLog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSearchLog</span><span class="params">(Consumer&lt;File&gt; searchLog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.searchLog = searchLog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Consumer&lt;File&gt; <span class="title">getProcessorLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> processorLog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProcessorLog</span><span class="params">(Consumer&lt;File&gt; processorLog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.processorLog = processorLog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    AtomicLong index;</span><br><span class="line">    AtomicLong processorIndex = <span class="keyword">new</span> AtomicLong();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EncryptionDirectoryProcessor <span class="title">defaultLog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.index = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">        <span class="keyword">this</span>.processorIndex = <span class="keyword">new</span> AtomicLong();</span><br><span class="line">        <span class="keyword">this</span>.setSearchLog(file -&gt;</span><br><span class="line">                System.out.println(<span class="string">"["</span> + index.incrementAndGet() + <span class="string">"] file find, path = ["</span> + file.getPath() + <span class="string">"]"</span>));</span><br><span class="line">        <span class="keyword">this</span>.setProcessorLog(file -&gt;</span><br><span class="line">                System.out.println(<span class="string">"["</span> + processorIndex.incrementAndGet() + <span class="string">"/"</span> + index.get() + <span class="string">"] file is Processor "</span> + ((<span class="keyword">int</span>) (((<span class="keyword">double</span>) processorIndex.get() / (<span class="keyword">double</span>) index.get()) * <span class="number">100</span>)) + <span class="string">"%"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// static</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encryptDirectory</span><span class="params">(String path, EncryptionFileProcessor processor)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        encryptDirectory(path, processor, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encryptDirectory</span><span class="params">(String path, EncryptionFileProcessor processor, Consumer&lt;File&gt; searchLog, Consumer&lt;File&gt; processorLog)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;File&gt; fileList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        FileSearchStream.of(<span class="keyword">new</span> File(path)).forEach(file -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(searchLog != <span class="keyword">null</span>) &#123;</span><br><span class="line">                searchLog.accept(file);</span><br><span class="line">            &#125;</span><br><span class="line">            fileList.add(file);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (File file : fileList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(processorLog != <span class="keyword">null</span>) &#123;</span><br><span class="line">                processorLog.accept(file);</span><br><span class="line">            &#125;</span><br><span class="line">            processor.encryptFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decryptDirectory</span><span class="params">(String path, EncryptionFileProcessor processor)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        decryptDirectory(path, processor, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decryptDirectory</span><span class="params">(String path, EncryptionFileProcessor processor, Consumer&lt;File&gt; searchLog, Consumer&lt;File&gt; processorLog)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;File&gt; fileList = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        FileSearchStream.of(<span class="keyword">new</span> File(path)).forEach(file -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span>(searchLog != <span class="keyword">null</span>) &#123;</span><br><span class="line">                searchLog.accept(file);</span><br><span class="line">            &#125;</span><br><span class="line">            fileList.add(file);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (File file : fileList) &#123;</span><br><span class="line">            <span class="keyword">if</span>(processorLog != <span class="keyword">null</span>) &#123;</span><br><span class="line">                processorLog.accept(file);</span><br><span class="line">            &#125;</span><br><span class="line">            processor.decryptFile(file);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">listDirectory</span><span class="params">(String path, EncryptionFileProcessor processor, <span class="keyword">boolean</span> deep)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        List&lt;String&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (File file : FileSearchStream.of(<span class="keyword">new</span> File(path)).setDeep(deep).toList(file -&gt; file)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(file.isDirectory()) &#123;</span><br><span class="line">                res.add(<span class="string">"directory ["</span> + file.getName() + <span class="string">"]"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.add(<span class="string">"file ["</span> + processor.decryptFileName(file.getName()) + <span class="string">"]"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.colin.tool.file.EncryptionDirectoryProcessor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-12-02</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置密码及默认打印日志</span></span><br><span class="line">        <span class="keyword">final</span> EncryptionDirectoryProcessor processor = <span class="keyword">new</span> EncryptionDirectoryProcessor(<span class="string">"12333"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可选设置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用内置的打印方法,也可以单独设置</span></span><br><span class="line">        <span class="comment">//processor.defaultLog();</span></span><br><span class="line">        <span class="comment">// 是否保存源文件，默认不保存</span></span><br><span class="line">        <span class="comment">//processor.setSaveResource(true);</span></span><br><span class="line">        <span class="comment">// 处理后的文件存放位置，默认是源文件所在文件夹</span></span><br><span class="line">        <span class="comment">//processor.setToPath("D:\\test\\store");</span></span><br><span class="line">        <span class="comment">// 也可以链式调用</span></span><br><span class="line">        <span class="comment">// processor = new EncryptionDirectoryProcessor("12333").defaultLog().setSaveResource(true).setToPath("D:\\test\\store");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 加密</span></span><br><span class="line">        processor.encryptDirectory(<span class="string">"D:\\test"</span>);</span><br><span class="line">        <span class="comment">// 查看加密文件原始信息，deep表示遍历子目录</span></span><br><span class="line">        processor.listDirectory(<span class="string">"D:\\test"</span>, <span class="keyword">true</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">// 解密</span></span><br><span class="line">        processor.decryptDirectory(<span class="string">"D:\\test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.colin.tool.file;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> colin.cheng</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptionUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 密码测试 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">testPwd</span><span class="params">(String path, String... pwds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pwds.length; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                EncryptionDirectoryProcessor processor = <span class="keyword">new</span> EncryptionDirectoryProcessor(pwds[i]);</span><br><span class="line">                processor.listDirectory(path,<span class="keyword">false</span>);</span><br><span class="line">                <span class="keyword">return</span> pwds[i];</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(String path, String pwd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 设置密码及默认打印日志</span></span><br><span class="line">        <span class="keyword">final</span> EncryptionDirectoryProcessor processor = <span class="keyword">new</span> EncryptionDirectoryProcessor(pwd);</span><br><span class="line">        processor.listDirectory(path, <span class="keyword">true</span>).forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">encryptDirectory</span><span class="params">(String path, String pwd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> EncryptionDirectoryProcessor processor = <span class="keyword">new</span> EncryptionDirectoryProcessor(pwd);</span><br><span class="line">        processor.encryptDirectory(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">decryptDirectory</span><span class="params">(String path, String pwd)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> EncryptionDirectoryProcessor processor = <span class="keyword">new</span> EncryptionDirectoryProcessor(pwd);</span><br><span class="line">        processor.decryptDirectory(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 加密 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一些js实用到码片段2</title>
      <link href="/2022/03/20/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9Bjs%E5%AE%9E%E7%94%A8%E5%88%B0%E7%A0%81%E7%89%87%E6%AE%B52/"/>
      <url>/2022/03/20/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%BA%9Bjs%E5%AE%9E%E7%94%A8%E5%88%B0%E7%A0%81%E7%89%87%E6%AE%B52/</url>
      
        <content type="html"><![CDATA[<p>文章字数：2723,阅读全文大约需要10分钟</p><blockquote><p>来自<a href="https://www.toutiao.com/i6691917594342982157/" target="_blank" rel="noopener">今日头条</a></p></blockquote><ol start="51"><li>原生JavaScript获取页面可视高度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> d = <span class="built_in">document</span>, a = d.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line"> ? d.body</span><br><span class="line"> : d.documentElement;</span><br><span class="line"> <span class="keyword">return</span> a.clientHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript跨浏览器添加事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvt</span>(<span class="params">oTarget, sEvtType, fnHandle</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(!oTarget) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"> <span class="keyword">if</span>(oTarget.addEventListener) &#123;</span><br><span class="line"> oTarget.addEventListener(sEvtType, fnHandle, <span class="literal">false</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(oTarget.attachEvent) &#123;</span><br><span class="line"> oTarget.attachEvent(<span class="string">"on"</span> + sEvtType, fnHandle);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> oTarget[<span class="string">"on"</span> + sEvtType] = fnHandle;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript跨浏览器删除事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delEvt</span>(<span class="params">oTarget, sEvtType, fnHandle</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(!oTarget) &#123;<span class="keyword">return</span>;&#125;</span><br><span class="line"> <span class="keyword">if</span>(oTarget.addEventListener) &#123;</span><br><span class="line"> oTarget.addEventListener(sEvtType,fnHandle,<span class="literal">false</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span>(oTarget.attachEvent) &#123;</span><br><span class="line"> oTarget.attachEvent(<span class="string">"on"</span> + sEvtType,fnHandle);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> oTarget[<span class="string">"on"</span> + sEvtType] = fnHandle;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript去掉url前缀<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeUrlPrefix</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line"> a = a.replace(<span class="regexp">/：/g</span>,<span class="string">":"</span>).replace(<span class="regexp">/．/g</span>,<span class="string">"."</span>).replace(<span class="regexp">/／/g</span>,<span class="string">"/"</span>);</span><br><span class="line"> <span class="keyword">while</span>(trim(a).toLowerCase().indexOf(<span class="string">"http://"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"> a = trim(a.replace(<span class="regexp">/http:/</span><span class="comment">//i,""));</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript随机数时间戳<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> a = <span class="built_in">Math</span>.random, b = <span class="built_in">parseInt</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()).toString()+b(<span class="number">10</span>*a())+b(<span class="number">10</span>*a())+b(<span class="number">10</span>*a());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript全角半角转换,iCase: 0全到半，1半到全，其他不转化<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chgCase</span>(<span class="params">sStr,iCase</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(<span class="keyword">typeof</span> sStr != <span class="string">"string"</span> || sStr.length &lt;= <span class="number">0</span> || !(iCase === <span class="number">0</span> || iCase == <span class="number">1</span>))&#123;</span><br><span class="line"> <span class="keyword">return</span> sStr;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> i,oRs=[],iCode;</span><br><span class="line"> <span class="keyword">if</span>(iCase)&#123;<span class="comment">/*半-&gt;全*/</span></span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sStr.length;i+=<span class="number">1</span>)&#123; </span><br><span class="line"> iCode = sStr.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span>(iCode == <span class="number">32</span>)&#123;</span><br><span class="line"> iCode = <span class="number">12288</span>; </span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(iCode &lt; <span class="number">127</span>)&#123;</span><br><span class="line"> iCode += <span class="number">65248</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> oRs.push(<span class="built_in">String</span>.fromCharCode(iCode)); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;<span class="comment">/*全-&gt;半*/</span></span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sStr.length;i+=<span class="number">1</span>)&#123; </span><br><span class="line"> iCode = sStr.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span>(iCode == <span class="number">12288</span>)&#123;</span><br><span class="line"> iCode = <span class="number">32</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(iCode &gt; <span class="number">65280</span> &amp;&amp; iCode &lt; <span class="number">65375</span>)&#123;</span><br><span class="line"> iCode -= <span class="number">65248</span>; </span><br><span class="line"> &#125;</span><br><span class="line"> oRs.push(<span class="built_in">String</span>.fromCharCode(iCode)); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> oRs.join(<span class="string">""</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript确认是否键盘有效输入值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkKey</span>(<span class="params">iKey</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(iKey == <span class="number">32</span> || iKey == <span class="number">229</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*空格和异常*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">47</span> &amp;&amp; iKey &lt; <span class="number">58</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*数字*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">64</span> &amp;&amp; iKey &lt; <span class="number">91</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*字母*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">95</span> &amp;&amp; iKey &lt; <span class="number">108</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*数字键盘1*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">108</span> &amp;&amp; iKey &lt; <span class="number">112</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*数字键盘2*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">185</span> &amp;&amp; iKey &lt; <span class="number">193</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*符号1*/</span></span><br><span class="line"> <span class="keyword">if</span>(iKey&gt;<span class="number">218</span> &amp;&amp; iKey &lt; <span class="number">223</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125; <span class="comment">/*符号2*/</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取网页被卷去的位置<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollXY</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">document</span>.body.scrollTop ? &#123;</span><br><span class="line"> x: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line"> y: <span class="built_in">document</span>.body.scrollTop</span><br><span class="line"> &#125;: &#123;</span><br><span class="line"> x: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line"> y: <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript另一种正则日期格式化函数+调用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">format</span>) </span>&#123; <span class="comment">// author: meizz</span></span><br><span class="line"> <span class="keyword">var</span> o = &#123;</span><br><span class="line"> <span class="string">"M+"</span> : <span class="keyword">this</span>.getMonth() + <span class="number">1</span>, <span class="comment">// month</span></span><br><span class="line"> <span class="string">"d+"</span> : <span class="keyword">this</span>.getDate(), <span class="comment">// day</span></span><br><span class="line"> <span class="string">"h+"</span> : <span class="keyword">this</span>.getHours(), <span class="comment">// hour</span></span><br><span class="line"> <span class="string">"m+"</span> : <span class="keyword">this</span>.getMinutes(), <span class="comment">// minute</span></span><br><span class="line"> <span class="string">"s+"</span> : <span class="keyword">this</span>.getSeconds(), <span class="comment">// second</span></span><br><span class="line"> <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">// quarter</span></span><br><span class="line"> <span class="string">"S"</span> : <span class="keyword">this</span>.getMilliseconds() <span class="comment">// millisecond</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(format)) &#123;</span><br><span class="line"> format=format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, (<span class="keyword">this</span>.getFullYear()+<span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o)<span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span>+ k +<span class="string">")"</span>).test(format)) &#123;</span><br><span class="line"> format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>, <span class="built_in">RegExp</span>.$<span class="number">1.</span>length==<span class="number">1</span> ? o[k] : (<span class="string">"00"</span>+ o[k]).substr((<span class="string">""</span>+ o[k]).length));</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> format;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>));</span><br></pre></td></tr></table></figure></li><li>原生JavaScript时间个性化输出功能<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、&lt; 60s, 显示为“刚刚”</span></span><br><span class="line"><span class="comment">2、&gt;= 1min &amp;&amp; &lt; 60 min, 显示与当前时间差“XX分钟前”</span></span><br><span class="line"><span class="comment">3、&gt;= 60min &amp;&amp; &lt; 1day, 显示与当前时间差“今天 XX:XX”</span></span><br><span class="line"><span class="comment">4、&gt;= 1day &amp;&amp; &lt; 1year, 显示日期“XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment">5、&gt;= 1year, 显示具体日期“XXXX年XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeFormat</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time)</span><br><span class="line"> , curDate = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"> , year = date.getFullYear()</span><br><span class="line"> , month = date.getMonth() + <span class="number">1</span></span><br><span class="line"> , day = date.getDate()</span><br><span class="line"> , hour = date.getHours()</span><br><span class="line"> , minute = date.getMinutes()</span><br><span class="line"> , curYear = curDate.getFullYear()</span><br><span class="line"> , curHour = curDate.getHours()</span><br><span class="line"> , timeStr;</span><br><span class="line"> <span class="keyword">if</span>(year &lt; curYear)&#123;</span><br><span class="line"> timeStr = year +<span class="string">'年'</span>+ month +<span class="string">'月'</span>+ day +<span class="string">'日 '</span>+ hour +<span class="string">':'</span>+ minute;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> pastTime = curDate - date</span><br><span class="line"> , pastH = pastTime/<span class="number">3600000</span>;</span><br><span class="line"> <span class="keyword">if</span>(pastH &gt; curHour)&#123;</span><br><span class="line"> timeStr = month +<span class="string">'月'</span>+ day +<span class="string">'日 '</span>+ hour +<span class="string">':'</span>+ minute;</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pastH &gt;= <span class="number">1</span>)&#123;</span><br><span class="line"> timeStr = <span class="string">'今天 '</span> + hour +<span class="string">':'</span>+ minute +<span class="string">'分'</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> pastM = curDate.getMinutes() - minute;</span><br><span class="line"> <span class="keyword">if</span>(pastM &gt; <span class="number">1</span>)&#123;</span><br><span class="line"> timeStr = pastM +<span class="string">'分钟前'</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> timeStr = <span class="string">'刚刚'</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> timeStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript解决offsetX兼容性问题<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 针对火狐不支持offsetX/Y</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffset</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> target = e.target, <span class="comment">// 当前触发的目标对象</span></span><br><span class="line"> eventCoord,</span><br><span class="line"> pageCoord,</span><br><span class="line"> offsetCoord;</span><br><span class="line"> <span class="comment">// 计算当前触发元素到文档的距离</span></span><br><span class="line"> pageCoord = getPageCoord(target);</span><br><span class="line"> <span class="comment">// 计算光标到文档的距离</span></span><br><span class="line"> eventCoord = &#123;</span><br><span class="line"> X : <span class="built_in">window</span>.pageXOffset + e.clientX,</span><br><span class="line"> Y : <span class="built_in">window</span>.pageYOffset + e.clientY</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="comment">// 相减获取光标到第一个定位的父元素的坐标</span></span><br><span class="line"> offsetCoord = &#123;</span><br><span class="line"> X : eventCoord.X - pageCoord.X,</span><br><span class="line"> Y : eventCoord.Y - pageCoord.Y</span><br><span class="line"> &#125;;</span><br><span class="line"> <span class="keyword">return</span> offsetCoord;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageCoord</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> coord = &#123; <span class="attr">X</span> : <span class="number">0</span>, <span class="attr">Y</span> : <span class="number">0</span> &#125;;</span><br><span class="line"> <span class="comment">// 计算从当前触发元素到根节点为止，</span></span><br><span class="line"> <span class="comment">// 各级 offsetParent 元素的 offsetLeft 或 offsetTop 值之和</span></span><br><span class="line"> <span class="keyword">while</span> (element)&#123;</span><br><span class="line"> coord.X += element.offsetLeft;</span><br><span class="line"> coord.Y += element.offsetTop;</span><br><span class="line"> element = element.offsetParent;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> coord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript常用的正则表达式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//正整数</span></span><br><span class="line">/^[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$/;</span><br><span class="line"><span class="comment">//负整数</span></span><br><span class="line">/^-[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$/;</span><br><span class="line"><span class="comment">//正浮点数</span></span><br><span class="line">/^(([<span class="number">0</span><span class="number">-9</span>]+.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*))$/; </span><br><span class="line"><span class="comment">//负浮点数</span></span><br><span class="line">/^(-(([<span class="number">0</span><span class="number">-9</span>]+.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)))$/; </span><br><span class="line"><span class="comment">//浮点数</span></span><br><span class="line">/^(-?d+)(.d+)?$/;</span><br><span class="line"><span class="comment">//email地址</span></span><br><span class="line">/^[w-]+(.[w-]+)*@[w-]+(.[w-]+)+$/;</span><br><span class="line"><span class="comment">//url地址</span></span><br><span class="line">/^[a-zA-z]+:<span class="comment">//(w+(-w+)*)(.(w+(-w+)*))*(?S*)?$/;</span></span><br><span class="line"><span class="comment">//年/月/日（年-月-日、年.月.日）</span></span><br><span class="line">/^(<span class="number">19</span>|<span class="number">20</span>)dd[- <span class="regexp">/.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/</span>;</span><br><span class="line"><span class="comment">//匹配中文字符</span></span><br><span class="line">/[\u4e00-\u9fa5]/;</span><br><span class="line"><span class="comment">//匹配帐号是否合法(字母开头，允许5-10字节，允许字母数字下划线)</span></span><br><span class="line">/^[a-zA-Z][a-zA-Z0<span class="number">-9</span>_]&#123;<span class="number">4</span>,<span class="number">9</span>&#125;$/;</span><br><span class="line"><span class="comment">//匹配空白行的正则表达式</span></span><br><span class="line">/</span><br><span class="line">s*</span><br><span class="line">/;</span><br><span class="line"><span class="comment">//匹配中国邮政编码</span></span><br><span class="line">/[<span class="number">1</span><span class="number">-9</span>]d&#123;<span class="number">5</span>&#125;(?!d)/;</span><br><span class="line"><span class="comment">//匹配身份证</span></span><br><span class="line">/d&#123;<span class="number">15</span>&#125;|d&#123;<span class="number">18</span>&#125;/;</span><br><span class="line"><span class="comment">//匹配国内电话号码</span></span><br><span class="line">/(d&#123;<span class="number">3</span>&#125;-|d&#123;<span class="number">4</span>&#125;-)?(d&#123;<span class="number">8</span>&#125;|d&#123;<span class="number">7</span>&#125;)?<span class="regexp">/;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/匹配IP地址</span></span><br><span class="line"><span class="regexp">/</span>((<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">01</span>]?dd?).)&#123;<span class="number">3</span>&#125;(<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>]d|<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>]|[<span class="number">01</span>]?dd?)/;</span><br><span class="line"><span class="comment">//匹配首尾空白字符的正则表达式</span></span><br><span class="line">/^s*|s*$/;</span><br><span class="line"><span class="comment">//匹配HTML标记的正则表达式</span></span><br><span class="line">&lt; (S*?)[^&gt;]*&gt;.*?|&lt; .*? <span class="regexp">/&gt;;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现返回顶部的通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTop</span>(<span class="params">btnId</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(btnId);</span><br><span class="line"> <span class="keyword">var</span> d = <span class="built_in">document</span>.documentElement;</span><br><span class="line"> <span class="keyword">var</span> b = <span class="built_in">document</span>.body;</span><br><span class="line"> <span class="built_in">window</span>.onscroll = <span class="keyword">set</span>;</span><br><span class="line"> btn.style.display = "none";</span><br><span class="line"> btn.onclick = function() &#123;</span><br><span class="line"> btn.style.display = <span class="string">"none"</span>;</span><br><span class="line"> <span class="built_in">window</span>.onscroll = <span class="literal">null</span>;</span><br><span class="line"> <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> d.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line"> b.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line"> <span class="keyword">if</span> ((d.scrollTop + b.scrollTop) == <span class="number">0</span>) clearInterval(btn.timer, <span class="built_in">window</span>.onscroll = <span class="keyword">set</span>);</span><br><span class="line"> &#125;,</span><br><span class="line"> 10);</span><br><span class="line"> &#125;;</span><br><span class="line"> function <span class="keyword">set</span>() &#123;</span><br><span class="line"> btn.style.display = (d.scrollTop + b.scrollTop &gt; <span class="number">100</span>) ? <span class="string">'block'</span>: <span class="string">"none"</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line">backTop(<span class="string">'goTop'</span>);</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获得URL中的GET参数值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用法：如果地址是 test.htm?t1=1&amp;t2=2&amp;t3=3, 那么能取得：GET["t1"], GET["t2"], GET["t3"]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_get</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line"> querystr = <span class="built_in">window</span>.location.href.split(<span class="string">"?"</span>);</span><br><span class="line"> <span class="keyword">if</span>(querystr[<span class="number">1</span>]) &#123;</span><br><span class="line"> <span class="keyword">var</span> GETs = querystr[<span class="number">1</span>].split(<span class="string">"&amp;"</span>),</span><br><span class="line"> GET = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"> <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; GETs.length; i++)&#123;</span><br><span class="line"> tmp_arr = GETs[i].split(<span class="string">"="</span>);</span><br><span class="line"> key = tmp_arr[<span class="number">0</span>];</span><br><span class="line"> GET[key] = tmp_arr[<span class="number">1</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> querystr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现全选通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkall</span>(<span class="params">form, prefix, checkall</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> checkall = checkall ? checkall : <span class="string">'chkall'</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; form.elements.length; i++) &#123;</span><br><span class="line"> <span class="keyword">var</span> e = form.elements[i];</span><br><span class="line"> <span class="keyword">if</span>(e.type==<span class="string">"checkbox"</span>)&#123;</span><br><span class="line"> e.checked = form.elements[checkall].checked;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现全部取消选择通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uncheckAll</span>(<span class="params">form</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; form.elements.length; i++)&#123;</span><br><span class="line"> <span class="keyword">var</span> e = form.elements[i];</span><br><span class="line"> <span class="keyword">if</span> (e.name != <span class="string">'chkall'</span>)</span><br><span class="line"> e.checked = !e.checked;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现打开一个窗体通用方法<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openWindow</span>(<span class="params">url,windowName,width,height</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(screen.width / <span class="number">2.0</span>) - (width / <span class="number">2.0</span>); </span><br><span class="line"> <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(screen.height / <span class="number">2.0</span>) - (height / <span class="number">2.0</span>);</span><br><span class="line"> <span class="keyword">var</span> isMSIE= (navigator.appName == <span class="string">"Microsoft Internet Explorer"</span>);</span><br><span class="line"> <span class="keyword">if</span> (isMSIE) &#123;</span><br><span class="line"> <span class="keyword">var</span> p = <span class="string">"resizable=1,location=no,scrollbars=no,width="</span>;</span><br><span class="line"> p = p+width;</span><br><span class="line"> p = p+<span class="string">",height="</span>;</span><br><span class="line"> p = p+height;</span><br><span class="line"> p = p+<span class="string">",left="</span>;</span><br><span class="line"> p = p+x;</span><br><span class="line"> p = p+<span class="string">",top="</span>;</span><br><span class="line"> p = p+y;</span><br><span class="line"> retval = <span class="built_in">window</span>.open(url, windowName, p);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> win = <span class="built_in">window</span>.open(url, <span class="string">"ZyiisPopup"</span>, <span class="string">"top="</span> + y + <span class="string">",left="</span> + x + <span class="string">",scrollbars="</span> + scrollbars + <span class="string">",dialog=yes,modal=yes,width="</span> + width + <span class="string">",height="</span> + height + <span class="string">",resizable=no"</span> );</span><br><span class="line"> <span class="built_in">eval</span>(<span class="string">"try &#123; win.resizeTo(width, height); &#125; catch(e) &#123; &#125;"</span>);</span><br><span class="line"> win.focus();</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否为客户端设备<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">client</span>(<span class="params">o</span>)</span>&#123; </span><br><span class="line"> <span class="keyword">var</span> b = navigator.userAgent.toLowerCase(); </span><br><span class="line"> <span class="keyword">var</span> t = <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">if</span> (o == <span class="string">'isOP'</span>)&#123;</span><br><span class="line"> t = b.indexOf(<span class="string">'opera'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (o == <span class="string">'isIE'</span>)&#123;</span><br><span class="line"> t = b.indexOf(<span class="string">'msie'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (o == <span class="string">'isFF'</span>)&#123;</span><br><span class="line"> t = b.indexOf(<span class="string">'firefox'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取单选按钮的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_radio_value</span>(<span class="params">field</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(field &amp;&amp; field.length)&#123; </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; field.length; i++)&#123; </span><br><span class="line"> <span class="keyword">if</span>(field[i].checked)&#123; </span><br><span class="line"> <span class="keyword">return</span> field[i].value; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;<span class="keyword">else</span> &#123; </span><br><span class="line"> <span class="keyword">return</span>; </span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取复选框的值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_checkbox_value</span>(<span class="params">field</span>) </span>&#123; </span><br><span class="line"> <span class="keyword">if</span>(field &amp;&amp; field.length)&#123; </span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; field.length; i++)&#123; </span><br><span class="line"> <span class="keyword">if</span>(field[i].checked &amp;&amp; !field[i].disabled)&#123;</span><br><span class="line"> <span class="keyword">return</span> field[i].value;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span>;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否为邮箱<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEmail</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^w+((-w+)|(.w+))*@[A-Za-z0-9]+((.|-)[A-Za-z0-9]+)*.[A-Za-z0-9]+$/</span>; </span><br><span class="line"> <span class="keyword">if</span> (re.test(str) != <span class="literal">true</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断是否有列表中的危险字符<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidReg</span>(<span class="params">chars</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/&lt;|&gt;|[|]|&#123;|&#125;|『|』|※||||§|||||||□||㊣|﹋|⊕|⊙|〒|ㄅ|ㄆ|ㄇ|ㄈ|ㄉ|ㄊ|ㄋ|ㄌ|ㄍ|ㄎ|ㄏ|ㄐ|ㄑ|ㄒ|ㄓ|ㄔ|ㄕ|ㄖ|ㄗ|ㄘ|ㄙ|ㄚ|ㄛ|ㄜ|ㄝ|ㄞ|ㄟ|ㄢ|ㄣ|ㄤ|ㄥ|ㄦ|ㄧ|ㄨ|ㄩ|■|▄|▆|*|@|#|^|\/;</span></span><br><span class="line"><span class="regexp"> if (re.test( chars) == true) &#123;</span></span><br><span class="line"><span class="regexp"> return false;</span></span><br><span class="line"><span class="regexp"> &#125;else&#123;</span></span><br><span class="line"><span class="regexp"> return true;</span></span><br><span class="line"><span class="regexp"> &#125; </span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否大于规定的长度<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidLength</span>(<span class="params">chars, len</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (chars.length &lt; len) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是为网址不区分大小写<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidURL</span>(<span class="params"> chars </span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^([hH][tT]&#123;2&#125;[pP]:/</span><span class="regexp">/|[hH][tT]&#123;2&#125;[pP][sS]:/</span><span class="regexp">/)(S+.S+)$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (!isNULL(chars)) &#123;</span><br><span class="line"> chars = jsTrim(chars);</span><br><span class="line"> <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否为小数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidDecimal</span>(<span class="params"> chars </span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^d*.?d&#123;1,2&#125;$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否为整数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumber</span>(<span class="params">chars</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^d*$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否为浮点数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFloat</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;str.length;i++) &#123;</span><br><span class="line"> <span class="keyword">if</span>((str.charAt(i)&lt;<span class="string">"0"</span> || str.charAt(i)&gt;<span class="string">"9"</span>)&amp;&amp; str.charAt(i) != <span class="string">'.'</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符是否为A-Za-z英文字母<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLetters</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re = <span class="regexp">/^[A-Za-z]+$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (str.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符串是否邮政编码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidPost</span>(<span class="params"> chars </span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> re=<span class="regexp">/^d&#123;6&#125;$/</span>;</span><br><span class="line"> <span class="keyword">if</span> (chars.match(re) == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断字符是否空NULL<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNULL</span>(<span class="params"> chars </span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (chars == <span class="literal">null</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">if</span> (jsTrim(chars).length == <span class="number">0</span>)</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式提取页面代码中所有网址<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = <span class="built_in">document</span>.documentElement.outerHTML.match(<span class="regexp">/(url(|src=|href=)["']*([^"'()&lt;&gt;[] ]+)["')]*|(http:/</span><span class="regexp">/[w-.]+[^"'()&lt;&gt;[] ]+)/ig</span>).join(<span class="string">"</span></span><br><span class="line"><span class="string">"</span>).replace(<span class="regexp">/^(src=|href=|url()["']*|["'&gt;) ]*$/igm</span>,<span class="string">""</span>);</span><br><span class="line">alert(aa);</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式清除相同的数组(低效率)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">this</span>.reverse().join(<span class="string">","</span>).match(<span class="regexp">/([^,]+)(?!.*)/ig</span>).reverse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式清除相同的数组(高效率)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> x = <span class="keyword">this</span>.split(<span class="regexp">/[</span></span><br><span class="line"><span class="regexp">]+/</span>);</span><br><span class="line"> <span class="keyword">var</span> y = <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i++)&#123;</span><br><span class="line"> <span class="keyword">if</span>(!<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^"</span>+x[i].replace(<span class="regexp">/([^w])/ig</span>,<span class="string">"\$1"</span>)+<span class="string">"$"</span>,<span class="string">"igm"</span>).test(y)) &#123;</span><br><span class="line"> y + = x[i]+<span class="string">"</span></span><br><span class="line"><span class="string">"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式按字母排序，对每行进行数组排序<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SetSort</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> text = K1.value.split(<span class="regexp">/[</span></span><br><span class="line"><span class="regexp">]/</span>).sort().join(<span class="string">"</span></span><br><span class="line"><span class="string">"</span>); <span class="comment">// 顺序</span></span><br><span class="line"> <span class="keyword">var</span> test = K1.value.split(<span class="regexp">/[</span></span><br><span class="line"><span class="regexp">]/</span>).sort().reverse().join(<span class="string">"</span></span><br><span class="line"><span class="string">"</span>); <span class="comment">// 反序</span></span><br><span class="line"> K1.value = (K1.value != text) ? text : test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript字符串反序<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsReverse</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> text.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则表达式清除html代码中的脚本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear_script</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> K1.valu e= K1.value.replace(<span class="regexp">/&lt;script.*?&gt;[sS]*?&lt;/</span>script&gt;|s+on[a-zA-Z]&#123;<span class="number">3</span>,<span class="number">16</span>&#125;s?=s?<span class="string">"[sS]*?"</span>|s+on[a-zA-Z]&#123;<span class="number">3</span>,<span class="number">16</span>&#125;s?=s?<span class="string">'[sS]*?'</span>|s+on[a-zA-Z]&#123;<span class="number">3</span>,<span class="number">16</span>&#125;s?=[^ &gt;]+<span class="regexp">/ig,"");</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript动态执行JavaScript脚本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">javascript</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line"> <span class="built_in">eval</span>(K1.value);</span><br><span class="line"> &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line"> alert(e.message);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript动态执行VBScript脚本<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vbscript</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> script = <span class="built_in">document</span>.getElementById(<span class="string">"K1"</span>).value;</span><br><span class="line"> <span class="keyword">if</span>(script.trim()==<span class="string">""</span>) <span class="keyword">return</span>;</span><br><span class="line"> <span class="built_in">window</span>.execScript(<span class="string">'On Error Resume Next </span></span><br><span class="line"><span class="string">'</span>+script+<span class="string">'</span></span><br><span class="line"><span class="string"> If Err.Number&lt;&gt;0 Then </span></span><br><span class="line"><span class="string"> MsgBox "请输入正确的VBScript脚本!",48,"脚本错误!" </span></span><br><span class="line"><span class="string"> End If'</span>,<span class="string">"vbscript"</span>)</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> alert(e.message);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现金额大写转换函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">var</span> dw2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>); <span class="comment">//大单位</span></span><br><span class="line"> <span class="keyword">var</span> dw1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>); <span class="comment">//小单位</span></span><br><span class="line"> <span class="keyword">var</span> dw = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>); <span class="comment">//整数部分用</span></span><br><span class="line"> <span class="comment">//以下是小写转换成大写显示在合计大写的文本框中 </span></span><br><span class="line"> <span class="comment">//分离整数与小数</span></span><br><span class="line"> <span class="keyword">var</span> source = splits(tranvalue);</span><br><span class="line"> <span class="keyword">var</span> num = source[<span class="number">0</span>];</span><br><span class="line"> <span class="keyword">var</span> dig = source[<span class="number">1</span>];</span><br><span class="line"> <span class="comment">//转换整数部分</span></span><br><span class="line"> <span class="keyword">var</span> k1 = <span class="number">0</span>; <span class="comment">//计小单位</span></span><br><span class="line"> <span class="keyword">var</span> k2 = <span class="number">0</span>; <span class="comment">//计大单位</span></span><br><span class="line"> <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"> <span class="keyword">var</span> len = source[<span class="number">0</span>].length; <span class="comment">//整数的长度</span></span><br><span class="line"> <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line"> <span class="keyword">var</span> n = source[<span class="number">0</span>].charAt(len - i); <span class="comment">//取得某个位数上的数字</span></span><br><span class="line"> <span class="keyword">var</span> bn = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line"> bn = source[<span class="number">0</span>].charAt(len - i - <span class="number">1</span>); <span class="comment">//取得某个位数前一位上的数字</span></span><br><span class="line"> &#125;</span><br><span class="line"> sum = sum + <span class="built_in">Number</span>(n);</span><br><span class="line"> <span class="keyword">if</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line"> str = dw[<span class="built_in">Number</span>(n)].concat(str); <span class="comment">//取得该数字对应的大写数字，并插入到str字符串的前面</span></span><br><span class="line"> <span class="keyword">if</span> (n == <span class="string">'0'</span>) sum = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123; <span class="comment">//在数字范围内</span></span><br><span class="line"> <span class="keyword">if</span> (k1 != <span class="number">3</span>) &#123; <span class="comment">//加小单位</span></span><br><span class="line"> <span class="keyword">if</span> (bn != <span class="number">0</span>) &#123;</span><br><span class="line"> str = dw1[k1].concat(str);</span><br><span class="line"> &#125;</span><br><span class="line"> k1++;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123; <span class="comment">//不加小单位，加大单位</span></span><br><span class="line"> k1 = <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">var</span> temp = str.charAt(<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">if</span> (temp == <span class="string">"万"</span> || temp == <span class="string">"亿"</span>) <span class="comment">//若大单位前没有数字则舍去大单位</span></span><br><span class="line"> str = str.substr(<span class="number">1</span>, str.length - <span class="number">1</span>);</span><br><span class="line"> str = dw2[k2].concat(str);</span><br><span class="line"> sum = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span> (k1 == <span class="number">3</span>) <span class="comment">//小单位到千则大单位进一</span></span><br><span class="line"> &#123;</span><br><span class="line"> k2++;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//转换小数部分</span></span><br><span class="line"> <span class="keyword">var</span> strdig = <span class="string">""</span>;</span><br><span class="line"> <span class="keyword">if</span> (dig != <span class="string">""</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> n = dig.charAt(<span class="number">0</span>);</span><br><span class="line"> <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line"> strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"角"</span>; <span class="comment">//加数字</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> n = dig.charAt(<span class="number">1</span>);</span><br><span class="line"> <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line"> strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"分"</span>; <span class="comment">//加数字</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> str += <span class="string">"元"</span> + strdig;</span><br><span class="line"> &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="string">"0元"</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拆分整数与小数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splits</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> value = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line"> temp = tranvalue.split(<span class="string">"."</span>);</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line"> value[i] = temp[i];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript常用的正则表达式大收集<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">匹配中文字符的正则表达式： [\u4e00-\u9fa5] </span><br><span class="line">匹配双字节字符（包括汉字在内）：[^\x00-\xff] </span><br><span class="line">匹配空行的正则表达式：</span><br><span class="line">[s| ]*</span><br><span class="line"> </span><br><span class="line">匹配 HTML 标记的正则表达式：&lt;(.*)&gt;.*&lt;<span class="regexp">/&gt;|&lt;(.*) /</span>&gt;</span><br><span class="line">匹配首尾空格的正则表达式：(^s*)|(s*$) </span><br><span class="line">匹配 IP 地址的正则表达式：/(d+).(d+).(d+).(d+)/g</span><br><span class="line">匹配 Email 地址的正则表达式：w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)*</span><br><span class="line">匹配网址 URL 的正则表达式：http:<span class="comment">//(/[w-]+.)+[w-]+(/[w- ./?%&amp;=]*)?</span></span><br><span class="line">sql 语句：^(select|drop|<span class="keyword">delete</span>|create|update|insert).*$ </span><br><span class="line">非负整数：^d+$ </span><br><span class="line">正整数：^[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$ </span><br><span class="line">非正整数：^((-d+)|(<span class="number">0</span>+))$ </span><br><span class="line">负整数：^-[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$ </span><br><span class="line">整数：^-?d+$ </span><br><span class="line">非负浮点数：^d+(.d+)?$ </span><br><span class="line">正浮点数：^((<span class="number">0</span><span class="number">-9</span>)+.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*))$ </span><br><span class="line">非正浮点数：^((-d+.d+)?)|(<span class="number">0</span>+(<span class="number">.0</span>+)?))$ </span><br><span class="line">英文字符串：^[A-Za-z]+$ </span><br><span class="line">英文大写串：^[A-Z]+$ </span><br><span class="line">英文小写串：^[a-z]+$ </span><br><span class="line">英文字符数字串：^[A-Za-z0<span class="number">-9</span>]+$ </span><br><span class="line">英数字加下划线串：^w+$ </span><br><span class="line">E-mail地址：^[w-]+(.[w-]+)*@[w-]+(.[w-]+)+$ </span><br><span class="line">URL：^[a-zA-Z]+:<span class="comment">//(w+(-w+)*)(.(w+(-w+)*))*(?s*)?$ 或：^http://[A-Za-z0-9]+.[A-Za-z0-9]+[/=?%-&amp;_~`@[]':+!]*([^&lt;&gt;""])*$ </span></span><br><span class="line">邮政编码：^[<span class="number">1</span><span class="number">-9</span>]d&#123;<span class="number">5</span>&#125;$ </span><br><span class="line">电话号码：^(((d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;))|(d&#123;<span class="number">3</span>&#125;-))?((<span class="number">0</span>d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;)|<span class="number">0</span>d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;-)?[<span class="number">1</span><span class="number">-9</span>]d&#123;<span class="number">6</span>,<span class="number">7</span>&#125;(-d&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)?$ </span><br><span class="line">手机号码：^(((d&#123;<span class="number">2</span>,<span class="number">3</span>&#125;))|(d&#123;<span class="number">3</span>&#125;-))?<span class="number">13</span>d&#123;<span class="number">9</span>&#125;$ </span><br><span class="line">双字节字符（包括汉字在内）：^\x00-\xff </span><br><span class="line">匹配首尾空格：(^s*)|(s*$)</span><br><span class="line">匹配 HTML 标记：&lt;(.*)&gt;.*&lt;<span class="regexp">/&gt;|&lt;(.*) /</span>&gt; </span><br><span class="line">匹配空行：</span><br><span class="line">[s| ]*</span><br><span class="line"> </span><br><span class="line">提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F) *= *(<span class="string">'|")?(w|\|/|.)+('</span>|<span class="string">"| *|&gt;)? </span></span><br><span class="line"><span class="string">提取信息中的邮件地址：w+([-+.]w+)*@w+([-.]w+)*.w+([-.]w+)* </span></span><br><span class="line"><span class="string">提取信息中的图片链接：(s|S)(r|R)(c|C) *= *('|"</span>)?(w|\|<span class="regexp">/|.)+('|"| *|&gt;)? </span></span><br><span class="line"><span class="regexp">提取信息中的 IP 地址：(d+).(d+).(d+).(d+) </span></span><br><span class="line"><span class="regexp">提取信息中的中国手机号码：(86)*0*13d&#123;9&#125; </span></span><br><span class="line"><span class="regexp">提取信息中的中国固定电话号码：((d&#123;3,4&#125;)|d&#123;3,4&#125;-|s)?d&#123;8&#125; </span></span><br><span class="line"><span class="regexp">提取信息中的中国电话号码（包括移动和固定电话）：((d&#123;3,4&#125;)|d&#123;3,4&#125;-|s)?d&#123;7,14&#125; </span></span><br><span class="line"><span class="regexp">提取信息中的中国邮政编码：[1-9]&#123;1&#125;(d+)&#123;5&#125; </span></span><br><span class="line"><span class="regexp">提取信息中的浮点数（即小数）：(-?d*).?d+ </span></span><br><span class="line"><span class="regexp">提取信息中的任何数字 ：(-?d*)(.d+)? </span></span><br><span class="line"><span class="regexp">IP：(d+).(d+).(d+).(d+) </span></span><br><span class="line"><span class="regexp">电话区号：^0d&#123;2,3&#125;$</span></span><br><span class="line"><span class="regexp">腾讯 QQ 号：^[1-9]*[1-9][0-9]*$ </span></span><br><span class="line"><span class="regexp">帐号（字母开头，允许 5-16 字节，允许字母数字下划线）：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ </span></span><br><span class="line"><span class="regexp">中文、英文、数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$</span></span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现窗体改变事件resize的操作（兼容所有的浏览器）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> w = <span class="built_in">document</span>.documentElement ? <span class="built_in">document</span>.documentElement.clientWidth : <span class="built_in">document</span>.body.clientWidth</span><br><span class="line"> ,r = <span class="number">1255</span></span><br><span class="line"> ,b = Element.extend(<span class="built_in">document</span>.body)</span><br><span class="line"> ,classname = b.className;</span><br><span class="line"> <span class="keyword">if</span>(w &lt; r)&#123;</span><br><span class="line"> <span class="comment">// 当窗体的宽度小于1255的时候执行相应的操作</span></span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="comment">// 当窗体的宽度大于1255的时候执行相应的操作</span></span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line"> <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; fn(); &#125;);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</span><br><span class="line"> <span class="built_in">window</span>.attachEvent(<span class="string">'onresize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; fn(); &#125;);</span><br><span class="line"> &#125;</span><br><span class="line"> fn();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li>原生JavaScript用正则清除空格分左右<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ltrim</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> s.replace( <span class="regexp">/^(s*|　*)/</span>, <span class="string">""</span>); &#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rtrim</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> s.replace( <span class="regexp">/(s*|　*)$/</span>, <span class="string">""</span>); &#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">trim</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> ltrim(rtrim(s)); &#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断变量是否空值<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断变量是否空值</span></span><br><span class="line"><span class="comment"> * undefined, null, '', false, 0, [], &#123;&#125; 均返回true，否则返回false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">empty</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">switch</span> (<span class="keyword">typeof</span> v)&#123;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'undefined'</span> : <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'string'</span> : <span class="keyword">if</span>(trim(v).length == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'boolean'</span> : <span class="keyword">if</span>(!v) <span class="keyword">return</span> <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'number'</span> : <span class="keyword">if</span>(<span class="number">0</span> === v) <span class="keyword">return</span> <span class="literal">true</span>; <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">case</span> <span class="string">'object'</span> : </span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">null</span> === v) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">if</span>(<span class="literal">undefined</span> !== v.length &amp;&amp; v.length==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> v)&#123;<span class="keyword">return</span> <span class="literal">false</span>;&#125; <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> <span class="keyword">break</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript实现base64解码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_decode</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> b64 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span><br><span class="line"> <span class="keyword">var</span> o1, o2, o3, h1, h2, h3, h4, bits, i = <span class="number">0</span>,ac = <span class="number">0</span>,dec = <span class="string">""</span>,tmp_arr = [];</span><br><span class="line"> <span class="keyword">if</span> (!data) &#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line"> data += <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">do</span> &#123; </span><br><span class="line"> h1 = b64.indexOf(data.charAt(i++));</span><br><span class="line"> h2 = b64.indexOf(data.charAt(i++));</span><br><span class="line"> h3 = b64.indexOf(data.charAt(i++));</span><br><span class="line"> h4 = b64.indexOf(data.charAt(i++));</span><br><span class="line"> bits = h1 &lt;&lt; <span class="number">18</span> | h2 &lt;&lt; <span class="number">12</span> | h3 &lt;&lt; <span class="number">6</span> | h4;</span><br><span class="line"> o1 = bits &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>;</span><br><span class="line"> o2 = bits &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>;</span><br><span class="line"> o3 = bits &amp; <span class="number">0xff</span>;</span><br><span class="line"> <span class="keyword">if</span> (h3 == <span class="number">64</span>) &#123;</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1);</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h4 == <span class="number">64</span>) &#123;</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2, o3);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; <span class="keyword">while</span> (i &lt; data.length);</span><br><span class="line"> dec = tmp_arr.join(<span class="string">''</span>);</span><br><span class="line"> dec = utf8_decode(dec);</span><br><span class="line"> <span class="keyword">return</span> dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>95, 原生JavaScript实现utf8解码<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_decode</span>(<span class="params">str_data</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> tmp_arr = [],i = <span class="number">0</span>,ac = <span class="number">0</span>,c1 = <span class="number">0</span>,c2 = <span class="number">0</span>,c3 = <span class="number">0</span>;str_data += <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">while</span> (i &lt; str_data.length) &#123;</span><br><span class="line"> c1 = str_data.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span> (c1 &lt; <span class="number">128</span>) &#123;</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(c1);</span><br><span class="line"> i++;</span><br><span class="line"> &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c1 &gt; <span class="number">191</span> &amp;&amp; c1 &lt; <span class="number">224</span>) &#123; </span><br><span class="line"> c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));</span><br><span class="line"> i += <span class="number">2</span>;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line"> c3 = str_data.charCodeAt(i + <span class="number">2</span>);</span><br><span class="line"> tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>));</span><br><span class="line"> i += <span class="number">3</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="keyword">return</span> tmp_arr.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取窗体可见范围的宽与高<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> de = <span class="built_in">document</span>.documentElement;</span><br><span class="line"> <span class="keyword">var</span> db = <span class="built_in">document</span>.body;</span><br><span class="line"> <span class="keyword">var</span> viewW = de.clientWidth == <span class="number">0</span> ? db.clientWidth : de.clientWidth;</span><br><span class="line"> <span class="keyword">var</span> viewH = de.clientHeight == <span class="number">0</span> ? db.clientHeight : de.clientHeight;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Array</span>(viewW ,viewH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript判断IE版本号（既简洁、又向后兼容！）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _IE = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> v = <span class="number">3</span>, div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>), all = div.getElementsByTagName(<span class="string">'i'</span>);</span><br><span class="line"> <span class="keyword">while</span> (</span><br><span class="line"> div.innerHTML = <span class="string">'&lt;!--[if gt IE '</span> + (++v) + <span class="string">']&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;'</span>,</span><br><span class="line"> all[<span class="number">0</span>]</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">return</span> v &gt; <span class="number">4</span> ? v : <span class="literal">false</span> ;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure></li><li>原生JavaScript获取浏览器版本号<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">browserVersion</span>(<span class="params">types</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> other = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">for</span> (i <span class="keyword">in</span> types) &#123;</span><br><span class="line"> <span class="keyword">var</span> v = types[i] ? types[i] : i;</span><br><span class="line"> <span class="keyword">if</span> (USERAGENT.indexOf(v) != <span class="number">-1</span>) &#123;</span><br><span class="line"> <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(v + <span class="string">'(\/|\s|:)([\d\.]+)'</span>, <span class="string">'ig'</span>);</span><br><span class="line"> <span class="keyword">var</span> matches = re.exec(USERAGENT);</span><br><span class="line"> <span class="keyword">var</span> ver = matches != <span class="literal">null</span> ? matches[<span class="number">2</span>] : <span class="number">0</span>;</span><br><span class="line"> other = ver !== <span class="number">0</span> &amp;&amp; v != <span class="string">'mozilla'</span> ? <span class="number">0</span> : other;</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">var</span> ver = <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="built_in">eval</span>(<span class="string">'BROWSER.'</span> + i + <span class="string">'= ver'</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> BROWSER.other = other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript半角转换为全角函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToDBC</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line"> code = str.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span>(code &gt;= <span class="number">33</span> &amp;&amp; code &lt;= <span class="number">126</span>)&#123;</span><br><span class="line"> result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">65248</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">32</span>)&#123;</span><br><span class="line"> result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">12288</span> - <span class="number">32</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> result += str.charAt(i);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原生JavaScript全角转换为半角函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToCDB</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line"> code = str.charCodeAt(i);</span><br><span class="line"> <span class="keyword">if</span>(code &gt;= <span class="number">65281</span> &amp;&amp; code &lt;= <span class="number">65374</span>)&#123;</span><br><span class="line"> result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">65248</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">12288</span>)&#123;</span><br><span class="line"> result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">12288</span> + <span class="number">32</span>);</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> result += str.charAt(i);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven-使用</title>
      <link href="/2022/03/20/maven-%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/20/maven-%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：6058,阅读全文大约需要24分钟</p><blockquote><p>maven是apache的一个纯java的管理项目构建，依赖构建，项目报告，项目文档等步骤的工具。<br>maven基于POM( Project Object Model，项目对象模型 )这个xml文档里的项目信息管理构建项目</p></blockquote><h1 id="基本构成"><a href="#基本构成" class="headerlink" title="基本构成"></a>基本构成</h1><blockquote><p>所有 POM 文件都需要 project 元素和三个必需字段：groupId，artifactId，version。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns &#x3D; &quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">    xmlns:xsi &#x3D; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation &#x3D; &quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0</span><br><span class="line">    http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 模型版本 --&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;!-- 公司或者组织的唯一标志，并且配置时生成的路径也是由此生成， 如com.companyname.project-group，maven会将该项目打成的jar包放本地路径：&#x2F;com&#x2F;companyname&#x2F;project-group --&gt;</span><br><span class="line">    &lt;groupId&gt;com.companyname.project-group&lt;&#x2F;groupId&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 项目的唯一ID，一个groupId下面可能多个项目，就是靠artifactId来区分的 --&gt;</span><br><span class="line">    &lt;artifactId&gt;project&lt;&#x2F;artifactId&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 版本号 --&gt;</span><br><span class="line">    &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>除了以上的基本信息外，还有很多默认信息。maven没有指定父级pom（<code>Super pom</code>）时会指定一个默认的父级。父级和自身的构建信息组成了<code>effective pom</code>,这是maven执行的依据。<br>查看<code>effective pom</code>-也就是父级+自身配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn help:effective-pom</span><br></pre></td></tr></table></figure><h1 id="maven-配置文件"><a href="#maven-配置文件" class="headerlink" title="maven 配置文件"></a>maven 配置文件</h1><table><thead><tr><th>类型</th><th>位置</th></tr></thead><tbody><tr><td>项目级（Per Project）</td><td>定义在项目的POM文件pom.xml中</td></tr><tr><td>用户级 （Per User）</td><td>定义在Maven的设置xml文件中 (%USER_HOME%/.m2/settings.xml)</td></tr><tr><td>全局（Global）</td><td>定义在 Maven 全局的设置 xml 文件中 (%M2_HOME%/conf/settings.xml)</td></tr></tbody></table><p>也可以在pom中写入多个<code>profile</code>信息，并激活某一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;-P+id</span><br><span class="line">mvn test -Pporfileid</span><br></pre></td></tr></table></figure><h1 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h1><blockquote><p>maven通过中央仓库(maven提供)，本地仓库(使用过的都会保存在本地)，远程仓库（自定义）组成</p></blockquote><p>远程仓库定义，先本地找，再中央仓库找不到会去远程找再找不到报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;</span><br><span class="line">   xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">   xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0</span><br><span class="line">   http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;</span><br><span class="line">   &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">   &lt;groupId&gt;com.companyname.projectgroup&lt;&#x2F;groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;project&lt;&#x2F;artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.0&lt;&#x2F;version&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">         &lt;groupId&gt;com.companyname.common-lib&lt;&#x2F;groupId&gt;</span><br><span class="line">         &lt;artifactId&gt;common-lib&lt;&#x2F;artifactId&gt;</span><br><span class="line">         &lt;version&gt;1.0.0&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;&#x2F;dependency&gt;</span><br><span class="line">   &lt;dependencies&gt;</span><br><span class="line">   &lt;repositories&gt;</span><br><span class="line">      &lt;repository&gt;</span><br><span class="line">         &lt;id&gt;companyname.lib1&lt;&#x2F;id&gt;</span><br><span class="line">         &lt;url&gt;http:&#x2F;&#x2F;download.companyname.org&#x2F;maven2&#x2F;lib1&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;&#x2F;repository&gt;</span><br><span class="line">      &lt;repository&gt;</span><br><span class="line">         &lt;id&gt;companyname.lib2&lt;&#x2F;id&gt;</span><br><span class="line">         &lt;url&gt;http:&#x2F;&#x2F;download.companyname.org&#x2F;maven2&#x2F;lib2&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;&#x2F;repository&gt;</span><br><span class="line">   &lt;&#x2F;repositories&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><p>alibaba国内maven镜像，可以解决maven仓库速度慢的问题<br>maven根目录-&gt;<code>conf</code>-&gt;<code>setting.xml</code>添加到<code>mirrors</code>节点下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;        </span><br><span class="line">    &lt;&#x2F;mirror&gt;</span><br><span class="line">&lt;&#x2F;mirrors&gt;</span><br></pre></td></tr></table></figure><p>pom里添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;repositories&gt;  </span><br><span class="line">        &lt;repository&gt;  </span><br><span class="line">            &lt;id&gt;alimaven&lt;&#x2F;id&gt;  </span><br><span class="line">            &lt;name&gt;aliyun maven&lt;&#x2F;name&gt;  </span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;  </span><br><span class="line">            &lt;releases&gt;  </span><br><span class="line">                &lt;enabled&gt;true&lt;&#x2F;enabled&gt;  </span><br><span class="line">            &lt;&#x2F;releases&gt;  </span><br><span class="line">            &lt;snapshots&gt;  </span><br><span class="line">                &lt;enabled&gt;false&lt;&#x2F;enabled&gt;  </span><br><span class="line">            &lt;&#x2F;snapshots&gt;  </span><br><span class="line">        &lt;&#x2F;repository&gt;  </span><br><span class="line">&lt;&#x2F;repositories&gt;</span><br></pre></td></tr></table></figure><h1 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h1><ul><li>快照，相对于版本，快照信息可以自动获取最新的快照，而版本则是固定的。在开发阶段快照比较试用</li><li>文档构建，maven可以生成软件说明文档</li><li>自动化构建部署</li><li>依赖管理，插件使用</li></ul><h1 id="maven标签大全"><a href="#maven标签大全" class="headerlink" title="maven标签大全"></a>maven标签大全</h1><blockquote><p>摘自<a href="https://www.runoob.com/maven/maven-pom.html" target="_blank" rel="noopener">菜鸟教程</a>，control+f可以快速查找标签信息。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br></pre></td><td class="code"><pre><span class="line">&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot; xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0http:&#x2F;&#x2F;maven.apache.org&#x2F;maven-v4_0_0.xsd&quot;&gt;</span><br><span class="line">    &lt;!--父项目的坐标。如果项目中没有规定某个元素的值，那么父项目中的对应值即为项目的默认值。 坐标包括group ID，artifact ID和 </span><br><span class="line">        version。 --&gt;</span><br><span class="line">    &lt;parent&gt;</span><br><span class="line">        &lt;!--被继承的父项目的构件标识符 --&gt;</span><br><span class="line">        &lt;artifactId &#x2F;&gt;</span><br><span class="line">        &lt;!--被继承的父项目的全球唯一标识符 --&gt;</span><br><span class="line">        &lt;groupId &#x2F;&gt;</span><br><span class="line">        &lt;!--被继承的父项目的版本 --&gt;</span><br><span class="line">        &lt;version &#x2F;&gt;</span><br><span class="line">        &lt;!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是..&#x2F;pom.xml。Maven首先在构建当前项目的地方寻找父项 </span><br><span class="line">            目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 --&gt;</span><br><span class="line">        &lt;relativePath &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;parent&gt;</span><br><span class="line">    &lt;!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 --&gt;</span><br><span class="line">    &lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;</span><br><span class="line">    &lt;!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：&#x2F;com&#x2F;mycompany&#x2F;app --&gt;</span><br><span class="line">    &lt;groupId&gt;asia.banseon&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 </span><br><span class="line">        特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 --&gt;</span><br><span class="line">    &lt;artifactId&gt;banseon-maven2&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 --&gt;</span><br><span class="line">    &lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br><span class="line">    &lt;!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 --&gt;</span><br><span class="line">    &lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;!--项目的名称, Maven产生的文档用 --&gt;</span><br><span class="line">    &lt;name&gt;banseon-maven&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;!--项目主页的URL, Maven产生的文档用 --&gt;</span><br><span class="line">    &lt;url&gt;http:&#x2F;&#x2F;www.baidu.com&#x2F;banseon&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 </span><br><span class="line">        签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 --&gt;</span><br><span class="line">    &lt;description&gt;A maven project to study maven.&lt;&#x2F;description&gt;</span><br><span class="line">    &lt;!--描述了这个项目构建环境中的前提条件。 --&gt;</span><br><span class="line">    &lt;prerequisites&gt;</span><br><span class="line">        &lt;!--构建该项目或使用该插件所需要的Maven的最低版本 --&gt;</span><br><span class="line">        &lt;maven &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;prerequisites&gt;</span><br><span class="line">    &lt;!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira --&gt;</span><br><span class="line">    &lt;issueManagement&gt;</span><br><span class="line">        &lt;!--问题管理系统（例如jira）的名字， --&gt;</span><br><span class="line">        &lt;system&gt;jira&lt;&#x2F;system&gt;</span><br><span class="line">        &lt;!--该项目使用的问题管理系统的URL --&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;jira.baidu.com&#x2F;banseon&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;issueManagement&gt;</span><br><span class="line">    &lt;!--项目持续集成信息 --&gt;</span><br><span class="line">    &lt;ciManagement&gt;</span><br><span class="line">        &lt;!--持续集成系统的名字，例如continuum --&gt;</span><br><span class="line">        &lt;system &#x2F;&gt;</span><br><span class="line">        &lt;!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 --&gt;</span><br><span class="line">        &lt;url &#x2F;&gt;</span><br><span class="line">        &lt;!--构建完成时，需要通知的开发者&#x2F;用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） --&gt;</span><br><span class="line">        &lt;notifiers&gt;</span><br><span class="line">            &lt;!--配置一种方式，当构建中断时，以该方式通知用户&#x2F;开发者 --&gt;</span><br><span class="line">            &lt;notifier&gt;</span><br><span class="line">                &lt;!--传送通知的途径 --&gt;</span><br><span class="line">                &lt;type &#x2F;&gt;</span><br><span class="line">                &lt;!--发生错误时是否通知 --&gt;</span><br><span class="line">                &lt;sendOnError &#x2F;&gt;</span><br><span class="line">                &lt;!--构建失败时是否通知 --&gt;</span><br><span class="line">                &lt;sendOnFailure &#x2F;&gt;</span><br><span class="line">                &lt;!--构建成功时是否通知 --&gt;</span><br><span class="line">                &lt;sendOnSuccess &#x2F;&gt;</span><br><span class="line">                &lt;!--发生警告时是否通知 --&gt;</span><br><span class="line">                &lt;sendOnWarning &#x2F;&gt;</span><br><span class="line">                &lt;!--不赞成使用。通知发送到哪里 --&gt;</span><br><span class="line">                &lt;address &#x2F;&gt;</span><br><span class="line">                &lt;!--扩展配置项 --&gt;</span><br><span class="line">                &lt;configuration &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;notifier&gt;</span><br><span class="line">        &lt;&#x2F;notifiers&gt;</span><br><span class="line">    &lt;&#x2F;ciManagement&gt;</span><br><span class="line">    &lt;!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 --&gt;</span><br><span class="line">    &lt;inceptionYear &#x2F;&gt;</span><br><span class="line">    &lt;!--项目相关邮件列表信息 --&gt;</span><br><span class="line">    &lt;mailingLists&gt;</span><br><span class="line">        &lt;!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 --&gt;</span><br><span class="line">        &lt;mailingList&gt;</span><br><span class="line">            &lt;!--邮件的名称 --&gt;</span><br><span class="line">            &lt;name&gt;Demo&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span><br><span class="line">            &lt;post&gt;banseon@126.com&lt;&#x2F;post&gt;</span><br><span class="line">            &lt;!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span><br><span class="line">            &lt;subscribe&gt;banseon@126.com&lt;&#x2F;subscribe&gt;</span><br><span class="line">            &lt;!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 --&gt;</span><br><span class="line">            &lt;unsubscribe&gt;banseon@126.com&lt;&#x2F;unsubscribe&gt;</span><br><span class="line">            &lt;!--你可以浏览邮件信息的URL --&gt;</span><br><span class="line">            &lt;archive&gt;http:&#x2F;hi.baidu.com&#x2F;banseon&#x2F;demo&#x2F;dev&#x2F;&lt;&#x2F;archive&gt;</span><br><span class="line">        &lt;&#x2F;mailingList&gt;</span><br><span class="line">    &lt;&#x2F;mailingLists&gt;</span><br><span class="line">    &lt;!--项目开发者列表 --&gt;</span><br><span class="line">    &lt;developers&gt;</span><br><span class="line">        &lt;!--某个项目开发者的信息 --&gt;</span><br><span class="line">        &lt;developer&gt;</span><br><span class="line">            &lt;!--SCM里项目开发者的唯一标识符 --&gt;</span><br><span class="line">            &lt;id&gt;HELLO WORLD&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!--项目开发者的全名 --&gt;</span><br><span class="line">            &lt;name&gt;banseon&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--项目开发者的email --&gt;</span><br><span class="line">            &lt;email&gt;banseon@126.com&lt;&#x2F;email&gt;</span><br><span class="line">            &lt;!--项目开发者的主页的URL --&gt;</span><br><span class="line">            &lt;url &#x2F;&gt;</span><br><span class="line">            &lt;!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 --&gt;</span><br><span class="line">            &lt;roles&gt;</span><br><span class="line">                &lt;role&gt;Project Manager&lt;&#x2F;role&gt;</span><br><span class="line">                &lt;role&gt;Architect&lt;&#x2F;role&gt;</span><br><span class="line">            &lt;&#x2F;roles&gt;</span><br><span class="line">            &lt;!--项目开发者所属组织 --&gt;</span><br><span class="line">            &lt;organization&gt;demo&lt;&#x2F;organization&gt;</span><br><span class="line">            &lt;!--项目开发者所属组织的URL --&gt;</span><br><span class="line">            &lt;organizationUrl&gt;http:&#x2F;&#x2F;hi.baidu.com&#x2F;banseon&lt;&#x2F;organizationUrl&gt;</span><br><span class="line">            &lt;!--项目开发者属性，如即时消息如何处理等 --&gt;</span><br><span class="line">            &lt;properties&gt;</span><br><span class="line">                &lt;dept&gt;No&lt;&#x2F;dept&gt;</span><br><span class="line">            &lt;&#x2F;properties&gt;</span><br><span class="line">            &lt;!--项目开发者所在时区， -11到12范围内的整数。 --&gt;</span><br><span class="line">            &lt;timezone&gt;-5&lt;&#x2F;timezone&gt;</span><br><span class="line">        &lt;&#x2F;developer&gt;</span><br><span class="line">    &lt;&#x2F;developers&gt;</span><br><span class="line">    &lt;!--项目的其他贡献者列表 --&gt;</span><br><span class="line">    &lt;contributors&gt;</span><br><span class="line">        &lt;!--项目的其他贡献者。参见developers&#x2F;developer元素 --&gt;</span><br><span class="line">        &lt;contributor&gt;</span><br><span class="line">            &lt;name &#x2F;&gt;</span><br><span class="line">            &lt;email &#x2F;&gt;</span><br><span class="line">            &lt;url &#x2F;&gt;</span><br><span class="line">            &lt;organization &#x2F;&gt;</span><br><span class="line">            &lt;organizationUrl &#x2F;&gt;</span><br><span class="line">            &lt;roles &#x2F;&gt;</span><br><span class="line">            &lt;timezone &#x2F;&gt;</span><br><span class="line">            &lt;properties &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;contributor&gt;</span><br><span class="line">    &lt;&#x2F;contributors&gt;</span><br><span class="line">    &lt;!--该元素描述了项目所有License列表。 应该只列出该项目的license列表，不要列出依赖项目的 license列表。如果列出多个license，用户可以选择它们中的一个而不是接受所有license。 --&gt;</span><br><span class="line">    &lt;licenses&gt;</span><br><span class="line">        &lt;!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 --&gt;</span><br><span class="line">        &lt;license&gt;</span><br><span class="line">            &lt;!--license用于法律上的名称 --&gt;</span><br><span class="line">            &lt;name&gt;Apache 2&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--官方的license正文页面的URL --&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;www.baidu.com&#x2F;banseon&#x2F;LICENSE-2.0.txt&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 --&gt;</span><br><span class="line">            &lt;distribution&gt;repo&lt;&#x2F;distribution&gt;</span><br><span class="line">            &lt;!--关于license的补充信息 --&gt;</span><br><span class="line">            &lt;comments&gt;A business-friendly OSS license&lt;&#x2F;comments&gt;</span><br><span class="line">        &lt;&#x2F;license&gt;</span><br><span class="line">    &lt;&#x2F;licenses&gt;</span><br><span class="line">    &lt;!--SCM(Source Control Management)标签允许你配置你的代码库，供Maven web站点和其它插件使用。 --&gt;</span><br><span class="line">    &lt;scm&gt;</span><br><span class="line">        &lt;!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 --&gt;</span><br><span class="line">        &lt;connection&gt;</span><br><span class="line">            scm:svn:http:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon&#x2F;maven&#x2F;banseon&#x2F;banseon-maven2-trunk(dao-trunk)</span><br><span class="line">        &lt;&#x2F;connection&gt;</span><br><span class="line">        &lt;!--给开发者使用的，类似connection元素。即该连接不仅仅只读 --&gt;</span><br><span class="line">        &lt;developerConnection&gt;</span><br><span class="line">            scm:svn:http:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon&#x2F;maven&#x2F;banseon&#x2F;dao-trunk</span><br><span class="line">        &lt;&#x2F;developerConnection&gt;</span><br><span class="line">        &lt;!--当前代码的标签，在开发阶段默认为HEAD --&gt;</span><br><span class="line">        &lt;tag &#x2F;&gt;</span><br><span class="line">        &lt;!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 --&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;scm&gt;</span><br><span class="line">    &lt;!--描述项目所属组织的各种属性。Maven产生的文档用 --&gt;</span><br><span class="line">    &lt;organization&gt;</span><br><span class="line">        &lt;!--组织的全名 --&gt;</span><br><span class="line">        &lt;name&gt;demo&lt;&#x2F;name&gt;</span><br><span class="line">        &lt;!--组织主页的URL --&gt;</span><br><span class="line">        &lt;url&gt;http:&#x2F;&#x2F;www.baidu.com&#x2F;banseon&lt;&#x2F;url&gt;</span><br><span class="line">    &lt;&#x2F;organization&gt;</span><br><span class="line">    &lt;!--构建项目需要的信息 --&gt;</span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span><br><span class="line">        &lt;sourceDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 --&gt;</span><br><span class="line">        &lt;scriptSourceDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 --&gt;</span><br><span class="line">        &lt;testSourceDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--被编译过的应用程序class文件存放的目录。 --&gt;</span><br><span class="line">        &lt;outputDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--被编译过的测试class文件存放的目录。 --&gt;</span><br><span class="line">        &lt;testOutputDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--使用来自该项目的一系列构建扩展 --&gt;</span><br><span class="line">        &lt;extensions&gt;</span><br><span class="line">            &lt;!--描述使用到的构建扩展。 --&gt;</span><br><span class="line">            &lt;extension&gt;</span><br><span class="line">                &lt;!--构建扩展的groupId --&gt;</span><br><span class="line">                &lt;groupId &#x2F;&gt;</span><br><span class="line">                &lt;!--构建扩展的artifactId --&gt;</span><br><span class="line">                &lt;artifactId &#x2F;&gt;</span><br><span class="line">                &lt;!--构建扩展的版本 --&gt;</span><br><span class="line">                &lt;version &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;extension&gt;</span><br><span class="line">        &lt;&#x2F;extensions&gt;</span><br><span class="line">        &lt;!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 --&gt;</span><br><span class="line">        &lt;defaultGoal &#x2F;&gt;</span><br><span class="line">        &lt;!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 --&gt;</span><br><span class="line">        &lt;resources&gt;</span><br><span class="line">            &lt;!--这个元素描述了项目相关或测试相关的所有资源路径 --&gt;</span><br><span class="line">            &lt;resource&gt;</span><br><span class="line">                &lt;!-- 描述了资源的目标路径。该路径相对target&#x2F;classes目录（例如$&#123;project.build.outputDirectory&#125;）。举个例 </span><br><span class="line">                    子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org&#x2F;apache&#x2F;maven &#x2F;messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 --&gt;</span><br><span class="line">                &lt;targetPath &#x2F;&gt;</span><br><span class="line">                &lt;!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 --&gt;</span><br><span class="line">                &lt;filtering &#x2F;&gt;</span><br><span class="line">                &lt;!--描述存放资源的目录，该路径相对POM路径 --&gt;</span><br><span class="line">                &lt;directory &#x2F;&gt;</span><br><span class="line">                &lt;!--包含的模式列表，例如**&#x2F;*.xml. --&gt;</span><br><span class="line">                &lt;includes &#x2F;&gt;</span><br><span class="line">                &lt;!--排除的模式列表，例如**&#x2F;*.xml --&gt;</span><br><span class="line">                &lt;excludes &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;resource&gt;</span><br><span class="line">        &lt;&#x2F;resources&gt;</span><br><span class="line">        &lt;!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 --&gt;</span><br><span class="line">        &lt;testResources&gt;</span><br><span class="line">            &lt;!--这个元素描述了测试相关的所有资源路径，参见build&#x2F;resources&#x2F;resource元素的说明 --&gt;</span><br><span class="line">            &lt;testResource&gt;</span><br><span class="line">                &lt;targetPath &#x2F;&gt;</span><br><span class="line">                &lt;filtering &#x2F;&gt;</span><br><span class="line">                &lt;directory &#x2F;&gt;</span><br><span class="line">                &lt;includes &#x2F;&gt;</span><br><span class="line">                &lt;excludes &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;testResource&gt;</span><br><span class="line">        &lt;&#x2F;testResources&gt;</span><br><span class="line">        &lt;!--构建产生的所有文件存放的目录 --&gt;</span><br><span class="line">        &lt;directory &#x2F;&gt;</span><br><span class="line">        &lt;!--产生的构件的文件名，默认值是$&#123;artifactId&#125;-$&#123;version&#125;。 --&gt;</span><br><span class="line">        &lt;finalName &#x2F;&gt;</span><br><span class="line">        &lt;!--当filtering开关打开时，使用到的过滤器属性文件列表 --&gt;</span><br><span class="line">        &lt;filters &#x2F;&gt;</span><br><span class="line">        &lt;!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 --&gt;</span><br><span class="line">        &lt;pluginManagement&gt;</span><br><span class="line">            &lt;!--使用的插件列表 。 --&gt;</span><br><span class="line">            &lt;plugins&gt;</span><br><span class="line">                &lt;!--plugin元素包含描述插件所需要的信息。 --&gt;</span><br><span class="line">                &lt;plugin&gt;</span><br><span class="line">                    &lt;!--插件在仓库里的group ID --&gt;</span><br><span class="line">                    &lt;groupId &#x2F;&gt;</span><br><span class="line">                    &lt;!--插件在仓库里的artifact ID --&gt;</span><br><span class="line">                    &lt;artifactId &#x2F;&gt;</span><br><span class="line">                    &lt;!--被使用的插件的版本（或版本范围） --&gt;</span><br><span class="line">                    &lt;version &#x2F;&gt;</span><br><span class="line">                    &lt;!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 --&gt;</span><br><span class="line">                    &lt;extensions &#x2F;&gt;</span><br><span class="line">                    &lt;!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 --&gt;</span><br><span class="line">                    &lt;executions&gt;</span><br><span class="line">                        &lt;!--execution元素包含了插件执行需要的信息 --&gt;</span><br><span class="line">                        &lt;execution&gt;</span><br><span class="line">                            &lt;!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 --&gt;</span><br><span class="line">                            &lt;id &#x2F;&gt;</span><br><span class="line">                            &lt;!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 --&gt;</span><br><span class="line">                            &lt;phase &#x2F;&gt;</span><br><span class="line">                            &lt;!--配置的执行目标 --&gt;</span><br><span class="line">                            &lt;goals &#x2F;&gt;</span><br><span class="line">                            &lt;!--配置是否被传播到子POM --&gt;</span><br><span class="line">                            &lt;inherited &#x2F;&gt;</span><br><span class="line">                            &lt;!--作为DOM对象的配置 --&gt;</span><br><span class="line">                            &lt;configuration &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;execution&gt;</span><br><span class="line">                    &lt;&#x2F;executions&gt;</span><br><span class="line">                    &lt;!--项目引入插件所需要的额外依赖 --&gt;</span><br><span class="line">                    &lt;dependencies&gt;</span><br><span class="line">                        &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                        &lt;dependency&gt;</span><br><span class="line">                            ......</span><br><span class="line">                        &lt;&#x2F;dependency&gt;</span><br><span class="line">                    &lt;&#x2F;dependencies&gt;</span><br><span class="line">                    &lt;!--任何配置是否被传播到子项目 --&gt;</span><br><span class="line">                    &lt;inherited &#x2F;&gt;</span><br><span class="line">                    &lt;!--作为DOM对象的配置 --&gt;</span><br><span class="line">                    &lt;configuration &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;plugin&gt;</span><br><span class="line">            &lt;&#x2F;plugins&gt;</span><br><span class="line">        &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">        &lt;!--使用的插件列表 --&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--参见build&#x2F;pluginManagement&#x2F;plugins&#x2F;plugin元素 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId &#x2F;&gt;</span><br><span class="line">                &lt;artifactId &#x2F;&gt;</span><br><span class="line">                &lt;version &#x2F;&gt;</span><br><span class="line">                &lt;extensions &#x2F;&gt;</span><br><span class="line">                &lt;executions&gt;</span><br><span class="line">                    &lt;execution&gt;</span><br><span class="line">                        &lt;id &#x2F;&gt;</span><br><span class="line">                        &lt;phase &#x2F;&gt;</span><br><span class="line">                        &lt;goals &#x2F;&gt;</span><br><span class="line">                        &lt;inherited &#x2F;&gt;</span><br><span class="line">                        &lt;configuration &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;execution&gt;</span><br><span class="line">                &lt;&#x2F;executions&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        ......</span><br><span class="line">                    &lt;&#x2F;dependency&gt;</span><br><span class="line">                &lt;&#x2F;dependencies&gt;</span><br><span class="line">                &lt;goals &#x2F;&gt;</span><br><span class="line">                &lt;inherited &#x2F;&gt;</span><br><span class="line">                &lt;configuration &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;build&gt;</span><br><span class="line">    &lt;!--在列的项目构建profile，如果被激活，会修改构建处理 --&gt;</span><br><span class="line">    &lt;profiles&gt;</span><br><span class="line">        &lt;!--根据环境参数或命令行参数激活某个构建处理 --&gt;</span><br><span class="line">        &lt;profile&gt;</span><br><span class="line">            &lt;!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 --&gt;</span><br><span class="line">            &lt;id &#x2F;&gt;</span><br><span class="line">            &lt;!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 --&gt;</span><br><span class="line">            &lt;activation&gt;</span><br><span class="line">                &lt;!--profile默认是否激活的标志 --&gt;</span><br><span class="line">                &lt;activeByDefault &#x2F;&gt;</span><br><span class="line">                &lt;!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 --&gt;</span><br><span class="line">                &lt;jdk &#x2F;&gt;</span><br><span class="line">                &lt;!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 --&gt;</span><br><span class="line">                &lt;os&gt;</span><br><span class="line">                    &lt;!--激活profile的操作系统的名字 --&gt;</span><br><span class="line">                    &lt;name&gt;Windows XP&lt;&#x2F;name&gt;</span><br><span class="line">                    &lt;!--激活profile的操作系统所属家族(如 &#39;windows&#39;) --&gt;</span><br><span class="line">                    &lt;family&gt;Windows&lt;&#x2F;family&gt;</span><br><span class="line">                    &lt;!--激活profile的操作系统体系结构 --&gt;</span><br><span class="line">                    &lt;arch&gt;x86&lt;&#x2F;arch&gt;</span><br><span class="line">                    &lt;!--激活profile的操作系统版本 --&gt;</span><br><span class="line">                    &lt;version&gt;5.1.2600&lt;&#x2F;version&gt;</span><br><span class="line">                &lt;&#x2F;os&gt;</span><br><span class="line">                &lt;!--如果Maven检测到某一个属性（其值可以在POM中通过$&#123;名称&#125;引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 --&gt;</span><br><span class="line">                &lt;property&gt;</span><br><span class="line">                    &lt;!--激活profile的属性的名称 --&gt;</span><br><span class="line">                    &lt;name&gt;mavenVersion&lt;&#x2F;name&gt;</span><br><span class="line">                    &lt;!--激活profile的属性的值 --&gt;</span><br><span class="line">                    &lt;value&gt;2.0.3&lt;&#x2F;value&gt;</span><br><span class="line">                &lt;&#x2F;property&gt;</span><br><span class="line">                &lt;!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 --&gt;</span><br><span class="line">                &lt;file&gt;</span><br><span class="line">                    &lt;!--如果指定的文件存在，则激活profile。 --&gt;</span><br><span class="line">                    &lt;exists&gt;&#x2F;usr&#x2F;local&#x2F;hudson&#x2F;hudson-home&#x2F;jobs&#x2F;maven-guide-zh-to-production&#x2F;workspace&#x2F;</span><br><span class="line">                    &lt;&#x2F;exists&gt;</span><br><span class="line">                    &lt;!--如果指定的文件不存在，则激活profile。 --&gt;</span><br><span class="line">                    &lt;missing&gt;&#x2F;usr&#x2F;local&#x2F;hudson&#x2F;hudson-home&#x2F;jobs&#x2F;maven-guide-zh-to-production&#x2F;workspace&#x2F;</span><br><span class="line">                    &lt;&#x2F;missing&gt;</span><br><span class="line">                &lt;&#x2F;file&gt;</span><br><span class="line">            &lt;&#x2F;activation&gt;</span><br><span class="line">            &lt;!--构建项目所需要的信息。参见build元素 --&gt;</span><br><span class="line">            &lt;build&gt;</span><br><span class="line">                &lt;defaultGoal &#x2F;&gt;</span><br><span class="line">                &lt;resources&gt;</span><br><span class="line">                    &lt;resource&gt;</span><br><span class="line">                        &lt;targetPath &#x2F;&gt;</span><br><span class="line">                        &lt;filtering &#x2F;&gt;</span><br><span class="line">                        &lt;directory &#x2F;&gt;</span><br><span class="line">                        &lt;includes &#x2F;&gt;</span><br><span class="line">                        &lt;excludes &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;resource&gt;</span><br><span class="line">                &lt;&#x2F;resources&gt;</span><br><span class="line">                &lt;testResources&gt;</span><br><span class="line">                    &lt;testResource&gt;</span><br><span class="line">                        &lt;targetPath &#x2F;&gt;</span><br><span class="line">                        &lt;filtering &#x2F;&gt;</span><br><span class="line">                        &lt;directory &#x2F;&gt;</span><br><span class="line">                        &lt;includes &#x2F;&gt;</span><br><span class="line">                        &lt;excludes &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;testResource&gt;</span><br><span class="line">                &lt;&#x2F;testResources&gt;</span><br><span class="line">                &lt;directory &#x2F;&gt;</span><br><span class="line">                &lt;finalName &#x2F;&gt;</span><br><span class="line">                &lt;filters &#x2F;&gt;</span><br><span class="line">                &lt;pluginManagement&gt;</span><br><span class="line">                    &lt;plugins&gt;</span><br><span class="line">                        &lt;!--参见build&#x2F;pluginManagement&#x2F;plugins&#x2F;plugin元素 --&gt;</span><br><span class="line">                        &lt;plugin&gt;</span><br><span class="line">                            &lt;groupId &#x2F;&gt;</span><br><span class="line">                            &lt;artifactId &#x2F;&gt;</span><br><span class="line">                            &lt;version &#x2F;&gt;</span><br><span class="line">                            &lt;extensions &#x2F;&gt;</span><br><span class="line">                            &lt;executions&gt;</span><br><span class="line">                                &lt;execution&gt;</span><br><span class="line">                                    &lt;id &#x2F;&gt;</span><br><span class="line">                                    &lt;phase &#x2F;&gt;</span><br><span class="line">                                    &lt;goals &#x2F;&gt;</span><br><span class="line">                                    &lt;inherited &#x2F;&gt;</span><br><span class="line">                                    &lt;configuration &#x2F;&gt;</span><br><span class="line">                                &lt;&#x2F;execution&gt;</span><br><span class="line">                            &lt;&#x2F;executions&gt;</span><br><span class="line">                            &lt;dependencies&gt;</span><br><span class="line">                                &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                                &lt;dependency&gt;</span><br><span class="line">                                    ......</span><br><span class="line">                                &lt;&#x2F;dependency&gt;</span><br><span class="line">                            &lt;&#x2F;dependencies&gt;</span><br><span class="line">                            &lt;goals &#x2F;&gt;</span><br><span class="line">                            &lt;inherited &#x2F;&gt;</span><br><span class="line">                            &lt;configuration &#x2F;&gt;</span><br><span class="line">                        &lt;&#x2F;plugin&gt;</span><br><span class="line">                    &lt;&#x2F;plugins&gt;</span><br><span class="line">                &lt;&#x2F;pluginManagement&gt;</span><br><span class="line">                &lt;plugins&gt;</span><br><span class="line">                    &lt;!--参见build&#x2F;pluginManagement&#x2F;plugins&#x2F;plugin元素 --&gt;</span><br><span class="line">                    &lt;plugin&gt;</span><br><span class="line">                        &lt;groupId &#x2F;&gt;</span><br><span class="line">                        &lt;artifactId &#x2F;&gt;</span><br><span class="line">                        &lt;version &#x2F;&gt;</span><br><span class="line">                        &lt;extensions &#x2F;&gt;</span><br><span class="line">                        &lt;executions&gt;</span><br><span class="line">                            &lt;execution&gt;</span><br><span class="line">                                &lt;id &#x2F;&gt;</span><br><span class="line">                                &lt;phase &#x2F;&gt;</span><br><span class="line">                                &lt;goals &#x2F;&gt;</span><br><span class="line">                                &lt;inherited &#x2F;&gt;</span><br><span class="line">                                &lt;configuration &#x2F;&gt;</span><br><span class="line">                            &lt;&#x2F;execution&gt;</span><br><span class="line">                        &lt;&#x2F;executions&gt;</span><br><span class="line">                        &lt;dependencies&gt;</span><br><span class="line">                            &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                            &lt;dependency&gt;</span><br><span class="line">                                ......</span><br><span class="line">                            &lt;&#x2F;dependency&gt;</span><br><span class="line">                        &lt;&#x2F;dependencies&gt;</span><br><span class="line">                        &lt;goals &#x2F;&gt;</span><br><span class="line">                        &lt;inherited &#x2F;&gt;</span><br><span class="line">                        &lt;configuration &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;plugin&gt;</span><br><span class="line">                &lt;&#x2F;plugins&gt;</span><br><span class="line">            &lt;&#x2F;build&gt;</span><br><span class="line">            &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span><br><span class="line">            &lt;modules &#x2F;&gt;</span><br><span class="line">            &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span><br><span class="line">            &lt;repositories&gt;</span><br><span class="line">                &lt;!--参见repositories&#x2F;repository元素 --&gt;</span><br><span class="line">                &lt;repository&gt;</span><br><span class="line">                    &lt;releases&gt;</span><br><span class="line">                        &lt;enabled &#x2F;&gt;</span><br><span class="line">                        &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                        &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;releases&gt;</span><br><span class="line">                    &lt;snapshots&gt;</span><br><span class="line">                        &lt;enabled &#x2F;&gt;</span><br><span class="line">                        &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                        &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;snapshots&gt;</span><br><span class="line">                    &lt;id &#x2F;&gt;</span><br><span class="line">                    &lt;name &#x2F;&gt;</span><br><span class="line">                    &lt;url &#x2F;&gt;</span><br><span class="line">                    &lt;layout &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;repository&gt;</span><br><span class="line">            &lt;&#x2F;repositories&gt;</span><br><span class="line">            &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span><br><span class="line">            &lt;pluginRepositories&gt;</span><br><span class="line">                &lt;!--包含需要连接到远程插件仓库的信息.参见repositories&#x2F;repository元素 --&gt;</span><br><span class="line">                &lt;pluginRepository&gt;</span><br><span class="line">                    &lt;releases&gt;</span><br><span class="line">                        &lt;enabled &#x2F;&gt;</span><br><span class="line">                        &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                        &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;releases&gt;</span><br><span class="line">                    &lt;snapshots&gt;</span><br><span class="line">                        &lt;enabled &#x2F;&gt;</span><br><span class="line">                        &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                        &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;snapshots&gt;</span><br><span class="line">                    &lt;id &#x2F;&gt;</span><br><span class="line">                    &lt;name &#x2F;&gt;</span><br><span class="line">                    &lt;url &#x2F;&gt;</span><br><span class="line">                    &lt;layout &#x2F;&gt;</span><br><span class="line">                &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">            &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line">            &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span><br><span class="line">            &lt;dependencies&gt;</span><br><span class="line">                &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                &lt;dependency&gt;</span><br><span class="line">                    ......</span><br><span class="line">                &lt;&#x2F;dependency&gt;</span><br><span class="line">            &lt;&#x2F;dependencies&gt;</span><br><span class="line">            &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span><br><span class="line">            &lt;reports &#x2F;&gt;</span><br><span class="line">            &lt;!--该元素包括使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 --&gt;</span><br><span class="line">            &lt;reporting&gt;</span><br><span class="line">                ......</span><br><span class="line">            &lt;&#x2F;reporting&gt;</span><br><span class="line">            &lt;!--参见dependencyManagement元素 --&gt;</span><br><span class="line">            &lt;dependencyManagement&gt;</span><br><span class="line">                &lt;dependencies&gt;</span><br><span class="line">                    &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">                    &lt;dependency&gt;</span><br><span class="line">                        ......</span><br><span class="line">                    &lt;&#x2F;dependency&gt;</span><br><span class="line">                &lt;&#x2F;dependencies&gt;</span><br><span class="line">            &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line">            &lt;!--参见distributionManagement元素 --&gt;</span><br><span class="line">            &lt;distributionManagement&gt;</span><br><span class="line">                ......</span><br><span class="line">            &lt;&#x2F;distributionManagement&gt;</span><br><span class="line">            &lt;!--参见properties元素 --&gt;</span><br><span class="line">            &lt;properties &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;profile&gt;</span><br><span class="line">    &lt;&#x2F;profiles&gt;</span><br><span class="line">    &lt;!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 --&gt;</span><br><span class="line">    &lt;modules &#x2F;&gt;</span><br><span class="line">    &lt;!--发现依赖和扩展的远程仓库列表。 --&gt;</span><br><span class="line">    &lt;repositories&gt;</span><br><span class="line">        &lt;!--包含需要连接到远程仓库的信息 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;!--如何处理远程仓库里发布版本的下载 --&gt;</span><br><span class="line">            &lt;releases&gt;</span><br><span class="line">                &lt;!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 --&gt;</span><br><span class="line">                &lt;enabled &#x2F;&gt;</span><br><span class="line">                &lt;!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 --&gt;</span><br><span class="line">                &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                &lt;!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 --&gt;</span><br><span class="line">                &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;releases&gt;</span><br><span class="line">            &lt;!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 </span><br><span class="line">                策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories&#x2F;repository&#x2F;releases元素 --&gt;</span><br><span class="line">            &lt;snapshots&gt;</span><br><span class="line">                &lt;enabled &#x2F;&gt;</span><br><span class="line">                &lt;updatePolicy &#x2F;&gt;</span><br><span class="line">                &lt;checksumPolicy &#x2F;&gt;</span><br><span class="line">            &lt;&#x2F;snapshots&gt;</span><br><span class="line">            &lt;!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 --&gt;</span><br><span class="line">            &lt;id&gt;banseon-repository-proxy&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!--远程仓库名称 --&gt;</span><br><span class="line">            &lt;name&gt;banseon-repository-proxy&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--远程仓库URL，按protocol:&#x2F;&#x2F;hostname&#x2F;path形式 --&gt;</span><br><span class="line">            &lt;url&gt;http:&#x2F;&#x2F;192.168.1.169:9999&#x2F;repository&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 </span><br><span class="line">                而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 --&gt;</span><br><span class="line">            &lt;layout&gt;default&lt;&#x2F;layout&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">    &lt;&#x2F;repositories&gt;</span><br><span class="line">    &lt;!--发现插件的远程仓库列表，这些插件用于构建和报表 --&gt;</span><br><span class="line">    &lt;pluginRepositories&gt;</span><br><span class="line">        &lt;!--包含需要连接到远程插件仓库的信息.参见repositories&#x2F;repository元素 --&gt;</span><br><span class="line">        &lt;pluginRepository&gt;</span><br><span class="line">            ......</span><br><span class="line">        &lt;&#x2F;pluginRepository&gt;</span><br><span class="line">    &lt;&#x2F;pluginRepositories&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &lt;!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 --&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;!--依赖的group ID --&gt;</span><br><span class="line">            &lt;groupId&gt;org.apache.maven&lt;&#x2F;groupId&gt;</span><br><span class="line">            &lt;!--依赖的artifact ID --&gt;</span><br><span class="line">            &lt;artifactId&gt;maven-artifact&lt;&#x2F;artifactId&gt;</span><br><span class="line">            &lt;!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 --&gt;</span><br><span class="line">            &lt;version&gt;3.8.1&lt;&#x2F;version&gt;</span><br><span class="line">            &lt;!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， </span><br><span class="line">                尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 --&gt;</span><br><span class="line">            &lt;type&gt;jar&lt;&#x2F;type&gt;</span><br><span class="line">            &lt;!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 </span><br><span class="line">                JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 --&gt;</span><br><span class="line">            &lt;classifier&gt;&lt;&#x2F;classifier&gt;</span><br><span class="line">            &lt;!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath </span><br><span class="line">                - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 </span><br><span class="line">                - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 --&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">            &lt;!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如$&#123;java.home&#125;。 --&gt;</span><br><span class="line">            &lt;systemPath&gt;&lt;&#x2F;systemPath&gt;</span><br><span class="line">            &lt;!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 --&gt;</span><br><span class="line">            &lt;exclusions&gt;</span><br><span class="line">                &lt;exclusion&gt;</span><br><span class="line">                    &lt;artifactId&gt;spring-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">                    &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">                &lt;&#x2F;exclusion&gt;</span><br><span class="line">            &lt;&#x2F;exclusions&gt;</span><br><span class="line">            &lt;!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 --&gt;</span><br><span class="line">            &lt;optional&gt;true&lt;&#x2F;optional&gt;</span><br><span class="line">        &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;!--不赞成使用. 现在Maven忽略该元素. --&gt;</span><br><span class="line">    &lt;reports&gt;&lt;&#x2F;reports&gt;</span><br><span class="line">    &lt;!--该元素描述使用报表插件产生报表的规范。当用户执行&quot;mvn site&quot;，这些报表就会运行。 在页面导航栏能看到所有报表的链接。 --&gt;</span><br><span class="line">    &lt;reporting&gt;</span><br><span class="line">        &lt;!--true，则，网站不包括默认的报表。这包括&quot;项目信息&quot;菜单中的报表。 --&gt;</span><br><span class="line">        &lt;excludeDefaults &#x2F;&gt;</span><br><span class="line">        &lt;!--所有产生的报表存放到哪里。默认值是$&#123;project.build.directory&#125;&#x2F;site。 --&gt;</span><br><span class="line">        &lt;outputDirectory &#x2F;&gt;</span><br><span class="line">        &lt;!--使用的报表插件和他们的配置。 --&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;!--plugin元素包含描述报表插件需要的信息 --&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;!--报表插件在仓库里的group ID --&gt;</span><br><span class="line">                &lt;groupId &#x2F;&gt;</span><br><span class="line">                &lt;!--报表插件在仓库里的artifact ID --&gt;</span><br><span class="line">                &lt;artifactId &#x2F;&gt;</span><br><span class="line">                &lt;!--被使用的报表插件的版本（或版本范围） --&gt;</span><br><span class="line">                &lt;version &#x2F;&gt;</span><br><span class="line">                &lt;!--任何配置是否被传播到子项目 --&gt;</span><br><span class="line">                &lt;inherited &#x2F;&gt;</span><br><span class="line">                &lt;!--报表插件的配置 --&gt;</span><br><span class="line">                &lt;configuration &#x2F;&gt;</span><br><span class="line">                &lt;!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 --&gt;</span><br><span class="line">                &lt;reportSets&gt;</span><br><span class="line">                    &lt;!--表示报表的一个集合，以及产生该集合的配置 --&gt;</span><br><span class="line">                    &lt;reportSet&gt;</span><br><span class="line">                        &lt;!--报表集合的唯一标识符，POM继承时用到 --&gt;</span><br><span class="line">                        &lt;id &#x2F;&gt;</span><br><span class="line">                        &lt;!--产生报表集合时，被使用的报表的配置 --&gt;</span><br><span class="line">                        &lt;configuration &#x2F;&gt;</span><br><span class="line">                        &lt;!--配置是否被继承到子POMs --&gt;</span><br><span class="line">                        &lt;inherited &#x2F;&gt;</span><br><span class="line">                        &lt;!--这个集合里使用到哪些报表 --&gt;</span><br><span class="line">                        &lt;reports &#x2F;&gt;</span><br><span class="line">                    &lt;&#x2F;reportSet&gt;</span><br><span class="line">                &lt;&#x2F;reportSets&gt;</span><br><span class="line">            &lt;&#x2F;plugin&gt;</span><br><span class="line">        &lt;&#x2F;plugins&gt;</span><br><span class="line">    &lt;&#x2F;reporting&gt;</span><br><span class="line">    &lt;!-- 继承自该项目的所有子项目的默认依赖信息。这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact </span><br><span class="line">        ID信息），如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息。 --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;!--参见dependencies&#x2F;dependency元素 --&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                ......</span><br><span class="line">            &lt;&#x2F;dependency&gt;</span><br><span class="line">        &lt;&#x2F;dependencies&gt;</span><br><span class="line">    &lt;&#x2F;dependencyManagement&gt;</span><br><span class="line">    &lt;!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 --&gt;</span><br><span class="line">    &lt;distributionManagement&gt;</span><br><span class="line">        &lt;!--部署项目产生的构件到远程仓库需要的信息 --&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories&#x2F;repository元素 --&gt;</span><br><span class="line">            &lt;uniqueVersion &#x2F;&gt;</span><br><span class="line">            &lt;id&gt;banseon-maven2&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;banseon maven2&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;file:&#x2F;&#x2F;$&#123;basedir&#125;&#x2F;target&#x2F;deploy&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;layout &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;repository&gt;</span><br><span class="line">        &lt;!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement&#x2F;repository元素 --&gt;</span><br><span class="line">        &lt;snapshotRepository&gt;</span><br><span class="line">            &lt;uniqueVersion &#x2F;&gt;</span><br><span class="line">            &lt;id&gt;banseon-maven2&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;name&gt;Banseon-maven2 Snapshot Repository&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;url&gt;scp:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon:&#x2F;usr&#x2F;local&#x2F;maven-snapshot&lt;&#x2F;url&gt;</span><br><span class="line">            &lt;layout &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;snapshotRepository&gt;</span><br><span class="line">        &lt;!--部署项目的网站需要的信息 --&gt;</span><br><span class="line">        &lt;site&gt;</span><br><span class="line">            &lt;!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 --&gt;</span><br><span class="line">            &lt;id&gt;banseon-site&lt;&#x2F;id&gt;</span><br><span class="line">            &lt;!--部署位置的名称 --&gt;</span><br><span class="line">            &lt;name&gt;business api website&lt;&#x2F;name&gt;</span><br><span class="line">            &lt;!--部署位置的URL，按protocol:&#x2F;&#x2F;hostname&#x2F;path形式 --&gt;</span><br><span class="line">            &lt;url&gt;</span><br><span class="line">                scp:&#x2F;&#x2F;svn.baidu.com&#x2F;banseon:&#x2F;var&#x2F;www&#x2F;localhost&#x2F;banseon-web</span><br><span class="line">            &lt;&#x2F;url&gt;</span><br><span class="line">        &lt;&#x2F;site&gt;</span><br><span class="line">        &lt;!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 --&gt;</span><br><span class="line">        &lt;downloadUrl &#x2F;&gt;</span><br><span class="line">        &lt;!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 --&gt;</span><br><span class="line">        &lt;relocation&gt;</span><br><span class="line">            &lt;!--构件新的group ID --&gt;</span><br><span class="line">            &lt;groupId &#x2F;&gt;</span><br><span class="line">            &lt;!--构件新的artifact ID --&gt;</span><br><span class="line">            &lt;artifactId &#x2F;&gt;</span><br><span class="line">            &lt;!--构件新的版本号 --&gt;</span><br><span class="line">            &lt;version &#x2F;&gt;</span><br><span class="line">            &lt;!--显示给用户的，关于移动的额外信息，例如原因。 --&gt;</span><br><span class="line">            &lt;message &#x2F;&gt;</span><br><span class="line">        &lt;&#x2F;relocation&gt;</span><br><span class="line">        &lt;!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 </span><br><span class="line">            Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 --&gt;</span><br><span class="line">        &lt;status &#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;distributionManagement&gt;</span><br><span class="line">    &lt;!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是&lt;name&gt;value&lt;&#x2F;name&gt;。 --&gt;</span><br><span class="line">    &lt;properties &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;project&gt;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows错误代码大全</title>
      <link href="/2022/03/20/windows%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/"/>
      <url>/2022/03/20/windows%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<p>文章字数：14675,阅读全文大约需要58分钟<br>0000 操作已成功完成。<br>0001 错误的函数。<br>0002 系统找不到指定的文件。<br>0003 系统找不到指定的路径。<br>0004 系统无法打开文件。<br>0005 拒绝访问。<br>0006 句柄无效。<br>0007 存储区控制块已损坏。<br>0008 可用的存储区不足，无法执行该命令。<br>0009 存储区控制块地址无效。<br>0010 环境错误。</p><p>0011 试图使用不正确的格式加载程序。<br>0012 访问代码无效。<br>0013 数据无效。<br>0014 可用的存储区不足，无法完成该操作。<br>0015 系统找不到指定的驱动器。<br>0016 无法删除该目录。<br>0017 系统无法将文件移到其他磁盘驱动器上。<br>0018 没有其他文件。<br>0019 媒体写保护。<br>0020 系统找不到指定的设备。</p><p>0021 设备尚未准备好。<br>0022 设备无法识别该命令。<br>0023 数据错误（循环冗余检查）。<br>0024 程序发出命令，但是该命令的长度错误。<br>0025 驱动器在磁盘上无法定位指定的区域或磁道。<br>0026 无法访问指定的磁盘或软盘。<br>0027 驱动器找不到所请求的扇区。<br>0028 打印机缺纸。<br>0029 系统无法写入指定的设备。<br>0030 系统无法读取指定的设备。</p><p>0031 与系统连接的设备不能正常运转。<br>0032 其他进程正使用该文件，因此现在无法访问。<br>0033 另一进程已锁定该文件的某一部分，因此现在无法访问。<br>0034 驱动器中的软盘不正确。请将 %2 （卷标序列号: %3）插入驱动器 %1。<br>0036 打开共享的文件太多。<br>0038 已到达文件结尾。<br>0039 磁盘已满。<br>0050 不支持此网络请求。</p><p>0051 远程计算机无法使用。<br>0052 网络中存在重名。<br>0053 找不到网络路径。<br>0054 网络正忙。<br>0055 指定的网络资源或设备已不可用。<br>0056 已经达到网络命令的极限。<br>0057 网络适配器出现错误。<br>0058 指定的服务器无法执行所请求的操作。<br>0059 网络出现意外错误。<br>0060 远程适配器不兼容。</p><p>0061 打印机队列已满。<br>0062 服务器上没有存储等待打印的文件的空间。<br>0063 已经删除等候打印的文件。<br>0064 指定的网络名无法使用。<br>0065 拒绝访问网络。<br>0066 网络资源类型错误。<br>0067 找不到网络名。<br>0068 已超过本地计算机网络适配器卡的名称极限。<br>0069 已超过网络 BIOS 会话的极限。<br>0070 远程服务器已经暂停或者正在启动过程中。</p><p>0071 由于该计算机的连接数目已达到上限，此时无法再连接到该远程计算机。<br>0072 指定的打印机或磁盘设备已经暂停。<br>0080 该文件存在。<br>0082 无法创建该目录或文件。<br>0083 INT 24 失败。<br>0084 处理该请求的存储区不可用。<br>0085 正在使用该本地设备名。<br>0086 指定的网络密码不正确。<br>0087 参数错误。<br>0088 网络出现写入错误。<br>0089 此时系统无法启动其他进程。<br>0100 无法创建其他系统标志。</p><p>0101 属于其他进程的专用标志。<br>0102 标志已经设置，无法关闭。<br>0103 无法再次设置该标志。<br>0104 中断时无法请求专用标志。<br>0105 此标志先前的所有权已终止。<br>0106 请将软盘插入驱动器 %1。<br>0107 后续软盘尚未插入，程序停止。<br>0108 磁盘正在使用或已由其他进程锁定。<br>0109 管道已经结束。<br>0110 系统无法打开指定的设备或文件。</p><p>0111 文件名太长。<br>0112 磁盘空间不足。<br>0113 没有其他可用的内部文件标识符。<br>0114 目标内部文件标识符不正确。<br>0117 该应用程序所运行的 IOCTL 调用不正确。<br>0118 校验写入的开关参数值不正确。<br>0119 系统不支持所请求的命令。<br>0120 该系统上不支持此功能。</p><p>0121 标记已超时。<br>0123 文件名、目录名或卷标语法错误。<br>0124 系统调用层不正确。<br>0125 磁盘没有卷标。<br>0126 找不到指定的模块。<br>0127 找不到指定的过程。<br>0128 没有要等候的子进程。<br>0129 模式下运行。<br>0130 试图使用操作(而非原始磁盘I/O)的已打开磁盘分区的文件句柄。</p><p>0131 试图将文件指针移至文件开头之前。<br>0132 无法在指定的设备或文件中设置文件指针。<br>0133 对于包含已连接驱动器的驱动器，不能使用 JOIN 或 SUBST 命令。<br>0134 试图在已经连接的驱动器上使用 JOIN 或 SUBST 命令。<br>0135 试图在已经替换的驱动器上使用 JOIN 或 SUBST 命令。<br>0136 系统试图删除尚未连接的驱动器的 JOIN。<br>0137 系统试图删除尚未替换的驱动器的替换项。<br>0138 系统试图将驱动器连接到已连接的驱动器下的目录。<br>0139 系统试图将驱动器替换成已替换的驱动器下的目录。<br>0140 系统试图将驱动器连接到已替换的驱动器的一个目录中。</p><p>0141 系统试图将驱动器替换成到已连接的驱动器下的目录。<br>0142 此时系统无法运行 JOIN 或 SUBST。<br>0143 系统无法将驱动器连接到或替换成同一驱动器下的目录。<br>0144 此目录不是该根目录的子目录。<br>0145 该目录未清空。<br>0146 指定的路径已经在替换中使用。<br>0147 资源不足，无法执行该命令。<br>0148 此时无法使用指定的路径。<br>0149 试图连接或替换某个驱动器目录，该驱动器上的某个目录是上一次替换的目标目录。<br>0150 CONFIG.SYS 文件未指定系统跟踪信息，或禁止跟踪。</p><p>0151 DosMuxSemWait 的指定信号事件的数目不正确。<br>0152 DosMuxSemWait 没有运行；已经设置太多的标志。<br>0153 DosMuxSemWait 列表不正确。<br>0154 输入的卷标超过目标文件系统的标号字符长度极限。<br>0155 无法创建其他线程。<br>0156 接收进程拒绝该信号。<br>0157 已经放弃该区域，因此无法锁定。<br>0158 该区域已经解除锁定。<br>0159 线程标识符的地址错误。<br>0160 传到 DosExecPgm 的参数字符串错误。</p><p>0161 指定的路径无效。<br>0162 信号已挂起。<br>0164 系统无法创建其他线程。<br>0167 无法锁定文件的范围。<br>0170 所要求的资源正在使用中。<br>0173 锁定请求对于提供的取消区域不重要。<br>0174 文件系统不支持到锁定类型的自动更改。<br>0180 系统检测到错误的区域号码。</p><p>0182 操作系统无法运行 %1。<br>0183 不能创建已经存在的文件。<br>0186 传送的标志不正确。<br>0187 找不到指定的系统信号名称。<br>0188 操作系统无法运行 %1。<br>0189 操作系统无法运行 %1。<br>0190 操作系统无法运行 %1。</p><p>0191 无法在 Win32 模式下运行 %1。<br>0192 操作系统无法运行 %1。<br>0193 %1 不是有效的 Win32 应用程序。<br>0194 操作系统无法运行 %1。<br>0195 操作系统无法运行 %1。<br>0196 操作系统无法运行此应用程序。<br>0197 当前无法配置操作系统运行此应用程序。<br>0198 操作系统无法运行 %1。<br>0199 操作系统无法运行此应用程序。<br>0200 代码段应小于 64K。</p><p>0201 操作系统无法运行 %1。<br>0202 操作系统无法运行 %1。<br>0203 系统找不到输入的环境选项。<br>0205 在命令子树中的进程没有信号句柄。<br>0206 文件名或扩展名太长。<br>0207 环 2 堆栈正在使用中。<br>0208 输入的全局文件名字符 * 或 ? 不正确，或指定的全局文件名字符太多。<br>0209 所发送的信号不正确。<br>0210 无法设置信号处理程序。</p><p>0212 区域已锁定，无法重新分配。<br>0214 附加到此程序或动态链接模块的动态链接模块太多。<br>0215 无法嵌套调用 LoadModule。<br>0216 图像文件 %1 有效，但不适用于本机类型。<br>0230 管道状态无效。<br>0231 所有的管道实例都处于忙状态。<br>0232 管道正在关闭。<br>0233 在管道的另一端没有进程。<br>0234 有更多可用的数据。<br>0240 已取消会话。</p><p>0254 指定的扩展属性名无效。<br>0255 扩展属性不一致。<br>0258 等待操作过时。<br>0259 没有其他可用数据。<br>0266 无法使用复制功能。<br>0267 目录名无效。<br>0275 扩展属性不匹配缓冲区。<br>0276 所装载的文件系统上的扩展属性文件已被损坏。<br>0277 扩展属性表格文件已满。<br>0278 指定的扩展属性句柄无效。</p><p>0282 安装的文件系统不支持扩展属性。<br>0288 试图释放不属于调用者的多路同步信号。<br>0298 信号投递的次数太多。<br>0299 仅完成部分 ReadProcessMemory 或 WriteProcessMemory 请求。<br>0300 操作锁定请求被拒绝。<br>0301 系统接收了一个无效的操作锁定确认。<br>0317 在 %2 的消息文件中，系统无法找到消息号为 0x%1 的消息文本。<br>0487 试图访问无效地址。<br>0534 运算结果超过 32 位。<br>0535 该管道的另一方有一进程。<br>0536 等候进程打开管道的另一端。</p><p>0994 拒绝对扩展属性的访问。<br>0995 由于线程退出或应用程序的要求，I/O 操作异常终止。<br>0996 重叠的 I/O 事件不处于已标记状态。<br>0997 正在处理重叠的 I/O 操作。<br>0998 对内存位置的无效访问。<br>0999 执行页内操作出错。</p><p>1001 递归太深；堆栈溢出。<br>1002 窗口无法用来发送消息。<br>1003 无法完成此项功能。<br>1004 标志无效。<br>1005 卷不包含已识别的文件系统。请确认所有需要的文件系统驱动程序都已经加载，而且卷没有任何损坏。<br>1006 某文件的卷已在外部改变，因而打开的文件不再有效。<br>1007 要求的操作无法以全屏幕模式执行。<br>1008 试图引用并不存在的符号。<br>1009 配置注册表数据库已损坏。<br>1010 配置注册表主键无效。</p><p>1011 无法打开配置注册表主键。<br>1012 无法读取配置注册表主键。<br>1013 无法写入配置注册表主键。<br>1014 必须使用日志文件或其他副本来恢复注册表数据库中的某个文件。恢复成功。<br>1015 注册表已损坏。可能是一个包含注册表数据文件的结构已损坏，也可能内存中该文件的系统映像已损坏，或者因为备份副本（或日志）不存在（或损坏）导致无法恢复该文件。<br>1016 由注册表引起的 I/O 操作发生了不可恢复的错误。注册表将不能读取、写出或刷新包含注册表系统映像的其中一个文件。<br>1017 系统试图将文件加载或还原到注册表中，但是，指定的文件不是注册表文件格式。<br>1018 试图在注册表键（已经标记为删除）中完成的操作非法。<br>1019 系统无法在注册表日志文件中分配所需的空间。<br>1020 无法在已经有子键或键值的注册表项中创建符号链接。<br>1021 在易失的父键下不能创建固定的子键。<br>1022 通知的更改请求已经完成，并且返回信息还没有被送到调用者的缓冲区中。调用者需要列举所有文件以找到改动的内容。</p><p>1051 已将停止控制发送给与其他运行服务相关的服务。<br>1052 所要求的控制对此服务无效。<br>1053 服务没有及时地响应启动或控制请求。<br>1054 无法为该服务创建线程。<br>1055 服务数据库已锁定。<br>1056 该服务的实例已在运行。<br>1057 帐户名无效或者不存在，或者指定帐户名的密码无效。<br>1058 服务无法启动，可能因为被禁用，也可能因为没有关联的可用设备。<br>1059 已经指定了循环服务的从属关系。<br>1060 指定的服务不是所安装的服务。</p><p>1061 该服务此时无法接收控制消息。<br>1062 服务尚未启动。<br>1063 服务进程无法连接到服务控制程序。<br>1064 处理控制请求时，服务出现意外情况。<br>1065 指定的数据库不存在。<br>1066 服务返回服务特定的错误码。<br>1067 进程意外地终止。<br>1068 无法启动从属服务或组。<br>1069 由于登录失败，没有启动服务。<br>1070 启动后，服务保持在启动挂起状态。</p><p>1071 指定的服务数据库锁定无效。<br>1072 指定的服务已经标记为删除。<br>1073 指定的服务已经存在。<br>1074 系统当前正以上一次运行成功的配置运行。<br>1075 从属服务不存在，或已经标记为删除。<br>1076 已接受使用当前引导作为最后的有效控制设置。<br>1077 自从上一次启动以后，没有再次启动过该服务。<br>1078 该名称已经用作服务名或服务显示名。<br>1079 此服务的帐户不同于运行于同一进程上的其它服务的帐户。<br>1080 只能为 Win32 服务设置失败操作，不能为驱动程序设置。<br>1081 这个服务所运行的进程和服务控制管理器相同。所以，如果服务进程意外中止的话，服务控制管理器无法进行任何操作。<br>1082 这个服务没有设置恢复程序。<br>1083 配置成在该可执行程序中运行的这个服务不能执行该服务。<br>1100 已经到达磁带的物理尽头。</p><p>1101 磁带访问到文件标记。<br>1102 到达磁带或分区首部。<br>1103 磁带访问到文件组的末尾。<br>1104 磁带上没有其他数据。<br>1105 磁带无法分区。<br>1106 访问多重卷分区的新磁带时，当前的区块大小不正确。<br>1107 加载磁带时，找不到磁带分区信息。<br>1108 无法锁定媒体退出功能。<br>1109 无法卸载媒体。<br>1110 驱动器中的媒体已经更改。</p><p>1111 已经复位 I/O 总线。<br>1112 驱动器中没有媒体。<br>1113 在目标多字节代码页中不存在对单码字符的映射。<br>1114 动态链接库 (DLL) 初始化例程失败。<br>1115 正在关闭系统。<br>1116 无法终止系统关机，因为没有进行中的关机操作。<br>1117 由于 I/O 设备出现错误，无法运行该请求。<br>1118 串行设备初始化失败。将卸载串行驱动程序。<br>1119 无法打开正与其他设备共享中断请求 (IRQ) 的设备。至少有一个使用该 IRQ 的设备已经打开。<br>1120 由于再次写入串行口，串行 I/O 操作已结束。（IOCTL_SERIAL_XOFF_COUNTER 为零。）</p><p>1121 由于超时，串行 I/O 操作已结束。 (IOCTL_SERIAL_XOFF_COUNTER 未达到零。)<br>1122 在软盘上找不到标识符地址标记。<br>1123 软盘扇区标识符字段与软盘控制器磁道地址不匹配。<br>1124 软盘控制器报告软盘驱动程序不能识别的错误。<br>1125 软盘控制器返回的结果和注册的不一致。<br>1126 访问硬盘时，再校准操作失败，再试一次后也无法操作。<br>1127 访问硬盘时，磁盘操作失败，再试一次后仍没有作用。<br>1128 访问硬盘时，需要重启动磁盘控制器，但仍未成功。<br>1129 磁带已卷到尽头。<br>1130 可用的服务器存储区不足，无法执行该命令。</p><p>1131 检测到潜在的死锁情况。<br>1132 指定的基址或文件偏移量没有正确对齐。<br>1140 试图更改系统电源状态的操作被另一应用程序或驱动程序禁止。<br>1141 系统 BIOS 无法更改系统电源状态。<br>1142 试图在一文件上创建超过系统允许数额的链接。<br>1150 指定的程序需要新的 Windows 版本。</p><p>1151 指定的程序不是 Windows 或 MS-DOS 程序。<br>1152 无法启动指定程序的多个实例。<br>1153 指定的程序是为 Windows 的早期版本编写的。<br>1154 运行此应用程序所需的某个库文件已损。<br>1155 没有应用程序与该操作中所指定的文件关联。<br>1156 将命令发送到应用程序时出现错误。<br>1157 找不到运行此应用程序所需的某个库文件。<br>1158 当前进程已使用了 Window 管理器对象的系统允许的所有句柄。<br>1159 消息只能与同步操作一起使用。<br>1160 指出的源元素没有媒体。</p><p>1161 指出的目标元素已包含媒体。<br>1162 指出的元素不存在。<br>1163 指出的元素是未显示的存储资源的一部分。<br>1164 指出的设备需要重新初始化，因为硬件有错误。<br>1165 设备显示在尝试进一步操作之前需要清除。<br>1166 设备显示它的门仍是打开状态。<br>1167 设备没有连接。<br>1168 找不到元素。<br>1169 索引中没有同指定项相匹配的项。<br>1170 在对象上不存在指定的属性集。</p><p>1171 传递到 GetMouseMovePoints 的点不在缓冲区中。<br>1172 跟踪(工作站)服务没运行。<br>1173 找不到卷 ID。<br>1175 无法删除要被替换的文件。<br>1176 无法将替换文件移到要被替换的文件。要被替换的文件保持原来的名称。<br>1177 无法将替换文件移到要被替换的文件。要被替换的文件已被重新命名为备份名称。<br>1178 卷更改记录被删除。<br>1179 卷更改记录服务不处于活动中。<br>1180 找到一份文件，但是可能不是正确的文件。<br>1181 日志项已从日志中删除。<br>1200 指定的设备名无效。</p><p>1201 设备当前虽然未连接，但它是记忆连接。<br>1202 试图记起已经记住的设备。<br>1203 网络供应商不接受给定的网络路径。<br>1204 指定的网络供应商名无效。<br>1205 无法打开网络连接配置文件。<br>1206 网络连接配置文件已损坏。<br>1207 无法列举非包容类。<br>1208 出现扩展错误。<br>1209 指定组名的格式无效。<br>1210 指定计算机名的格式无效。</p><p>1211 指定事件名的格式无效。<br>1212 指定域名的格式无效。<br>1213 指定服务名的格式无效。<br>1214 指定网络名的格式无效。<br>1215 指定共享名的格式无效。<br>1216 指定密码的格式无效。<br>1217 指定的邮件名无效。<br>1218 指定邮件目的地的格式无效。<br>1219 所提供的凭据与现有凭据设置冲突。<br>1220 试图与网络服务器建立会话，但目前与该服务器建立的会话太多。</p><p>1221 网络上的其他计算机已经使用该工作组或域名。<br>1222 网络不存在或者没有启动。<br>1223 用户已经取消该操作。<br>1224 所要求的操作无法在已经打开用户映射区域的文件中运行。<br>1225 远程系统拒绝网络连接。<br>1226 已经关闭网络连接。<br>1227 网络传输的终点已经有一个地址与其关联。<br>1228 网络终点尚未与地址关联。<br>1229 试图在不存在的网络连接中操作。<br>1230 试图在活动的网络连接上进行无效操作。</p><p>1231 不能访问网络位置。有关网络疑难解答的信息，请参阅 Windows 帮助。<br>1232 不能访问网络位置。有关网络疑难解答的信息，请参阅 Windows 帮助。<br>1233 不能访问网络位置。有关网络疑难解答的信息，请参阅 Windows 帮助。<br>1234 远程系统的目标网络端点没有运行任何服务。<br>1235 该请求已经终止。<br>1236 本地系统已经终止网络连接。<br>1237 无法完成操作。请再试一次。<br>1238 无法创建到该服务器的连接，因为已经到达了该帐户同时连接的最大数目。<br>1239 试图在该帐户未授权的时间内登录。<br>1240 尚未授权此帐户从该站登录网络。</p><p>1241 网络地址无法用于要求的操作。<br>1242 服务已经注册。<br>1243 指定的服务不存在。<br>1244 由于尚未验证用户身份，无法执行要求的操作。<br>1245 由于用户尚未登录网络，无法运行要求的操作。指定的服务不存在。<br>1246 继续工作。<br>1247 完成初始化操作后，试图再次运行初始化操作。<br>1248 没有其他本地设备。<br>1249 指定的站点不存在。<br>1250 具有指定名称的域控制器已经存在。</p><p>1251 只有连接到服务器上时，才支持该操作。<br>1252 即使没有改动，组策略框架也应该调用扩展。<br>1253 指定的用户没有一个有效的配置文件。<br>1254 Microsoft Small Business Server 不支持此操作。<br>1300 不是对所有的调用方分配引用特权。</p><p>1301 帐户名与安全标识符之间的映射未完成。<br>1302 没有为该帐户明确地设置系统配额限制。<br>1303 没有可用的密钥。返回已知的密钥。<br>1304 密码太复杂，无法转换成 LAN Manager 密码。返回的 LAN Manager 密码是空字符串。<br>1305 修订级别未知。<br>1306 表示两个修订级别不兼容。<br>1307 无法将此安全标识符指定为该对象的拥有者。<br>1308 无法将此安全标识符指定为主要的对象组。<br>1309 当前并未模拟客户的线程试图操作模拟令牌。<br>1310 不可以禁用该组。</p><p>1311 目前没有可用的登录服务器处理登录请求。<br>1312 指定的登录会话不存在。该会话可能已终止。<br>1313 指定的权限不存在。<br>1314 客户不保留请求的权限。<br>1315 提供的名称不是正确的帐户名称格式。<br>1316 指定的用户已经存在。<br>1317 指定的用户不存在。<br>1318 指定的组已经存在。<br>1319 指定的组不存在。<br>1320 或者指定的用户帐户已经是某个特定组的成员，或者也可能指定的组非空而不能被删除。</p><p>1321 指定的用户帐户不是所指定组帐户的成员。<br>1322 上次保留的管理帐户无法关闭或删除。<br>1323 无法更新密码。所输入的密码不正确。<br>1324 无法更新密码。所提供的新密码包含不可用于密码的值。<br>1325 无法更新密码。为新密码提供的值不符合字符域的长度、复杂性或历史要求。<br>1326 登录失败: 用户名未知或密码错误。<br>1327 登录失败: 用户帐户限制。<br>1328 登录失败: 违反帐户登录时间限制。<br>1329 登录失败: 禁止用户登录到该计算机上。<br>1330 登录失败: 指定的帐户密码已过期。</p><p>1331 登录失败: 当前禁用帐户。<br>1332 未完成帐户名与安全性标识符之间的映射。<br>1333 一次请求的本地用户标识符(LUID)太多。<br>1334 没有其他可用的本地用户标识符(LUID)。<br>1335 对这个特定使用来说，安全标识符的子部分是无效的。<br>1336 访问控制清单(ACL)结构无效。<br>1337 安全标识符结构无效。<br>1338 安全描述符结构无效。<br>1340 无法创建继承的访问控制列表(ACL)或访问控制项目(ACE)。</p><p>1341 当前已禁用服务器。<br>1342 当前已启用服务器。<br>1343 所提供的值是无效的标识符授权值。<br>1344 没有更多的内存用于更新安全信息。<br>1345 指定的属性无效，或指定的属性与整个组的属性不兼容。<br>1346 或者没有提供所申请的模仿级别，或者提供的模仿级别无效。<br>1347 无法打开匿名级安全性符号。<br>1348 所请求的验证信息类别无效。<br>1349 该类符号不能以所尝试的方式使用。<br>1350 无法在没有相关安全性的对象上运行安全操作。</p><p>1351 未能从域控制器读取配置信息，或者是因为机器不可使用，或者是访问被拒绝。<br>1352 安全帐户管理程序(SAM)或本地安全颁发机构(LSA)服务器状态不正确，所以无法运行安全操作。<br>1353 域处于执行安全操作的错误状态。<br>1354 该操作只能在域的主域控制器中执行。<br>1355 指定的域不存在或联系不上。<br>1356 指定的域已经存在。<br>1357 试图超过每个服务器域数目的极限。<br>1358 由于严重的媒体错误或磁盘的数据结构损坏，无法完成所请求的操作。<br>1359 发生内部错误。<br>1360 通用的访问类型包含在访问掩码中，该掩码已经映射为非通用类型。</p><p>1361 安全性描述符的格式错误（绝对或自相关）。<br>1362 请求的操作只准登录进程使用。该调用过程并未被记录为登录进程。<br>1363 无法用已经使用的标识符来启动新的登录会话。<br>1364 指定的确认数据包未知。<br>1365 登录会话的状态与请求的操作不一致。<br>1366 登录会话标识符正在使用中。<br>1367 登录请求包含无效的登录类型值。<br>1368 在使用命名管道读取数据之前，无法经由该管道模拟。<br>1369 注册表子树的事务状态与所请求的操作不兼容。<br>1370 突发的内部安全性数据库故障。</p><p>1371 无法在内部帐户下运行该操作。<br>1372 无法在该内部特定组中运行该操作。<br>1373 无法在该内部特定用户中运行该操作。<br>1374 因为该组当前是用户的主要组，所以不能从此组中删除用户。<br>1375 该符号已作为主要符号使用。<br>1376 指定的本地组不存在。<br>1377 指定的帐户名不是本地组的成员。<br>1378 指定的帐户名已经是本地组的成员。<br>1379 指定的本地组已经存在。<br>1380 登录失败: 用户在本计算机上没有被授与所需注册类型。</p><p>1381 超过了可以存储在单个系统中的最大机密限制。<br>1382 机密的长度超过了最大允许值。<br>1383 本地安全授权数据库包含内部不一致的错误。<br>1384 登录时，用户的安全性上下文累积太多的安全标识符。<br>1385 登录失败: 用户在本计算机上没有被授与所需注册类型。<br>1386 经交叉加密的密码必须更改用户密码。<br>1387 成员不存在，因此无法将其添加到本地组或从中删除。<br>1388 新成员的帐户类型有误，因此无法将其添加到本地组。<br>1389 指定的安全标识符太多。<br>1390 经交叉加密的密码必须更改该用户密码。</p><p>1391 表示 ACL 没有可继承的组件。<br>1392 文件或目录已损坏，无法读取数据。<br>1393 磁盘结构已损坏，无法读取数据。<br>1394 指定的登录会话没有用户会话密钥。<br>1395 正在访问的服务允许特定数目的连接。因为连接的数目已达到服务可接受的数目，所以此时无法创建新的服务连接。<br>1396 登录失败: 该目标帐户名称不正确。<br>1397 相互身份验证失败。该服务器在域控制器的密码过期。<br>1398 在客户机和服务器之间有一个时间差。<br>1400 窗口句柄无效。</p><p>1401 菜单句柄无效。<br>1402 光标句柄无效。<br>1403 加速键表的句柄无效。<br>1404 挂接句柄无效。<br>1405 多重窗口位置结构句柄无效。<br>1406 无法创建最上层的子窗口。<br>1407 找不到窗口类。<br>1408 窗口无效；属于其他线程。<br>1409 已经注册热键。<br>1410 类已经存在。</p><p>1411 类不存在。<br>1412 类窗口仍打开着。<br>1413 索引无效。<br>1414 图标句柄无效。<br>1415 使用私人对话框窗口字。<br>1416 找不到列表框标识符。<br>1417 找不到任何通配符。<br>1418 线程没有打开剪贴板。<br>1419 尚未注册热键。<br>1420 该窗口不是有效的对话框窗口。</p><p>1421 找不到控制标识符。<br>1422 由于没有编辑控制，因此该组合框的消息无效。<br>1423 窗口不是组合框。<br>1424 高度必须小于 256。<br>1425 设备上下文(DC)句柄无效。<br>1426 挂接过程类型无效。<br>1427 挂接过程无效。<br>1428 不能在无模块句柄的情况下设置非本地的挂接。<br>1429 只能全局设置该挂接过程。<br>1430 已安装日记挂接过程。</p><p>1431 未安装挂接过程。<br>1432 单选列表框的消息无效。<br>1433 LB_SETCOUNT 发送到活动的列表框。<br>1434 该列表框不支持制表符。<br>1435 无法破坏由其他线程所创建的对象。<br>1436 子窗口不能有菜单。<br>1437 窗口没有系统菜单。<br>1438 消息框样式无效。<br>1439 系统范围内的(SPI_*)的参数无效。<br>1440 屏幕已经锁定。</p><p>1441 多重窗口位置结构中所有窗口句柄必须具有相同的父窗口。<br>1442 窗口不是子窗口。<br>1443 GW_* 命令无效。<br>1444 线程标识符无效。<br>1445 无法处理非多文档接口(MDI)窗口的消息。<br>1446 弹出式菜单已激活。<br>1447 窗口没有滚动条。<br>1448 滚动条范围不能大于 MAXLONG。<br>1449 无法以指定的方式显示或关闭窗口。<br>1450 系统资源不足，无法完成所请求的服务。</p><p>1451 系统资源不足，无法完成所请求的服务。<br>1452 系统资源不足，无法完成所请求的服务。<br>1453 配额不足，无法完成请求的服务。<br>1454 配额不足，无法完成请求的服务。<br>1455 页面交换文件太小，无法完成此项操作。<br>1456 找不到菜单项。<br>1457 键盘布局句柄无效。<br>1458 不允许使用挂钩类型。<br>1459 该操作需要交互式窗口工作站。<br>1460 由于超时时间已过，该操作返回。<br>1461 无效监视器句柄。<br>1500 事件日志文件已损坏。<br>1501 无法打开事件日志文件，因此无法启动事件记录服务。<br>1502 事件日志文件已满。<br>1503 事件日志文件在两次读取操作间已发生变化。<br>1601 无法访问 Windows 安装服务。请与技术支持人员联系，确认 Windows 安装服务是否注册正确。<br>1602 用户取消了安装。<br>1603 安装时发生严重错误。<br>1604 安装已挂起，未完成。<br>1605 这个操作只对当前安装的产品有效。<br>1606 功能 ID 未注册。<br>1607 组件 ID 未注册。<br>1608 未知属性。<br>1609 句柄处于不正确的状态。<br>1610 这个产品的配置数据已损坏。请与技术支持人员联系。</p><p>1611 组件限制语不存在。<br>1612 这个产品的安装来源无法使用。请验证来源是否存在，是否可以访问。<br>1613 Windows 安装服务无法安装这个安装程序包。您必须安装含有 Windows 安装服务新版本的 Windows Service Park。<br>1614 产品已卸载。<br>1615 SQL 查询语法不正确或不被支持。<br>1616 记录字符域不存在。<br>1617 设备已被删除。<br>1618 正在进行另一个安装操作。请在继续这个安装操作之前完成那个操作。<br>1619 未能打开这个安装程序包。请验证程序包是否存在，是否可以访问；或者与应用程序供应商联系，验证这是否是有效的 Windows 安装程序包。<br>1620 未能打开这个安装程序包。请与应用程序供应商联系，验证这是否是有效的 Windows 安装程序包。</p><p>1621 启动 Windows 安装服务用户界面时有错误。请与技术支持人员联系。<br>1622 打开安装日志文件时出错。请验证指定的日志文件位置是否存在，是否可以写入。<br>1623 安装程序包的语言不受系统支持。<br>1624 应用变换时出错。请验证指定的变换路径是否有效。<br>1625 系统策略禁止这个安装。请与系统管理员联系。<br>1626 无法执行函数。<br>1627 执行期间，函数出了问题。<br>1628 指定了无效的或未知的表格。<br>1629 提供的数据类型不对。<br>1630 这个类型的数据不受支持。</p><p>1631 Windows 安装服务未能启动。请与技术支持人员联系。<br>1632 临时文件夹已满或无法使用。请验证临时文件夹是否存在，是否可以写入。<br>1633 这个处理器类型不支持该安装程序包。请与产品供应商联系。<br>1634 组件没有在这台计算机上使用。<br>1635 无法打开修补程序包。请验证修补程序包是否存在，是否可以访问；或者与应用程序供应商联系，验证这是否是有效的 Windows 安装修补程序包。<br>1636 无法打开修补程序包。请与应用程序供应商联系，验证这是否是有效的 Windows 安装修补程序包。<br>1637 Windows 安装服务无法处理这个修补程序包。您必须安装含有 Windows 安装服务新版本的 Windows Service Pack。<br>1638 已安装这个产品的另一个版本。这个版本的安装无法继续。要配置或删除这个产品的现有版本，请用“控制面板”上的“添加/删除程序”。<br>1639 无效的命令行参数。有关详细的命令行帮助，请查阅 Windows 安装服务的 SDK。<br>1640 在终端服务远程会话期间，只有管理员有添加、删除或配置服务器软件的权限。如果您要在服务器上安装或配置软件，请与网络管理员联系。<br>1641 要求的操作已成功结束。要使改动生效，必须重新启动系统。<br>1642 Windows 安装服务无法安装升级修补程序，因为被升级的程序丢失，或者升级修补程序将更新此程序的其他版本。请确认要被升级的程序在您的计算机上且您的升级修补程序是正确的。<br>1700 串绑定无效。</p><p>1701 绑定句柄的类型错误。<br>1702 绑定句柄无效。<br>1703 不支持 RPC 协议顺序。<br>1704 RPC 协议序列无效。<br>1705 字符串的全球唯一标识符(UUID)无效。<br>1706 终点的格式无效。<br>1707 网络地址无效。<br>1708 未找到终点。<br>1709 超时设置值无效。<br>1710 找不到该对象的全球唯一标识符(UUID)。</p><p>1711 该对象的全球唯一标识符(UUID)已经注册。<br>1712 这一类型的全球唯一标识符(UUID)已经注册。<br>1713 RPC 服务器正在监听。<br>1714 尚未注册协议顺序。<br>1715 RPC 服务器不处于监听状态。<br>1716 管理程序的类型未知。<br>1717 接口未知。<br>1718 没有绑定。<br>1719 没有协议序列。<br>1720 无法创建终点。</p><p>1721 资源不足，无法完成该操作。<br>1722 RPC 服务器无法使用。<br>1723 RPC 服务器太忙，无法完成此项操作。<br>1724 网络选项无效。<br>1725 该线程中不存在活动的远程过程调用。<br>1726 远程过程调用失败。<br>1727 远程过程调用失败并且无法执行。<br>1728 远程过程调用(RPC)协议出现错误。<br>1730 RPC 服务器不支持传输语法。</p><p>1732 不支持这种类型的全球唯一标识符。<br>1733 标识无效。<br>1734 数组边界无效。<br>1735 绑定类型中不包含项目名。<br>1736 名称语法无效。<br>1737 不支持这种命名语法。<br>1739 没有可用的网络地址，无法创建全球唯一标识符(UUID)。<br>1740 终结点重复。</p><p>1741 身份验证类型未知。<br>1742 调用次数的上限太小。<br>1743 字符串太长。<br>1744 找不到 RPC 协议序列。<br>1745 过程号超出范围。<br>1746 此次绑定不包含任何身份验证信息。<br>1747 身份验证服务未知。<br>1748 身份验证级别未知。<br>1749 安全描述符无效。<br>1750 身份验证服务未知。</p><p>1751 项目无效。<br>1752 服务器的终结点无法执行此项操作。<br>1753 终点的映射器没有更多的终点可用。<br>1754 没有导出任何接口。<br>1755 项目名不完整。<br>1756 版本选项无效。<br>1757 没有其他成员。<br>1758 可以导出全部内容。<br>1759 未找到接口。<br>1760 项目已经存在。</p><p>1761 项目找不到。<br>1762 名称服务不可用。<br>1763 网络地址集无效。<br>1764 不支持请求的操作。<br>1765 没有可供冒仿的安全性描述符。<br>1766 远程过程调用(RPC)出现内部错误。<br>1767 RPC 服务器企图进行整除零运算。<br>1768 RPC 服务器出现寻址错误。<br>1769 RPC 服务器中的浮点运算造成被零除。<br>1770 RPC 服务器产生了浮点下溢错误。</p><p>1771 RPC 服务器产生了浮点上溢错误。<br>1772 可用于自动句柄绑定的 RPC 服务器列表已经用完。<br>1773 无法打开字符转换表文件。<br>1774 包含字符转换表的文件小于 512 个字节。<br>1775 在远程过程调用中，客户机向主机传送了一个空的描述体句柄。<br>1777 远程过程调用中的描述体句柄发生变化。<br>1778 发送到远程过程调用的绑定句柄不匹配。<br>1779 占位程序无法获得远程过程调用的句柄。<br>1780 将空的参考指针发送给占位程序。</p><p>1781 列举值超出范围。<br>1782 字节数目太小。<br>1783 占位程序接收到错误数据。<br>1784 所提供的用户缓冲区对所申请的操作无效。<br>1785 无法识别磁盘媒体。它可能还未格式化。<br>1786 工作站没有信任密码。<br>1787 服务器上的安全数据库中没有该工作站信任关系的计算机帐户。<br>1788 建立主域和受托域间的信任关系失败。<br>1789 建立工作站和主域间的信任关系失败。<br>1790 网络登录失败。</p><p>1791 该线程执行过程中已经进行了远程过程调用。<br>1792 试图登录网络，但网络登录服务尚未启动。<br>1793 用户帐户已到期。<br>1794 重定向程序正在使用，无法卸载。<br>1795 已经安装所指定的打印机驱动程序。<br>1796 指定的端口未知。<br>1797 打印机驱动程序未知。<br>1798 打印处理程序未知。<br>1799 指定的分隔符文件无效。<br>1800 指定的优先级无效。</p><p>1801 打印机名无效。<br>1802 打印机已经存在。<br>1803 打印机命令无效。<br>1804 指定的数据类型无效。<br>1805 指定的环境无效。<br>1806 没有其他绑定。<br>1807 使用的帐户是跨网络的信任帐户。请使用全局用户帐户或本地用户帐户来访问此服务器。<br>1808 所使用的帐户是计算机帐户。请使用全局用户帐户或本地用户帐户来访问该服务器。<br>1809 使用的帐户是服务器信任帐户。请使用全局用户帐户或本地用户帐户来访问该服务器。<br>1810 指定的域名或安全标识符与域的信任信息不一致。</p><p>1811 服务器正在使用中，无法卸载。<br>1812 指定的映像文件不包含资源部分。<br>1813 在映像文件中找不到指定的资源类型。<br>1814 在映像文件中找不到指定的资源名称。<br>1815 在映像文件中找不到指定的资源语言 ID 。<br>1816 可用的配额不足，无法执行该命令。<br>1817 没有已注册的接口。<br>1818 远程过程调用被取消。<br>1819 绑定句柄不包含所有需要的信息。<br>1820 远程调用过程中发生通讯失败。</p><p>1821 所需的身份验证级别不被支持。<br>1822 主要的名称没有注册。<br>1823 指定的错误不是有效的 Windows RPC 错误代码。<br>1824 已分配仅在本机上有效的 UUID。<br>1825 产生了特定的安全包错误。<br>1826 没有取消线程。<br>1827 在编码/解码处理时的操作无效。<br>1828 序列化软件包的版本不兼容。<br>1829 RPC 占位程序的版本不兼容。<br>1830 RPC 管道对象无效或已损坏。</p><p>1831 试图在 RPC 管道对象上进行无效操作。<br>1832 不被支持的 RPC 管道版本。<br>1898 找不到组成员。<br>1899 无法创建终结点映射数据库条目。<br>1900 对象的全球标识符(UUID)为空。</p><p>1901 指定的时间无效。<br>1902 指定的表单名无效。<br>1903 指定的表单大小无效。<br>1904 指定的打印机句柄正在等候处理<br>1905 指定的打印机已经删除。<br>1906 打印机的状态无效。<br>1907 用户首次登录前，必须先更改其密码。<br>1908 找不到该域的域控制器。<br>1909 引用的帐户目前被锁定，可能无法登录。<br>1910 没有发现指定的此对象导出者。</p><p>1911 没有发现指定的对象。<br>1912 没有发现指定的对象解析器。<br>1913 一些待发数据仍停留在请求缓冲区内。<br>1914 无效的异步远程过程调用句柄。<br>1915 这个操作的异步 RPC 调用句柄不正确。<br>1916 RPC 管道对象已经关闭。<br>1917 RPC 调用在全部的管道都被处理之前完成。<br>1918 没有其他可用的数据来自 RPC 管道。<br>1919 这个机器没有可用的站点名。<br>1920 系统无法访问此文件。</p><p>1921 系统无法解析文件名。<br>1922 项目不是所要的类型。<br>1923 无法将所有对象的 UUID 导出到指定的项。<br>1924 无法将接口导出到指定的项。<br>1925 无法添加指定的配置文件项。<br>1926 无法添加指定的配置文件元素。<br>1927 无法删除指定的配置文件元素。<br>1928 无法添加组元素。<br>1929 无法删除组元素。<br>2000 像素格式无效。</p><p>2001 指定的驱动程序无效。<br>2002 该操作的窗口样式或类属性无效。<br>2003 不支持请求的图元文件操作。<br>2004 不支持肭蟮淖徊僮鳌?nbsp;<br>2005 不支持请求的剪辑操作。<br>2010 指定的颜色管理模块无效。</p><p>2011 指定的颜色文件配置无效。<br>2012 找不到指定的标识。<br>2013 所需的标识不存在。<br>2014 指定的标识已经存在。<br>2015 指定的颜色文件配置与任何设备都不相关。<br>2016 找不到该指定的颜色文件配置。<br>2017 指定的颜色空间无效。<br>2018 图像颜色管理没有启用。<br>2019 在删除该颜色转换时有一个错误。<br>2020 指定的颜色转换无效。</p><p>2021 指定的转换与位图的颜色空间不匹配。<br>2022 指定的命名颜色索引在配置文件中不存在。<br>2108 网络连接已成功，但需要提示用户输入一个不同于原始指定的密码。<br>2202 指定的用户名无效。<br>2250 网络连接不存在。</p><p>2401 在这个网络连接上已存在打开的文件或未处理的请求。<br>2402 活动的连接仍然存在。<br>2404 设备正由活动进程使用，无法断开连接。</p><p>3000 指定的打印监视程序未知。<br>3001 指定的打印机驱动程序正在使用中。<br>3002 找不到假脱机文件。<br>3003 没有发出 StartDocPrinter 调用。<br>3004 尚未发出 AddJob 调用。<br>3005 指定的打印处理程序已经安装。<br>3006 指定的打印监视程序已经安装。<br>3007 该指定的打印监视器不具备所要求的功能。<br>3008 指定的打印机监视器正在使用中。<br>3009 当打印机有作业排成队列时此操作请求是不允许的。<br>3010 请求的操作成功。只有重新启动系统，更改才会生效。</p><p>3011 请求的操作成功。只有重新启动服务，更改才会生效。<br>3012 找不到打印机。<br>4000 WINS 在处理命令时遇到执行错误。<br>4001 无法删除本地的 WINS。<br>4002 从文件引入失败。<br>4003 备份失败。以前执行过完整的备份吗?<br>4004 备份失败。请检查备份数据库的目标目录。<br>4005 名称在 WINS 数据库中不存在。<br>4006 不允许进行未配置部分的复制。<br>4100 DHCP 客户获得一个在网上已被使用的 IP 地址。直到 DHCP 客户可以获得新的地址前，本地接口将被禁用。<br>4200 WMI 数据提供程序不能识别传来的 GUID 是否有效。</p><p>4201 WMI 数据提供程序无法识别传来的实例名是否有效。<br>4202 WMI 数据提供程序无法识别传来的数据项目标识符是否有效。<br>4203 无法完成 WMI 请求，请重试一次。<br>4204 找不到 WMI 数据提供程序。<br>4205 WMI 数据提供程序引用到一个未注册的实例组。<br>4206 WMI 数据块或事件通知已启用。<br>4207 WMI 数据块不再可用。<br>4208 WMI 数据服务无法使用。<br>4209 WMI 数据提供程序无法完成请求。<br>4210 WMI MOF 信息无效。</p><p>4211 WMI 注册信息无效。<br>4212 WMI 数据块或事件通知已禁用。<br>4213 WMI 数据项目或数据块为只读。<br>4214 WMI 数据项目或数据块不能更改。<br>6118 该工作组的服务器列表当前不可用。<br>6200 要正常运行，任务计划程序服务的配置必须在系统帐户中运行。单独的任务可以被配置成在其他帐户中运行。</p><p>7001 指定的会话名无效。<br>7002 指定的协议驱动程序无效。<br>7003 在系统路径上找不到指定的协议驱动程序。<br>7004 在系统路径上找不到指定的终端连接驱动程序。<br>7005 不能为这个会话创建一个事件日志的注册键。<br>7006 同名的一个服务已经在系统中存在。<br>7007 在会话上一个关闭操作挂起。<br>7008 没有可用的输出缓冲器。<br>7009 找不到 MODEM.INF 文件。<br>7010 在 MODEM.INF 中没有找到调制解调器名称。</p><p>7011 调制解调器没有接受发送给它的指令。验证配置的调制解调器与连接的调制解调器是否匹配。<br>7012 调制解调器没有响应发送给它的指令。验证该调制解调器是否接线正确并且打开了电源开关。<br>7013 由于断开连接，载波检测失败或载波停止。<br>7014 在要求的时间内没有发现拨号音。确定电话线连接正确并可使用。<br>7015 在远程站点回叫时检测到了占线信号。<br>7016 在回叫时远程站点上检测到了声音。<br>7017 传输驱动程序错误</p><p>7022 找不到指定的会话。<br>7023 指定的会话名称已处于使用中。<br>7024 由于终端连接目前正在忙于处理一个连接、断开连接、复位或删除操作，无法完成该请求的操作。<br>7025 试图连接到其视频模式不受当前客户支持的会话。<br>7035 应用程序尝试启动 DOS 图形模式。不支持 DOS 图形模式。<br>7037 您的交互式登录权限已被禁用。请与您的管理员联系。<br>7038 该请求的操作只能在系统控制台上执行。这通常是一个驱动程序或系统 DLL 要求直接控制台访问的结果。<br>7040 客户未能对服务器连接消息作出响应。</p><p>7041 不支持断开控制台会话。<br>7042 不支持重新将一个断开的会话连接到控制台。<br>7044 远程控制另一个会话的请求被拒绝。<br>7045 拒绝请求的会话访问。<br>7049 指定的终端连接驱动程序无效。<br>7050 不能远程控制请求的会话。这也许是由于该会话被中断或目前没有一个用户登录。另外，您不能从该系统控制台远程控制一个会话或远程控制系统控制台。并且，您不能远程控制您自己的当前会话。</p><p>7051 该请求的会话没有配置成允许远程控制。<br>7052 连接到这个终端服务器的申请被拒绝。终端服务器客户许可证目前正在被另一个用户使用。请与系统管理员联系，获取一份新的终端服务器客户，其许可证号码必须是有效的、唯一的。<br>7053 连接到这个终端服务器的申请被拒绝。还没有为这份终端服务器客户输入您的终端服务器客户许可证号码。请与系统管理员联系，为该终端服务器客户输入一个有效的、唯一的许可证号码。<br>7054 系统已达到其授权的登录限制。请以后再试一次。<br>7055 您正在使用的客户没有使用该系统的授权。您的登录请求被拒绝。<br>7056 系统许可证已过期。您的登录请求被拒绝。</p><hr>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
